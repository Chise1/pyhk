/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BYTE swig_types[0]
#define SWIGTYPE_p_DWORD swig_types[1]
#define SWIGTYPE_p_NET_DVR_ALARMINCFG_V30 swig_types[2]
#define SWIGTYPE_p_NET_DVR_COLOR swig_types[3]
#define SWIGTYPE_p_NET_DVR_COMPRESSIONCFG swig_types[4]
#define SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_EX swig_types[5]
#define SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_V30 swig_types[6]
#define SWIGTYPE_p_NET_DVR_COMPRESSION_INFO swig_types[7]
#define SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX swig_types[8]
#define SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30 swig_types[9]
#define SWIGTYPE_p_NET_DVR_CRUISECHAN_INFO swig_types[10]
#define SWIGTYPE_p_NET_DVR_DECODERCFG swig_types[11]
#define SWIGTYPE_p_NET_DVR_DECODERCFG_V30 swig_types[12]
#define SWIGTYPE_p_NET_DVR_DEVICECFG swig_types[13]
#define SWIGTYPE_p_NET_DVR_ETHERNET swig_types[14]
#define SWIGTYPE_p_NET_DVR_ETHERNET_MULTI swig_types[15]
#define SWIGTYPE_p_NET_DVR_ETHERNET_V30 swig_types[16]
#define SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION swig_types[17]
#define SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION_V30 swig_types[18]
#define SWIGTYPE_p_NET_DVR_HIDEALARM swig_types[19]
#define SWIGTYPE_p_NET_DVR_HIDEALARM_V30 swig_types[20]
#define SWIGTYPE_p_NET_DVR_IPADDR swig_types[21]
#define SWIGTYPE_p_NET_DVR_MOTION swig_types[22]
#define SWIGTYPE_p_NET_DVR_MOTION_V30 swig_types[23]
#define SWIGTYPE_p_NET_DVR_NETCFG swig_types[24]
#define SWIGTYPE_p_NET_DVR_NETCFG_MULTI swig_types[25]
#define SWIGTYPE_p_NET_DVR_NETCFG_V30 swig_types[26]
#define SWIGTYPE_p_NET_DVR_PICCFG swig_types[27]
#define SWIGTYPE_p_NET_DVR_PICCFG_EX swig_types[28]
#define SWIGTYPE_p_NET_DVR_PICCFG_V30 swig_types[29]
#define SWIGTYPE_p_NET_DVR_PPPCFG swig_types[30]
#define SWIGTYPE_p_NET_DVR_PPPCFG_V30 swig_types[31]
#define SWIGTYPE_p_NET_DVR_PPPOECFG swig_types[32]
#define SWIGTYPE_p_NET_DVR_PRESETCHAN_INFO swig_types[33]
#define SWIGTYPE_p_NET_DVR_PTZCFG swig_types[34]
#define SWIGTYPE_p_NET_DVR_PTZTRACKCHAN_INFO swig_types[35]
#define SWIGTYPE_p_NET_DVR_PTZ_PROTOCOL swig_types[36]
#define SWIGTYPE_p_NET_DVR_RECORD swig_types[37]
#define SWIGTYPE_p_NET_DVR_RECORDCHAN swig_types[38]
#define SWIGTYPE_p_NET_DVR_RECORDDAY swig_types[39]
#define SWIGTYPE_p_NET_DVR_RECORDDAY_V40 swig_types[40]
#define SWIGTYPE_p_NET_DVR_RECORDSCHED swig_types[41]
#define SWIGTYPE_p_NET_DVR_RECORDSCHED_V40 swig_types[42]
#define SWIGTYPE_p_NET_DVR_RECORD_V30 swig_types[43]
#define SWIGTYPE_p_NET_DVR_RECORD_V40 swig_types[44]
#define SWIGTYPE_p_NET_DVR_RGB_COLOR swig_types[45]
#define SWIGTYPE_p_NET_DVR_RS232CFG swig_types[46]
#define SWIGTYPE_p_NET_DVR_RS232CFG_V30 swig_types[47]
#define SWIGTYPE_p_NET_DVR_SCHEDTIME swig_types[48]
#define SWIGTYPE_p_NET_DVR_SHELTER swig_types[49]
#define SWIGTYPE_p_NET_DVR_SINGLE_RS232 swig_types[50]
#define SWIGTYPE_p_NET_DVR_TIME swig_types[51]
#define SWIGTYPE_p_NET_DVR_VILOST swig_types[52]
#define SWIGTYPE_p_NET_DVR_VILOST_V30 swig_types[53]
#define SWIGTYPE_p_WORD swig_types[54]
#define SWIGTYPE_p__BITRATE_ENCODE_INDEX_ swig_types[55]
#define SWIGTYPE_p___PLAYRECT swig_types[56]
#define SWIGTYPE_p_a_22__BYTE swig_types[57]
#define SWIGTYPE_p_a_4__NET_DVR_RECORDSCHED swig_types[58]
#define SWIGTYPE_p_a_4__NET_DVR_SCHEDTIME swig_types[59]
#define SWIGTYPE_p_a_8__NET_DVR_RECORDSCHED swig_types[60]
#define SWIGTYPE_p_a_8__NET_DVR_RECORDSCHED_V40 swig_types[61]
#define SWIGTYPE_p_a_8__NET_DVR_SCHEDTIME swig_types[62]
#define SWIGTYPE_p_a_96__BYTE swig_types[63]
#define SWIGTYPE_p_char swig_types[64]
#define SWIGTYPE_p_tagALARMHOST_MAJOR_TYPE swig_types[65]
#define SWIGTYPE_p_tagALARMHOST_MINOR_TYPE swig_types[66]
#define SWIGTYPE_p_tagCharEncodeType swig_types[67]
#define SWIGTYPE_p_tagNET_DVR_ADDRESS swig_types[68]
#define SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40 swig_types[69]
#define SWIGTYPE_p_tagNET_DVR_CALIBRATE_TIME swig_types[70]
#define SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40 swig_types[71]
#define SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40 swig_types[72]
#define SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V41 swig_types[73]
#define SWIGTYPE_p_tagNET_DVR_IP_VIEW_AUDIO_CFG swig_types[74]
#define SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG swig_types[75]
#define SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG swig_types[76]
#define SWIGTYPE_p_tagNET_DVR_NETCFG_V50 swig_types[77]
#define SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION swig_types[78]
#define SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG swig_types[79]
#define SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_COND swig_types[80]
#define SWIGTYPE_p_tagNET_DVR_SERIALSTART_V40 swig_types[81]
#define SWIGTYPE_p_tagNET_DVR_SIP_CFG swig_types[82]
#define SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50 swig_types[83]
#define SWIGTYPE_p_tagNET_DVR_STRUCTHEAD swig_types[84]
#define SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO swig_types[85]
#define SWIGTYPE_p_tagNET_DVR_TIMESIGN_CFG swig_types[86]
#define SWIGTYPE_p_tagNET_DVR_TIME_EX swig_types[87]
#define SWIGTYPE_p_tagNET_DVR_TIME_SEARCH swig_types[88]
#define SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND swig_types[89]
#define SWIGTYPE_p_tagNET_DVR_TIME_V30 swig_types[90]
#define SWIGTYPE_p_tagNET_DVR_TIME_V50 swig_types[91]
#define SWIGTYPE_p_tagNET_DVR_USB_RS232 swig_types[92]
#define SWIGTYPE_p_tagNET_VCA_POINT swig_types[93]
static swig_type_info *swig_types[95];
static swig_module_info swig_module = {swig_types, 94, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _hk_struct_test.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__hk_struct_test

#else
#  define SWIG_init    init_hk_struct_test

#endif
#define SWIG_name    "_hk_struct_test"

#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#ifndef _WINDOWS_
 #if (defined(_WIN32) || defined(_WIN64))
 #include <winsock2.h>
 #include <windows.h> 
 #endif
#endif
#if defined(_WIN64)
 
#define OS_WINDOWS64 1
#endif
#if defined(__LP64__)
 
#define OS_POSIX64 1 
#endif
#ifndef __PLAYRECT_defined
 
#define __PLAYRECT_defined
 
typedef struct __PLAYRECT
 {
 int x;
 int y;
 int uWidth;
 int uHeight;
 }PLAYRECT;
#endif
#if (defined(_WIN32)) 
#define NET_DVR_API  extern "C" __declspec(dllimport)
typedef unsigned __int64 UINT64;
 
typedef signed __int64 INT64;
#elif defined(__linux__) || defined(__APPLE__) 
#define BOOL int
 
typedef unsigned int DWORD;
 
typedef unsigned short WORD;
 
typedef unsigned short USHORT;
 
typedef short SHORT;
 
typedef int LONG;
 
typedef unsigned char BYTE;
 
typedef unsigned int UINT;
 
typedef void* LPVOID;
 
typedef void* HANDLE;
 
typedef unsigned int* LPDWORD;
 
 
typedef unsigned long long UINT64;
 
typedef signed long long INT64;
 #ifndef TRUE
 
#define TRUE 1
 #endif
 #ifndef FALSE
 
#define FALSE 0
 #endif
 #ifndef NULL
 
#define NULL 0
 #endif
 
#define __stdcall 
 
#define CALLBACK 
 
#define NET_DVR_API extern "C"
typedef unsigned int COLORKEY;
 
typedef unsigned int COLORREF;
 #ifndef __HWND_defined
 
#define __HWND_defined
 #if defined(__linux__)
 
typedef unsigned int HWND;
 #else
 
typedef void* HWND;
 #endif
 #endif
 #ifndef __HDC_defined
 
#define __HDC_defined
 #if defined(__linux__)
 
typedef struct __DC
 {
 void* surface;
HWND hWnd;
}DC;
 
typedef DC* HDC;
 #else
 
typedef void* HDC;
 #endif
 #endif
 
typedef struct tagInitInfo
 {
 int uWidth;
 
 int uHeight;
 
 }INITINFO;
 
#endif
#define MAX_NAMELEN 16 
#define MAX_RIGHT 32 
#define NAME_LEN 32 
#define MIN_PASSWD_LEN 8 
#define PASSWD_LEN 16 
#define STREAM_PASSWD_LEN 12 
#define MAX_PASSWD_LEN_EX 64 
#define GUID_LEN 16 
#define DEV_TYPE_NAME_LEN 24 
#define SERIALNO_LEN 48 
#define MACADDR_LEN 6 
#define MAC_ADDRESS_NUM 48 
#define MAX_SENCE_NUM 16 
#define RULE_REGION_MAX 128 
#define MAX_ETHERNET 2 
#define MAX_NETWORK_CARD 4 
#define MAX_NETWORK_CARD_EX 12 
#define PATHNAME_LEN 128 
#define MAX_PRESET_V13 16 
#define MAX_TEST_COMMAND_NUM 32 
#define MAX_NUMBER_LEN 32 
#define MAX_NAME_LEN 128 
#define MAX_INDEX_LED 8 
#define MAX_CUSTOM_DIR 64 
#define URL_LEN_V40 256 
#define CLOUD_NAME_LEN 48 
#define CLOUD_PASSWD_LEN 48 
#define MAX_SENSORNAME_LEN 64 
#define MAX_SENSORCHAN_LEN 32 
#define MAX_DESCRIPTION_LEN 32 
#define MAX_DEVNAME_LEN_EX 64 
#define NET_SDK_MAX_FILE_PATH 256 
#define MAX_TMEVOICE_LEN 64 
#define ISO_8601_LEN 32 
#define MODULE_INFO_LEN 32 
#define VERSION_INFO_LEN 32 
#define MAX_NUM_INPUT_BOARD 512 
#define MAX_SHIPSDETE_REGION_NUM 8
#define MAX_RES_NUM_ONE_VS_INPUT_CHAN 8 
#define MAX_VS_INPUT_CHAN_NUM 16 
#define NET_SDK_MAX_FDID_LEN 256
#define NET_SDK_MAX_PICID_LEN 256
#define NET_SDK_FDPIC_CUSTOM_INFO_LEN 96
#define NET_DVR_MAX_FACE_ANALYSIS_NUM 32 
#define NET_DVR_MAX_FACE_SEARCH_NUM 5 
#define NET_SDK_SECRETKEY_LEN 128 
#define NET_SDK_CUSTOM_LEN 512
#define NET_SDK_CHECK_CODE_LEN 128
#define RELATIVE_CHANNEL_LEN 2
#define MAX_LEN_TEXT_CONTENT 128 
#define MAX_NUM_INPUT_SOURCE_TEXT 32 
#define MAX_NUM_OUTPUT_CHANNEL 512 
#define MAX_LEN_OSD_CONTENT 256 
#define MAX_NUM_OSD_ONE_SUBWND 8 
#define MAX_NUM_SPLIT_WND 64
#define MAX_NUM_OSD 8
#define MAX_DEVNAME_LEN 32 
#define MAX_LED_INFO 256 
#define MAX_TIME_LEN 32 
#define MAX_CARD_LEN 24 
#define MAX_OPERATORNAME_LEN 32 
#define THERMOMETRY_ALARMRULE_NUM 40 
#define MAX_THERMOMETRY_REGION_NUM 40 
#define MAX_THERMOMETRY_DIFFCOMPARISON_NUM 40
#define MAX_SHIPS_NUM 20 
#define KEY_WORD_NUM 3
#define KEY_WORD_LEN 128 
#define ASYN_LOGIN_SUCC 1 
#define ASYN_LOGIN_FAILED 0 
#define NET_SDK_MAX_VERIFICATION_CODE_LEN 32 
#define NET_SDK_MAX_OPERATE_CODE_LEN 64 
#define MAX_TIMESEGMENT_V30 8 
#define MAX_TIMESEGMENT 4 
#define MAX_ICR_NUM 8 
#define MAX_VEHICLEFLOW_INFO 24 
#define MAX_SHELTERNUM 4 
#define MAX_DAYS 7 
#define PHONENUMBER_LEN 32 
#define MAX_ACCESSORY_CARD 256 
#define MAX_DISKNUM_V30 33 
#define NET_SDK_DISK_LOCATION_LEN 16 
#define NET_SDK_SUPPLIER_NAME_LEN 32 
#define NET_SDK_DISK_MODEL_LEN 64 
#define NET_SDK_MAX_DISK_VOLUME 33 
#define NET_SDK_DISK_VOLUME_LEN 36 
#define MAX_DISKNUM 16 
#define MAX_DISKNUM_V10 8 
#define CARD_READER_DESCRIPTION 32 
#define MAX_FACE_NUM 2 
#define MAX_WINDOW_V30 32 
#define MAX_WINDOW_V40 64 
#define MAX_WINDOW 16 
#define MAX_VGA_V30 4 
#define MAX_VGA 1 
#define MAX_USERNUM_V30 32 
#define MAX_USERNUM 16 
#define MAX_EXCEPTIONNUM_V30 32 
#define MAX_EXCEPTIONNUM 16 
#define MAX_LINK 6 
#define MAX_ITC_EXCEPTIONOUT 32 
#define MAX_SCREEN_DISPLAY_LEN 512 
#define MAX_DECPOOLNUM 4 
#define MAX_DECNUM 4 
#define MAX_TRANSPARENTNUM 2 
#define MAX_CYCLE_CHAN 16 
#define MAX_CYCLE_CHAN_V30 64 
#define MAX_DIRNAME_LENGTH 80 
#define MAX_WINDOWS 16 
#define MAX_STRINGNUM_V30 8 
#define MAX_STRINGNUM 4 
#define MAX_STRINGNUM_EX 8 
#define MAX_AUXOUT_V30 16 
#define MAX_AUXOUT 4 
#define MAX_HD_GROUP 16 
#define MAX_HD_GROUP_V40 32 
#define MAX_NFS_DISK 8 
#define NET_SDK_VERSION_LIST_LEN 64
#define IW_ESSID_MAX_SIZE 32 
#define IW_ENCODING_TOKEN_MAX 32 
#define MAX_SERIAL_NUM 64 
#define MAX_DDNS_NUMS 10 
#define MAX_DOMAIN_NAME 64 
#define MAX_EMAIL_ADDR_LEN 48 
#define MAX_EMAIL_PWD_LEN 32 
#define MAX_SLAVECAMERA_NUM 8 
#define MAX_CALIB_NUM 6 
#define MAX_CALIB_NUM_EX 20 
#define MAX_LEDDISPLAYINFO_LEN 1024 
#define MAX_PEOPLE_DETECTION_NUM 8 
#define MAXPROGRESS 100 
#define MAX_SERIALNUM 2 
#define CARDNUM_LEN 20 
#define PATIENTID_LEN 64
#define CARDNUM_LEN_OUT 32 
#define MAX_VIDEOOUT_V30 4 
#define MAX_VIDEOOUT 2 
#define MAX_PRESET_V30 256 
#define MAX_TRACK_V30 256 
#define MAX_CRUISE_V30 256 
#define MAX_PRESET 128 
#define MAX_TRACK 128 
#define MAX_CRUISE 128 
#define MAX_PRESET_V40 300 
#define MAX_CRUISE_POINT_NUM 128 
#define MAX_CRUISEPOINT_NUM_V50 256 
#define CRUISE_MAX_PRESET_NUMS 32 
#define MAX_FACE_PIC_NUM 30 
#define LOCKGATE_TIME_NUM 4 
#define MAX_SERIAL_PORT 8 
#define MAX_PREVIEW_MODE 8 
#define MAX_MATRIXOUT 16 
#define LOG_INFO_LEN 11840 
#define DESC_LEN 16 
#define PTZ_PROTOCOL_NUM 200 
#define IPC_PROTOCOL_NUM 50 
#define MAX_AUDIO 1 
#define MAX_AUDIO_V30 2 
#define MAX_CHANNUM 16 
#define MAX_ALARMIN 16 
#define MAX_ALARMOUT 4 
#define MAX_ANALOG_CHANNUM 32 
#define MAX_ANALOG_ALARMOUT 32 
#define MAX_ANALOG_ALARMIN 32 
#define MAX_IP_DEVICE 32 
#define MAX_IP_DEVICE_V40 64 
#define MAX_IP_CHANNEL 32 
#define MAX_IP_ALARMIN 128 
#define MAX_IP_ALARMOUT 64 
#define MAX_IP_ALARMIN_V40 4096 
#define MAX_IP_ALARMOUT_V40 4096 
#define MAX_RECORD_FILE_NUM 20 
#define MAX_ACTION_TYPE 12 
#define MAX_ATM_PROTOCOL_NUM 256 
#define ATM_CUSTOM_PROTO 1025 
#define ATM_PROTOCOL_SORT 4 
#define ATM_DESC_LEN 32 
#define MAX_IPV6_LEN 64 
#define MAX_EVENTID_LEN 64 
#define INVALID_VALUE_UINT32 0xffffffff 
#define MAX_CHANNUM_V40 512
#define MAX_MULTI_AREA_NUM 24
#define COURSE_NAME_LEN 32 
#define INSTRUCTOR_NAME_LEN 16 
#define COURSE_DESCRIPTION_LEN 256 
#define MAX_TIMESEGMENT_V40 16 
#define MAX_MIX_CHAN_NUM 16 
#define MAX_LINE_IN_CHAN_NUM 16 
#define MAX_MIC_CHAN_NUM 16 
#define INQUEST_CASE_NO_LEN 64 
#define INQUEST_CASE_NAME_LEN 64 
#define CUSTOM_INFO_LEN 64 
#define INQUEST_CASE_LEN 64 
#define MAX_FILE_ID_LEN 128 
#define MAX_PIC_NAME_LEN 128 
#define MAX_CHANNUM_V30 ( MAX_ANALOG_CHANNUM + MAX_IP_CHANNEL )
#define MAX_ALARMOUT_V40 (MAX_IP_ALARMOUT_V40 +MAX_ANALOG_ALARMOUT)
#define MAX_ALARMOUT_V30 ( MAX_ANALOG_ALARMOUT + MAX_IP_ALARMOUT )
#define MAX_ALARMIN_V30 ( MAX_ANALOG_ALARMIN + MAX_IP_ALARMIN )
#define MAX_ALARMIN_V40 (MAX_IP_ALARMIN_V40 +MAX_ANALOG_ALARMOUT)
#define MAX_ANALOG_ALARM_WITH_VOLT_LIMIT 16
#define MAX_ROIDETECT_NUM 8 
#define MAX_LANERECT_NUM 5 
#define MAX_FORTIFY_NUM 10 
#define MAX_INTERVAL_NUM 4 
#define MAX_CHJC_NUM 3 
#define MAX_VL_NUM 5 
#define MAX_DRIVECHAN_NUM 16 
#define MAX_COIL_NUM 3 
#define MAX_SIGNALLIGHT_NUM 6 
#define LEN_16 16
#define LEN_32 32
#define LEN_64 64
#define LEN_31 31 
#define	MAX_LINKAGE_CHAN_NUM 16 
#define MAX_CABINET_COUNT 8 
#define MAX_ID_LEN 48
#define MAX_PARKNO_LEN 16
#define MAX_ALARMREASON_LEN 32
#define MAX_UPGRADE_INFO_LEN 48
#define MAX_CUSTOMDIR_LEN 32
#define MAX_LED_INFO_LEN 512
#define MAX_VOICE_INFO_LEN 128
#define MAX_LITLE_INFO_LEN 64
#define MAX_CUSTOM_INFO_LEN 64
#define MAX_PHONE_NUM_LEN 16
#define MAX_APP_SERIALNUM_LEN 32
#define AUDIOTALKTYPE_G722 0
#define AUDIOTALKTYPE_G711_MU 1
#define AUDIOTALKTYPE_G711_A 2
#define AUDIOTALKTYPE_MP2L2 5
#define AUDIOTALKTYPE_G726 6
#define AUDIOTALKTYPE_AAC 7
#define AUDIOTALKTYPE_PCM 8
#define AUDIOTALKTYPE_G722C 9
#define AUDIOTALKTYPE_MP3 15
#define FILE_HEAD 0
#define VIDEO_I_FRAME 1
#define VIDEO_B_FRAME 2
#define VIDEO_P_FRAME 3
#define AUDIO_PACKET 10
#define PRIVT_PACKET 11
#define HIK_H264_E_FRAME (1 << 6) 
#define MAX_TRANSPARENT_CHAN_NUM 4 
#define MAX_TRANSPARENT_ACCESS_NUM 4 
#define MAX_PARKING_STATUS 8 
#define MAX_PARKING_NUM 4 
#define MAX_ITS_SCENE_NUM 16 
#define MAX_SCENE_TIMESEG_NUM 16 
#define MAX_IVMS_IP_CHANNEL 128 
#define DEVICE_ID_LEN 48 
#define MONITORSITE_ID_LEN 48 
#define MAX_AUXAREA_NUM 16 
#define MAX_SLAVE_CHANNEL_NUM 16 
#define MAX_DEVDESC_LEN 64 
#define ILLEGAL_LEN 32 
#define MAX_TRUCK_AXLE_NUM 10 
#define MAX_CATEGORY_LEN 8 
#define SERIAL_NO_LEN 16 
#define MAX_SECRETKEY_LEN 512 
#define MAX_INDEX_CODE_LEN 64 
#define MAX_ILLEGAL_LEN 64 
#define CODE_LEN 64 
#define ALIAS_LEN 32 
#define MAX_SCH_TASKS_NUM 10
#define MAX_SERVERID_LEN 64
#define MAX_SERVERDOMAIN_LEN 128
#define MAX_AUTHENTICATEID_LEN 64
#define MAX_AUTHENTICATEPASSWD_LEN 32
#define MAX_SERVERNAME_LEN 64
#define MAX_COMPRESSIONID_LEN 64
#define MAX_SIPSERVER_ADDRESS_LEN 128
#define MAX_PlATE_NO_LEN 32 
#define UPNP_PORT_NUM 12 
#define MAX_PEOPLE_DETECTION_NUM 8 
#define MAX_NOTICE_NUMBER_LEN 32 
#define MAX_NOTICE_THEME_LEN 64 
#define MAX_NOTICE_DETAIL_LEN 1024
#define MAX_NOTICE_PIC_NUM 6 
#define MAX_DEV_NUMBER_LEN 32 
#define LOCK_NAME_LEN 32 
#define HOLIDAY_GROUP_NAME_LEN 32 
#define MAX_HOLIDAY_PLAN_NUM 16 
#define TEMPLATE_NAME_LEN 32 
#define MAX_HOLIDAY_GROUP_NUM 16 
#define DOOR_NAME_LEN 32 
#define STRESS_PASSWORD_LEN 8 
#define SUPER_PASSWORD_LEN 8 
#define GROUP_NAME_LEN 32 
#define GROUP_COMBINATION_NUM 8 
#define MULTI_CARD_GROUP_NUM 4 
#define ACS_CARD_NO_LEN 32 
#define NET_SDK_EMPLOYEE_NO_LEN 32 
#define NET_SDK_UUID_LEN 36 
#define NET_SDK_EHOME_KEY_LEN 32 
#define CARD_PASSWORD_LEN 8 
#define MAX_DOOR_NUM 32 
#define MAX_CARD_RIGHT_PLAN_NUM 4 
#define MAX_GROUP_NUM_128 128
#define MAX_CARD_READER_NUM 64 
#define MAX_SNEAK_PATH_NODE 8 
#define MAX_MULTI_DOOR_INTERLOCK_GROUP 8 
#define MAX_INTER_LOCK_DOOR_NUM 8 
#define MAX_CASE_SENSOR_NUM 8 
#define MAX_DOOR_NUM_256 256
#define MAX_READER_ROUTE_NUM 16 
#define MAX_FINGER_PRINT_NUM 10 
#define MAX_CARD_READER_NUM_512 512
#define NET_SDK_MULTI_CARD_GROUP_NUM_20 20 
#define ERROR_MSG_LEN 32
#define MAX_DOOR_CODE_LEN 8
#define MAX_LOCK_CODE_LEN 8
#define PER_RING_PORT_NUM 2 
#define SENSORNAME_LEN 32 
#define MAX_SENSORDESCR_LEN 64 
#define MAX_DNS_SERVER_NUM 2
#define SENSORUNIT_LEN 32
#define WEP_KEY_MAX_SIZE 32
#define WEP_KEY_MAX_NUM 4 
#define WPA_KEY_MAX_SIZE 64
#define MAX_SINGLE_FTPPICNAME_LEN 20
#define MAX_CAMNAME_LEN 32
#define MAX_FTPNAME_NUM 12
#define MAX_IDCODE_LEN 128
#define MAX_VERSIIN_LEN 64 
#define MAX_IDCODE_NUM 32 
#define SDK_LEN_2048 2048
#define SDK_MAX_IP_LEN 48
#define RECT_POINT_NUM 4 
#define MAX_PUBLIC_KEY_LEN 512
#define CHIP_SERIALNO_LEN 32
#define ENCRYPT_DEV_ID_LEN 20 
#define MAX_SEARCH_ID_LEN 36 
#define TERMINAL_NAME_LEN 64 
#define MAX_URL_LEN 512
#define REGISTER_NAME_LEN 64
#define MAX_PORT_NUM 64 
#define MAX_SINGLE_CARD_PORT_NO 4 
#define MAX_FUNC_CARD_NUM 32 
#define MAX_FC_CARD_NUM 33 
#define MAX_REMARKS_LEN 128
#define MAX_OUTPUT_PORT_NUM 32 
#define MAX_SINGLE_PORT_RECVCARD_NUM 64 
#define MAX_GAMMA_X_VALUE 256 
#define NET_DEV_NAME_LEN 64 
#define NET_DEV_TYPE_NAME_LEN 64 
#define ABNORMAL_INFO_NUM 4 
#define PLAYLIST_NAME_LEN 64 
#define PLAYLIST_ITEM_NUM 64 
#define NET_SDK_MAX_LOGIN_PASSWORD_LEN 128
#define NET_SDK_MAX_ANSWER_LEN 256
#define NET_SDK_MAX_QUESTION_LIST_LEN 32
#define MAX_SCREEN_AREA_NUM 128 
#define NET_SDK_MAX_THERMOMETRYALGNAME 128
#define NET_SDK_MAX_SHIPSALGNAME 128
#define NET_SDK_MAX_FIRESALGNAME 128
#define MAX_PASSPORT_NUM_LEN 16 
#define MAX_PASSPORT_INFO_LEN 128 
#define MAX_PASSPORT_NAME_LEN 64 
#define MAX_PASSPORT_MONITOR_LEN 1024 
#define MAX_NATIONALITY_LEN 16 
#define MAX_PASSPORT_TYPE_LEN 4 
#define NET_DVR_NOERROR 0 
#define NET_DVR_PASSWORD_ERROR 1 
#define NET_DVR_NOENOUGHPRI 2 
#define NET_DVR_NOINIT 3 
#define NET_DVR_CHANNEL_ERROR 4 
#define NET_DVR_OVER_MAXLINK 5 
#define NET_DVR_VERSIONNOMATCH 6 
#define NET_DVR_NETWORK_FAIL_CONNECT 7 
#define NET_DVR_NETWORK_SEND_ERROR 8 
#define NET_DVR_NETWORK_RECV_ERROR 9 
#define NET_DVR_NETWORK_RECV_TIMEOUT 10 
#define NET_DVR_NETWORK_ERRORDATA 11 
#define NET_DVR_ORDER_ERROR 12 
#define NET_DVR_OPERNOPERMIT 13 
#define NET_DVR_COMMANDTIMEOUT 14 
#define NET_DVR_ERRORSERIALPORT 15 
#define NET_DVR_ERRORALARMPORT 16 
#define NET_DVR_PARAMETER_ERROR 17 
#define NET_DVR_CHAN_EXCEPTION 18 
#define NET_DVR_NODISK 19 
#define NET_DVR_ERRORDISKNUM 20 
#define NET_DVR_DISK_FULL 21 
#define NET_DVR_DISK_ERROR 22 
#define NET_DVR_NOSUPPORT 23 
#define NET_DVR_BUSY 24 
#define NET_DVR_MODIFY_FAIL 25 
#define NET_DVR_PASSWORD_FORMAT_ERROR 26 
#define NET_DVR_DISK_FORMATING 27 
#define NET_DVR_DVRNORESOURCE 28 
#define NET_DVR_DVROPRATEFAILED 29 
#define NET_DVR_OPENHOSTSOUND_FAIL 30 
#define NET_DVR_DVRVOICEOPENED 31 
#define NET_DVR_TIMEINPUTERROR 32 
#define NET_DVR_NOSPECFILE 33 
#define NET_DVR_CREATEFILE_ERROR 34 
#define NET_DVR_FILEOPENFAIL 35 
#define NET_DVR_OPERNOTFINISH 36 
#define NET_DVR_GETPLAYTIMEFAIL 37 
#define NET_DVR_PLAYFAIL 38 
#define NET_DVR_FILEFORMAT_ERROR 39 
#define NET_DVR_DIR_ERROR 40 
#define NET_DVR_ALLOC_RESOURCE_ERROR 41 
#define NET_DVR_AUDIO_MODE_ERROR 42 
#define NET_DVR_NOENOUGH_BUF 43 
#define NET_DVR_CREATESOCKET_ERROR 44 
#define NET_DVR_SETSOCKET_ERROR 45 
#define NET_DVR_MAX_NUM 46 
#define NET_DVR_USERNOTEXIST 47 
#define NET_DVR_WRITEFLASHERROR 48 
#define NET_DVR_UPGRADEFAIL 49 
#define NET_DVR_CARDHAVEINIT 50 
#define NET_DVR_PLAYERFAILED 51 
#define NET_DVR_MAX_USERNUM 52 
#define NET_DVR_GETLOCALIPANDMACFAIL 53 
#define NET_DVR_NOENCODEING 54 
#define NET_DVR_IPMISMATCH 55 
#define NET_DVR_MACMISMATCH 56 
#define NET_DVR_UPGRADELANGMISMATCH 57 
#define NET_DVR_MAX_PLAYERPORT 58 
#define NET_DVR_NOSPACEBACKUP 59 
#define NET_DVR_NODEVICEBACKUP 60 
#define NET_DVR_PICTURE_BITS_ERROR 61 
#define NET_DVR_PICTURE_DIMENSION_ERROR 62 
#define NET_DVR_PICTURE_SIZ_ERROR 63 
#define NET_DVR_LOADPLAYERSDKFAILED 64 
#define NET_DVR_LOADPLAYERSDKPROC_ERROR 65 
#define NET_DVR_LOADDSSDKFAILED 66 
#define NET_DVR_LOADDSSDKPROC_ERROR 67 
#define NET_DVR_DSSDK_ERROR 68 
#define NET_DVR_VOICEMONOPOLIZE 69 
#define NET_DVR_JOINMULTICASTFAILED 70 
#define NET_DVR_CREATEDIR_ERROR 71 
#define NET_DVR_BINDSOCKET_ERROR 72 
#define NET_DVR_SOCKETCLOSE_ERROR 73 
#define NET_DVR_USERID_ISUSING 74 
#define NET_DVR_SOCKETLISTEN_ERROR 75 
#define NET_DVR_PROGRAM_EXCEPTION 76 
#define NET_DVR_WRITEFILE_FAILED 77 
#define NET_DVR_FORMAT_READONLY 78 
#define NET_DVR_WITHSAMEUSERNAME 79 
#define NET_DVR_DEVICETYPE_ERROR 80 
#define NET_DVR_LANGUAGE_ERROR 81 
#define NET_DVR_PARAVERSION_ERROR 82 
#define NET_DVR_IPCHAN_NOTALIVE 83 
#define NET_DVR_RTSP_SDK_ERROR 84 
#define NET_DVR_CONVERT_SDK_ERROR 85 
#define NET_DVR_IPC_COUNT_OVERFLOW 86 
#define NET_DVR_MAX_ADD_NUM 87 
#define NET_DVR_PARAMMODE_ERROR 88
#define NET_DVR_CODESPITTER_OFFLINE 89
#define NET_DVR_BACKUP_COPYING 90 
#define NET_DVR_CHAN_NOTSUPPORT 91 
#define NET_DVR_CALLINEINVALID 92 
#define NET_DVR_CALCANCELCONFLICT 93 
#define NET_DVR_CALPOINTOUTRANGE 94 
#define NET_DVR_FILTERRECTINVALID 95 
#define NET_DVR_DDNS_DEVOFFLINE 96 
#define NET_DVR_DDNS_INTER_ERROR 97 
#define NET_DVR_FUNCTION_NOT_SUPPORT_OS 98 
#define NET_DVR_DEC_CHAN_REBIND 99 
#define NET_DVR_INTERCOM_SDK_ERROR 100
#define NET_DVR_NO_CURRENT_UPDATEFILE 101
#define NET_DVR_USER_NOT_SUCC_LOGIN 102 
#define NET_DVR_USE_LOG_SWITCH_FILE 103 
#define NET_DVR_POOL_PORT_EXHAUST 104 
#define NET_DVR_PACKET_TYPE_NOT_SUPPORT 105 
#define NET_DVR_IPPARA_IPID_ERROR 106 
#define NET_DVR_LOAD_HCPREVIEW_SDK_ERROR 107 
#define NET_DVR_LOAD_HCVOICETALK_SDK_ERROR 108 
#define NET_DVR_LOAD_HCALARM_SDK_ERROR 109 
#define NET_DVR_LOAD_HCPLAYBACK_SDK_ERROR 110 
#define NET_DVR_LOAD_HCDISPLAY_SDK_ERROR 111 
#define NET_DVR_LOAD_HCINDUSTRY_SDK_ERROR 112 
#define NET_DVR_LOAD_HCGENERALCFGMGR_SDK_ERROR 113 
#define NET_DVR_LOAD_HCCOREDEVCFG_SDK_ERROR 114 
#define NET_DVR_LOAD_HCNETUTILS_SDK_ERROR 115 
#define NET_DVR_CORE_VER_MISMATCH 121 
#define NET_DVR_CORE_VER_MISMATCH_HCPREVIEW 122 
#define NET_DVR_CORE_VER_MISMATCH_HCVOICETALK 123 
#define NET_DVR_CORE_VER_MISMATCH_HCALARM 124 
#define NET_DVR_CORE_VER_MISMATCH_HCPLAYBACK 125 
#define NET_DVR_CORE_VER_MISMATCH_HCDISPLAY 126 
#define NET_DVR_CORE_VER_MISMATCH_HCINDUSTRY 127 
#define NET_DVR_CORE_VER_MISMATCH_HCGENERALCFGMGR 128 
#define NET_DVR_COM_VER_MISMATCH_HCPREVIEW 136 
#define NET_DVR_COM_VER_MISMATCH_HCVOICETALK 137 
#define NET_DVR_COM_VER_MISMATCH_HCALARM 138 
#define NET_DVR_COM_VER_MISMATCH_HCPLAYBACK 139 
#define NET_DVR_COM_VER_MISMATCH_HCDISPLAY 140 
#define NET_DVR_COM_VER_MISMATCH_HCINDUSTRY 141 
#define NET_DVR_COM_VER_MISMATCH_HCGENERALCFGMGR 142 
#define NET_ERR_CONFIG_FILE_IMPORT_FAILED 145 
#define NET_ERR_CONFIG_FILE_EXPORT_FAILED 146 
#define NET_DVR_CERTIFICATE_FILE_ERROR 147 
#define NET_DVR_LOAD_SSL_LIB_ERROR 148 
#define NET_DVR_SSL_VERSION_NOT_MATCH 149 
#define NET_DVR_ALIAS_DUPLICATE 150 
#define NET_DVR_INVALID_COMMUNICATION 151 
#define NET_DVR_USERNAME_NOT_EXIST 152 
#define NET_DVR_USER_LOCKED 153
#define NET_DVR_INVALID_USERID 154
#define NET_DVR_LOW_LOGIN_VERSION 155
#define NET_DVR_LOAD_LIBEAY32_DLL_ERROR 156
#define NET_DVR_LOAD_SSLEAY32_DLL_ERROR 157
#define NET_ERR_LOAD_LIBICONV 158
#define NET_ERR_SSL_CONNECT_FAILED 159
#define NET_ERR_MCAST_ADDRESS_ERROR 160
#define NET_ERR_LOAD_ZLIB 161
#define NET_ERR_OPENSSL_NO_INIT 162
#define NET_DVR_SERVER_NOT_EXIST 164
#define NET_DVR_TEST_SERVER_FAIL_CONNECT 165 
#define NET_DVR_NAS_SERVER_INVALID_DIR 166 
#define NET_DVR_NAS_SERVER_NOENOUGH_PRI 167 
#define NET_DVR_EMAIL_SERVER_NOT_CONFIG_DNS 168 
#define NET_DVR_EMAIL_SERVER_NOT_CONFIG_GATEWAY 169 
#define NET_DVR_TEST_SERVER_PASSWORD_ERROR 170 
#define NET_DVR_EMAIL_SERVER_CONNECT_EXCEPTION_WITH_SMTP 171 
#define NET_DVR_FTP_SERVER_FAIL_CREATE_DIR 172 
#define NET_DVR_FTP_SERVER_NO_WRITE_PIR 173 
#define NET_DVR_IP_CONFLICT 174 
#define NET_DVR_INSUFFICIENT_STORAGEPOOL_SPACE 175 
#define NET_DVR_STORAGEPOOL_INVALID 176 
#define NET_DVR_EFFECTIVENESS_REBOOT 177 
#define NET_ERR_ANR_ARMING_EXIST 178 
#define NET_ERR_UPLOADLINK_EXIST 179 
#define NET_ERR_INCORRECT_FILE_FORMAT 180 
#define NET_ERR_INCORRECT_FILE_CONTENT 181 
#define NET_ERR_MAX_HRUDP_LINK 182
#define NET_SDK_ERR_MAX_PORT_MULTIPLEX 183 
#define NET_SDK_ERR_CREATE_PORT_MULTIPLEX 184
#define NET_DVR_NONBLOCKING_CAPTURE_NOTSUPPORT 185
#define NET_SDK_ERR_FUNCTION_INVALID 186 
#define RAID_ERROR_INDEX 200
#define NET_DVR_NAME_NOT_ONLY (RAID_ERROR_INDEX + 0) 
#define NET_DVR_OVER_MAX_ARRAY (RAID_ERROR_INDEX + 1 )
#define NET_DVR_OVER_MAX_VD (RAID_ERROR_INDEX + 2 )
#define NET_DVR_VD_SLOT_EXCEED (RAID_ERROR_INDEX + 3 )
#define NET_DVR_PD_STATUS_INVALID (RAID_ERROR_INDEX + 4 )
#define NET_DVR_PD_BE_DEDICATE_SPARE (RAID_ERROR_INDEX + 5 )
#define NET_DVR_PD_NOT_FREE (RAID_ERROR_INDEX + 6 )
#define NET_DVR_CANNOT_MIG2NEWMODE (RAID_ERROR_INDEX + 7 )
#define NET_DVR_MIG_PAUSE (RAID_ERROR_INDEX + 8 )
#define NET_DVR_MIG_CANCEL (RAID_ERROR_INDEX + 9 )
#define NET_DVR_EXIST_VD (RAID_ERROR_INDEX + 10)
#define NET_DVR_TARGET_IN_LD_FUNCTIONAL (RAID_ERROR_INDEX + 11)
#define NET_DVR_HD_IS_ASSIGNED_ALREADY (RAID_ERROR_INDEX + 12)
#define NET_DVR_INVALID_HD_COUNT (RAID_ERROR_INDEX + 13)
#define NET_DVR_LD_IS_FUNCTIONAL (RAID_ERROR_INDEX + 14)
#define NET_DVR_BGA_RUNNING (RAID_ERROR_INDEX + 15)
#define NET_DVR_LD_NO_ATAPI (RAID_ERROR_INDEX + 16)
#define NET_DVR_MIGRATION_NOT_NEED (RAID_ERROR_INDEX + 17)
#define NET_DVR_HD_TYPE_MISMATCH (RAID_ERROR_INDEX + 18)
#define NET_DVR_NO_LD_IN_DG (RAID_ERROR_INDEX + 19)
#define NET_DVR_NO_ROOM_FOR_SPARE (RAID_ERROR_INDEX + 20)
#define NET_DVR_SPARE_IS_IN_MULTI_DG (RAID_ERROR_INDEX + 21)
#define NET_DVR_DG_HAS_MISSING_PD (RAID_ERROR_INDEX + 22)
#define NET_DVR_NAME_EMPTY (RAID_ERROR_INDEX + 23) 
#define NET_DVR_INPUT_PARAM (RAID_ERROR_INDEX + 24) 
#define NET_DVR_PD_NOT_AVAILABLE (RAID_ERROR_INDEX + 25) 
#define NET_DVR_ARRAY_NOT_AVAILABLE (RAID_ERROR_INDEX + 26) 
#define NET_DVR_PD_COUNT (RAID_ERROR_INDEX + 27) 
#define NET_DVR_VD_SMALL (RAID_ERROR_INDEX + 28) 
#define NET_DVR_NO_EXIST (RAID_ERROR_INDEX + 29) 
#define NET_DVR_NOT_SUPPORT (RAID_ERROR_INDEX + 30) 
#define NET_DVR_NOT_FUNCTIONAL (RAID_ERROR_INDEX + 31) 
#define NET_DVR_DEV_NODE_NOT_FOUND (RAID_ERROR_INDEX + 32) 
#define NET_DVR_SLOT_EXCEED (RAID_ERROR_INDEX + 33) 
#define NET_DVR_NO_VD_IN_ARRAY (RAID_ERROR_INDEX + 34) 
#define NET_DVR_VD_SLOT_INVALID (RAID_ERROR_INDEX + 35) 
#define NET_DVR_PD_NO_ENOUGH_SPACE (RAID_ERROR_INDEX + 36) 
#define NET_DVR_ARRAY_NONFUNCTION (RAID_ERROR_INDEX + 37) 
#define NET_DVR_ARRAY_NO_ENOUGH_SPACE (RAID_ERROR_INDEX + 38) 
#define NET_DVR_STOPPING_SCANNING_ARRAY (RAID_ERROR_INDEX + 39) 
#define NET_DVR_NOT_SUPPORT_16T (RAID_ERROR_INDEX + 40) 
#define NET_DVR_ARRAY_FORMATING (RAID_ERROR_INDEX + 41) 
#define NET_DVR_QUICK_SETUP_PD_COUNT (RAID_ERROR_INDEX + 42) 
#define NET_DVR_ERROR_DEVICE_NOT_ACTIVATED 250
#define NET_DVR_ERROR_RISK_PASSWORD 251
#define NET_DVR_ERROR_DEVICE_HAS_ACTIVATED 252
#define VCA_ERROR_INDEX 300
#define NET_DVR_ID_ERROR (VCA_ERROR_INDEX + 0) 
#define NET_DVR_POLYGON_ERROR (VCA_ERROR_INDEX + 1) 
#define NET_DVR_RULE_PARAM_ERROR (VCA_ERROR_INDEX + 2) 
#define NET_DVR_RULE_CFG_CONFLICT (VCA_ERROR_INDEX + 3) 
#define NET_DVR_CALIBRATE_NOT_READY (VCA_ERROR_INDEX + 4) 
#define NET_DVR_CAMERA_DATA_ERROR (VCA_ERROR_INDEX + 5) 
#define NET_DVR_CALIBRATE_DATA_UNFIT (VCA_ERROR_INDEX + 6) 
#define NET_DVR_CALIBRATE_DATA_CONFLICT (VCA_ERROR_INDEX + 7) 
#define NET_DVR_CALIBRATE_CALC_FAIL (VCA_ERROR_INDEX + 8) 
#define NET_DVR_CALIBRATE_LINE_OUT_RECT (VCA_ERROR_INDEX + 9) 
#define NET_DVR_ENTER_RULE_NOT_READY (VCA_ERROR_INDEX + 10) 
#define NET_DVR_AID_RULE_NO_INCLUDE_LANE (VCA_ERROR_INDEX + 11) 
#define NET_DVR_LANE_NOT_READY (VCA_ERROR_INDEX + 12) 
#define NET_DVR_RULE_INCLUDE_TWO_WAY (VCA_ERROR_INDEX + 13) 
#define NET_DVR_LANE_TPS_RULE_CONFLICT (VCA_ERROR_INDEX + 14) 
#define NET_DVR_NOT_SUPPORT_EVENT_TYPE (VCA_ERROR_INDEX + 15) 
#define NET_DVR_LANE_NO_WAY (VCA_ERROR_INDEX + 16) 
#define NET_DVR_SIZE_FILTER_ERROR (VCA_ERROR_INDEX + 17) 
#define NET_DVR_LIB_FFL_NO_FACE (VCA_ERROR_INDEX + 18)
#define NET_DVR_LIB_FFL_IMG_TOO_SMALL (VCA_ERROR_INDEX + 19)
#define NET_DVR_LIB_FD_IMG_NO_FACE (VCA_ERROR_INDEX + 20)
#define NET_DVR_LIB_FACE_TOO_SMALL (VCA_ERROR_INDEX + 21)
#define NET_DVR_LIB_FACE_QUALITY_TOO_BAD (VCA_ERROR_INDEX + 22)
#define NET_DVR_KEY_PARAM_ERR (VCA_ERROR_INDEX + 23)
#define NET_DVR_CALIBRATE_DATA_ERR (VCA_ERROR_INDEX + 24)
#define NET_DVR_CALIBRATE_DISABLE_FAIL (VCA_ERROR_INDEX + 25)
#define NET_DVR_VCA_LIB_FD_SCALE_OUTRANGE (VCA_ERROR_INDEX + 26)
#define NET_DVR_LIB_FD_REGION_TOO_LARGE (VCA_ERROR_INDEX + 27)
#define NET_DVR_TRIAL_OVERDUE (VCA_ERROR_INDEX + 28)
#define NET_DVR_CONFIG_FILE_CONFLICT (VCA_ERROR_INDEX + 29)
#define NET_DVR_FR_FPL_FAIL (VCA_ERROR_INDEX + 30) 
#define NET_DVR_FR_IQA_FAIL (VCA_ERROR_INDEX + 31) 
#define NET_DVR_FR_FEM_FAIL (VCA_ERROR_INDEX + 32) 
#define NET_DVR_FPL_DT_CONF_TOO_LOW (VCA_ERROR_INDEX + 33) 
#define NET_DVR_FPL_CONF_TOO_LOW (VCA_ERROR_INDEX + 34) 
#define NET_DVR_E_DATA_SIZE (VCA_ERROR_INDEX + 35) 
#define NET_DVR_FR_MODEL_VERSION_ERR (VCA_ERROR_INDEX + 36) 
#define NET_DVR_FR_FD_FAIL (VCA_ERROR_INDEX + 37) 
#define NET_DVR_FA_NORMALIZE_ERR (VCA_ERROR_INDEX + 38) 
#define NET_DVR_DOG_PUSTREAM_NOT_MATCH (VCA_ERROR_INDEX + 39) 
#define NET_DVR_DEV_PUSTREAM_NOT_MATCH (VCA_ERROR_INDEX + 40) 
#define NET_DVR_PUSTREAM_ALREADY_EXISTS (VCA_ERROR_INDEX + 41) 
#define NET_DVR_SEARCH_CONNECT_FAILED (VCA_ERROR_INDEX + 42) 
#define NET_DVR_INSUFFICIENT_DISK_SPACE (VCA_ERROR_INDEX + 43) 
#define NET_DVR_DATABASE_CONNECTION_FAILED (VCA_ERROR_INDEX + 44) 
#define NET_DVR_DATABASE_ADM_PW_ERROR (VCA_ERROR_INDEX + 45) 
#define NET_DVR_DECODE_YUV (VCA_ERROR_INDEX + 46) 
#define NET_DVR_IMAGE_RESOLUTION_ERROR (VCA_ERROR_INDEX + 47) 
#define NET_DVR_CHAN_WORKMODE_ERROR (VCA_ERROR_INDEX + 48) 
#define NET_DVR_RTSP_ERROR_NOENOUGHPRI 401 
#define NET_DVR_RTSP_ERROR_ALLOC_RESOURCE 402 
#define NET_DVR_RTSP_ERROR_PARAMETER 403 
#define NET_DVR_RTSP_ERROR_NO_URL 404 
#define NET_DVR_RTSP_ERROR_FORCE_STOP 406 
#define NET_DVR_RTSP_GETPORTFAILED 407 
#define NET_DVR_RTSP_DESCRIBERROR 410 
#define NET_DVR_RTSP_DESCRIBESENDTIMEOUT 411 
#define NET_DVR_RTSP_DESCRIBESENDERROR 412 
#define NET_DVR_RTSP_DESCRIBERECVTIMEOUT 413 
#define NET_DVR_RTSP_DESCRIBERECVDATALOST 414 
#define NET_DVR_RTSP_DESCRIBERECVERROR 415 
#define NET_DVR_RTSP_DESCRIBESERVERERR 416 
#define NET_DVR_RTSP_SETUPERROR 420 
#define NET_DVR_RTSP_SETUPSENDTIMEOUT 421 
#define NET_DVR_RTSP_SETUPSENDERROR 422 
#define NET_DVR_RTSP_SETUPRECVTIMEOUT 423 
#define NET_DVR_RTSP_SETUPRECVDATALOST 424 
#define NET_DVR_RTSP_SETUPRECVERROR 425 
#define NET_DVR_RTSP_OVER_MAX_CHAN 426 
#define NET_DVR_RTSP_SETUPSERVERERR 427 
#define NET_DVR_RTSP_PLAYERROR 430 
#define NET_DVR_RTSP_PLAYSENDTIMEOUT 431 
#define NET_DVR_RTSP_PLAYSENDERROR 432 
#define NET_DVR_RTSP_PLAYRECVTIMEOUT 433 
#define NET_DVR_RTSP_PLAYRECVDATALOST 434 
#define NET_DVR_RTSP_PLAYRECVERROR 435 
#define NET_DVR_RTSP_PLAYSERVERERR 436 
#define NET_DVR_RTSP_TEARDOWNERROR 440 
#define NET_DVR_RTSP_TEARDOWNSENDTIMEOUT 441 
#define NET_DVR_RTSP_TEARDOWNSENDERROR 442 
#define NET_DVR_RTSP_TEARDOWNRECVTIMEOUT 443 
#define NET_DVR_RTSP_TEARDOWNRECVDATALOST 444 
#define NET_DVR_RTSP_TEARDOWNRECVERROR 445 
#define NET_DVR_RTSP_TEARDOWNSERVERERR 446 
#define NET_PLAYM4_NOERROR 500 
#define NET_PLAYM4_PARA_OVER 501 
#define NET_PLAYM4_ORDER_ERROR 502 
#define NET_PLAYM4_TIMER_ERROR 503 
#define NET_PLAYM4_DEC_VIDEO_ERROR 504 
#define NET_PLAYM4_DEC_AUDIO_ERROR 505 
#define NET_PLAYM4_ALLOC_MEMORY_ERROR 506 
#define NET_PLAYM4_OPEN_FILE_ERROR 507 
#define NET_PLAYM4_CREATE_OBJ_ERROR 508 
#define NET_PLAYM4_CREATE_DDRAW_ERROR 509 
#define NET_PLAYM4_CREATE_OFFSCREEN_ERROR 510 
#define NET_PLAYM4_BUF_OVER 511 
#define NET_PLAYM4_CREATE_SOUND_ERROR 512 
#define NET_PLAYM4_SET_VOLUME_ERROR 513 
#define NET_PLAYM4_SUPPORT_FILE_ONLY 514 
#define NET_PLAYM4_SUPPORT_STREAM_ONLY 515 
#define NET_PLAYM4_SYS_NOT_SUPPORT 516 
#define NET_PLAYM4_FILEHEADER_UNKNOWN 517 
#define NET_PLAYM4_VERSION_INCORRECT 518 
#define NET_PALYM4_INIT_DECODER_ERROR 519 
#define NET_PLAYM4_CHECK_FILE_ERROR 520 
#define NET_PLAYM4_INIT_TIMER_ERROR 521 
#define NET_PLAYM4_BLT_ERROR 522 
#define NET_PLAYM4_UPDATE_ERROR 523 
#define NET_PLAYM4_OPEN_FILE_ERROR_MULTI 524 
#define NET_PLAYM4_OPEN_FILE_ERROR_VIDEO 525 
#define NET_PLAYM4_JPEG_COMPRESS_ERROR 526 
#define NET_PLAYM4_EXTRACT_NOT_SUPPORT 527 
#define NET_PLAYM4_EXTRACT_DATA_ERROR 528 
#define NET_CONVERT_ERROR_NOT_SUPPORT 581 
#define NET_AUDIOINTERCOM_OK 600 
#define NET_AUDIOINTECOM_ERR_NOTSUPORT 601
#define NET_AUDIOINTECOM_ERR_ALLOC_MEMERY 602
#define NET_AUDIOINTECOM_ERR_PARAMETER 603
#define NET_AUDIOINTECOM_ERR_CALL_ORDER 604
#define NET_AUDIOINTECOM_ERR_FIND_DEVICE 605
#define NET_AUDIOINTECOM_ERR_OPEN_DEVICE 606
#define NET_AUDIOINTECOM_ERR_NO_CONTEXT 607
#define NET_AUDIOINTECOM_ERR_NO_WAVFILE 608
#define NET_AUDIOINTECOM_ERR_INVALID_TYPE 609
#define NET_AUDIOINTECOM_ERR_ENCODE_FAIL 610
#define NET_AUDIOINTECOM_ERR_DECODE_FAIL 611
#define NET_AUDIOINTECOM_ERR_NO_PLAYBACK 612
#define NET_AUDIOINTECOM_ERR_DENOISE_FAIL 613
#define NET_AUDIOINTECOM_ERR_UNKOWN 619
#define NET_QOS_OK 700 
#define NET_QOS_ERROR (NET_QOS_OK - 1) 
#define NET_QOS_ERR_INVALID_ARGUMENTS (NET_QOS_OK - 2) 
#define NET_QOS_ERR_SESSION_NOT_FOUND (NET_QOS_OK - 3) 
#define NET_QOS_ERR_LIB_NOT_INITIALIZED (NET_QOS_OK - 4) 
#define NET_QOS_ERR_OUTOFMEM (NET_QOS_OK - 5) 
#define NET_QOS_ERR_PACKET_UNKNOW (NET_QOS_OK - 10) 
#define NET_QOS_ERR_PACKET_VERSION (NET_QOS_OK - 11) 
#define NET_QOS_ERR_PACKET_LENGTH (NET_QOS_OK - 12) 
#define NET_QOS_ERR_PACKET_TOO_BIG (NET_QOS_OK - 13) 
#define NET_QOS_ERR_SCHEDPARAMS_INVALID_BANDWIDTH (NET_QOS_OK - 20) 
#define NET_QOS_ERR_SCHEDPARAMS_BAD_FRACTION (NET_QOS_OK - 21) 
#define NET_QOS_ERR_SCHEDPARAMS_BAD_MINIMUM_INTERVAL (NET_QOS_OK - 22) 
#define NET_ERROR_TRUNK_LINE 711
#define NET_ERROR_MIXED_JOINT 712
#define NET_ERROR_DISPLAY_SWITCH 713
#define NET_ERROR_USED_BY_BIG_SCREEN 714
#define NET_ERROR_USE_OTHER_DEC_RESOURCE 715
#define NET_ERROR_DISP_MODE_SWITCH 716
#define NET_ERROR_SCENE_USING 717 
#define NET_ERR_NO_ENOUGH_DEC_RESOURCE 718
#define NET_ERR_NO_ENOUGH_FREE_SHOW_RESOURCE 719
#define NET_ERR_NO_ENOUGH_VIDEO_MEMORY 720
#define NET_ERR_MAX_VIDEO_NUM 721
#define NET_ERR_WIN_COVER_FREE_SHOW_AND_NORMAL 722
#define NET_ERR_FREE_SHOW_WIN_SPLIT 723
#define NET_ERR_INAPPROPRIATE_WIN_FREE_SHOW 724
#define NET_DVR_TRANSPARENT_WIN_NOT_SUPPORT_SPLIT 725
#define NET_DVR_SPLIT_WIN_NOT_SUPPORT_TRANSPARENT 726
#define NET_ERR_MAX_LOGO_NUM 727
#define NET_ERR_MAX_WIN_LOOP_NUM 728
#define NET_ERR_VIRTUAL_LED_VERTICAL_CROSS 729
#define NET_ERR_MAX_VIRTUAL_LED_HEIGHT 730
#define NET_ERR_VIRTUAL_LED_ILLEGAL_CHARACTER 731
#define NET_ERR_BASEMAP_NOT_EXIST 732
#define NET_ERR_LED_NOT_SUPPORT_VIRTUAL_LED 733
#define NET_ERR_LED_RESOLUTION_NOT_SUPPORT 734
#define NET_ERR_PLAN_OVERDUE 735
#define NET_ERR_PROCESSER_MAX_SCREEN_BLK 736
#define NET_ERR_WND_SIZE_TOO_SMALL 737
#define NET_ERR_WND_SPLIT_NOT_SUPPORT_ROAM 738
#define NET_ERR_OUTPUT_ONE_BOARD_ONE_WALL 739
#define NET_ERR_WND_CANNOT_LCD_AND_LED_OUTPUT 740
#define NET_ERR_MAX_OSD_NUM 741
#define NET_SDK_CANCEL_WND_TOPKEEP_ATTR_FIRST 751
#define NET_SDK_ERR_LED_SCREEN_CHECKING 752
#define NET_SDK_ERR_NOT_SUPPORT_SINGLE_RESOLUTION 753
#define NET_SDK_ERR_LED_RESOLUTION_MISMATCHED 754
#define NET_SDK_ERR_MAX_VIRTUAL_LED_WIDTH 755
#define NET_SDK_ERR_MAX_VIRTUAL_LED_IN_SCREEN 756
#define NET_SDK_ERR_MAX_VIRTUAL_LED_IN_WALL 757
#define NET_SDK_ERR_VIRTUAL_LED_OVERLAP 758
#define NET_SDK_ERR_VIRTUAL_LED_TYPE 759
#define NET_SDK_ERR_VIRTUAL_LED_COLOUR 760
#define NET_SDK_ERR_VIRTUAL_LED_MOVE_DIRECTION 761
#define NET_SDK_ERR_VIRTUAL_LED_MOVE_MODE 762
#define NET_SDK_ERR_VIRTUAL_LED_MOVE_SPEED 763
#define NET_SDK_ERR_VIRTUAL_LED_DISP_MODE 764
#define NET_SDK_ERR_VIRTUAL_LED_NO 765
#define NET_SDK_ERR_VIRTUAL_LED_PARA 766
#define NET_SDK_ERR_BASEMAP_POSITION 767
#define NET_SDK_ERR_BASEMAP_PICTURE_LEN 768
#define NET_SDK_ERR_BASEMAP_PICTURE_RESOLUTION 769
#define NET_SDK_ERR_BASEMAP_PICTURE_FORMAT 770
#define NET_SDK_ERR_MAX_VIRTUAL_LED_NUM 771
#define NET_SDK_ERR_MAX_TIME_VIRTUAL_LED_IN_WALL 772
#define NET_ERR_TERMINAL_BUSY 780 
#define NET_ERR_DATA_RETURNED_ILLEGAL 790
#define NET_DVR_FUNCTION_RESOURCE_USAGE_ERROR 791
#define NET_DVR_ERR_IMPORT_EMPTY_FILE 792 
#define NET_DVR_ERR_IMPORT_TOO_LARGE_FILE 793 
#define NET_DVR_ERR_BAD_IPV4_ADDRESS 794 
#define NET_DVR_ERR_BAD_NET_MASK 795 
#define NET_DVR_ERR_INVALID_NET_GATE_ADDRESS 796 
#define NET_DVR_ERR_BAD_DNS 797 
#define NET_DVR_ERR_ILLEGAL_PASSWORD 798 
#define NET_DVR_DEV_NET_OVERFLOW 800 
#define NET_DVR_STATUS_RECORDFILE_WRITING_NOT_LOCK 801
#define NET_DVR_STATUS_CANT_FORMAT_LITTLE_DISK 802
#define NET_SDK_ERR_REMOTE_DISCONNECT 803
#define NET_SDK_ERR_RD_ADD_RD 804
#define NET_SDK_ERR_BACKUP_DISK_EXCEPT 805
#define NET_SDK_ERR_RD_LIMIT 806
#define NET_SDK_ERR_ADDED_RD_IS_WD 807
#define NET_SDK_ERR_ADD_ORDER_WRONG 808
#define NET_SDK_ERR_WD_ADD_WD 809
#define NET_SDK_ERR_WD_SERVICE_EXCETP 810
#define NET_SDK_ERR_RD_SERVICE_EXCETP 811
#define NET_SDK_ERR_ADDED_WD_IS_RD 812
#define NET_SDK_ERR_PERFORMANCE_LIMIT 813
#define NET_SDK_ERR_ADDED_DEVICE_EXIST 814
#define NET_SDK_ERR_INQUEST_RESUMING 815
#define NET_SDK_ERR_RECORD_BACKUPING 816
#define NET_SDK_ERR_DISK_PLAYING 817
#define NET_SDK_ERR_INQUEST_STARTED 818
#define NET_SDK_ERR_LOCAL_OPERATING 819
#define NET_SDK_ERR_INQUEST_NOT_START 820
#define NET_SDK_ERR_CHAN_AUDIO_BIND 821 
#define NET_DVR_N_PLUS_ONE_MODE 822
#define NET_DVR_CLOUD_STORAGE_OPENED 823
#define NET_DVR_ERR_OPER_NOT_ALLOWED 824 
#define NET_DVR_ERR_NEED_RELOCATE 825 
#define NET_SDK_ERR_IR_PORT_ERROR 830
#define NET_SDK_ERR_IR_CMD_ERROR 831
#define NET_SDK_ERR_NOT_INQUESTING 832
#define NET_SDK_ERR_INQUEST_NOT_PAUSED 833
#define NET_DVR_CHECK_PASSWORD_MISTAKE_ERROR 834
#define NET_DVR_CHECK_PASSWORD_NULL_ERROR 835
#define NET_DVR_UNABLE_CALIB_ERROR 836 
#define NET_DVR_PLEASE_CALIB_ERROR 837 
#define NET_DVR_ERR_PANORAMIC_CAL_EMPTY 838
#define NET_DVR_ERR_CALIB_FAIL_PLEASEAGAIN 839
#define NET_DVR_ERR_DETECTION_LINE 840
#define NET_DVR_ERR_TURN_OFF_IMAGE_PARA 841
#define NET_DVR_EXCEED_FACE_IMAGES_ERROR 843 
#define NET_DVR_ANALYSIS_FACE_IMAGES_ERROR 844 
#define NET_ERR_ALARM_INPUT_OCCUPIED 845 
#define NET_DVR_FACELIB_DATABASE_ERROR 846 
#define NET_DVR_FACELIB_DATA_ERROR 847 
#define NET_DVR_FACE_DATA_ID_ERROR 848 
#define NET_DVR_FACELIB_ID_ERROR 849 
#define NET_DVR_EXCEED_FACE_LIBARY_ERROR 850 
#define NET_DVR_PIC_ANALYSIS_NO_TARGET_ERROR 851 
#define NET_DVR_SUBPIC_ANALYSIS_MODELING_ERROR 852 
#define NET_DVR_PIC_ANALYSIS_NO_RESOURCE_ERROR 853 
#define NET_DVR_ANALYSIS_ENGINES_NO_RESOURCE_ERROR 854
#define NET_DVR_ANALYSIS_ENGINES_USAGE_EXCEED_ERROR 855
#define NET_DVR_EXCEED_HUMANMISINFO_FILTER_ENABLED_ERROR 856 
#define NET_DVR_NAME_ERROR 857 
#define NET_DVR_NAME_EXIST_ERROR 858 
#define NET_DVR_FACELIB_PIC_IMPORTING_ERROR 859 
#define NET_DVR_ERR_CALIB_POSITION 860
#define NET_DVR_ERR_DELETE 861
#define NET_DVR_ERR_SCENE_ID 862
#define NET_DVR_ERR_CALIBING 863
#define NET_DVR_PIC_FORMAT_ERROR 864 
#define NET_DVR_PIC_RESOLUTION_INVALID_ERROR 865 
#define NET_DVR_PIC_SIZE_EXCEED_ERROR 866 
#define NET_DVR_PIC_ANALYSIS_TARGRT_NUM_EXCEED_ERROR 867 
#define NET_DVR_ANALYSIS_ENGINES_LOADING_ERROR 868
#define NET_DVR_ANALYSIS_ENGINES_ABNORMA_ERROR 869
#define NET_DVR_ANALYSIS_ENGINES_FACELIB_IMPORTING 870
#define NET_DVR_NO_DATA_FOR_MODELING_ERROR 871 
#define NET_DVR_FACE_DATA_MODELING_ERROR 872
#define NET_ERR_FACELIBDATA_OVERLIMIT 873 
#define NET_DVR_ANALYSIS_ENGINES_ASSOCIATED_CHANNEL 874
#define NET_DVR_ERR_CUSTOMID_LEN 875
#define NET_DVR_ERR_CUSTOMFACELIBID_REPEAT 876
#define NET_DVR_ERR_CUSTOMHUMANID_REPEAT 877
#define NET_DVR_ERR_URL_DOWNLOAD_FAIL 878
#define NET_DVR_ERR_URL_DOWNLOAD_NOTSTART 879
#define NET_DVR_CFG_FILE_SECRETKEY_ERROR 880 
#define NET_DVR_WDR_NOTDISABLE_ERROR 881 
#define NET_DVR_HLC_NOTDISABLE_ERROR 882 
#define NET_DVR_THERMOMETRY_REGION_OVERSTEP_ERROR 883 
#define NET_DVR_ERR_MODELING_DEVICEINTERNAL 884
#define NET_DVR_ERR_MODELING_FACE 885
#define NET_DVR_ERR_MODELING_FACEGRADING 886
#define NET_DVR_ERR_MODELING_FACEGFEATURE 887
#define NET_DVR_ERR_MODELING_FACEGANALYZING 888
#define NET_DVR_ERR_STREAM_LIMIT 889
#define NET_DVR_ERR_STREAM_DESCRIPTION 890
#define NET_DVR_ERR_STREAM_DELETE 891
#define NET_DVR_ERR_CUSTOMSTREAM_NAME 892
#define NET_DVR_ERR_CUSTOMSTREAM_NOTEXISTED 893
#define NET_DVR_ERR_TOO_SHORT_CALIBRATING_TIME 894
#define NET_DVR_ERR_AUTO_CALIBRATE_FAILED 895
#define NET_DVR_ERR_VERIFICATION_FAILED 896
#define NET_DVR_NO_TEMP_SENSOR_ERROR 897 
#define NET_DVR_PUPIL_DISTANCE_OVERSIZE_ERROR 898 
#define NET_DVR_ERR_UNOPENED_FACE_SNAP 899
#define NET_ERR_CUT_INPUTSTREAM_OVERLIMIT 900
#define NET_ERR_WINCHAN_IDX 901 
#define NET_ERR_WIN_LAYER 902 
#define NET_ERR_WIN_BLK_NUM 903 
#define NET_ERR_OUTPUT_RESOLUTION 904 
#define NET_ERR_LAYOUT 905 
#define NET_ERR_INPUT_RESOLUTION 906
#define NET_ERR_SUBDEVICE_OFFLINE 907
#define NET_ERR_NO_DECODE_CHAN 908
#define NET_ERR_MAX_WINDOW_ABILITY 909
#define NET_ERR_ORDER_ERROR 910
#define NET_ERR_PLAYING_PLAN 911
#define NET_ERR_DECODER_USED 912
#define NET_ERR_OUTPUT_BOARD_DATA_OVERFLOW 913 
#define NET_ERR_SAME_USER_NAME 914 
#define NET_ERR_INVALID_USER_NAME 915 
#define NET_ERR_MATRIX_USING 916 
#define NET_ERR_DIFFERENT_CHAN_TYPE 917 
#define NET_ERR_INPUT_CHAN_BINDED 918 
#define NET_ERR_BINDED_OUTPUT_CHAN_OVERFLOW 919 
#define NET_ERR_MAX_SIGNAL_NUM 920 
#define NET_ERR_INPUT_CHAN_USING 921 
#define NET_ERR_MANAGER_LOGON 922 
#define NET_ERR_USERALREADY_LOGON 923 
#define NET_ERR_LAYOUT_INIT 924 
#define NET_ERR_BASEMAP_SIZE_NOT_MATCH 925 
#define NET_ERR_WINDOW_OPERATING 926 
#define NET_ERR_SIGNAL_UPLIMIT 927
#define NET_ERR_SIGNAL_MAX_ENLARGE_TIMES 928
#define NET_ERR_ONE_SIGNAL_MULTI_CROSS 929
#define NET_ERR_ULTRA_HD_SIGNAL_MULTI_WIN 930
#define NET_ERR_MAX_VIRTUAL_LED_WIDTH 931
#define NET_ERR_MAX_VIRTUAL_LED_WORD_LEN 932
#define NET_ERR_SINGLE_OUTPUTPARAM_CONFIG 933
#define NET_ERR_MULTI_WIN_BE_COVER 934
#define NET_ERR_WIN_NOT_EXIST 935
#define NET_ERR_WIN_MAX_SIGNALSOURCE 936
#define NET_ERR_MULTI_WIN_MOVE 937
#define NET_ERR_MULTI_WIN_YPBPR_SDI 938
#define NET_ERR_DIFF_TYPE_OUTPUT_MIXUSE 939 
#define NET_ERR_SPLIT_WIN_CROSS 940
#define NET_ERR_SPLIT_WIN_NOT_FULL_SCREEN 941 
#define NET_ERR_SPLIT_WIN_MANY_WIN 942 
#define NET_ERR_WINDOW_SIZE_OVERLIMIT 943 
#define NET_ERR_INPUTSTREAM_ALREADY_JOINT 944 
#define NET_ERR_JOINT_INPUTSTREAM_OVERLIMIT 945 
#define NET_ERR_LED_RESOLUTION 946 
#define NET_ERR_JOINT_SCALE_OVERLIMIT 947 
#define NET_ERR_INPUTSTREAM_ALREADY_DECODE 948 
#define NET_ERR_INPUTSTREAM_NOTSUPPORT_CAPTURE 949 
#define NET_ERR_JOINT_NOTSUPPORT_SPLITWIN 950 
#define NET_ERR_MAX_WIN_OVERLAP 951
#define NET_ERR_STREAMID_CHAN_BOTH_VALID 952
#define NET_ERR_NO_ZERO_CHAN 953
#define NEED_RECONNECT 955
#define NET_ERR_NO_STREAM_ID 956
#define NET_DVR_TRANS_NOT_START 957
#define NET_ERR_MAXNUM_STREAM_ID 958
#define NET_ERR_WORKMODE_MISMATCH 959
#define NET_ERR_MODE_IS_USING 960
#define NET_ERR_DEV_PROGRESSING 961
#define NET_ERR_PASSIVE_TRANSCODING 962
#define NET_ERR_RING_NOT_CONFIGURE 964
#define NET_ERR_CLOSE_WINDOW_FIRST 971 
#define NET_ERR_SPLIT_WINDOW_NUM_NOT_SUPPORT 972 
#define NET_ERR_REACH_ONE_SIGNAL_PREVIEW_MAX_LINK 973 
#define NET_ERR_ONLY_SPLITWND_SUPPORT_AMPLIFICATION 974 
#define NET_DVR_ERR_WINDOW_SIZE_PLACE 975 
#define NET_DVR_ERR_RGIONAL_RESTRICTIONS 976 
#define NET_ERR_WNDZOOM_NOT_SUPPORT 977 
#define NET_ERR_LED_SCREEN_SIZE 978 
#define NET_ERR_OPEN_WIN_IN_ERROR_AREA 979 
#define NET_ERR_TITLE_WIN_NOT_SUPPORT_MOVE 980 
#define NET_ERR_TITLE_WIN_NOT_SUPPORT_COVER 981 
#define NET_ERR_TITLE_WIN_NOT_SUPPORT_SPLIT 982 
#define NET_DVR_LED_WINDOWS_ALREADY_CLOSED 983 
#define NET_DVR_ERR_CLOSE_WINDOWS 984 
#define NET_DVR_ERR_MATRIX_LOOP_ABILITY 985
#define NET_DVR_ERR_MATRIX_LOOP_TIME 986
#define NET_DVR_ERR_LINKED_OUT_ABILITY 987
#define NET_ERR_REACH_SCENE_MAX_NUM 988
#define NET_ERR_SCENE_MEM_NOT_ENOUGH 989
#define NET_ERR_RESOLUTION_NOT_SUPPORT_ODD_VOUT 990 
#define NET_ERR_RESOLUTION_NOT_SUPPORT_EVEN_VOUT 991 
#define NET_DVR_CANCEL_WND_OPENKEEP_ATTR_FIRST 992 
#define NET_SDK_LED_MODE_NOT_SUPPORT_SPLIT 993 
#define NET_ERR_VOICETALK_ONLY_SUPPORT_ONE_TALK 994 
#define NET_ERR_WND_POSITION_ADJUSTED 995 
#define NET_SDK_ERR_STARTTIME_CANNOT_LESSTHAN_CURTIME 996 
#define NET_SDK_ERR_NEED_ADJUST_PLAN 997 
#define NET_ERR_UnitConfig_Failed 998
#define XML_ABILITY_NOTSUPPORT 1000 
#define XML_ANALYZE_NOENOUGH_BUF 1001 
#define XML_ANALYZE_FIND_LOCALXML_ERROR 1002 
#define XML_ANALYZE_LOAD_LOCALXML_ERROR 1003 
#define XML_NANLYZE_DVR_DATA_FORMAT_ERROR 1004 
#define XML_ANALYZE_TYPE_ERROR 1005 
#define XML_ANALYZE_XML_NODE_ERROR 1006 
#define XML_INPUT_PARAM_ERROR 1007 
#define NET_DVR_ERR_RETURNED_XML_DATA 1008 
#define NET_ERR_LEDAREA_EXIST_WINDOW 1051
#define NET_ERR_AUDIO_EXIST 1052
#define NET_ERR_MATERIAL_NAME_EXIST 1053
#define NET_ERR_MATERIAL_APPROVE_STATE 1054
#define NET_ERR_DATAHD_SIGNAL_FORMAT 1055
#define NET_ERR_SCENE_SWITCHING 1056
#define NER_ERR_DATA_TRANSFER 1057
#define NET_ERR_DATA_RESTORE 1058
#define NET_ERR_CHECK_NOT_ENABLE 1059 
#define NET_ERR_AREA_OFFLINE 1060 
#define NET_ERR_SCREEN_TYPE 1061
#define NET_ERR_MIN_OPERATE_UNIT 1062
#define NET_ERR_MAINHD_NOT_BACKUP 1063
#define NET_ERR_ONE_BACKUP_HD 1064
#define NET_ERR_CONNECT_SUB_SYSTEM_ABNORMAL 1065 
#define NET_ERR_SERIAL_PORT_VEST 1066 
#define NET_ERR_WHITE_LIST_FULL 1067 
#define NET_ERR_NOT_MATCH_SOURCE 1068 
#define NET_ERR_CLOCK_VIRTUAL_LED_FULL 1069 
#define NET_ERR_MAX_WIN_SIGNAL_LOOP_NUM 1070 
#define NET_ERR_RESOLUTION_NO_MATCH_FRAME 1071 
#define NET_ERR_NOT_UPDATE_LOW_VERSION 1072 
#define NET_ERR_NO_CUSTOM_TO_UPDATE 1073 
#define NET_ERR_CHAN_RESOLUTION_NOT_SUPPORT_SPLIT 1074 
#define NET_ERR_HIGH_DEFINITION_NOT_SUPPORT_SPLIT 1075 
#define NET_ERR_MIRROR_IMAGE_BY_VIDEO_WALL 1076 
#define NET_ERR_MAX_OSD_FONT_SIZE 1077 
#define NET_ERR_HIGH_DEFINITION_NOT_SUPPORT_VIDEO_SET 1078 
#define NET_ERR_TILE_MODE_NOT_SUPPORT_JOINT 1079 
#define NET_ERR_ADD_AUDIO_MATRIX_FAILED 1080 
#define NET_ERR_ONE_VIRTUAL_LED_AREA_BIND_ONE_AUDIO_AREA 1081 
#define NET_ERR_NAT_NOT_MODIFY_SERVER_NETWORK_PARAM 1082 
#define NET_ERR_ORIGINAL_CHECH_DATA_ERROR 1083 
#define NET_ERR_INPUT_BOARD_SPLICED_IN_DIFFERENT_NETWORKAREAS 1084 
#define NET_ERR_SPLICINGSOURCE_ONWALL_IN_DIFFERENT_NETWORKAREAS 1085 
#define NET_ERR_ONWALL_OUTPUTBOARD_MODIFY_NETWORKAREAS 1086 
#define NET_ERR_LAN_AND_WAN_CANNOT_SAME_NET_SEGMENT 1087 
#define NET_ERR_USERNAME_REPETITIVE 1088 
#define NET_ERR_ASSOCIATED_SAMEWALL_IN_DIFFERENT_NETWORKAREAS 1089 
#define NET_ERR_BASEMAP_ROAM_IN_LED_AREA 1090 
#define NET_ERR_VIRTUAL_LED_NOT_SUPPORT_4K_OUTPUT 1091 
#define NET_ERR_BASEMAP_NOT_SUPPORT_4K_OUTPUT 1092 
#define NET_ERR_MIN_BLOCK_IN_VIRTUAL_LED_AND_OUTPUT 1093 
#define NET_ERR_485FIlE_VERSION_INVALID 1094 
#define NET_ERR_485FIlE_CHECK_ERROR 1095 
#define NET_ERR_485FIlE_ABNORMAL_SIZE 1096 
#define NET_ERR_MODIFY_SUBBOARD_NETCFG_IN_NAT 1097 
#define NET_ERR_OSD_CONTENT_WITH_ILLEGAL_CHARACTERS 1098 
#define NET_ERR_NON_SLAVE_DEVICE_INSERT_SYNC_LINE 1099 
#define NET_ERR_PLT_USERID 1100
#define NET_ERR_TRANS_CHAN_START 1101
#define NET_ERR_DEV_UPGRADING 1102
#define NET_ERR_MISMATCH_UPGRADE_PACK_TYPE 1103
#define NET_ERR_DEV_FORMATTING 1104
#define NET_ERR_MISMATCH_UPGRADE_PACK_VERSION 1105
#define NET_ERR_PT_LOCKED 1106
#define NET_DVR_LOGO_OVERLAY_WITHOUT_UPLOAD_PIC 1110
#define NET_DVR_ERR_ILLEGAL_VERIFICATION_CODE 1111
#define NET_DVR_ERR_LACK_VERIFICATION_CODE 1112
#define NET_DVR_ERR_FORBIDDEN_IP 1113
#define NET_DVR_ERR_UNLOCKPTZ 1114
#define NET_DVR_ERR_COUNTAREA_LARGE 1116
#define NET_DVR_ERR_LABEL_ID_EXCEED 1117
#define NET_DVR_ERR_LABEL_TYPE 1118
#define NET_DVR_ERR_LABEL_FULL 1119
#define NET_DVR_ERR_LABEL_DISABLED 1120
#define NET_DVR_ERR_DOME_PT_TRANS_TO_DOME_XY 1121
#define NET_DVR_ERR_DOME_PT_TRANS_TO_PANORAMA_XY 1122
#define NET_DVR_ERR_PANORAMA_XY_TRANS_TO_DOME_PT 1123
#define NET_DVR_ERR_SCENE_DUR_TIME_LESS_THAN_INTERV_TIME 1124
#define NET_DVR_ERR_HTTP_BKN_EXCEED_ONE 1125
#define NET_DVR_ERR_DELETING_FAILED_TURN_OFF_HTTPS_ESDK_WEBSOCKETS_FIRST 1126
#define NET_DVR_ERR_DELETING_FAILED_TURN_OFF_HTTPS_ESDK_FIRST 1127
#define NET_DVR_ERR_PTZ_OCCUPIED_PRIORITY 1128
#define NET_DVR_ERR_INCORRECT_VIDEOAUDIO_ID 1129
#define NET_DVR_ERR_REPETITIONTIME_OVER_MAXIMUM 1130
#define NET_DVR_ERR_FORMATTING_FAILED 1131
#define NET_DVR_ERR_ENCRYPTED_FORMATTING_FAILED 1132
#define NET_DVR_ERR_WRONG_PASSWORD 1133
#define NET_DVR_ERR_EXPOSURE_SYNC 1134
#define NET_ERR_SEARCHING_MODULE 1201
#define NET_ERR_REGISTERING_MODULE 1202
#define NET_ERR_GETTING_ZONES 1203
#define NET_ERR_GETTING_TRIGGERS 1204
#define NET_ERR_ARMED_STATUS 1205
#define NET_ERR_PROGRAM_MODE_STATUS 1206
#define NET_ERR_WALK_TEST_MODE_STATUS 1207
#define NET_ERR_BYPASS_STATUS 1208
#define NET_ERR_DISABLED_MODULE_STATUS 1209
#define NET_ERR_NOT_SUPPORT_OPERATE_ZONE 1210
#define NET_ERR_NOT_SUPPORT_MOD_MODULE_ADDR 1211
#define NET_ERR_UNREGISTERED_MODULE 1212
#define NET_ERR_PUBLIC_SUBSYSTEM_ASSOCIATE_SELF 1213
#define NET_ERR_EXCEEDS_ASSOCIATE_SUBSYSTEM_NUM 1214
#define NET_ERR_BE_ASSOCIATED_BY_PUBLIC_SUBSYSTEM 1215
#define NET_ERR_ZONE_FAULT_STATUS 1216
#define NET_ERR_SAME_EVENT_TYPE 1217
#define NET_ERR_ZONE_ALARM_STATUS 1218
#define NET_ERR_EXPANSION_BUS_SHORT_CIRCUIT 1219
#define NET_ERR_PWD_CONFLICT 1220 
#define NET_ERR_DETECTOR_GISTERED_BY_OTHER_ZONE 1221 
#define NET_ERR_DETECTOR_GISTERED_BY_OTHER_PU 1222 
#define NET_ERR_DETECTOR_DISCONNECT 1223 
#define NET_ERR_CALL_BUSY 1224 
#define NET_DVR_ERR_ZONE_TAMPER_STAUS 1225 
#define NET_DVR_ERR_WIRELESS_DEV_REGISTER 1226 
#define NET_DVR_ERR_WIRELESS_DEV_ADDED 1227 
#define NET_DVR_ERR_WIRELESS_DEV_OFFLINE 1228 
#define NET_DVR_ERR_WIRELESS_DEV_TAMPER_STATUS 1229 
#define NET_DVR_ERR_GPRS_PHONE_CONFLICT 1230 
#define NET_ERR_GET_ALL_RETURN_OVER 1300 
#define NET_ERR_RESOURCE_USING 1301 
#define NET_ERR_FILE_SIZE_OVERLIMIT 1302 
#define NET_ERR_MATERIAL_NAME 1303 
#define NET_ERR_MATERIAL_NAME_LEN 1304 
#define NET_ERR_MATERIAL_REMARK 1305 
#define NET_ERR_MATERIAL_REMARK_LEN 1306 
#define NET_ERR_MATERIAL_SHARE_PROPERTY 1307 
#define NET_ERR_UNSUPPORT_MATERIAL_TYPE 1308 
#define NET_ERR_MATERIAL_NOT_EXIST 1309 
#define NET_ERR_READ_FROM_DISK 1310 
#define NET_ERR_WRITE_TO_DISK 1311 
#define NET_ERR_WRITE_DATA_BASE 1312 
#define NET_ERR_NO_APPROVED_NOT_EXPORT 1313 
#define NET_ERR_MATERIAL_EXCEPTION 1314 
#define NET_ERR_NO_MISINFO 1315 
#define NET_ERR_MAX_SCREEN_CTRL_NUM 1351 
#define NET_ERR_FILE_NOT_EXIST 1352 
#define NET_ERR_THUMBNAIL_NOT_EXIST 1353 
#define NET_ERR_DEV_OPEN_FILE_FAIL 1354 
#define NET_ERR_SERVER_READ_FILE_FAIL 1355 
#define NET_ERR_FILE_SIZE 1356 
#define NET_ERR_FILE_NAME 1357 
#define NET_ERR_BROADCAST_BUSY 1358 
#define NET_DVR_ERR_LANENUM_EXCEED 1400 
#define NET_DVR_ERR_PRAREA_EXCEED 1401 
#define NET_DVR_ERR_LIGHT_PARAM 1402 
#define NET_DVR_ERR_LANE_LINE_INVALID 1403 
#define NET_DVR_ERR_STOP_LINE_INVALID 1404 
#define NET_DVR_ERR_LEFTORRIGHT_LINE_INVALID 1405 
#define NET_DVR_ERR_LANE_NO_REPEAT 1406 
#define NET_DVR_ERR_PRAREA_INVALID 1407 
#define NET_DVR_ERR_LIGHT_NUM_EXCEED 1408 
#define NET_DVR_ERR_SUBLIGHT_NUM_INVALID 1409 
#define NET_DVR_ERR_LIGHT_AREASIZE_INVALID 1410 
#define NET_DVR_ERR_LIGHT_COLOR_INVALID 1411 
#define NET_DVR_ERR_LIGHT_DIRECTION_INVALID 1412 
#define NET_DVR_ERR_LACK_IOABLITY 1413 
#define NET_DVR_ERR_FTP_PORT 1414 
#define NET_DVR_ERR_FTP_CATALOGUE 1415 
#define NET_DVR_ERR_FTP_UPLOAD_TYPE 1416 
#define NET_DVR_ERR_FLASH_PARAM_WRITE 1417 
#define NET_DVR_ERR_FLASH_PARAM_READ 1418 
#define NET_DVR_ERR_PICNAME_DELIMITER 1419 
#define NET_DVR_ERR_PICNAME_ITEM 1420 
#define NET_DVR_ERR_PLATE_RECOGNIZE_TYPE 1421 
#define NET_DVR_ERR_CAPTURE_TIMES 1422 
#define NET_DVR_ERR_LOOP_DISTANCE 1423 
#define NET_DVR_ERR_LOOP_INPUT_STATUS 1424 
#define NET_DVR_ERR_RELATE_IO_CONFLICT 1425 
#define NET_DVR_ERR_INTERVAL_TIME 1426 
#define NET_DVR_ERR_SIGN_SPEED 1427 
#define NET_DVR_ERR_PIC_FLIP 1428 
#define NET_DVR_ERR_RELATE_LANE_NUMBER 1429 
#define NET_DVR_ERR_TRIGGER_MODE 1430 
#define NET_DVR_ERR_DELAY_TIME 1431 
#define NET_DVR_ERR_EXCEED_RS485_COUNT 1432 
#define NET_DVR_ERR_RADAR_TYPE 1433 
#define NET_DVR_ERR_RADAR_ANGLE 1434 
#define NET_DVR_ERR_RADAR_SPEED_VALID_TIME 1435 
#define NET_DVR_ERR_RADAR_LINE_CORRECT 1436 
#define NET_DVR_ERR_RADAR_CONST_CORRECT 1437 
#define NET_DVR_ERR_RECORD_PARAM 1438 
#define NET_DVR_ERR_LIGHT_WITHOUT_COLOR_AND_DIRECTION 1439 
#define NET_DVR_ERR_LIGHT_WITHOUT_DETECTION_REGION 1440 
#define NET_DVR_ERR_RECOGNIZE_PROVINCE_PARAM 1441 
#define NET_DVR_ERR_SPEED_TIMEOUT 1442 
#define NET_DVR_ERR_NTP_TIMEZONE 1443 
#define NET_DVR_ERR_NTP_INTERVAL_TIME 1444 
#define NET_DVR_ERR_NETWORK_CARD_NUM 1445 
#define NET_DVR_ERR_DEFAULT_ROUTE 1446 
#define NET_DVR_ERR_BONDING_WORK_MODE 1447 
#define NET_DVR_ERR_SLAVE_CARD 1448 
#define NET_DVR_ERR_PRIMARY_CARD 1449 
#define NET_DVR_ERR_DHCP_PPOE_WORK 1450 
#define NET_DVR_ERR_NET_INTERFACE 1451 
#define NET_DVR_ERR_MTU 1452 
#define NET_DVR_ERR_NETMASK 1453 
#define NET_DVR_ERR_IP_INVALID 1454 
#define NET_DVR_ERR_MULTICAST_IP_INVALID 1455 
#define NET_DVR_ERR_GATEWAY_INVALID 1456 
#define NET_DVR_ERR_DNS_INVALID 1457 
#define NET_DVR_ERR_ALARMHOST_IP_INVALID 1458 
#define NET_DVR_ERR_IP_CONFLICT 1459 
#define NET_DVR_ERR_NETWORK_SEGMENT 1460 
#define NET_DVR_ERR_NETPORT 1461 
#define NET_DVR_ERR_PPPOE_NOSUPPORT 1462 
#define NET_DVR_ERR_DOMAINNAME_NOSUPPORT 1463 
#define NET_DVR_ERR_NO_SPEED 1464 
#define NET_DVR_ERR_IOSTATUS_INVALID 1465 
#define NET_DVR_ERR_BURST_INTERVAL_INVALID 1466 
#define NET_DVR_ERR_RESERVE_MODE 1467 
#define NET_DVR_ERR_LANE_NO 1468 
#define NET_DVR_ERR_COIL_AREA_TYPE 1469 
#define NET_DVR_ERR_TRIGGER_AREA_PARAM 1470 
#define NET_DVR_ERR_SPEED_LIMIT_PARAM 1471 
#define NET_DVR_ERR_LANE_PROTOCOL_TYPE 1472 
#define NET_DVR_ERR_INTERVAL_TYPE 1473 
#define NET_DVR_ERR_INTERVAL_DISTANCE 1474 
#define NET_DVR_ERR_RS485_ASSOCIATE_DEVTYPE 1475 
#define NET_DVR_ERR_RS485_ASSOCIATE_LANENO 1476 
#define NET_DVR_ERR_LANENO_ASSOCIATE_MULTIRS485 1477 
#define NET_DVR_ERR_LIGHT_DETECTION_REGION 1478 
#define NET_DVR_ERR_DN2D_NOSUPPORT 1479 
#define NET_DVR_ERR_IRISMODE_NOSUPPORT 1480 
#define NET_DVR_ERR_WB_NOSUPPORT 1481 
#define NET_DVR_ERR_IO_EFFECTIVENESS 1482 
#define NET_DVR_ERR_LIGHTNO_MAX 1483 
#define NET_DVR_ERR_LIGHTNO_CONFLICT 1484 
#define NET_DVR_ERR_CANCEL_LINE 1485 
#define NET_DVR_ERR_STOP_LINE 1486 
#define NET_DVR_ERR_RUSH_REDLIGHT_LINE 1487 
#define NET_DVR_ERR_IOOUTNO_MAX 1488 
#define NET_DVR_ERR_IOOUTNO_AHEADTIME_MAX 1489 
#define NET_DVR_ERR_IOOUTNO_IOWORKTIME 1490 
#define NET_DVR_ERR_IOOUTNO_FREQMULTI 1491 
#define NET_DVR_ERR_IOOUTNO_DUTYRATE 1492 
#define NET_DVR_ERR_VIDEO_WITH_EXPOSURE 1493 
#define NET_DVR_ERR_PLATE_BRIGHTNESS_WITHOUT_FLASHDET 1494 
#define NET_DVR_ERR_RECOGNIZE_TYPE_PARAM 1495
#define NET_DVR_ERR_PALTE_RECOGNIZE_AREA_PARAM 1496
#define NET_DVR_ERR_PORT_CONFLICT 1497
#define NET_DVR_ERR_LOOP_IP 1498
#define NET_DVR_ERR_DRIVELINE_SENSITIVE 1499
#define NET_ERR_VQD_TIME_CONFLICT 1500
#define NET_ERR_VQD_PLAN_NO_EXIST 1501
#define NET_ERR_VQD_CHAN_NO_EXIST 1502
#define NET_ERR_VQD_CHAN_MAX 1503
#define NET_ERR_VQD_TASK_MAX 1504
#define NET_SDK_GET_INPUTSTREAMCFG 1551 
#define NET_SDK_AUDIO_SWITCH_CONTROL 1552
#define NET_SDK_GET_VIDEOWALLDISPLAYNO 1553 
#define NET_SDK_GET_ALLSUBSYSTEM_BASIC_INFO 1554
#define NET_SDK_SET_ALLSUBSYSTEM_BASIC_INFO 1555
#define NET_SDK_GET_AUDIO_INFO 1556
#define NET_SDK_GET_MATRIX_STATUS_V50 1557
#define NET_SDK_DELETE_MONITOR_INFO 1558
#define NET_SDK_DELETE_CAMERA_INFO 1559
#define NET_DVR_ERR_EXCEED_MAX_CAPTURE_TIMES 1600
#define NET_DVR_ERR_REDAR_TYPE_CONFLICT 1601
#define NET_DVR_ERR_LICENSE_PLATE_NULL 1602
#define NET_DVR_ERR_WRITE_DATABASE 1603
#define NET_DVR_ERR_LICENSE_EFFECTIVE_TIME 1604
#define NET_DVR_ERR_PRERECORDED_STARTTIME_LONG 1605
#define NET_DVR_ERR_TRIGGER_RULE_LINE 1606
#define NET_DVR_ERR_LEFTRIGHT_TRIGGERLINE_NOTVERTICAL 1607
#define NET_DVR_ERR_FLASH_LAMP_MODE 1608
#define NET_DVR_ERR_ILLEGAL_SNAPSHOT_NUM 1609
#define NET_DVR_ERR_ILLEGAL_DETECTION_TYPE 1610
#define NET_DVR_ERR_POSITIVEBACK_TRIGGERLINE_HIGH 1611
#define NET_DVR_ERR_MIXEDMODE_CAPTYPE_ALLTARGETS 1612
#define NET_DVR_ERR_CARSIGNSPEED_GREATERTHAN_LIMITSPEED 1613
#define NET_DVR_ERR_BIGCARSIGNSPEED_GREATERTHAN_LIMITSPEED 1614
#define NET_DVR_ERR_BIGCARSIGNSPEED_GREATERTHAN_CARSIGNSPEED 1615
#define NET_DVR_ERR_BIGCARLIMITSPEED_GREATERTHAN_CARLIMITSPEED 1616
#define NET_DVR_ERR_BIGCARLOWSPEEDLIMIT_GREATERTHAN_CARLOWSPEEDLIMIT 1617
#define NET_DVR_ERR_CARLIMITSPEED_GREATERTHAN_EXCEPHIGHSPEED 1618
#define NET_DVR_ERR_BIGCARLIMITSPEED_GREATERTHAN_EXCEPHIGHSPEED 1619
#define NET_DVR_ERR_STOPLINE_MORETHAN_TRIGGERLINE 1620
#define NET_DVR_ERR_YELLOWLIGHTTIME_INVALID 1621
#define NET_DVR_ERR_TRIGGERLINE1_FOR_NOT_YIELD_TO_PEDESTRIAN_CANNOT_EXCEED_TRIGGERLINE2 1622
#define NET_DVR_ERR_TRIGGERLINE2_FOR_NOT_YIELD_TO_PEDESTRIAN_CANNOT_EXCEED_TRIGGERLINE1 1623
#define NET_ERR_TIME_OVERLAP 1900
#define NET_ERR_HOLIDAY_PLAN_OVERLAP 1901
#define NET_ERR_CARDNO_NOT_SORT 1902
#define NET_ERR_CARDNO_NOT_EXIST 1903
#define NET_ERR_ILLEGAL_CARDNO 1904
#define NET_ERR_ZONE_ALARM 1905
#define NET_ERR_ZONE_OPERATION_NOT_SUPPORT 1906
#define NET_ERR_INTERLOCK_ANTI_CONFLICT 1907
#define NET_ERR_DEVICE_CARD_FULL 1908
#define NET_ERR_HOLIDAY_GROUP_DOWNLOAD 1909
#define NET_ERR_LOCAL_CONTROL_OFF 1910
#define NET_ERR_LOCAL_CONTROL_DISADD 1911
#define NET_ERR_LOCAL_CONTROL_HASADD 1912
#define NET_ERR_LOCAL_CONTROL_DOORNO_CONFLICT 1913
#define NET_ERR_LOCAL_CONTROL_COMMUNICATION_FAIL 1914
#define NET_ERR_OPERAND_INEXISTENCE 1915
#define NET_ERR_LOCAL_CONTROL_OVER_LIMIT 1916
#define NET_ERR_DOOR_OVER_LIMIT 1917
#define NET_ERR_ALARM_OVER_LIMIT 1918
#define NET_ERR_LOCAL_CONTROL_ADDRESS_INCONFORMITY_TYPE 1919
#define NET_ERR_NOT_SUPPORT_ONE_MORE_CARD 1920
#define NET_ERR_DELETE_NO_EXISTENCE_FACE 1921
#define NET_ERR_DOOR_SPECIAL_PASSWORD_REPEAT 1922
#define NET_ERR_AUTH_CODE_REPEAT 1923
#define NET_ERR_DEPLOY_EXCEED_MAX 1924
#define NET_ERR_NOT_SUPPORT_DEL_FP_BY_ID 1925
#define NET_ERR_TIME_RANGE 1926
#define NET_ERR_CAPTURE_TIMEOUT 1927
#define NET_ERR_LOW_SCORE 1928
#define NET_ERR_OFFLINE_CAPTURING 1929
#define NET_DVR_ERR_OUTDOOR_COMMUNICATION 1950
#define NET_DVR_ERR_ROOMNO_UNDEFINED 1951
#define NET_DVR_ERR_NO_CALLING 1952
#define NET_DVR_ERR_RINGING 1953
#define NET_DVR_ERR_IS_CALLING_NOW 1954
#define NET_DVR_ERR_LOCK_PASSWORD_WRONG 1955
#define NET_DVR_ERR_CONTROL_LOCK_FAILURE 1956
#define NET_DVR_ERR_CONTROL_LOCK_OVERTIME 1957
#define NET_DVR_ERR_LOCK_DEVICE_BUSY 1958
#define NET_DVR_ERR_UNOPEN_REMOTE_LOCK_FUNCTION 1959
#define NET_DVR_ERR_FILE_NOT_COMPLETE 2100 
#define NET_DVR_ERR_IPC_EXIST 2101 
#define NET_DVR_ERR_ADD_IPC 2102 
#define NET_DVR_ERR_OUT_OF_RES 2103 
#define NET_DVR_ERR_CONFLICT_TO_LOCALIP 2104 
#define NET_DVR_ERR_IP_SET 2105 
#define NET_DVR_ERR_PORT_SET 2106 
#define NET_ERR_WAN_NOTSUPPORT 2107 
#define NET_ERR_MUTEX_FUNCTION 2108 
#define NET_ERR_QUESTION_CONFIGNUM 2109 
#define NET_ERR_FACECHAN_NORESOURCE 2110 
#define NET_ERR_DATA_CALLBACK 2111 
#define NET_ERR_ATM_VCA_CHAN_IS_RELATED 2112 
#define NET_ERR_ATM_VCA_CHAN_IS_OVERLAPED 2113 
#define NET_ERR_FACE_CHAN_UNOVERLAP_EACH_OTHER 2114 
#define NET_ERR_ACHIEVE_MAX_CHANNLE_LIMIT 2115 
#define NET_DVR_SMD_ENCODING_NORESOURSE 2116 
#define NET_DVR_SMD_DECODING_NORESOURSE 2117 
#define NET_DVR_FACELIB_DATA_PROCESSING 2118 
#define NET_DVR_ERR_LARGE_TIME_DIFFRENCE 2119 
#define NET_DVR_NO_SUPPORT_WITH_PLAYBACK 2120 
#define NET_DVR_CHANNEL_NO_SUPPORT_WITH_SMD 2121 
#define NET_DVR_CHANNEL_NO_SUPPORT_WITH_FD 2122 
#define NET_DVR_ILLEGAL_PHONE_NUMBER 2123 
#define NET_DVR_ILLEGAL_CERITIFICATE_NUMBER 2124 
#define NET_DVR_ERR_CHANNEL_RESOLUTION_NO_SUPPORT 2125 
#define NET_DVR_ERR_CHANNEL_COMPRESSION_NO_SUPPORT 2126 
#define NET_DVR_ERR_CLUSTER_DEVICE_TOO_LESS 2127 
#define NET_DVR_ERR_CLUSTER_DEL_DEVICE_CM_PLAYLOAD 2128 
#define NET_DVR_ERR_CLUSTER_DEVNUM_OVER_UPPER_LIMIT 2129 
#define NET_DVR_ERR_CLUSTER_DEVICE_TYPE_INCONFORMITY 2130 
#define NET_DVR_ERR_CLUSTER_DEVICE_VERSION_INCONFORMITY 2131 
#define NET_DVR_ERR_CLUSTER_IP_CONFLICT 2132 
#define NET_DVR_ERR_CLUSTER_IP_INVALID 2133 
#define NET_DVR_ERR_CLUSTER_PORT_CONFLICT 2134 
#define NET_DVR_ERR_CLUSTER_PORT_INVALID 2135 
#define NET_DVR_ERR_CLUSTER_USERNAEM_OR_PASSWORD_INVALID 2136 
#define NET_DVR_ERR_CLUSTER_DEVICE_ALREADY_EXIST 2137 
#define NET_DVR_ERR_CLUSTER_DEVICE_NOT_EXIST 2138 
#define NET_DVR_ERR_CLUSTER_NON_CLUSTER_MODE 2139 
#define NET_DVR_ERR_CLUSTER_IP_NOT_SAME_LAN 2140 
#define NET_DVR_ERR_CAPTURE_PACKAGE_FAILED 2141 
#define NET_DVR_ERR_CAPTURE_PACKAGE_PROCESSING 2142 
#define NET_DVR_ERR_SAFETY_HELMET_NO_RESOURCE 2143 
#define NET_DVR_NO_SUPPORT_WITH_ABSTRACT 2144 
#define NET_DVR_ERR_TAPE_LIB_NEED_STOP_ARCHIVE 2145 
#define NET_DVR_INSUFFICIENT_DEEP_LEARNING_RESOURCES 2146 
#define NET_DVR_ERR_IDENTITY_KEY 2147 
#define NET_DVR_MISSING_IDENTITY_KEY 2148 
#define NET_DVR_NO_SUPPORT_WITH_PERSON_DENSITY_DETECT 2149 
#define NET_DVR_IPC_RESOLUTION_OVERFLOW 2150 
#define NET_DVR_IPC_BITRATE_OVERFLOW 2151 
#define NET_DVR_ERR_INVALID_TASKID 2152 
#define NET_DVR_PANEL_MODE_NOT_CONFIG 2153 
#define NET_DVR_NO_HUMAN_ENGINES_RESOURCE 2154 
#define NET_DVR_ERR_TASK_NUMBER_OVERFLOW 2155 
#define NET_DVR_ERR_COLLISION_TIME_OVERFLOW 2156 
#define NET_DVR_ERR_CAPTURE_PACKAGE_NO_USB 2157 
#define NET_DVR_ERR_NO_SET_SECURITY_EMAIL 2158 
#define NET_DVR_ERR_EVENT_NOTSUPPORT 2159 
#define NET_DVR_ERR_PASSWORD_FORMAT 2160 
#define NET_DVR_ACCESS_FRONT_DEVICE_PARAM_FAILURE 2161 
#define NET_DVR_ACCESS_FRONT_DEVICE_STREAM_FAILURE 2162 
#define NET_DVR_ERR_USERNAME_FORMAT 2163 
#define NET_DVR_ERR_UNOPENED_HIGH_RESOLUTION_MODE 2164 
#define NET_DVR_ERR_TOO_SMALL_QUATO 2165 
#define NET_DVR_ERR_EMAIL_FORMAT 2166 
#define NET_DVR_ERR_SECURITY_CODE_FORMAT 2167 
#define NET_DVR_PD_SPACE_TOO_SMALL 2168 
#define NET_DVR_PD_NUM_TOO_BIG 2169 
#define NET_DVR_ERR_USB_IS_FULL 2170 
#define NET_DVR_EXCEED_MAX_SMD_TYPE 2171 
#define NET_DVR_CHANNEL_NO_SUPPORT_WITH_BEHAVIOR 2172 
#define NET_DVR_NO_BEHAVIOR_ENGINES_RESOURCE 2173 
#define NET_DVR_NO_RETENTION_ENGINES_RESOURCE 2174 
#define NET_DVR_NO_LEAVE_POSITION_ENGINES_RESOURCE 2175 
#define NET_DVR_NO_PEOPLE_NUM_CHANGE_ENGINES_RESOURCE 2176 
#define NET_DVR_PANEL_MODE_NUM_OVER_LIMIT 2177 
#define NET_DVR_SURROUND_MODE_NUM_OVER_LIMIT 2178 
#define NET_DVR_FACE_MODE_NUM_OVER_LIMIT 2179 
#define NET_DVR_SAFETYCABIN_MODE_NUM_OVER_LIMIT 2180 
#define NET_DVR_DETECT_REGION_RANGE_INVALID 2181 
#define NET_DVR_CHANNEL_CAPTURE_PICTURE_FAILURE 2182 
#define NET_DVR_VCACHAN_IS_NORESOURCE 2183 
#define NET_DVR_IPC_NUM_REACHES_LIMIT 2184 
#define NET_DVR_IOT_NUM_REACHES_LIMIT 2185 
#define NET_DVR_IOT_CHANNEL_DEVICE_EXIST 2186 
#define NET_DVR_IOT_CHANNEL_DEVICE_NOT_EXIST 2187 
#define NET_DVR_INVALID_IOT_PROTOCOL_TYPE 2188 
#define NET_DVR_INVALID_EZVIZ_SECRET_KEY 2189 
#define NET_DVR_DUPLICATE_IOT_DEVICE 2190 
#define NET_DVR_SADP_MODIFY_FALIURE 2191 
#define NET_DVR_IPC_NETWORK_ABNORMAL 2192 
#define NET_DVR_IPC_PASSWORD_ERROR 2193 
#define NET_DVR_ERROR_IPC_TYPE 2194 
#define NET_DVR_ERROR_IPC_LIST_NOT_EMPTY 2195 
#define NET_DVR_ERROR_IPC_LIST_NOT_MATCH_PAIRING 2196 
#define NET_DVR_ERROR_IPC_BAD_LANGUAGE 2197 
#define NET_DVR_ERROR_IPC_IS_LOCKING 2198 
#define NET_DVR_ERROR_IPC_NOT_ACTIVATED 2199 
#define NET_DVR_FIELD_CODING_NOT_SUPPORT 2200 
#define NET_DVR_ERROR_H323_NOT_SUPPORT_H265 2201 
#define NET_DVR_ERROR_EXPOSURE_TIME_TOO_BIG_IN_MODE_P 2202 
#define NET_DVR_ERROR_EXPOSURE_TIME_TOO_BIG_IN_MODE_N 2203 
#define NET_DVR_ERROR_PING_PROCESSING 2204 
#define NET_DVR_ERROR_PING_NOT_START 2205 
#define NET_DVR_ERROR_NEED_DOUBLE_VERIFICATION 2206 
#define NET_DVR_NO_DOUBLE_VERIFICATION_USER 2207 
#define NET_DVR_CHANNEL_OFFLINE 2208 
#define NET_DVR_TIMESPAN_NUM_OVER_LIMIT 2209 
#define NET_DVR_CHANNEL_NUM_OVER_LIMIT 2210 
#define NET_DVR_NO_SEARCH_ID_RESOURCE 2211 
#define NET_DVR_ERROR_ONEKEY_EXPORT 2212 
#define NET_DVR_NO_CITY_MANAGEMENT_ENGINES_RESOURCE 2213 
#define NET_DVR_NO_SITUATION_ANALYSIS_ENGINES_RESOURCE 2214 
#define NET_DVR_INTELLIGENT_ANALYSIS_IPC_CANNT_DELETE 2215 
#define NET_DVR_NOSUPPORT_RESET_PASSWORD 2216 
#define NET_DVR_ERROR_IPC_NEED_ON_LAN 2217 
#define NET_DVR_CHANNEL_NO_SUPPORT_WITH_SAFETY_HELMET 2218 
#define NET_DVR_ERROR_GET_RESETPASSWORDTYPE_IS_ABNORMAL 2219 
#define NET_DVR_ERROR_IPC_NOSUPPORT_RESET_PASSWORD 2220 
#define NET_DVR_ERROR_IP_IS_NOT_ONLY_ONE 2221 
#define NET_DVR_NO_SUPPORT_WITH_SMD_OR_SCD 2222 
#define NET_DVR_NO_SUPPORT_WITH_FD 2223 
#define NET_DVR_NO_FD_ENGINES_RESOURCE 2224 
#define NET_DVR_ERROR_ONEKEY_REMOVE 2225 
#define NET_DVR_FACE_PIP_BACKGROUND_CHANNEL_OVERFLOW 2226 
#define NET_DVR_MICIN_CHANNEL_OCCUPIED 2227 
#define NET_DVR_IPC_CHANNEL_IS_IN_PIP 2228 
#define NET_DVR_CHANNEL_NO_SUPPORT_WITH_FACE_CONTRAST 2229 
#define NET_DVR_INVALID_RECHARGE_CARD 2230
#define NET_DVR_CLOUD_PLATFORM_SERVER_EXCEPTION 2231
#define NET_DVR_OPERATION_FAILURE_WITHOUT_LOGIN 2232
#define NET_DVR_INVALID_ASSOCIATED_SERIAL_NUMBER 2233
#define NET_DVR_CLOUD_PLATFORM_ACCOUNT_NOT_EXIST 2234
#define NET_DVR_DEVICE_SERIAL_NUMBER_REGISTERED 2235
#define NET_DVR_CONFERENCE_ROOM_NOT_EXIST 2236
#define NET_DVR_NEED_DISABLED_ANALOG_CHANNEL 2237
#define NET_DVR_STUDENT_ROLL_CALL_FAILURE 2238
#define NET_DVR_SUB_DEVICE_NOT_ENABLE_INDIVIDUAL_BEHAVIOR 2239
#define NET_DVR_SUB_DEVICE_CHANNEL_CONTROL_FAILED 2240
#define NET_DVR_DEVICE_NOT_IN_CONFERENCE 2241
#define NET_DVR_ALREADY_EXIST_CONFERENCE 2242
#define NET_DVR_NO_SUPPORT_WITH_VIDEO_CONFERENCE 2243
#define NET_DVR_START_INTERACTION_FAILURE 2244
#define NET_DVR_ASK_QUESTION_STARTED 2245
#define NET_DVR_ASK_QUESTION_CLOSED 2246
#define NET_DVR_UNABLE_OPERATE_BY_HOST 2247
#define NET_DVR_REPEATED_ASK_QUESTION 2248
#define NET_DVR_SWITCH_TIMEDIFF_LESS_LIMIT 2249
#define NET_DVR_CHANNEL_DEVICE_EXIST 2250 
#define NET_DVR_CHANNEL_DEVICE_NOT_EXIST 2251 
#define NET_DVR_ERROR_ADJUSTING_RESOLUTION 2252 
#define NET_DVR_SSD_FILE_SYSTEM_IS_UPGRADING 2253 
#define NET_DVR_SSD_FILE_SYSTEM_IS_FORMAT 2254 
#define NET_DVR_CHANNEL_IS_CONNECTING 2255 
#define NET_DVR_CHANNEL_STREAM_TYPE_NOT_SUPPORT 2257 
#define NET_DVR_CHANNEL_USERNAME_NOT_EXIST 2258 
#define NET_DVR_CHANNEL_ACCESS_PARAM_FAILURE 2259 
#define NET_DVR_CHANNEL_GET_STREAM_FAILURE 2260 
#define NET_DVR_CHANNEL_RISK_PASSWORD 2261 
#define NET_DVR_NO_SUPPORT_DELETE_STRANGER_LIB 2262 
#define NET_DVR_NO_SUPPORT_CREATE_STRANGER_LIB 2263 
#define NET_DVR_NETWORK_PORT_CONFLICT 2264 
#define NET_DVR_TRANSCODE_NO_RESOURCES 2265 
#define NET_DVR_SSD_FILE_SYSTEM_ERROR 2266 
#define NET_DVR_INSUFFICIENT_SSD__FOR_FPD 2267 
#define NET_DVR_ASSOCIATED_FACELIB_OVER_LIMIT 2268 
#define NET_DVR_ERR_NOTSUPPORT_DEICING 3001 
#define NET_DVR_ERR_THERMENABLE_CLOSE 3002 
#define NET_DVR_ERR_NOTMEET_DEICING 3003 
#define NET_DVR_ERR_PANORAMIC_LIMIT_OPERATED 3004 
#define NET_DVR_ERR_SMARTH264_ROI_OPERATED 3005 
#define NET_DVR_ERR_RULENUM_LIMIT 3006 
#define NET_DVR_ERR_LASER_DEICING_OPERATED 3007 
#define NET_DVR_ERR_OFFDIGITALZOOM_OR_MINZOOMLIMIT 3008 
#define NET_DVR_ERR_FIREWAITING 3009
#define NET_DVR_SYNCHRONIZEFOV_ERROR 3010
#define NET_DVR_CERTIFICATE_VALIDATION_ERROR 3011
#define NET_DVR_CERTIFICATES_NUM_EXCEED_ERROR 3012
#define NET_DVR_ERR_NO_SAFETY_HELMET_REGION 3501 
#define NET_DVR_ERR_UNCLOSED_SAFETY_HELMET 3502 
#define NET_ERR_NPQ_BASE_INDEX 8000 
#define NET_ERR_NPQ_PARAM (NET_ERR_NPQ_BASE_INDEX + 1) 
#define NET_ERR_NPQ_SYSTEM (NET_ERR_NPQ_BASE_INDEX + 2) 
#define NET_ERR_NPQ_GENRAL (NET_ERR_NPQ_BASE_INDEX + 3) 
#define NET_ERR_NPQ_PRECONDITION (NET_ERR_NPQ_BASE_INDEX + 4) 
#define NET_ERR_NPQ_NOTSUPPORT (NET_ERR_NPQ_BASE_INDEX + 5) 
#define NET_ERR_NPQ_NOTCALLBACK (NET_ERR_NPQ_BASE_INDEX + 100) 
#define NET_ERR_NPQ_LOADLIB (NET_ERR_NPQ_BASE_INDEX + 101) 
#define NET_ERR_NPQ_STEAM_CLOSE (NET_ERR_NPQ_BASE_INDEX + 104)
#define NET_ERR_NPQ_MAX_LINK (NET_ERR_NPQ_BASE_INDEX + 110)
#define NET_ERR_NPQ_STREAM_CFG (NET_ERR_NPQ_BASE_INDEX + 111) 
/*************************************************
NET_DVR_IsSupport()返回值
1－9位分别表示以下信息（位与是TRUE)表示支持；
**************************************************/
#define NET_DVR_SUPPORT_DDRAW 0x01
#define NET_DVR_SUPPORT_BLT 0x02
#define NET_DVR_SUPPORT_BLTFOURCC 0x04
#define NET_DVR_SUPPORT_BLTSHRINKX 0x08
#define NET_DVR_SUPPORT_BLTSHRINKY 0x10
#define NET_DVR_SUPPORT_BLTSTRETCHX 0x20
#define NET_DVR_SUPPORT_BLTSTRETCHY 0x40
#define NET_DVR_SUPPORT_SSE 0x80
#define NET_DVR_SUPPORT_MMX 0x100 
#define LIGHT_PWRON 2 
#define WIPER_PWRON 3 
#define FAN_PWRON 4 
#define HEATER_PWRON 5 
#define AUX_PWRON1 6 
#define AUX_PWRON2 7 
#define SET_PRESET 8 
#define CLE_PRESET 9 
#define ZOOM_IN 11 
#define ZOOM_OUT 12 
#define FOCUS_NEAR 13 
#define FOCUS_FAR 14 
#define IRIS_OPEN 15 
#define IRIS_CLOSE 16 
#define TILT_UP 21 
#define TILT_DOWN 22 
#define PAN_LEFT 23 
#define PAN_RIGHT 24 
#define UP_LEFT 25 
#define UP_RIGHT 26 
#define DOWN_LEFT 27 
#define DOWN_RIGHT 28 
#define PAN_AUTO 29 
#define FILL_PRE_SEQ 30 
#define SET_SEQ_DWELL 31 
#define SET_SEQ_SPEED 32 
#define CLE_PRE_SEQ 33 
#define STA_MEM_CRUISE 34 
#define STO_MEM_CRUISE 35 
#define RUN_CRUISE 36 
#define RUN_SEQ 37 
#define STOP_SEQ 38 
#define GOTO_PRESET 39 
#define DEL_SEQ 43 
#define STOP_CRUISE 44 
#define DELETE_CRUISE 45 
#define DELETE_ALL_CRUISE 46
#define PAN_CIRCLE 50 
#define DRAG_PTZ 51 
#define LINEAR_SCAN 52 
#define CLE_ALL_SEQ 54 
#define CLE_ALL_CRUISE 55 
#define POPUP_MENU 56 
#define TILT_DOWN_ZOOM_IN 58 
#define TILT_DOWN_ZOOM_OUT 59 
#define PAN_LEFT_ZOOM_IN 60 
#define PAN_LEFT_ZOOM_OUT 61 
#define PAN_RIGHT_ZOOM_IN 62 
#define PAN_RIGHT_ZOOM_OUT 63 
#define UP_LEFT_ZOOM_IN 64 
#define UP_LEFT_ZOOM_OUT 65 
#define UP_RIGHT_ZOOM_IN 66 
#define UP_RIGHT_ZOOM_OUT 67 
#define DOWN_LEFT_ZOOM_IN 68 
#define DOWN_LEFT_ZOOM_OUT 69 
#define DOWN_RIGHT_ZOOM_IN 70 
#define DOWN_RIGHT_ZOOM_OUT 71 
#define TILT_UP_ZOOM_IN 72 
#define TILT_UP_ZOOM_OUT 73 
#define DVR_VEHICLE_CONTROL_LIST 0x1 
/*************************************************
回放时播放控制命令宏定义 
NET_DVR_PlayBackControl
NET_DVR_PlayControlLocDisplay
NET_DVR_DecPlayBackCtrl的宏定义
具体支持查看函数说明和代码
**************************************************/ 
#define NET_DVR_PLAYSTART 1
#define NET_DVR_PLAYSTOP 2
#define NET_DVR_PLAYPAUSE 3
#define NET_DVR_PLAYRESTART 4
#define NET_DVR_PLAYFAST 5
#define NET_DVR_PLAYSLOW 6
#define NET_DVR_PLAYNORMAL 7
#define NET_DVR_PLAYFRAME 8
#define NET_DVR_PLAYSTARTAUDIO 9
#define NET_DVR_PLAYSTOPAUDIO 10
#define NET_DVR_PLAYAUDIOVOLUME 11
#define NET_DVR_PLAYSETPOS 12
#define NET_DVR_PLAYGETPOS 13
#define NET_DVR_PLAYGETTIME 14
#define NET_DVR_PLAYGETFRAME 15
#define NET_DVR_GETTOTALFRAMES 16
#define NET_DVR_GETTOTALTIME 17
#define NET_DVR_THROWBFRAME 20
#define NET_DVR_SETSPEED 24
#define NET_DVR_KEEPALIVE 25
#define NET_DVR_PLAYSETTIME 26
#define NET_DVR_PLAYGETTOTALLEN 27
#define NET_DVR_PLAYSETTIME_V50 28
#define NET_DVR_PLAY_FORWARD 29
#define NET_DVR_PLAY_REVERSE 30
#define NET_DVR_SET_DECODEFFRAMETYPE 31 
#define NET_DVR_SET_TRANS_TYPE 32
#define NET_DVR_PLAY_CONVERT 33
#define NET_DVR_START_DRAWFRAME 34
#define NET_DVR_STOP_DRAWFRAME 35
#define NET_DVR_CHANGEWNDRESOLUTION 36 
#define NET_DVR_RESETBUFFER	 37 
#define NET_DVR_VOD_DRAG_ING 38
#define NET_DVR_VOD_DRAG_END 39
#define NET_DVR_VOD_RESET_PLAYTIME 40
#define PLAYM4_DECODE_NORMAIL 0 
#define PLAYM4_DECODE_KEY_FRAME 1 
#define PLAYM4_DECODE_NONE 2 
#define PLAYM4_DECODE_TEMPORAL_LAYER_0 3 
#define PLAYM4_DECODE_TEMPORAL_LAYER_1 4 
#define KEY_CODE_1 1
#define KEY_CODE_2 2
#define KEY_CODE_3 3
#define KEY_CODE_4 4
#define KEY_CODE_5 5
#define KEY_CODE_6 6
#define KEY_CODE_7 7
#define KEY_CODE_8 8
#define KEY_CODE_9 9
#define KEY_CODE_0 10
#define KEY_CODE_POWER 11
#define KEY_CODE_MENU 12
#define KEY_CODE_ENTER 13
#define KEY_CODE_CANCEL 14
#define KEY_CODE_UP 15
#define KEY_CODE_DOWN 16
#define KEY_CODE_LEFT 17
#define KEY_CODE_RIGHT 18
#define KEY_CODE_EDIT 19
#define KEY_CODE_ADD 20
#define KEY_CODE_MINUS 21
#define KEY_CODE_PLAY 22
#define KEY_CODE_REC 23
#define KEY_CODE_PAN 24
#define KEY_CODE_M 25
#define KEY_CODE_A 26
#define KEY_CODE_F1 27
#define KEY_CODE_F2 28
#define KEY_PTZ_UP_START KEY_CODE_UP
#define KEY_PTZ_UP_STOP 32
#define KEY_PTZ_DOWN_START KEY_CODE_DOWN
#define KEY_PTZ_DOWN_STOP 33
#define KEY_PTZ_LEFT_START KEY_CODE_LEFT
#define KEY_PTZ_LEFT_STOP 34
#define KEY_PTZ_RIGHT_START KEY_CODE_RIGHT
#define KEY_PTZ_RIGHT_STOP 35
#define KEY_PTZ_AP1_START KEY_CODE_EDIT 
#define KEY_PTZ_AP1_STOP 36
#define KEY_PTZ_AP2_START KEY_CODE_PAN 
#define KEY_PTZ_AP2_STOP 37
#define KEY_PTZ_FOCUS1_START KEY_CODE_A 
#define KEY_PTZ_FOCUS1_STOP 38
#define KEY_PTZ_FOCUS2_START KEY_CODE_M 
#define KEY_PTZ_FOCUS2_STOP 39
#define KEY_PTZ_B1_START 40 
#define KEY_PTZ_B1_STOP 41
#define KEY_PTZ_B2_START 42 
#define KEY_PTZ_B2_STOP 43
#define KEY_CODE_11 44
#define KEY_CODE_12 45
#define KEY_CODE_13 46
#define KEY_CODE_14 47
#define KEY_CODE_15 48
#define KEY_CODE_16 49
#define NET_DVR_GET_DEVICECFG 100 
#define NET_DVR_SET_DEVICECFG 101 
#define NET_DVR_GET_NETCFG 102 
#define NET_DVR_SET_NETCFG 103 
#define NET_DVR_GET_PICCFG 104 
#define NET_DVR_SET_PICCFG 105 
#define NET_DVR_GET_COMPRESSCFG 106 
#define NET_DVR_SET_COMPRESSCFG 107 
#define NET_DVR_GET_RECORDCFG 108 
#define NET_DVR_SET_RECORDCFG 109 
#define NET_DVR_GET_DECODERCFG 110 
#define NET_DVR_SET_DECODERCFG 111 
#define NET_DVR_GET_RS232CFG 112 
#define NET_DVR_SET_RS232CFG 113 
#define NET_DVR_GET_ALARMINCFG 114 
#define NET_DVR_SET_ALARMINCFG 115 
#define NET_DVR_GET_ALARMOUTCFG 116 
#define NET_DVR_SET_ALARMOUTCFG 117 
#define NET_DVR_GET_TIMECFG 118 
#define NET_DVR_SET_TIMECFG 119 
#define NET_DVR_GET_PREVIEWCFG 120 
#define NET_DVR_SET_PREVIEWCFG 121 
#define NET_DVR_GET_VIDEOOUTCFG 122 
#define NET_DVR_SET_VIDEOOUTCFG 123 
#define NET_DVR_GET_USERCFG 124 
#define NET_DVR_SET_USERCFG 125 
#define NET_DVR_GET_EXCEPTIONCFG 126 
#define NET_DVR_SET_EXCEPTIONCFG 127 
#define NET_DVR_GET_ZONEANDDST 128 
#define NET_DVR_SET_ZONEANDDST 129 
#define NET_DVR_GET_SHOWSTRING 130 
#define NET_DVR_SET_SHOWSTRING 131 
#define NET_DVR_GET_EVENTCOMPCFG 132 
#define NET_DVR_SET_EVENTCOMPCFG 133 
#define NET_DVR_GET_FTPCFG 134 
#define NET_DVR_SET_FTPCFG 135 
#define NET_DVR_GET_AUXOUTCFG 140 
#define NET_DVR_SET_AUXOUTCFG 141 
#define NET_DVR_GET_PREVIEWCFG_AUX 142 
#define NET_DVR_SET_PREVIEWCFG_AUX 143 
#define NET_DVR_GET_PASSWORD_MANAGE_CFG 144 
#define NET_DVR_SET_PASSWORD_MANAGE_CFG 145 
#define NET_DVR_UNLOCK_USER 146 
#define NET_DVR_GET_SECURITY_CFG 147 
#define NET_DVR_SET_SECURITY_CFG 148 
#define NET_DVR_GET_LOCKED_INFO_LIST 149 
#define NET_DVR_SET_RULECFG 152 
#define NET_DVR_GET_RULECFG 153 
#define NET_DVR_SET_TRACK_CFG 160
#define NET_DVR_GET_TRACK_CFG 161
#define NET_DVR_SET_IVMS_STREAMCFG 162 
#define NET_DVR_GET_IVMS_STREAMCFG 163 
#define NET_DVR_SET_VCA_CTRLCFG 164 
#define NET_DVR_GET_VCA_CTRLCFG 165 
#define NET_DVR_SET_VCA_MASK_REGION 166 
#define NET_DVR_GET_VCA_MASK_REGION 167 
#define NET_DVR_SET_VCA_ENTER_REGION 168 
#define NET_DVR_GET_VCA_ENTER_REGION 169 
#define NET_DVR_SET_VCA_LINE_SEGMENT 170 
#define NET_DVR_GET_VCA_LINE_SEGMENT 171 
#define NET_DVR_SET_IVMS_MASK_REGION 172 
#define NET_DVR_GET_IVMS_MASK_REGION 173 
#define NET_DVR_SET_IVMS_ENTER_REGION 174 
#define NET_DVR_GET_IVMS_ENTER_REGION 175 
#define NET_DVR_SET_IVMS_BEHAVIORCFG 176 
#define NET_DVR_GET_IVMS_BEHAVIORCFG 177 
#define NET_DVR_IVMS_SET_SEARCHCFG 178 
#define NET_DVR_IVMS_GET_SEARCHCFG 179 
#define NET_DVR_SET_POSITION_TRACK 180 
#define NET_DVR_GET_POSITION_TRACK 181 
#define NET_DVR_SET_CALIBRATION 182 
#define NET_DVR_GET_CALIBRATION 183 
#define NET_DVR_SET_PDC_RULECFG 184 
#define NET_DVR_GET_PDC_RULECFG 185 
#define NET_DVR_SET_PU_STREAMCFG 186 
#define NET_DVR_GET_PU_STREAMCFG 187 
#define NET_VCA_SET_IVMS_BEHAVIOR_CFG 192 
#define NET_VCA_GET_IVMS_BEHAVIOR_CFG 193 
#define NET_VCA_SET_SIZE_FILTER 194 
#define NET_VCA_GET_SIZE_FILTER 195 
#define NET_DVR_SET_TRACK_PARAMCFG 196 
#define NET_DVR_GET_TRACK_PARAMCFG 197 
#define NET_DVR_SET_DOME_MOVEMENT_PARAM 198 
#define NET_DVR_GET_DOME_MOVEMENT_PARAM 199 
#define NET_DVR_GET_PICCFG_EX 200 
#define NET_DVR_SET_PICCFG_EX 201 
#define NET_DVR_GET_USERCFG_EX 202 
#define NET_DVR_SET_USERCFG_EX 203 
#define NET_DVR_GET_COMPRESSCFG_EX 204 
#define NET_DVR_SET_COMPRESSCFG_EX 205 
#define NET_DVR_GET_NETAPPCFG 222 
#define NET_DVR_SET_NETAPPCFG 223 
#define NET_DVR_GET_NTPCFG 224 
#define NET_DVR_SET_NTPCFG 225 
#define NET_DVR_GET_DDNSCFG 226 
#define NET_DVR_SET_DDNSCFG 227 
#define NET_DVR_GET_EMAILCFG 228 
#define NET_DVR_SET_EMAILCFG 229 
#define NET_DVR_GET_NFSCFG 230 
#define NET_DVR_SET_NFSCFG 231 
/*注：该命令为定制，只支持8条OSD的类型，不会兼容V30设备版本之前的
NET_DVR_GET_SHOWSTRING 、NET_DVR_SET_SHOWSTRING 命令。（不建议使用）*/
#define NET_DVR_GET_SHOWSTRING_EX 238 
#define NET_DVR_SET_SHOWSTRING_EX 239 
#define NET_DVR_GET_NETCFG_OTHER 244 
#define NET_DVR_SET_NETCFG_OTHER 245 
#define NET_DVR_GET_EMAILPARACFG 250 
#define NET_DVR_SET_EMAILPARACFG 251 
#define NET_DVR_GET_DDNSCFG_EX 274 
#define NET_DVR_SET_DDNSCFG_EX 275 
#define NET_DVR_SET_PTZPOS 292 
#define NET_DVR_GET_PTZPOS 293 
#define NET_DVR_GET_PTZSCOPE 294 
#define NET_DVR_GET_AP_INFO_LIST 305
#define NET_DVR_SET_WIFI_CFG 306 
#define NET_DVR_GET_WIFI_CFG 307 
#define NET_DVR_SET_WIFI_WORKMODE 308 
#define NET_DVR_GET_WIFI_WORKMODE 309 
#define NET_DVR_GET_WIFI_STATUS 310 
#define NET_DVR_GET_REFERENCE_REGION 400 
#define NET_DVR_SET_REFERENCE_REGION 401 
#define NET_DVR_GET_TRAFFIC_MASK_REGION 402 
#define NET_DVR_SET_TRAFFIC_MASK_REGION 403 
#define NET_DVR_SET_AID_RULECFG 404 
#define NET_DVR_GET_AID_RULECFG 405 
#define NET_DVR_SET_TPS_RULECFG 406 
#define NET_DVR_GET_TPS_RULECFG 407 
#define NET_DVR_SET_LANECFG 408 
#define NET_DVR_GET_LANECFG 409 
#define NET_DVR_GET_VCA_RULE_COLOR_CFG 410 
#define NET_DVR_SET_VCA_RULE_COLOR_CFG 411 
#define NET_DVR_GET_SWITCH_LAMP_CFG 412 
#define NET_DVR_SET_SWITCH_LAMP_CFG 413 
#define NET_DVR_SET_FACEDETECT_RULECFG 420 
#define NET_DVR_GET_FACEDETECT_RULECFG 421 
#define NET_DVR_SET_VEHICLE_RECOG_TASK 422 
#define NET_DVR_GET_VEHICLE_RECOG_TASK 423 
#define NET_DVR_SET_TIMECORRECT 432 
#define NET_DVR_GET_CONNECT_LIST 433 
#define NET_DVR_GET_NETCFG_V30 1000 
#define NET_DVR_SET_NETCFG_V30 1001 
#define NET_DVR_GET_PICCFG_V30 1002 
#define NET_DVR_SET_PICCFG_V30 1003 
#define NET_DVR_GET_RECORDCFG_V30 1004 
#define NET_DVR_SET_RECORDCFG_V30 1005 
#define NET_DVR_GET_USERCFG_V30 1006 
#define NET_DVR_SET_USERCFG_V30 1007 
#define NET_DVR_GET_RECORDCFG_V40 1008 
#define NET_DVR_SET_RECORDCFG_V40 1009 
#define NET_DVR_GET_DDNSCFG_V30 1010 
#define NET_DVR_SET_DDNSCFG_V30 1011 
#define NET_DVR_GET_EMAILCFG_V30 1012 
#define NET_DVR_SET_EMAILCFG_V30 1013 
#define NET_DVR_GET_NETCFG_V50 1015 
#define NET_DVR_SET_NETCFG_V50 1016 
#define NET_GET_CRUISEPOINT_V40 1018 
#define NET_DVR_GET_CRUISE 1020 
#define NET_DVR_SET_CRUISE 1021 
#define NET_DVR_GET_ALARMINCFG_V30 1024 
#define NET_DVR_SET_ALARMINCFG_V30 1025
#define NET_DVR_GET_ALARMOUTCFG_V30 1026 
#define NET_DVR_SET_ALARMOUTCFG_V30 1027
#define NET_DVR_GET_VIDEOOUTCFG_V30 1028 
#define NET_DVR_SET_VIDEOOUTCFG_V30 1029
/*该命令支持8条OSD的类型（即设备版本为V30以上时），并会通过设备版本的匹配，
同时兼容之前的NET_DVR_GET_SHOWSTRING 、NET_DVR_SET_SHOWSTRING 命令。（建议使用）*/
#define NET_DVR_GET_SHOWSTRING_V30 1030 
#define NET_DVR_SET_SHOWSTRING_V30 1031
#define NET_DVR_GET_EXCEPTIONCFG_V30 1034 
#define NET_DVR_SET_EXCEPTIONCFG_V30 1035
#define NET_DVR_GET_RS232CFG_V30 1036 
#define NET_DVR_SET_RS232CFG_V30 1037
#define NET_DVR_GET_NET_DISKCFG 1038 
#define NET_DVR_SET_NET_DISKCFG 1039 
#define NET_DVR_GET_COMPRESSCFG_V30 1040 
#define NET_DVR_SET_COMPRESSCFG_V30 1041 
#define NET_DVR_GET_DECODERCFG_V30 1042 
#define NET_DVR_SET_DECODERCFG_V30 1043 
#define NET_DVR_GET_PREVIEWCFG_V30 1044 
#define NET_DVR_SET_PREVIEWCFG_V30 1045 
#define NET_DVR_GET_PREVIEWCFG_AUX_V30 1046 
#define NET_DVR_SET_PREVIEWCFG_AUX_V30 1047 
#define NET_DVR_GET_IPPARACFG 1048 
#define NET_DVR_SET_IPPARACFG 1049 
#define NET_DVR_GET_IPALARMINCFG 1050 
#define NET_DVR_SET_IPALARMINCFG 1051 
#define NET_DVR_GET_IPALARMOUTCFG 1052 
#define NET_DVR_SET_IPALARMOUTCFG 1053 
#define NET_DVR_GET_HDCFG 1054 
#define NET_DVR_SET_HDCFG 1055 
#define NET_DVR_GET_HDGROUP_CFG 1056 
#define NET_DVR_SET_HDGROUP_CFG 1057 
#define NET_DVR_GET_COMPRESSCFG_AUD 1058 
#define NET_DVR_SET_COMPRESSCFG_AUD 1059 
#define NET_DVR_GET_IPPARACFG_V31 1060 
#define NET_DVR_SET_IPPARACFG_V31 1061 
#define NET_DVR_GET_IPPARACFG_V40 1062 
#define NET_DVR_SET_IPPARACFG_V40 1063 
#define NET_DVR_GET_CCDPARAMCFG 1067 
#define NET_DVR_SET_CCDPARAMCFG 1068 
#define NET_DVR_GET_IOINCFG 1070 
#define NET_DVR_SET_IOINCFG 1071 
#define NET_DVR_GET_IOOUTCFG 1072 
#define NET_DVR_SET_IOOUTCFG 1073 
#define NET_DVR_GET_FLASHCFG 1074 
#define NET_DVR_SET_FLASHCFG 1075 
#define NET_DVR_GET_LIGHTSNAPCFG 1076 
#define NET_DVR_SET_LIGHTSNAPCFG 1077 
#define NET_DVR_GET_MEASURESPEEDCFG 1078 
#define NET_DVR_SET_MEASURESPEEDCFG 1079 
#define NET_DVR_GET_IMAGEOVERLAYCFG 1080
#define NET_DVR_SET_IMAGEOVERLAYCFG 1081
#define NET_DVR_GET_SNAPCFG 1082
#define NET_DVR_SET_SNAPCFG 1083
#define NET_DVR_GET_VTPPARAM 1084
#define NET_DVR_SET_VTPPARAM 1085
#define NET_DVR_GET_SNAPENABLECFG 1086
#define NET_DVR_SET_SNAPENABLECFG 1087
#define NET_DVR_GET_POSTEPOLICECFG 1088
#define NET_DVR_SET_POSTEPOLICECFG 1089
#define NET_DVR_GET_JPEGCFG_V30 1090
#define NET_DVR_SET_JPEGCFG_V30 1091
#define NET_DVR_GET_SPRCFG 1092
#define NET_DVR_SET_SPRCFG 1093
#define NET_DVR_GET_PLCCFG 1094
#define NET_DVR_SET_PLCCFG 1095
#define NET_DVR_GET_DEVICESTATECFG 1096
#define NET_DVR_SET_CALIBRATE_TIME 1097
#define NET_DVR_GET_CALIBRATE_TIME 1098
#define NET_DVR_GET_DEVICECFG_V40 1100
#define NET_DVR_SET_DEVICECFG_V40 1101
#define NET_DVR_GET_ZEROCHANCFG 1102 
#define NET_DVR_SET_ZEROCHANCFG 1103 
#define NET_DVR_GET_ZERO_PREVIEWCFG_V30 1104 
#define NET_DVR_SET_ZERO_PREVIEWCFG_V30 1105 
#define NET_DVR_SET_ZERO_ZOOM 1106 
#define NET_DVR_GET_ZERO_ZOOM 1107 
#define NET_DVR_NATASSOCIATECFG_GET 1110 
#define NET_DVR_NATASSOCIATECFG_SET 1111 
#define NET_DVR_GET_SNMPCFG 1112 
#define NET_DVR_SET_SNMPCFG 1113 
#define NET_DVR_GET_SNMPCFG_V30 1114 
#define NET_DVR_SET_SNMPCFG_V30 1115 
#define NET_DVR_VIDEOPLATFORMALARMCFG_GET 1130 
#define NET_DVR_VIDEOPLATFORMALARMCFG_SET 1131 
#define NET_DVR_GET_RAID_ADAPTER_INFO 1134 
#define NET_DVR_SET_RAID_ADAPTER_INFO 1135 
#define NET_DVR_MATRIX_BIGSCREENCFG_GET 1140
#define NET_DVR_MATRIX_BIGSCREENCFG_SET 1141
#define NET_DVR_GET_MB_PLATFORMPARA 1145
#define NET_DVR_SET_MB_PLATFORMPARA 1146
#define NET_DVR_GET_MB_DEVSTATUS 1147
#define NET_DVR_GET_DECODER_JOINT_CHAN 1151
#define NET_DVR_SET_DECODER_JOINT_CHAN 1152
#define NET_DVR_GET_NETCFG_MULTI 1161 
#define NET_DVR_SET_NETCFG_MULTI 1162 
#define NET_DVR_GET_NETCFG_MULTI_V50 1163 
#define NET_DVR_SET_NETCFG_MULTI_V50 1164 
#define NET_DVR_GET_CMSPARA 1170
#define NET_DVR_SET_CMSPARA 1171
#define NET_DVR_GET_DIALSTATUS 1172
#define NET_DVR_GET_SMSRELATIVEPARA 1173
#define NET_DVR_SET_SMSRELATIVEPARA 1174
#define NET_DVR_GET_PINSTATUS 1175
#define NET_DVR_SET_PINCMD 1176
#define NET_DVR_SET_SENSOR_CFG 1180
#define NET_DVR_GET_SENSOR_CFG 1181
#define NET_DVR_SET_ALARMIN_PARAM 1182
#define NET_DVR_GET_ALARMIN_PARAM 1183
#define NET_DVR_SET_ALARMOUT_PARAM 1184
#define NET_DVR_GET_ALARMOUT_PARAM 1185
#define NET_DVR_SET_SIREN_PARAM 1186
#define NET_DVR_GET_SIREN_PARAM 1187
#define NET_DVR_SET_ALARM_RS485CFG 1188
#define NET_DVR_GET_ALARM_RS485CFG 1189
#define NET_DVR_GET_ALARMHOST_MAIN_STATUS 1190
#define NET_DVR_GET_ALARMHOST_OTHER_STATUS 1191
#define NET_DVR_SET_ALARMHOST_ENABLECFG 1192
#define NET_DVR_GET_ALARMHOST_ENABLECFG 1193
#define NET_DVR_SET_ALARM_CAMCFG 1194
#define NET_DVR_GET_ALARM_CAMCFG 1195
#define NET_DVR_GET_GATEWAY_CFG 1196
#define NET_DVR_SET_GATEWAY_CFG 1197
#define NET_DVR_GET_ALARMDIALMODECFG 1198
#define NET_DVR_SET_ALARMDIALMODECFG 1199
#define NET_DVR_SET_ALARMIN_PARAM_V50 1200 
#define NET_DVR_GET_ALARMIN_PARAM_V50 1201 
#define NET_DVR_SET_WINCFG 1202
#define NET_DVR_GET_ALARMHOSTDIALSETUPMODE 1204
#define NET_DVR_SET_ALARMHOSTDIALSETUPMODE 1205
#define NET_DVR_SET_SUBSYSTEM_ALARM 1210 
#define NET_DVR_GET_SUBSYSTEM_ALARM 1211 
#define NET_DVR_GET_WHITELIST_ALARM 1215 
#define NET_DVR_SET_WHITELIST_ALARM 1216 
#define NET_DVR_GET_ALARMHOST_MODULE_LIST 1222 
#define NET_DVR_SET_PRIOR_ALARM 1223 
#define NET_DVR_GET_PRIOR_ALARM 1224 
#define NET_DVR_SET_TAMPER_ALARMIN_PARAM 1225 
#define NET_DVR_GET_TAMPER_ALARMIN_PARAM 1226 
#define NET_DVR_GET_HOLIDAY_PARAM_CFG 1240
#define NET_DVR_SET_HOLIDAY_PARAM_CFG 1241
#define NET_DVR_GET_MOTION_HOLIDAY_HANDLE 1242
#define NET_DVR_SET_MOTION_HOLIDAY_HANDLE 1243
#define NET_DVR_GET_VILOST_HOLIDAY_HANDLE 1244
#define NET_DVR_SET_VILOST_HOLIDAY_HANDLE 1245
#define NET_DVR_GET_HIDE_HOLIDAY_HANDLE 1246
#define NET_DVR_SET_HIDE_HOLIDAY_HANDLE 1247
#define NET_DVR_GET_ALARMIN_HOLIDAY_HANDLE 1248
#define NET_DVR_SET_ALARMIN_HOLIDAY_HANDLE 1249
#define NET_DVR_GET_ALARMOUT_HOLIDAY_HANDLE 1250
#define NET_DVR_SET_ALARMOUT_HOLIDAY_HANDLE 1251
#define NET_DVR_GET_HOLIDAY_RECORD 1252
#define NET_DVR_SET_HOLIDAY_RECORD 1253
#define NET_DVR_GET_NETWORK_BONDING 1254
#define NET_DVR_SET_NETWORK_BONDING 1255
#define NET_DVR_GET_LINK_STATUS 1256
#define NET_DVR_GET_DISK_QUOTA_CFG 1278
#define NET_DVR_SET_DISK_QUOTA_CFG 1279
#define NET_DVR_GET_JPEG_CAPTURE_CFG 1280
#define NET_DVR_SET_JPEG_CAPTURE_CFG 1281
#define NET_DVR_GET_SCHED_CAPTURECFG 1282
#define NET_DVR_SET_SCHED_CAPTURECFG 1283
#define NET_DVR_GET_VGA_PREVIEWCFG 1284
#define NET_DVR_SET_VGA_PREVIEWCFG 1285
#define NET_DVR_GET_VIDEO_INPUT_EFFECT 1286
#define NET_DVR_SET_VIDEO_INPUT_EFFECT 1287
#define NET_DVR_GET_STORAGE_SERVER_SWITCH 1290
#define NET_DVR_SET_STORAGE_SERVER_SWITCH 1291
#define NET_DVR_GET_DISK_QUOTA_CFG_V60 1292
#define NET_DVR_SET_DISK_QUOTA_CFG_V60 1293
#define NET_DVR_GET_OPTICAL_CHANNEL 1300
#define NET_DVR_SET_OPTICAL_CHANNEL 1301
#define NET_DVR_GET_FIBER_CASCADE 1302
#define NET_DVR_SET_FIBER_CASCADE 1303
#define NET_DVR_GET_SPARTAN_STATUS 1304
#define NET_DVR_SET_SPARTAN_STATUS 1305
#define NET_DVR_GET_ETHERNET_CHANNEL 1306
#define NET_DVR_SET_ETHERMET_CHANNEL 1307
#define NET_DVR_OPTICAL_REBOOT 1320
#define NET_DVR_SET_AUDIOCHAN_CFG 1321
#define NET_DVR_GET_AUDIOCHAN_CFG 1322
#define NET_DVR_SET_MATRIX_BASE_CFG 1332
#define NET_DVR_GET_MATRIX_BASE_CFG 1333
#define NET_DVR_SWITCH_MATRIX_IO 1334
#define NET_DVR_GET_MATRIX_IO_RELATION 1335
#define NET_DVR_V6PSUBSYSTEMARAM_GET 1501
#define NET_DVR_V6PSUBSYSTEMARAM_SET 1502
#define NET_DVR_GET_ALLWINCFG 1503
#define NET_DVR_BIGSCREENASSOCIATECFG_GET 1511
#define NET_DVR_BIGSCREENASSOCIATECFG_SET 1512
#define NET_DVR_GETSCREENINFO 1601
#define NET_DVR_SETSCREENINFO 1602
#define NET_DVR_GET_SCREEN_WINCFG 1603
#define NET_DVR_LAYOUTLIST_GET 1605
#define NET_DVR_SET_LAYOUTCFG 1606
#define NET_DVR_LAYOUTCTRL 1607
#define NET_DVR_INPUTLIST_GET 1608
#define NET_DVR_SET_INPUTSTREAMCFG 1609
#define NET_DVR_OUTPUT_SET 1610
#define NET_DVR_OUTPUT_GET 1611
#define NET_DVR_SET_OSDCFG 1612
#define NET_DVR_GET_OSDCFG 1613
#define NET_DVR_BIGSCREEN_GETSERIAL 1614
#define NET_DVR_GET_PLANLIST 1615
#define NET_DVR_SET_PLAN 1616
#define NET_DVR_CTRL_PLAN 1617
#define NET_DVR_GET_DEVICE_RUN_STATUS 1618
#define NET_DVR_GET_EXTERNAL_MATRIX_CFG 1619
#define NET_DVR_SET_EXTERNAL_MATRIX_CFG 1620
#define NET_DVR_GET_OUTPUT_SCREEN_RELATION 1621
#define NET_DVR_SET_OUTPUT_SCREEN_RELATION 1622
#define NET_DVR_GET_VCS_USER_CFG 1623
#define NET_DVR_SET_VCS_USER_CFG 1624
#define NET_DVR_CONTROL_SCREEN 1625
#define NET_DVR_GET_EXTERNAL_MATRIX_CFG_V50 1626 
#define NET_DVR_SET_EXTERNAL_MATRIX_CFG_V50 1627 
#define NET_DVR_GET_DEV_BASEINFO 1650
#define NET_DVR_SET_DEV_BASEINFO 1651
#define NET_DVR_GET_DEV_NETINFO 1652
#define NET_DVR_SET_DEV_NETINFO 1653
#define NET_DVR_GET_SIGNAL_SOURCE_INFO 1654
#define NET_DVR_SET_SIGNAL_SOURCE_INFO 1655
#define NET_DVR_ADJUST_PIC_V40 1656
#define NET_DVR_RESTORE_V40 1657
#define NET_DVR_SET_NET_SIGNAL 1658
#define NET_DVR_REBOOT_V40 1659
#define NET_DVR_CONTROL_PICTURE_V41 1660
#define NET_DVR_GET_AUTO_REBOOT_CFG 1710
#define NET_DVR_SET_AUTO_REBOOT_CFG 1711
#define NET_DVR_GET_TRUNK_USE_STATE 1713
#define NET_DVR_SET_PTZ_CTRL_INFO 1714
#define NET_DVR_GET_PTZ_CTRL_INFO 1715
#define NET_DVR_GET_PTZ_STATUS 1716
#define NET_DVR_GET_DISP_ROUTE_LIST 1717
#define NET_DVR_GET_DEC_RESOURCE_LIST 1720
#define NET_DVR_SET_DEC_RESOURCE_LIST 1721
#define NET_DVR_GET_DEC_YUV 1722
#define NET_DVR_SET_DEC_YUV 1723
#define NET_DVR_GET_DEC_RESOUCE 1724
#define NET_DVR_FREE_DEC_RESOURCE 1725
#define NET_DVR_SET_VIDEOWALLDISPLAYMODE 1730
#define NET_DVR_GET_VIDEOWALLDISPLAYMODE 1731
#define NET_DVR_GET_VIDEOWALLDISPLAYNO 1732
#define NET_DVR_SET_VIDEOWALLDISPLAYPOSITION 1733
#define NET_DVR_GET_VIDEOWALLDISPLAYPOSITION 1734
#define NET_DVR_GET_VIDEOWALLWINDOWPOSITION 1735
#define NET_DVR_SET_VIDEOWALLWINDOWPOSITION 1736
#define NET_DVR_VIDEOWALLWINDOW_CLOSEALL 1737
#define NET_DVR_SET_VIRTUALLED 1738
#define NET_DVR_GET_VIRTUALLED 1739
#define NET_DVR_GET_IMAGE_CUT_MODE 1740
#define NET_DVR_SET_IMAGE_CUT_MODE 1741
#define NET_DVR_GET_USING_SERIALPORT 1742
#define NET_DVR_SET_USING_SERIALPORT 1743
#define NET_DVR_SCENE_CONTROL 1744
#define NET_DVR_GET_CURRENT_SCENE 1745
#define NET_DVR_GET_VW_SCENE_PARAM 1746
#define NET_DVR_SET_VW_SCENE_PARAM 1747
#define NET_DVR_DISPLAY_CHANNO_CONTROL 1748
#define NET_DVR_GET_WIN_DEC_INFO 1749
#define NET_DVR_RESET_VIDEOWALLDISPLAYPOSITION 1750 
#define NET_DVR_SET_VW_AUDIO_CFG 1752 
#define NET_DVR_GET_VW_AUDIO_CFG 1753 
#define NET_DVR_GET_GBT28181_DECCHANINFO_CFG 1754 
#define NET_DVR_SET_GBT28181_DECCHANINFO_CFG 1755 
#define NET_DVR_SET_MAINBOARD_SERIAL 1756 
#define NET_DVR_GET_MAINBOARD_SERIAL 1757 
#define NET_DVR_GET_SUBBOARD_INFO 1758 
#define NET_DVR_GET_SUBBOARD_EXCEPTION 1759 
#define NET_DVR_GET_CAMERACHAN_SERIALCFG 1760 
#define NET_DVR_SET_CAMERACHAN_SERIALCFG 1761 
#define NET_DVR_GET_MATRIX_STATUS 1762 
#define NET_SET_MULTIFUNCTION_SERIALCFG 1763 
#define NET_GET_MULTIFUNCTION_SERIALCFG 1764 
#define NET_DVR_PTZ_3D_SPEED 1765 
#define NET_DVR_GET_SIGNAL_JOINT 1766 
#define NET_DVR_SET_SIGNAL_JOINT 1767 
#define NET_DVR_SIGNAL_CUT 1768 
#define NET_DVR_DYNAMIC_DECODE_BATCH 1769 
#define NET_DVR_DECSWITCH_SET_BATCH 1770 
#define NET_DVR_DECSWITCH_GET_BATCH 1771 
#define NET_DVR_GET_ALL_SIGNAL_JOINT 1772 
#define NET_DVR_GET_PLAYING_PLAN 1773 
#define NET_DVR_WALL_RELATION_GET 1774 
#define NET_DVR_WALL_RELATION_SET 1775 
#define NET_DVR_SET_INPUTSTREAMCFG_V40 1776 
#define NET_DVR_PTZCFG_INPUTSTREAM_GET 1777 
#define NET_DVR_PTZCFG_INPUTSTREAM_SET 1778 
#define NET_DVR_SIGNAL_CUTPARAM_GET 1779 
#define NET_DVR_GET_SUBSYSTEM_NETCFG 1780 
#define NET_DVR_SET_SUBSYSTEM_NETCFG 1781 
#define NET_DVR_DEL_SIGNAL_JOINT 1782 
#define NET_DVR_GET_PICTURE_INFO 1783 
#define NET_DVR_SET_PICTURE_INFO 1784 
#define NET_DVR_GET_VIDEO_INFO 1785 
#define NET_DVR_SET_VIDEO_INFO 1786 
#define NET_DVR_SET_PLAYLIST 1787 
#define NET_DVR_GET_PLAYLIST 1788 
#define NET_DVR_GET_ALL_PLAYLIST 1789 
#define NET_DVR_PLAYITEM_CONTROL 1790 
#define NET_DVR_SET_PLAYPLAN_TEMPLATE 1791 
#define NET_DVR_GET_PLAYPLAN_TEMPLATE 1792 
#define NET_DVR_GET_ALL_PLAYPLAN_TEMPLATE 1793 
#define NET_DVR_SET_WINDOW_PLAYPLAN 1794 
#define NET_DVR_GET_WINDOW_PLAYPLAN 1795 
#define NET_DVR_TOPLAY_ITEM 1796 
#define NET_DVR_DEVICE_PLAY_CONTROL 1797 
#define NET_DVR_GET_PLAY_INFO 1798 
#define NET_DVR_GET_ALL_PICTURE_INFO 1799 
#define NET_DVR_GET_ALL_VIDEO_INFO 1800 
#define NET_DVR_DELETE_VIDEO_FILE 1801 
#define NET_DVR_GET_ALARMHOSTSUBSYSTEM_CFG 2001
#define NET_DVR_SET_ALARMHOSTSUBSYSTEM_CFG 2002
#define NET_DVR_GETEXTENDALARMININFO 2003
#define NET_DVR_MODIFYALARMINNO 2004
#define NET_DVR_GET_ALARMHOST_WIRELESS_NETWORK_CFG 2005
#define NET_DVR_SET_ALARMHOST_WIRELESS_NETWORK_CFG 2006
#define NET_DVR_GET_ALARMHOST_NETCFG 2007
#define NET_DVR_SET_ALARMHOST_NETCFG 2008
#define NET_DVR_GET_LED_SCREEN_CFG 2009
#define NET_DVR_SET_LED_SCREEN_CFG 2010
#define NET_DVR_GET_LED_CONTENT_CFG 2011
#define NET_DVR_SET_LED_CONTENT_CFG 2012
#define NET_DVR_TURNON_LED 2013
#define NET_DVR_TURNOFF_LED 2014
#define NET_DVR_GET_LED_TIMER_SWITCH 2015
#define NET_DVR_SET_LED_TIMER_SWITCH 2016
#define NET_DVR_SET_LED_BRIGHTNESS 2017
#define NET_DVR_GET_LED_TIMER_BRIGHTNESS 2018
#define NET_DVR_SET_LED_TIMER_BRIGHTNESS 2019
#define NET_DVR_LED_CHECKTIME 2020
#define NET_DVR_GET_ALARMHOST_AUDIO_ASSOCIATE_ALARM 2021
#define NET_DVR_SET_ALARMHOST_AUDIO_ASSOCIATE_ALARM 2022
#define NET_DVR_GET_LED_STATUS 2023
#define NET_DVR_CLOSE_SUBSYSTEM_FAULT_ALARM 2027
#define NET_DVR_SET_SUBSYSTEM_BYPASS 2028
#define NET_DVR_CANCEL_SUBSYSTEM_BYPASS 2029
#define NET_DVR_GET_ALARMHOST_SUBSYSTEM_CFG_EX 2030
#define NET_DVR_SET_ALARMHOST_SUBSYSTEM_CFG_EX 2031
#define NET_DVR_GET_ALARMHOST_PRINTER_CFG 2032
#define NET_DVR_SET_ALARMHOST_PRINTER_CFG 2033
#define NET_DVR_GET_ALARMHOST_ZONE_LIST_IN_SUBSYSTEM 2034
#define NET_DVR_GET_ALARMHOST_TRIGGER_LIST 2035
#define NET_DVR_ARM_ALARMHOST_SUBSYSTEM 2036
#define NET_DVR_GET_ALARMHOST_EVENT_TRIG_ALARMOUT_CFG 2037
#define NET_DVR_SET_ALARMHOST_EVENT_TRIG_ALARMOUT_CFG 2038
#define NET_DVR_GET_ALARMHOST_FAULT_CFG 2039
#define NET_DVR_SET_ALARMHOST_FAULT_CFG 2040
#define NET_DVR_SEARCH_ARMHOST_EXTERNAL_MODULE 2041
#define NET_DVR_REGISTER_ALARMHOST_EXTERNAL_MODULE 2042
#define NET_DVR_CLOSE_ALARMHOST_OVERALL_FAULT_ALARM 2043
#define NET_DVR_GET_SAFETYCABIN_WORK_MODE 2044
#define NET_DVR_SET_SAFETYCABIN_WORK_MODE 2045
#define NET_DVR_GET_SAFETYCABIN_PERSON_SIGNAL_CFG 2046
#define NET_DVR_SET_SAFETYCABIN_PERSON_SIGNAL_CFG 2047
#define NET_DVR_GET_ALARMHOST_MODULE_CFG 2048
#define NET_DVR_GET_ALARMHOST_EXTERNAL_DEVICE_STATE 2050
#define NET_DVR_SET_ALARMHOST_EXTERNAL_DEVICE_LIMIT_VALUE 2051
#define NET_DVR_GET_ALARMHOST_EXTERNAL_DEVICE_LIMIT_VALUE 2052
#define NET_DVR_GET_ALARMHOST_SENSOR_JOINT_CFG 2053
#define NET_DVR_SET_ALARMHOST_SENSOR_JOINT_CFG 2054
#define NET_DVR_SET_ALARMHOST_RS485_SLOT_CFG 2055
#define NET_DVR_GET_ALARMHOST_RS485_SLOT_CFG 2056
#define NET_DVR_GET_ALL_VARIABLE_INFO 2057 
#define NET_DVR_GET_ALARM_POINT_CFG 2058 
#define NET_DVR_SET_ALARM_POINT_CFG 2059 
#define NET_DVR_GET_HISTORY_VALUE 2060 
#define NET_DVR_GET_ALARMHOST_ALARM_MODE 2061 
#define NET_DVR_SET_ALARMHOST_ALARM_MODE 2062 
#define NET_DVR_GET_ALARMHOST_SENSOR_VALUE 2063 
#define NET_DVR_GET_ALARMHOST_REPORT_CENTER_V40 2064 
#define NET_DVR_SET_ALARMHOST_REPORT_CENTER_V40 2065 
#define NET_DVR_GET_OUTPUT_SCHEDULE_RULECFG 2068 
#define NET_DVR_SET_OUTPUT_SCHEDULE_RULECFG 2069 
#define NET_DVR_GET_CMS_CFG 2070
#define NET_DVR_SET_CMS_CFG 2071
#define NET_DVR_GET_PASSTHROUGH_CAP 2073 
#define NET_DVR_GET_ALARMHOST_MAIN_STATUS_V40 2072 
#define NET_DVR_GET_ALARMHOST_MAIN_STATUS_V51 2083 
#define NET_DVR_GET_ALARM_CAPTRUE_CFG 2074 
#define NET_DVR_SET_ALARM_CAPTRUE_CFG 2075 
#define NET_DVR_GET_ONE_OUTPUT_SCH_RULECFG_V40 2078 
#define NET_DVR_SET_ONE_OUTPUT_SCH_RULECFG_V40 2079 
#define NET_DVR_GET_OUTPUT_SCHEDULE_RULECFG_V40 2080 
#define NET_DVR_SET_OUTPUT_SCHEDULE_RULECFG_V40 2081 
#define NET_DVR_ALARMHOST_CLOSE_SUBSYSTEM 2082 
#define NET_DVR_GET_WEEK_PLAN_CFG 2100 
#define NET_DVR_SET_WEEK_PLAN_CFG 2101 
#define NET_DVR_GET_DOOR_STATUS_HOLIDAY_PLAN 2102 
#define NET_DVR_SET_DOOR_STATUS_HOLIDAY_PLAN 2103 
#define NET_DVR_GET_DOOR_STATUS_HOLIDAY_GROUP 2104 
#define NET_DVR_SET_DOOR_STATUS_HOLIDAY_GROUP 2105 
#define NET_DVR_GET_DOOR_STATUS_PLAN_TEMPLATE 2106 
#define NET_DVR_SET_DOOR_STATUS_PLAN_TEMPLATE 2107 
#define NET_DVR_GET_DOOR_CFG 2108 
#define NET_DVR_SET_DOOR_CFG 2109 
#define NET_DVR_GET_DOOR_STATUS_PLAN 2110 
#define NET_DVR_SET_DOOR_STATUS_PLAN 2111 
#define NET_DVR_GET_GROUP_CFG 2112 
#define NET_DVR_SET_GROUP_CFG 2113 
#define NET_DVR_GET_MULTI_CARD_CFG 2114 
#define NET_DVR_SET_MULTI_CARD_CFG 2115 
#define NET_DVR_GET_CARD_CFG 2116 
#define NET_DVR_SET_CARD_CFG 2117 
#define NET_DVR_CLEAR_ACS_PARAM 2118 
#define NET_DVR_GET_SNEAK_CFG 2119 
#define NET_DVR_SET_SNEAK_CFG 2120 
#define NET_DVR_GET_MULTI_DOOR_INTERLOCK_CFG 2121 
#define NET_DVR_SET_MULTI_DOOR_INTERLOCK_CFG 2122 
#define NET_DVR_GET_ACS_WORK_STATUS 2123 
#define NET_DVR_GET_VERIFY_WEEK_PLAN 2124 
#define NET_DVR_SET_VERIFY_WEEK_PLAN 2125 
#define NET_DVR_GET_CARD_RIGHT_WEEK_PLAN 2126 
#define NET_DVR_SET_CARD_RIGHT_WEEK_PLAN 2127 
#define NET_DVR_GET_VERIFY_HOLIDAY_PLAN 2128 
#define NET_DVR_SET_VERIFY_HOLIDAY_PLAN 2129 
#define NET_DVR_GET_CARD_RIGHT_HOLIDAY_PLAN 2130 
#define NET_DVR_SET_CARD_RIGHT_HOLIDAY_PLAN 2131 
#define NET_DVR_GET_VERIFY_HOLIDAY_GROUP 2132 
#define NET_DVR_SET_VERIFY_HOLIDAY_GROUP 2133 
#define NET_DVR_GET_CARD_RIGHT_HOLIDAY_GROUP 2134 
#define NET_DVR_SET_CARD_RIGHT_HOLIDAY_GROUP 2135 
#define NET_DVR_GET_VERIFY_PLAN_TEMPLATE 2136 
#define NET_DVR_SET_VERIFY_PLAN_TEMPLATE 2137 
#define NET_DVR_GET_CARD_RIGHT_PLAN_TEMPLATE 2138 
#define NET_DVR_SET_CARD_RIGHT_PLAN_TEMPLATE 2139 
#define NET_DVR_GET_CARD_READER_CFG 2140 
#define NET_DVR_SET_CARD_READER_CFG 2141 
#define NET_DVR_GET_CARD_READER_PLAN 2142 
#define NET_DVR_SET_CARD_READER_PLAN 2143 
#define NET_DVR_GET_CASE_SENSOR_CFG 2144 
#define NET_DVR_SET_CASE_SENSOR_CFG 2145 
#define NET_DVR_GET_CARD_READER_ANTI_SNEAK_CFG 2146 
#define NET_DVR_SET_CARD_READER_ANTI_SNEAK_CFG 2147 
#define NET_DVR_GET_PHONE_DOOR_RIGHT_CFG 2148 
#define NET_DVR_SET_PHONE_DOOR_RIGHT_CFG 2149 
#define NET_DVR_GET_FINGERPRINT_CFG 2150 
#define NET_DVR_SET_FINGERPRINT_CFG 2151 
#define NET_DVR_DEL_FINGERPRINT_CFG 2152 
#define NET_DVR_GET_EVENT_CARD_LINKAGE_CFG 2153 
#define NET_DVR_SET_EVENT_CARD_LINKAGE_CFG 2154 
#define NET_DVR_GET_ANTI_SNEAK_HOST_CFG 2155 
#define NET_DVR_SET_ANTI_SNEAK_HOST_CFG 2156 
#define NET_DVR_GET_READER_ANTI_SNEAK_HOST_CFG 2157 
#define NET_DVR_SET_READER_ANTI_SNEAK_HOST_CFG 2158 
#define NET_DVR_GET_ACS_CFG 2159 
#define NET_DVR_SET_ACS_CFG 2160 
#define NET_DVR_GET_CARD_PASSWD_CFG 2161 
#define NET_DVR_SET_CARD_PASSWD_CFG 2162 
#define NET_DVR_GET_CARD_USERINFO_CFG 2163 
#define NET_DVR_SET_CARD_USERINFO_CFG 2164 
#define NET_DVR_GET_ACS_EXTERNAL_DEV_CFG 2165 
#define NET_DVR_SET_ACS_EXTERNAL_DEV_CFG 2166 
#define NET_DVR_GET_PERSONNEL_CHANNEL_CFG 2167 
#define NET_DVR_SET_PERSONNEL_CHANNEL_CFG 2168 
#define NET_DVR_SET_PLATFORM_VERIFY_CFG 2169 
#define NET_DVR_GET_PERSON_STATISTICS_CFG 2170 
#define NET_DVR_SET_PERSON_STATISTICS_CFG 2171 
#define NET_DVR_GET_ACS_SCREEN_DISPLAY_CFG 2172 
#define NET_DVR_SET_ACS_SCREEN_DISPLAY_CFG 2173 
#define NET_DVR_GET_GATE_TIME_CFG 2174 
#define NET_DVR_SET_GATE_TIME_CFG 2175 
#define NET_DVR_GET_LOCAL_CONTROLLER_STATUS 2176 
#define NET_DVR_GET_ONLINE_LOCAL_CONTROLLER 2177 
#define NET_DVR_GET_CARD_CFG_V50 2178 
#define NET_DVR_SET_CARD_CFG_V50 2179 
#define NET_DVR_GET_ACS_WORK_STATUS_V50 2180 
#define NET_DVR_GET_EVENT_CARD_LINKAGE_CFG_V50 2181 
#define NET_DVR_SET_EVENT_CARD_LINKAGE_CFG_V50 2182 
#define NET_DVR_GET_FINGERPRINT_CFG_V50 2183 
#define NET_DVR_SET_FINGERPRINT_CFG_V50 2184 
#define NET_DVR_GET_SAFETYCABIN_STATE 2197 
#define NET_DVR_GET_RS485_CASCADE_CFG 2198 
#define NET_DVR_SET_RS485_CASCADE_CFG 2199 
#define NET_DVR_GET_REMOTECONTROLLER_PERMISION_CFG 2200 
#define NET_DVR_SET_REMOTECONTROLLER_PERMISION_CFG 2201 
#define NET_DVR_GET_KEYBOARD_CFG 2202 
#define NET_DVR_SET_KEYBOARD_CFG 2203 
#define NET_DVR_GET_ALARMHOST_WIRELESS_BUSINNESS_INFO 2204 
#define NET_DVR_GET_ALL_REMOTECONTROLLER_LIST 2205 
#define NET_DVR_GET_PREVIEW_DELAY_CFG 2206 
#define NET_DVR_SET_PREVIEW_DELAY_CFG 2207 
#define NET_DVR_GET_ZONE_CHANNEL_LINKAGE_CFG 2208 
#define NET_DVR_SET_ZONE_CHANNEL_LINKAGE_CFG 2209 
#define NET_DVR_GET_CENTER_SERVER_CFG 2210 
#define NET_DVR_SET_CENTER_SERVER_CFG 2211 
#define NET_DVR_GET_EMERGENCE_ALARM_PRODUCT_CAP 2212 
#define NET_DVR_GET_CALL_WAITTING_CFG_CAP 2213 
#define NET_DVR_GET_CALL_WAITTING_CFG 2214 
#define NET_DVR_SET_CALL_WAITTING_CFG 2215 
#define NET_DVR_GET_ALARM_LAMP_CFG_CAP 2216 
#define NET_DVR_GET_ALARM_LAMP_CFG 2217 
#define NET_DVR_SET_ALARM_LAMP_CFG 2218 
#define NET_DVR_GET_VOICE_PROMPTION_CFG_CAP 2219 
#define NET_DVR_GET_VOICE_PROMPTION_CFG 2220 
#define NET_DVR_SET_VOICE_PROMPTION_CFG 2221 
#define NET_DVR_GET_EMERGENCE_ALARM_RESPONSE_CAP 2222 
#define NET_DVR_EMERGENCE_ALARM_RESPONSE_CTRL 2223 
#define NET_DVR_GET_ALARMHOST_NETCFG_V50 2224 
#define NET_DVR_SET_ALARMHOST_NETCFG_V50 2225 
#define NET_DVR_REGISTER_ALARM_RS485 2226 
#define NET_DVR_GET_ALARMIN_PARAM_LIST 2227 
#define NET_DVR_GET_ALARMHOST_OTHER_STATUS_V50 2228 
#define NET_DVR_GET_ALARMHOST_OTHER_STATUS_V51 2236 
#define NET_DVR_GET_ALARMIN_ASSOCIATED_CHAN_LIST 2229 
#define NET_DVR_GET_ALARMIN_TRIGGER 2230 
#define NET_DVR_SET_ALARMIN_TRIGGER 2231 
#define NET_DVR_GET_EMERGENCY_CALL_HELP_TRIGGER 2232 
#define NET_DVR_SET_EMERGENCY_CALL_HELP_TRIGGER 2233 
#define NET_DVR_GET_CONSULT_TRIGGER 2234 
#define NET_DVR_SET_CONSULT_TRIGGER 2235 
#define NET_DVR_GET_ALARMIN_PARAM_LIST_V50 2237 
#define NET_DVR_GET_CARD_RIGHT_WEEK_PLAN_V50 2304 
#define NET_DVR_SET_CARD_RIGHT_WEEK_PLAN_V50 2305 
#define NET_DVR_GET_CARD_RIGHT_HOLIDAY_PLAN_V50 2310 
#define NET_DVR_SET_CARD_RIGHT_HOLIDAY_PLAN_V50 2311 
#define NET_DVR_GET_CARD_RIGHT_HOLIDAY_GROUP_V50 2316
#define NET_DVR_SET_CARD_RIGHT_HOLIDAY_GROUP_V50 2317
#define NET_DVR_GET_CARD_RIGHT_PLAN_TEMPLATE_V50 2322
#define NET_DVR_SET_CARD_RIGHT_PLAN_TEMPLATE_V50 2323
#define NET_DVR_GET_SCHEDULE_INFO 2500 
#define NET_DVR_GET_ATTENDANCE_SUMMARY_INFO 2501 
#define NET_DVR_GET_ATTENDANCE_RECORD_INFO 2502 
#define NET_DVR_GET_ABNORMAL_INFO 2503 
#define NET_DVR_CAPTURE_FINGERPRINT_INFO 2504 
#define NET_DVR_BULK_UPLOAD_BLACK_LIST_PICTURE 2520 
#define NET_DVR_BULK_UPLOAD_ID_BLACK_LIST 2521 
#define NET_DVR_GET_FAILED_FACE_INFO 2522 
#define NET_DVR_GET_FACE_AND_TEMPLATE 2523 
#define NET_DVR_SET_FACE_AND_TEMPLATE 2524 
#define NET_DVR_GET_CARD_READER_CFG_V50 2505 
#define NET_DVR_SET_CARD_READER_CFG_V50 2506 
#define NET_DVR_GET_FACE_PARAM_CFG 2507 
#define NET_DVR_SET_FACE_PARAM_CFG 2508 
#define NET_DVR_DEL_FACE_PARAM_CFG 2509 
#define NET_DVR_CAPTURE_FACE_INFO 2510 
#define NET_DVR_GET_REGISTER_INFO 2511 
#define NET_DVR_GET_SMSRELATIVEPARA_V50 2512 
#define NET_DVR_SET_SMSRELATIVEPARA_V50 2513 
#define NET_DVR_GET_ACS_EVENT 2514 
#define NET_DVR_GET_MULTI_CARD_CFG_V50 2515 
#define NET_DVR_SET_MULTI_CARD_CFG_V50 2516 
#define NET_DVR_DEL_FINGERPRINT_CFG_V50 2517 
#define NET_DVR_GET_EVENT_CARD_LINKAGE_CFG_V51 2518 
#define NET_DVR_SET_EVENT_CARD_LINKAGE_CFG_V51 2519 
#define NET_DVR_SET_EXAM_INFO 2530 
#define NET_DVR_SET_EXAMINEE_INFO 2531 
#define NET_DVR_SEARCH_EXAM_COMPARE_RESULT 2532 
#define NET_DVR_BULK_CHECK_FACE_PICTURE 2533 
#define NET_DVR_JSON_CONFIG 2550 
#define NET_DVR_FACE_DATA_RECORD 2551 
#define NET_DVR_FACE_DATA_SEARCH 2552 
#define NET_DVR_FACE_DATA_MODIFY 2553 
#define NET_DVR_CAPTURE_DATA_SEARCH 2554 
#define NET_DVR_GET_CARD 2560
#define NET_DVR_SET_CARD 2561
#define NET_DVR_DEL_CARD 2562
#define NET_DVR_GET_FINGERPRINT 2563
#define NET_DVR_SET_FINGERPRINT 2564
#define NET_DVR_DEL_FINGERPRINT 2565
#define NET_DVR_GET_FACE 2566
#define NET_DVR_SET_FACE 2567
#define NET_DVR_GET_ALL_ALARM_RS485CFG 2705 
#define NET_DVR_GET_ALL_ALARMHOST_RS485_SLOT_CFG 2706 
#define NET_DVR_GET_DEVICE_SELF_CHECK_STATE 2707 
#define NET_DVR_GET_ALL_ALARM_POINT_CFG 2708 
#define NET_DVR_GET_ALL_ALARM_SENSOR_CFG 2709 
#define NET_DVR_GET_ALL_ALARM_SENSOR_JOINT 2710 
#define NET_DVR_GET_AIR_CONDITION_PARAM 2711 
#define NET_DVR_GET_OUT_SCALE_CFG 2712 
#define NET_DVR_SET_OUT_SCALE_CFG 2713 
#define NET_DVR_GET_ALARM_CHAN_ABLITITY 2714 
#define NET_DVR_GET_ALARMCENTER_NETCFG 2715 
#define NET_DVR_SET_ALARMCENTER_NETCFG 2716 
#define NET_ITC_GET_TRIGGERCFG 3003 
#define NET_ITC_SET_TRIGGERCFG 3004 
#define NET_ITC_GET_IOOUT_PARAM_CFG 3005 
#define NET_ITC_SET_IOOUT_PARAM_CFG 3006 
#define NET_DVR_GET_CAMERA_SETUPCFG 3007 
#define NET_DVR_SET_CAMERA_SETUPCFG 3008 
#define NET_ITC_GET_TRIGGER_DEFAULTCFG 3013 
#define NET_DVR_GET_STATUS_DETECTCFG 3015 
#define NET_DVR_SET_STATUS_DETECTCFG 3016 
#define NET_ITC_GET_VIDEO_TRIGGERCFG 3017 
#define NET_ITC_SET_VIDEO_TRIGGERCFG 3018 
#define NET_DVR_GET_TPS_ALARMCFG 3019 
#define NET_DVR_SET_TPS_ALARMCFG 3020 
#define NET_DVR_GET_REDAREACFG 3100 
#define NET_DVR_SET_REDAREACFG 3101 
#define NET_DVR_GET_TEST_SPOT 3102 
#define NET_DVR_SET_TEST_SPOT 3103 
#define NET_DVR_GET_CABINETCFG 3104 
#define NET_DVR_SET_CABINETCFG 3105 
#define NET_DVR_VEHICLE_CHECK_START 3106 
#define NET_DVR_SET_CAPTUREPIC_CFG 3107 
#define NET_DVR_GET_CAPTUREPIC_CFG 3108 
#define NET_DVR_SET_MOBILEPLATE_RECOG_CFG 3109 
#define NET_DVR_GET_MOBILEPLATE_RECOG_CFG 3110 
#define NET_DVR_SET_MOBILE_RADAR_CFG 3111 
#define NET_DVR_GET_MOBILE_RADAR_CFG 3112 
#define NET_DVR_SET_MOBILE_LOCALPLATECHK_CFG 3113 
#define NET_DVR_GET_MOBILE_LOCALPLATECHK_CFG 3114 
#define NET_ITC_GET_ICRCFG 3115 
#define NET_ITC_SET_ICRCFG 3116 
#define NET_ITC_GET_RS485_ACCESSINFO 3117 
#define NET_ITC_SET_RS485_ACCESSINFO 3118 
#define NET_ITC_GET_EXCEPTIONCFG 3119 
#define NET_ITC_SET_EXCEPTIONCFG 3120 
#define NET_ITC_GET_FTPCFG 3121 
#define NET_ITC_SET_FTPCFG 3122 
#define NET_DVR_VEHICLE_CONTROL_LIST_START 3123 
#define NET_DVR_GET_ALL_VEHICLE_CONTROL_LIST 3124 
#define NET_DVR_VEHICLE_DELINFO_CTRL 3125 
#define NET_DVR_GET_ENTRANCE_PARAMCFG 3126 
#define NET_DVR_SET_ENTRANCE_PARAMCFG 3127 
#define NET_DVR_BARRIERGATE_CTRL 3128 
#define NET_DVR_GATELAMP_CTRL 3129 
#define NET_DVR_GET_CURTRIGGERMODE 3130 
#define NET_DVR_GET_GPSDATACFG 3131 
#define NET_DVR_SET_GPSDATACFG 3132 
#define NET_DVR_VEHICLELIST_CTRL_START 3133 
#define NET_DVR_GET_GUARDCFG 3134 
#define NET_DVR_SET_GUARDCFG 3135 
#define NET_DVR_GET_SNAPINFO_CFG 3136 
#define NET_DVR_SET_SNAPINFO_CFG 3137 
#define NET_DVR_GET_SNAPINFO_CFG_V40 3138 
#define NET_DVR_SET_SNAPINFO_CFG_V40 3139 
#define NET_DVR_SET_CURTRIGGERMODE 3140 
#define NET_DVR_GET_TRAFFIC_DATA 3141 
#define NET_DVR_GET_TRAFFIC_FLOW 3142 
#define NET_DVR_PARKING_VEHICLE_SEND 3143 
#define NET_DVR_PARKING_CARD_SEND 3144 
#define NET_DVR_PARKING_CARD_CTRL 3145 
#define NET_DVR_GET_ALARMCTRL_CAPABILITIES 3146 
#define NET_DVR_SET_ALARMCTRL_CFG 3147 
#define NET_DVR_GET_ALARMCTRL_CFG 3148 
#define NET_DVR_GET_AUDIO_INPUT 3201 
#define NET_DVR_SET_AUDIO_INPUT 3202 
#define NET_DVR_GET_CAMERA_DEHAZE_CFG 3203 
#define NET_DVR_SET_CAMERA_DEHAZE_CFG 3204 
#define NET_DVR_REMOTECONTROL_ALARM 3205 
#define NET_DVR_REMOTECONTROL_DISALARM 3206 
#define NET_DVR_REMOTECONTROL_STUDY 3207 
#define NET_DVR_WIRELESS_ALARM_STUDY 3208 
#define NET_IPC_GET_AUX_ALARMCFG 3209 
#define NET_IPC_SET_AUX_ALARMCFG 3210 
#define NET_DVR_GET_PREVIEW_DISPLAYCFG 3211 
#define NET_DVR_SET_PREVIEW_DISPLAYCFG 3212 
#define NET_DVR_REMOTECONTROL_PTZ 3213 
#define NET_DVR_REMOTECONTROL_PRESETPOINT 3214 
#define NET_DVR_REMOTECONTROL_CRUISE 3215 
#define NET_DVR_GET_MULTI_STREAM_COMPRESSIONCFG 3216
#define NET_DVR_SET_MULTI_STREAM_COMPRESSIONCFG 3217
#define NET_DVR_GET_WPSCFG 3218 
#define NET_DVR_SET_WPSCFG 3219 
#define NET_DVR_WPS_CONNECT 3220 
#define NET_DVR_GET_DEVICE_PIN 3221 
#define NET_DVR_UPDATE_PIN 3223 
#define NET_DVR_GET_PRESETCFG 3224 
#define NET_DVR_GET_PTZCRUISECFG 3225 
#define NET_DVR_GET_PRESET_NUM 3226 
#define NET_DVR_GET_PTZCRUISE_NUM 3227 
#define NET_DVR_GET_MOTION_TRACK_CFG 3228 
#define NET_DVR_SET_MOTION_TRACK_CFG 3229 
#define NET_DVR_CLEAR_IPC_PARAM 3230 
#define NET_DVR_GET_IPADDR_FILTERCFG 3232 
#define NET_DVR_SET_IPADDR_FILTERCFG 3233 
#define NET_DVR_GET_LOGO_OVERLAYCFG 3234 
#define NET_DVR_SET_LOGO_OVERLAYCFG 3235 
#define NET_DVR_GET_IPV6_LIST 3236 
#define NET_DVR_GET_AUDIOOUT_VOLUME 3237 
#define NET_DVR_SET_AUDIOOUT_VOLUME 3238 
#define NET_DVR_GET_FUZZY_UPGRADE 3239 
#define NET_DVR_GET_BV_CORRECT_PARAM 3240 
#define NET_DVR_SET_BV_CORRECT_PARAM 3241 
#define NET_DVR_GET_OUTPUT_VIDEO_TYPE 3242 
#define NET_DVR_SET_OUTPUT_VIDEO_TYPE 3243 
#define NET_DVR_FISHEYE_CFG 3244 
#define NET_DVR_GET_PTZ_POINT 3245 
#define NET_DVR_SET_PTZ_POINT 3246 
#define NET_DVR_REMOTECONTROL_DEV_PARAM 3247 
#define NET_DVR_GET_FISHEYE_STREAM_STATUS 3248 
#define NET_DVR_GET_GBT28181_ACCESS_CFG 3249 
#define NET_DVR_SET_GBT28181_ACCESS_CFG 3250 
#define NET_DVR_GET_GBT28181_CHANINFO_CFG 3251 
#define NET_DVR_SET_GBT28181_CHANINFO_CFG 3252 
#define NET_DVR_GET_GBT28181_ALARMINCFG 3253 
#define NET_DVR_SET_GBT28181_ALARMINCFG 3254 
#define NET_DVR_GET_ISP_CAMERAPARAMCFG 3255 
#define NET_DVR_SET_ISP_CAMERAPARAMCFG 3256 
#define NET_DVR_GET_DEVSERVER_CFG 3257 
#define NET_DVR_SET_DEVSERVER_CFG 3258 
#define NET_DVR_GET_WIPERINFO_CFG 3259 
#define NET_DVR_SET_WIPERINFO_CFG 3260 
#define NET_DVR_GET_TRACK_DEV_PARAM 3261 
#define NET_DVR_SET_TRACK_DEV_PARAM 3262 
#define NET_DVR_GET_PTZ_TRACK_PARAM 3263 
#define NET_DVR_SET_PTZ_TRACK_PARAM 3264 
#define NET_DVR_GET_CENTER_POINT_CFG 3265 
#define NET_DVR_SET_CENTER_POINT_CFG 3266 
#define NET_DVR_GET_CENTER_POINT_CFG_CAPABILITIES 3267 
#define NET_DVR_GET_FISHEYE_CAPABILITIES 3268 
#define NET_DVR_GET_BASICPARAMCFG 3270
#define NET_DVR_SET_BASICPARAMCFG 3271
#define NET_DVR_GET_PTZOSDCFG 3272
#define NET_DVR_SET_PTZOSDCFG 3273
#define NET_DVR_GET_POWEROFFMEMCFG 3274
#define NET_DVR_SET_POWEROFFMEMCFG 3275
#define NET_DVR_GET_LIMITCFG 3276
#define NET_DVR_SET_LIMITCFG 3277
#define NET_DVR_PTZLIMIT_CTRL 3278
#define NET_DVR_PTZ_CLEARCTRL 3279
#define NET_DVR_GET_PRIORITIZECFG 3281
#define NET_DVR_SET_PRIORITIZECFG 3282
#define NET_DVR_PTZ_INITIALPOSITIONCTRL 3283
#define NET_DVR_GET_PRIVACY_MASKSCFG 3285
#define NET_DVR_SET_PRIVACY_MASKSCFG 3286
#define NET_DVR_GET_PTZLOCKCFG 3287
#define NET_DVR_SET_PTZLOCKCFG 3288
#define NET_DVR_PTZ_ZOOMRATIOCTRL 3289
#define NET_DVR_GET_PTZLOCKINFO 3290
#define NET_DVR_GET_PRIVACY_MASKS_ENABLECFG 3291
#define NET_DVR_SET_PRIVACY_MASKS_ENABLECFG 3292
#define NET_DVR_GET_SMARTTRACKCFG 3293
#define NET_DVR_SET_SMARTTRACKCFG 3294
#define NET_DVR_GET_EPTZ_CFG 3295
#define NET_DVR_SET_EPTZ_CFG 3296
#define NET_DVR_GET_EPTZ_CFG_CAPABILITIES 3297
#define NET_DVR_GET_LOW_LIGHTCFG 3303
#define NET_DVR_SET_LOW_LIGHTCFG 3304
#define NET_DVR_GET_FOCUSMODECFG 3305
#define NET_DVR_SET_FOCUSMODECFG 3306
#define NET_DVR_GET_INFRARECFG 3307
#define NET_DVR_SET_INFRARECFG 3308
#define NET_DVR_GET_AEMODECFG 3309
#define NET_DVR_SET_AEMODECFG 3310
#define NET_DVR_CONTROL_RESTORE_SUPPORT 3311
#define NET_DVR_CONTROL_RESTART_SUPPORT 3312
#define NET_DVR_CONTROL_PTZ_PATTERN 3313
#define NET_DVR_GET_PTZ_PARKACTION_CFG 3314
#define NET_DVR_SET_PTZ_PARKACTION_CFG 3315
#define NET_DVR_CONTROL_PTZ_MANUALTRACE 3316
#define NET_DVR_GET_ROI_DETECT_NUM 3349
#define NET_DVR_GET_ROI_DETECT 3350
#define NET_DVR_SET_ROI_DETECT 3351
#define NET_DVR_GET_FACE_DETECT 3352
#define NET_DVR_SET_FACE_DETECT 3353
#define NET_DVR_GET_CORRIDOR_MODE 3354
#define NET_DVR_SET_CORRIDOR_MODE 3355
#define NET_DVR_GET_SCENECHANGE_DETECTIONCFG 3356
#define NET_DVR_SET_SCENECHANGE_DETECTIONCFG 3357
#define NET_DVR_GET_TRAVERSE_PLANE_DETECTION 3360 
#define NET_DVR_SET_TRAVERSE_PLANE_DETECTION 3361 
#define NET_DVR_GET_FIELD_DETECTION 3362
#define NET_DVR_SET_FIELD_DETECTION 3363
#define NET_DVR_GET_DEFOCUSPARAM 3364
#define NET_DVR_SET_DEFOCUSPARAM 3365
#define NET_DVR_GET_AUDIOEXCEPTIONPARAM 3366
#define NET_DVR_SET_AUDIOEXCEPTIONPARAM 3367
#define NET_DVR_GET_CCDPARAMCFG_EX 3368
#define NET_DVR_SET_CCDPARAMCFG_EX 3369
#define NET_DVR_START_GET_INPUTVOLUME 3370
#define NET_DVR_SET_SCH_TASK 3380
#define NET_DVR_GET_SCH_TASK 3381 
#define NET_DVR_SET_PRESET_NAME 3382
#define NET_DVR_GET_PRESET_NAME 3383
#define NET_DVR_SET_AUDIO_NAME 3384
#define NET_DVR_GET_AUDIO_NAME 3385 
#define NET_DVR_RESUME_INITRACKPOS 3386 
#define NET_DVR_NTP_SERVER_TEST 3387 
#define NET_DVR_NAS_SERVER_TEST 3388 
#define NET_DVR_EMAIL_SERVER_TEST 3389 
#define NET_DVR_FTP_SERVER_TEST 3390 
#define NET_DVR_IP_TEST 3391 
#define NET_DVR_GET_NET_DISKCFG_V40 3392
#define NET_DVR_SET_NET_DISKCFG_V40 3393
#define NET_DVR_GET_IOOUT_CFG 3394
#define NET_DVR_SET_IOOUT_CFG 3395
#define NET_DVR_GET_SIGNAL_SYNC 3396
#define NET_DVR_SET_SIGNAL_SYNC 3397
#define NET_DVR_GET_EZVIZ_ACCESS_CFG 3398
#define NET_DVR_SET_EZVIZ_ACCESS_CFG 3399
#define NET_DVR_GET_SCHEDULE_AUTO_TRACK_CFG 3400
#define NET_DVR_SET_SCHEDULE_AUTO_TRACK_CFG 3401
#define NET_DVR_MAKE_I_FRAME 3402
#define NET_DVR_GET_ALARM_RELATE 3403
#define NET_DVR_SET_ALARM_RELATE 3404
#define NET_DVR_GET_PDC_RULECFG_V42 3405 
#define NET_DVR_SET_PDC_RULECFG_V42 3406 
#define NET_DVR_GET_HEATMAP_CFG 3407 
#define NET_DVR_SET_HEATMAP_CFG 3408 
#define NET_DVR_REMOTECONTROL_LINEARSCAN 3409 
#define NET_DVR_DPC_CTRL 3410
#define NET_DVR_FFC_MANUAL_CTRL 3411
#define NET_DVR_FFC_BACKCOMP_CTRL 3412
#define NET_DVR_GET_FOCUSING_POSITION_STATE 3413
#define NET_DVR_GET_PRIVATE_PROTOCOL_CFG 3414 
#define NET_DVR_SET_PRIVATE_PROTOCOL_CFG 3415 
#define NET_DVR_COMPLETE_RESTORE_CTRL 3420 
#define NET_DVR_CLOUDSTORAGE_SERVER_TEST 3421 
#define NET_DVR_PHONE_NUM_TEST 3422 
#define NET_DVR_GET_REMOTECONTROL_STATUS 3423 
#define NET_DVR_GET_MONITOR_LOCATION_INFO 3424 
#define NET_DVR_SET_MONITOR_LOCATION_INFO 3425 
#define NET_DVR_GET_SMART_CAPABILITIES 3500 
#define NET_DVR_GET_EVENT_TRIGGERS_CAPABILITIES 3501 
#define NET_DVR_GET_REGION_ENTRANCE_CAPABILITIES 3502 
#define NET_DVR_GET_REGION_ENTR_DETECTION 3503 
#define NET_DVR_SET_REGION_ENTR_DETECTION 3504 
#define NET_DVR_GET_REGION_ENTR_REGION 3505 
#define NET_DVR_SET_REGION_ENTR_REGION 3506 
#define NET_DVR_GET_REGION_ENTR_TRIGGER 3507 
#define NET_DVR_SET_REGION_ENTR_TRIGGER 3508 
#define NET_DVR_GET_REGION_ENTR_SCHEDULE 3509 
#define NET_DVR_SET_REGION_ENTR_SCHEDULE 3510 
#define NET_DVR_GET_REGION_EXITINT_CAPABILITIES 3511 
#define NET_DVR_GET_REGION_EXITING_DETECTION 3512 
#define NET_DVR_SET_REGION_EXITING_DETECTION 3513 
#define NET_DVR_GET_REGION_EXITING_REGION 3514 
#define NET_DVR_SET_REGION_EXITING_REGION 3515 
#define NET_DVR_GET_REGION_EXIT_TRIGGER 3516 
#define NET_DVR_SET_REGION_EXIT_TRIGGER 3517 
#define NET_DVR_GET_REGION_EXIT_SCHEDULE 3518 
#define NET_DVR_SET_REGION_EXIT_SCHEDULE 3519 
#define NET_DVR_GET_LOITERING_CAPABILITIES 3520 
#define NET_DVR_GET_LOITERING_DETECTION 3521 
#define NET_DVR_SET_LOITERING_DETECTION 3522 
#define NET_DVR_GET_LOITERING_REGION 3523 
#define NET_DVR_SET_LOITERING_REGION 3524 
#define NET_DVR_GET_LOITERING_TRIGGER 3525 
#define NET_DVR_SET_LOITERING_TRIGGER 3526 
#define NET_DVR_GET_LOITERING_SCHEDULE 3527 
#define NET_DVR_SET_LOITERING_SCHEDULE 3528 
#define NET_DVR_GET_GROUPDETECTION_CAPABILITIES 3529 
#define NET_DVR_GET_GROUP_DETECTION 3530 
#define NET_DVR_SET_GROUP_DETECTION 3531 
#define NET_DVR_GET_GROUPDETECTION_REGION 3532 
#define NET_DVR_SET_GROUPDETECTION_REGION 3533 
#define NET_DVR_GET_GROUPDETECTION_TRIGGER 3534 
#define NET_DVR_SET_GROUPDETECTION_TRIGGER 3535 
#define NET_DVR_GET_GROUPDETECTION_SCHEDULE 3536 
#define NET_DVR_SET_GROUPDETECTION_SCHEDULE 3537 
#define NET_DVR_GET_RAPIDMOVE_CAPABILITIES 3538 
#define NET_DVR_GET_RAPIDMOVE_DETECTION 3539 
#define NET_DVR_SET_RAPIDMOVE_DETECTION 3540 
#define NET_DVR_GET_RAPIDMOVE_REGION 3541 
#define NET_DVR_SET_RAPIDMOVE_REGION 3542 
#define NET_DVR_GET_RAPIDMOVE_TRIGGER 3543 
#define NET_DVR_SET_RAPIDMOVE_TRIGGER 3544 
#define NET_DVR_GET_RAPIDMOVE_SCHEDULE 3545 
#define NET_DVR_SET_RAPIDMOVE_SCHEDULE 3546 
#define NET_DVR_GET_PATKING_CAPABILITIES 3547 
#define NET_DVR_GET_PARKING_DETECTION 3548 
#define NET_DVR_SET_PARKING_DETECTION 3549 
#define NET_DVR_GET_PARKING_REGION 3550 
#define NET_DVR_SET_PARKING_REGION 3551 
#define NET_DVR_GET_PARKING_TRIGGER 3552 
#define NET_DVR_SET_PARKING_TRIGGER 3553 
#define NET_DVR_GET_PARKING_SCHEDULE 3554 
#define NET_DVR_SET_PARKING_SCHEDULE 3555 
#define NET_DVR_GET_UNATTENDED_BAGGAGE_CAPABILITIES 3556 
#define NET_DVR_GET_UNATTENDED_BAGGAGE_DETECTION 3557 
#define NET_DVR_SET_UNATTENDED_BAGGAGE_DETECTION 3558 
#define NET_DVR_GET_UNATTENDED_BAGGAGE_REGION 3559 
#define NET_DVR_SET_UNATTENDED_BAGGAGE_REGION 3560 
#define NET_DVR_GET_UNATTENDED_BAGGAGE_TRIGGER 3561 
#define NET_DVR_SET_UNATTENDED_BAGGAGE_TRIGGER 3562 
#define NET_DVR_GET_UNATTENDED_BAGGAGE_SCHEDULE 3563 
#define NET_DVR_SET_UNATTENDED_BAGGAGE_SCHEDULE 3564 
#define NET_DVR_GET_ATTENDEDBAGGAGE_CAPABILITIES 3565 
#define NET_DVR_GET_ATTENDEDBAGGAGE_DETECTION 3566 
#define NET_DVR_SET_ATTENDEDBAGGAGE_DETECTION 3567 
#define NET_DVR_GET_ATTENDEDBAGGAGE_REGION 3568 
#define NET_DVR_SET_ATTENDEDBAGGAGE_REGION 3569 
#define NET_DVR_GET_ATTENDEDBAGGAGE_TRIGGER 3570 
#define NET_DVR_SET_ATTENDEDBAGGAGE_TRIGGER 3571 
#define NET_DVR_GET_ATTENDEDBAGGAGE_SCHEDULE 3572 
#define NET_DVR_SET_ATTENDEDBAGGAGE_SCHEDULE 3573 
#define NET_DVR_GET_REGIONCLIP_CAPABILITIES 3574 
#define NET_DVR_GET_REGION_CLIP 3575 
#define NET_DVR_SET_REGION_CLIP 3576 
#define NET_DVR_GET_NETWORK_CAPABILITIES 3577 
#define NET_DVR_GET_WIRELESS_DIAL 3578 
#define NET_DVR_SET_WIRELESS_DIAL 3579 
#define NET_DVR_GET_WIRELESSDIAL_CAPABILITIES 3580 
#define NET_DVR_GET_WIRELESSDIAL_SCHEDULE 3581 
#define NET_DVR_SET_WIRELESSDIAL_SCHEDULE 3582 
#define NET_DVR_GET_WIRELESSDIAL_STATUS 3583 
#define NET_DVR_GET_REGION_ENTRANCE_SCHEDULE_CAPABILITIES 3584 
#define NET_DVR_GET_REGION_EXITING_SCHEDULE_CAPABILITIES 3585 
#define NET_DVR_GET_LOITERING_SCHEDULE_CAPABILITIES 3586 
#define NET_DVR_GET_GROUP_SCHEDULE_CAPABILITIES 3587 
#define NET_DVR_GET_RAPIDMOVE_SCHEDULE_CAPABILITIES 3588 
#define NET_DVR_GET_PARKING_SCHEDULE_CAPABILITIES 3589 
#define NET_DVR_GET_UNATTENDEDBAGGAGE_SCHEDULE_CAPABILITIES 3590 
#define NET_DVR_GET_ATTENDEDBAGGAGE_SCHEDULE_CAPABILITIES 3591 
#define NET_DVR_GET_WIRELESSDIAL_SCHEDULE_CAPABILITIES 3592 
#define NET_DVR_WIRELESSDIAL_CONNECT 3593 
#define NET_DVR_GET_LITESTORAGE 3594 
#define NET_DVR_SET_LITESTORAGE 3595 
#define NET_DVR_GET_LITESTORAGE_CAPABILITIES 3596 
#define NET_DVR_GET_VEHICLE_CAPABILITIES 3597 
#define NET_DVR_GET_VEHICLE_CALIBRATION 3598 
#define NET_DVR_GET_SLAVECAMERA_CAPABILITIES 3599 
#define NET_DVR_GET_SLAVECAMERA 3600 
#define NET_DVR_SET_SLAVECAMERA 3601 
#define NET_DVR_GET_SLAVECAMERA_STATUS 3602 
#define NET_DVR_GET_SLAVECAMERA_CALIB_CAPABILITIES 3603 
#define NET_DVR_GET_SLAVECAMERA_CALIB 3604 
#define NET_DVR_SET_SLAVECAMERA_CALIB 3605 
#define NET_DVR_GET_PHY_RATIO 3606 
#define NET_DVR_SET_PHY_RATIO 3607 
#define NET_DVR_GET_MASTERSLAVETRACKING_CAPABILITIES 3608 
#define NET_DVR_SET_TRACKINGRATIO 3610 
#define NET_DVR_GET_TRACKING 3611 
#define NET_DVR_SET_TRACKING 3612 
#define NET_DVR_GET_TRACKING_CAPABILITIES 3613 
#define NET_DVR_GET_SLAVECAMERA_CALIB_V50 3614 
#define NET_DVR_SET_SLAVECAMERA_CALIB_V50 3615 
#define NET_DVR_SET_TRACKINGRATIO_MANUAL 3616 
#define NET_DVR_GET_TRACKINGRATIO_MANUAL 3617 
#define NET_DVR_SET_TRACK_INITPOSTION 3618 
#define NET_DVR_GET_PTZ_CAPABILITIES 3619 
#define NET_DVR_GET_THERMOMETRY_BASICPARAM_CAPABILITIES 3620
#define NET_DVR_GET_THERMOMETRY_BASICPARAM 3621 
#define NET_DVR_SET_THERMOMETRY_BASICPARAM 3622 
#define NET_DVR_GET_THERMOMETRY_SCENE_CAPABILITIES 3623
#define NET_DVR_GET_THERMOMETRY_PRESETINFO 3624 
#define NET_DVR_SET_THERMOMETRY_PRESETINFO 3625 
#define NET_DVR_GET_THERMOMETRY_ALARMRULE_CAPABILITIES 3626
#define NET_DVR_GET_THERMOMETRY_ALARMRULE 3627 
#define NET_DVR_SET_THERMOMETRY_ALARMRULE 3628 
#define NET_DVR_GET_REALTIME_THERMOMETRY 3629 
#define NET_DVR_GET_THERMOMETRY_DIFFCOMPARISON 3630 
#define NET_DVR_SET_THERMOMETRY_DIFFCOMPARISON 3631 
#define NET_DVR_GET_THERMOMETRY_TRIGGER 3632 
#define NET_DVR_SET_THERMOMETRY_TRIGGER 3633 
#define NET_DVR_GET_THERMAL_CAPABILITIES 3634 
#define NET_DVR_GET_FIREDETECTION_CAPABILITIES 3635 
#define NET_DVR_GET_FIREDETECTION 3636 
#define NET_DVR_SET_FIREDETECTION 3637 
#define NET_DVR_GET_FIREDETECTION_TRIGGER 3638 
#define NET_DVR_SET_FIREDETECTION_TRIGGER 3639 
#define NET_DVR_GET_OIS_CAPABILITIES 3640 
#define NET_DVR_GET_OIS_CFG 3641 
#define NET_DVR_SET_OIS_CFG 3642 
#define NET_DVR_GET_MACFILTER_CAPABILITIES 3643 
#define NET_DVR_GET_MACFILTER_CFG 3644 
#define NET_DVR_SET_MACFILTER_CFG 3645 
#define NET_DVR_GET_EAGLEFOCUS_CALCFG_CAPABILITIES 3646 
#define NET_DVR_GET_EAGLEFOCUSING_CALCFG 3647 
#define NET_DVR_SET_EAGLEFOCUSING_CALCFG 3648 
#define NET_DVR_GET_EAGLEFOCUSING_CFG_CAPABILITIES 3649 
#define NET_DVR_GET_EAGLEFOCUSING_CTRL 3650 
#define NET_DVR_SET_EAGLEFOCUSING_CTRL 3651 
#define NET_DVR_GET_PXOFFLINE_CAPABILITIES 3652 
#define NET_DVR_SET_PXOFFLINE_CFG 3653 
#define NET_DVR_GET_PXOFFLINE_CFG 3654 
#define NET_DVR_GET_PAPERCHARGEINFO_CAPABILITIES 3655 
#define NET_DVR_SET_PAPERCHARGEINFO 3656 
#define NET_DVR_GET_PARKINGSAPCE_CAPABILITIES 3657 
#define NET_DVR_SET_PARKINGSAPCE_INFO 3658 
#define NET_DVR_GET_PXMULTICTRL_CAPABILITIES 3659 
#define NET_DVR_GET_CHARGEACCOUNT_CAPABILITIES 3661 
#define NET_DVR_SET_CHARGE_ACCOUNTINFO 3662 
#define NET_DVR_SET_PXMULTICTRL_CFG 3663 
#define NET_DVR_GET_PXMULTICTRL_CFG 3664 
#define NET_DVR_GET_TME_CHARGERULE 3665 
#define NET_DVR_SET_TME_CHARGERULE 3666 
#define NET_DVR_GET_TME_CHARGERULE_CAPABILITIES 3667 
#define NET_DVR_GET_ILLEGALCARDFILTERING_CAPABILITIES 3668 
#define NET_DVR_GET_ILLEGALCARDFILTERING_CFG 3669 
#define NET_DVR_SET_ILLEGALCARDFILTERING_CFG 3670 
#define NET_DVR_GET_LEDDISPLAY_CAPABILITIES 3671 
#define NET_DVR_SET_LEDDISPLAY_CFG 3672 
#define NET_DVR_GET_LEDDISPLAY_CFG 3673 
#define NET_DVR_GET_VOICEBROADCAST_CAPABILITIES 3674 
#define NET_DVR_SET_VOICEBROADCAST_CFG 3675 
#define NET_DVR_GET_PAPERPRINTFORMAT_CAPABILITIES 3676
#define NET_DVR_GET_PAPERPRINTFORMAT_CFG 3677 
#define NET_DVR_SET_PAPERPRINTFORMAT_CFG 3678 
#define NET_DVR_GET_LOCkGATE_CAPABILITIES 3679 
#define NET_DVR_GET_LOCKGATE_CFG 3680 
#define NET_DVR_SET_LOCKGATE_CFG 3681 
#define NET_DVR_GET_PARKING_DATASTATE 3682 
#define NET_DVR_SET_PARKING_DATASTATE 3683 
#define NET_DVR_GET_TME_CAPABILITIES 3684 
#define NET_DVR_GET_TMEVOICE_CAPABILITIES 3686 
#define NET_DVR_SET_TMEVOICE_CFG 3687 
#define NET_DVR_GET_TMEVOICE_CFG 3688 
#define NET_DVR_DEL_TMEVOICE_CFG 3689 
#define NET_DVR_GET_POSITION 3698 
#define NET_DVR_SET_POSITION 3699 
#define NET_DVR_GET_CENTRALIZEDCTRL_CAPABILITIES 3700
#define NET_DVR_GET_CENTRALIZEDCTRL 3701
#define NET_DVR_SET_CENTRALIZEDCTRL 3702
#define NET_DVR_GET_COMPASS_CAPABILITIES 3703
#define NET_DVR_GET_VANDALPROOFALARM 3704
#define NET_DVR_SET_VANDALPROOFALARM 3705
#define NET_DVR_COMPASS_CALIBRATE_CTRL 3706
#define NET_DVR_COMPASS_NORTH_CTRL 3707
#define NET_DVR_GET_AZIMUTHINFO 3708
#define NET_DVR_GET_SATELLITETIME 3709
#define NET_DVR_SET_SATELLITETIME 3710
#define NET_DVR_GET_GISINFO 3711
#define NET_DVR_GET_STREAMING_CAPABILITIES 3712
#define NET_DVR_GET_REFRESHFRAME_CAPABILITIES 3713
#define NET_DVR_STREAMING_REFRESH_FRAME 3714
#define NET_DVR_FACECAPTURE_STATISTICS 3715
#define NET_DVR_GET_WIRELESSSERVER_CAPABILITIES 3716 
#define NET_DVR_GET_WIRELESSSERVER 3717 
#define NET_DVR_SET_WIRELESSSERVER 3718 
#define NET_DVR_GET_CONNECT_LIST_CAPABILITIES 3719 
#define NET_DVR_GET_THSCREEN_CAPABILITIES 3720
#define NET_DVR_GET_THSCREEN 3721
#define NET_DVR_GET_EXTERNALDEVICE_CAPABILITIES 3722
#define NET_DVR_GET_EXTERNALDEVICE 3723
#define NET_DVR_SET_EXTERNALDEVICE 3724
#define NET_DVR_GET_LEDDISPLAYINFO_CAPABILITIES 3725 
#define NET_DVR_SET_LEDDISPLAYINFO 3726 
#define NET_DVR_GET_SUPPLEMENTLIGHT_CAPABILITIES 3727 
#define NET_DVR_GET_SUPPLEMENTLIGHT 3728 
#define NET_DVR_SET_SUPPLEMENTLIGHT 3729 
#define NET_DVR_SET_THSCREEN 3730
#define NET_DVR_GET_LOWPOWER_CAPABILITIES 3731 
#define NET_DVR_GET_LOWPOWER 3732 
#define NET_DVR_SET_LOWPOWER 3733 
#define NET_DVR_GET_ZOOMLINKAGE_CAPABILITIES 3734 
#define NET_DVR_GET_ZOOMLINKAGE 3735 
#define NET_DVR_SET_ZOOMLINKAGE 3736 
#define NET_DVR_THSCREEN_TIMING 3737 
#define NET_DVR_GET_OSD_BATTERY_POWER_CFG 3741 
#define NET_DVR_SET_OSD_BATTERY_POWER_CFG 3742 
#define NET_DVR_GET_OSD_BATTERY_POWER_CFG_CAPABILITIES 3743
#define NET_DVR_GET_VANDALPROOFALARM_TRIGGER 3744 
#define NET_DVR_SET_VANDALPROOFALARM_TRIGGER 3745 
#define NET_DVR_GET_PANORAMAIMAGE_CAPABILITIES 3746 
#define NET_DVR_GET_PANORAMAIMAGE 3747 
#define NET_DVR_SET_PANORAMAIMAGE 3748 
#define NET_DVR_GET_STREAMENCRYPTION 3749 
#define NET_DVR_SET_STREAMENCRYPTION 3750 
#define NET_DVR_GET_STREAMENCRYPTION_CAPABILITIES 3751 
#define NET_DVR_GET_REVISE_GPS_CAPABILITIES 3752 
#define NET_DVR_GET_REVISE_GPS 3753 
#define NET_DVR_SET_REVISE_GPS 3754 
#define NET_DVR_GET_PDC_RECOMMEND 3755 
#define NET_DVR_REMOVE_FLASHSTORAGE 3756 
#define NET_DVR_GET_COUNTING_CAPABILITIES 3757 
#define NET_DVR_SET_SENSOR_ADJUSTMENT 3758 
#define NET_DVR_GET_SENSOR_ADJUSTMENT_CAPABILITIES 3759 
#define NET_DVR_GET_WIRELESSSERVER_FULLVERSION_CFG 3760 
#define NET_DVR_SET_WIRELESSSERVER_FULLVERSION_CFG 3761 
#define NET_DVR_GET_ONLINEUSER_INFO 3762 
#define NET_DVR_GET_SENSOR_ADJUSTMENT_INFO 3763 
#define NET_DVR_SENSOR_RESET_CTRL 3764 
#define NET_DVR_GET_POSTRADAR_CAPABILITIES 3765 
#define NET_DVR_GET_POSTRADARSPEED_CFG 3766 
#define NET_DVR_SET_POSTRADARSPEED_CFG 3767 
#define NET_DVR_GET_POSTRADARSPEED_RECOM_CFG 3768 
#define NET_DVR_GET_POSTRADARPARAM_CFG 3769 
#define NET_DVR_SET_POSTRADARPARAM_CFG 3770 
#define NET_DVR_GET_POSTRADARPARAM_RECOM_CFG 3771 
#define NET_DVR_GET_ENCRYPT_DEVICE_INFO 3772 
#define NET_DVR_GET_ANR_ARMING_HOST 3773 
#define NET_DVR_GET_FIRMWARE_VERSION 3776 
#define NET_DVR_GET_FTP_CAPABILITIES 3782 
#define NET_DVR_GET_FTPUPLOAD_CFG 3783 
#define NET_DVR_SET_FTPUPLOAD_CFG 3784 
#define NET_DVR_GET_VEHICLE_INFORMATION 3785
#define NET_DVR_GET_DDNS_COUNTRY_ABILITY 3800
#define NET_DVR_GET_DEVICECFG_V50 3801 
#define NET_DVR_SET_DEVICECFG_V50 3802 
#define NET_DVR_SET_VEHICLE_RECOG_TASK_V50 3851 
#define NET_DVR_GET_SMARTCALIBRATION_CAPABILITIES 3900
#define NET_DVR_GET_TEMPERATURE_TRIGGER 3903 
#define NET_DVR_SET_TEMPERATURE_TRIGGER 3904 
#define NET_DVR_GET_SMARTCALIBRATION_CFG 3910
#define NET_DVR_SET_SMARTCALIBRATION_CFG 3911 
#define NET_DVR_POST_SETUP_CALIB 3912 
#define NET_DVR_SET_POS_INFO_OVERLAY 3913
#define NET_DVR_GET_POS_INFO_OVERLAY 3914
#define NET_DVR_GET_CAMERA_WORK_MODE 3915 
#define NET_DVR_SET_CAMERA_WORK_MODE 3916 
#define NET_DVR_GET_RESOLUTION_SWITCH_CAPABILITIES 3917 
#define NET_DVR_GET_RESOLUTION_SWITCH 3918 
#define NET_DVR_SET_RESOLUTION_SWITCH 3919 
#define NET_DVR_GET_CONFIRM_MECHANISM_CAPABILITIES 3920 
#define NET_DVR_CONFIRM_MECHANISM_CTRL 3921 
#define NET_DVR_GET_VEHICLLE_RESULT_CAPABILITIES 3951 
#define NET_DVR_GET_CALIB_CAPABILITIES 3952
#define NET_DVR_GET_POSINFO_OVERLAY_CAPABILITIES 3953
#define NET_SDK_FINDMEDICALFILE 3954 
#define NET_SDK_FINDMEDICALPICTURE 3955 
#define NET_DVR_SET_POSINFO_OVERLAY 3960
#define NET_DVR_GET_POSINFO_OVERLAY 3961
#define NET_DVR_GET_FACELIB_TRIGGER 3962 
#define NET_DVR_SET_FACELIB_TRIGGER 3963 
#define NET_DVR_GET_FACECONTRAST_TRIGGER 3965
#define NET_DVR_SET_FACECONTRAST_TRIGGER 3966
#define NET_DVR_GET_FACECONTRAST_SCHEDULE_CAPABILITIES 3967
#define NET_DVR_GET_FACECONTRAST_SCHEDULE 3968
#define NET_DVR_SET_FACECONTRAST_SCHEDULE 3969
#define NET_DVR_GET_FACELIB_SCHEDULE_CAPABILITIES 3970
#define NET_DVR_GET_VCA_VERSION_LIST 3973
#define NET_DVR_GET_SETUP_CALIB 3974
#define NET_DVR_GET_PANORAMA_LINKAGE 3975
#define NET_DVR_SET_PANORAMA_LINKAGE 3976
#define NET_DVR_GET_FACELIB_SCHEDULE 3977
#define NET_DVR_SET_FACELIB_SCHEDULE 3978
#define NET_DVR_GET_SOFTWARE_SERVICE_CAPABILITIES 3980
#define NET_DVR_GET_SOFTWARE_SERVICE 3981
#define NET_DVR_SET_SOFTWARE_SERVICE 3982
#define NET_DVR_GET_PREVIEW_MODE_CAPABILITIES 3983
#define NET_DVR_SET_EAGLE_FOCUS_GOTOSCENE 3984
#define NET_DVR_EAGLE_FOCUS_SCENE_DEL 3985
#define NET_DVR_GET_SAFETY_HELMET_TRIGGER 3986 
#define NET_DVR_SET_SAFETY_HELMET_TRIGGER 3987 
#define NET_DVR_GET_SAFETY_HELMET_SCHEDULE_CAPABILITIES 3988
#define NET_DVR_GET_SAFETY_HELMET_SCHEDULE 3989
#define NET_DVR_SET_SAFETY_HELMET_SCHEDULE 3990
#define NET_DVR_GET_SIGN_ABNORMAL_TRIGGER 4150 
#define NET_DVR_SET_SIGN_ABNORMAL_TRIGGER 4151 
#define NET_DVR_ONE_KEY_CONFIG_SAN_V50 4152 
#define NET_DVR_GET_HDCFG_V50 4153 
#define NET_DVR_SET_HDCFG_V50 4154 
#define NET_DVR_GET_HDVOLUME_CFG 4155 
#define NET_DVR_SET_HDVOLUME_CFG 4156 
#define NET_DVR_GET_POWER_SUPPLY_CABINET_TRIGGER 4157 
#define NET_DVR_SET_POWER_SUPPLY_CABINET_TRIGGER 4158 
#define NET_DVR_GET_SENSOR_TRIGGER 4159 
#define NET_DVR_SET_SENSOR_TRIGGER 4160 
#define	NET_DVR_GET_FACESNAP_TRIGGER 4161 
#define	NET_DVR_SET_FACESNAP_TRIGGER	 4162 
#define NET_DVR_GET_FACESNAP_SCHEDULE_CAPABILITIES 4163 
#define NET_DVR_GET_FACESNAP_SCHEDULE 4164 
#define NET_DVR_SET_FACESNAP_SCHEDULE 4165 
#define NET_DVR_SET_SCREEN_SWITCH 4171 
#define NET_DVR_GET_BV_CALIB_PIC 4172 
#define NET_DVR_GET_BV_CALIB_RESULT 4173 
#define NET_DVR_GET_BV_HCORRECTION 4174 
#define NET_DVR_DEL_BV_CALIB_PIC 4175 
#define NET_DVR_GET_TV_SCREEN_CFG 4176 
#define NET_DVR_SET_TV_SCREEN_CFG 4177 
#define NET_DVR_ADJUST_BV_CALIB 4178
#define NET_DVR_GET_HUMAN_CALIB 4179
#define NET_DVR_SET_HUMAN_CALIB 4180
#define NET_DVR_GET_USERCFG_V51 4181 
#define NET_DVR_SET_USERCFG_V51 4182 
#define NET_DVR_GET_SOFTIO_TRIGGER 4183 
#define NET_DVR_SET_SOFTIO_TRIGGER 4184 
#define NET_DVR_GET_SOFTIO_SCHEDULE_CAPABILITIES 4185
#define NET_DVR_GET_SOFTIO_SCHEDULE 4186
#define NET_DVR_SET_SOFTIO_SCHEDULE 4187
#define NET_DVR_GET_HFPD_TRIGGER 4188
#define NET_DVR_SET_HFPD_TRIGGER 4189
#define NET_DVR_GET_HFPD_SCHEDULE_CAPABILITIES 4190
#define NET_DVR_GET_HFPD_SCHEDULE 4191
#define NET_DVR_SET_HFPD_SCHEDULE 4192
#define	NET_DVR_GET_ALARM_INFO 4193	
#define NET_DVR_GET_USERCFG_V52 4194 
#define NET_DVR_SET_USERCFG_V52 4195 
#define NET_DVR_GET_MUTEX_FUNCTION 4353 
#define NET_DVR_GET_SINGLE_CHANNELINFO 4360 
#define NET_DVR_GET_CHANNELINFO 4361 
#define NET_DVR_CHECK_LOGIN_PASSWORDCFG 4362 
#define NET_DVR_GET_SINGLE_SECURITY_QUESTION_CFG 4363 
#define NET_DVR_SET_SINGLE_SECURITY_QUESTION_CFG 4364 
#define NET_DVR_GET_SECURITY_QUESTION_CFG 4365 
#define NET_DVR_SET_SECURITY_QUESTION_CFG 4366 
#define NET_DVR_GET_ONLINEUSERLIST_SC 4367 
#define NET_DVR_GET_BLACKLIST_FACECONTRAST_TRIGGER 4368 
#define NET_DVR_SET_BLACKLIST_FACECONTRAST_TRIGGER 4369 
#define NET_DVR_GET_WHITELIST_FACECONTRAST_TRIGGER 4370 
#define NET_DVR_SET_WHITELIST_FACECONTRAST_TRIGGER 4371 
#define NET_DVR_GET_BLACKLIST_FACECONTRAST_SCHEDULE_CAPABILITIES 4372
#define NET_DVR_GET_BLACKLIST_FACECONTRAST_SCHEDULE 4373 
#define NET_DVR_SET_BLACKLIST_FACECONTRAST_SCHEDULE 4374 
#define NET_DVR_GET_WHITELIST_FACECONTRAST_SCHEDULE_CAPABILITIES 4375
#define NET_DVR_GET_WHITELIST_FACECONTRAST_SCHEDULE 4376
#define NET_DVR_SET_WHITELIST_FACECONTRAST_SCHEDULE 4377
#define NET_DVR_GET_HUMAN_RECOGNITION_SCHEDULE_CAPABILITIES 4378
#define NET_DVR_GET_HUMAN_RECOGNITION_SCHEDULE 4379
#define NET_DVR_SET_HUMAN_RECOGNITION_SCHEDULE 4380
#define NET_DVR_GET_HUMAN_RECOGNITION_TRIGGER 4381
#define NET_DVR_SET_HUMAN_RECOGNITION_TRIGGER 4382
#define NET_DVR_GET_GBT28181_AUDIO_OUTPUT_CFG 4383
#define NET_DVR_SET_GBT28181_AUDIO_OUTPUT_CFG 4384
#define NET_DVR_GET_STUDENTS_STOODUP_TRIGGER 4386 
#define NET_DVR_SET_STUDENTS_STOODUP_TRIGGER 4387 
#define NET_DVR_GET_FRAMES_PEOPLE_COUNTING_SCHEDULE_CAPABILITIES 4388
#define NET_DVR_GET_FRAMES_PEOPLE_COUNTING_SCHEDULE 4389 
#define NET_DVR_SET_FRAMES_PEOPLE_COUNTING_SCHEDULE 4390 
#define NET_DVR_GET_FRAMES_PEOPLE_COUNTING_TRIGGER 4391 
#define NET_DVR_SET_FRAMES_PEOPLE_COUNTING_TRIGGER 4392 
#define NET_DVR_GET_PERSONDENSITY_TRIGGER 4393 
#define NET_DVR_SET_PERSONDENSITY_TRIGGER 4394 
#define NET_DVR_GET_PERSONDENSITY_SCHEDULE_CAPABILITIES 4395
#define NET_DVR_GET_PERSONDENSITY_SCHEDULE 4396
#define NET_DVR_SET_PERSONDENSITY_SCHEDULE 4397
#define NET_DVR_GET_STUDENTS_STOODUP_SCHEDULE_CAPABILITIES 4398
#define NET_DVR_GET_STUDENTS_STOODUP_SCHEDULE 4399 
#define NET_DVR_SET_STUDENTS_STOODUP_SCHEDULE 4400 
#define NET_DVR_SET_FACE_THERMOMETRY_TRIGGER 4401
#define NET_DVR_GET_FACE_THERMOMETRY_SCHEDULE_CAPABILITIES 4402
#define NET_DVR_GET_FACE_THERMOMETRY_SCHEDULE 4403
#define NET_DVR_SET_FACE_THERMOMETRY_SCHEDULE 4404
#define NET_DVR_GET_FACE_THERMOMETRY_TRIGGER 4405
#define	NET_DVR_GET_PERSONQUEUE_TRIGGER 4406 
#define	NET_DVR_SET_PERSONQUEUE_TRIGGER	 4407 
#define	NET_DVR_GET_PERSONQUEUE_SCHEDULE_CAPABILITIES	4408
#define	NET_DVR_GET_PERSONQUEUE_SCHEDULE	4409	
#define	NET_DVR_SET_PERSONQUEUE_SCHEDULE	4410	
#define NET_DVR_GET_FACESNAPCFG 5001 
#define NET_DVR_SET_FACESNAPCFG 5002 
#define NET_DVR_GET_DEVACCESS_CFG 5005 
#define NET_DVR_SET_DEVACCESS_CFG 5006 
#define NET_DVR_GET_SAVE_PATH_CFG 5007 
#define NET_DVR_SET_SAVE_PATH_CFG 5008 
#define NET_VCA_GET_RULECFG_V41 5011 
#define NET_VCA_SET_RULECFG_V41 5012 
#define NET_DVR_GET_AID_RULECFG_V41 5013 
#define NET_DVR_SET_AID_RULECFG_V41 5014 
#define NET_DVR_GET_TPS_RULECFG_V41 5015 
#define NET_DVR_SET_TPS_RULECFG_V41 5016 
#define NET_VCA_GET_FACEDETECT_RULECFG_V41 5017 
#define NET_VCA_SET_FACEDETECT_RULECFG_V41 5018 
#define NET_DVR_GET_PDC_RULECFG_V41 5019 
#define NET_DVR_SET_PDC_RULECFG_V41 5020 
#define NET_DVR_GET_TRIAL_VERSION_CFG 5021 
#define NET_DVR_GET_VCA_CTRLINFO_CFG 5022 
#define NET_DVR_SET_VCA_CTRLINFO_CFG 5023 
#define NET_DVR_SYN_CHANNEL_NAME 5024 
#define NET_DVR_GET_RESET_COUNTER 5025 
#define NET_DVR_SET_RESET_COUNTER 5026 
#define NET_DVR_GET_OBJECT_COLOR 5027 
#define NET_DVR_SET_OBJECT_COLOR 5028 
#define NET_DVR_GET_AUX_AREA 5029 
#define NET_DVR_SET_AUX_AREA 5030 
#define NET_DVR_GET_CHAN_WORKMODE 5031 
#define NET_DVR_SET_CHAN_WORKMODE 5032 
#define NET_DVR_GET_SLAVE_CHANNEL 5033 
#define NET_DVR_SET_SLAVE_CHANNEL 5034 
#define NET_DVR_GET_VQD_EVENT_RULE 5035 
#define NET_DVR_SET_VQD_EVENT_RULE 5036 
#define NET_DVR_GET_BASELINE_SCENE 5037 
#define NET_DVR_SET_BASELINE_SCENE 5038 
#define NET_DVR_CONTROL_BASELINE_SCENE 5039 
#define NET_DVR_SET_VCA_DETION_CFG 5040 
#define NET_DVR_GET_VCA_DETION_CFG 5041 
#define NET_DVR_GET_STREAM_ATTACHINFO_CFG 5042 
#define NET_DVR_SET_STREAM_ATTACHINFO_CFG 5043 
#define NET_DVR_GET_BV_CALIB_TYPE 5044 
#define NET_DVR_CONTROL_BV_SAMPLE_CALIB 5045 
#define NET_DVR_GET_BV_SAMPLE_CALIB_CFG 5046 
#define NET_DVR_GET_RULECFG_V42 5049 
#define NET_DVR_SET_RULECFG_V42 5050 
#define NET_DVR_SET_VCA_DETION_CFG_V40 5051 
#define NET_DVR_GET_VCA_DETION_CFG_V40 5052 
#define NET_DVR_SET_FLASH_CFG 5110 
#define NET_DVR_GET_T1TEST_CFG 5053 
#define NET_DVR_SET_T1TEST_CFG 5054 
#define NET_ITS_GET_OVERLAP_CFG_V50 5055 
#define NET_ITS_SET_OVERLAP_CFG_V50 5056 
#define NET_DVR_GET_PARKLAMP_STATE 5057 
#define NET_DVR_GET_CLOUDSTORAGE_CFG 5058 
#define NET_DVR_SET_CLOUDSTORAGE_CFG 5059 
#define NET_ITS_GET_BASE_INFO 5060 
#define NET_DVR_GET_SENSOR_INFO 5061 
#define NET_DVR_SET_SENSOR_SWITCH 5062 
#define NET_ITS_GET_IMGMERGE_CFG 5063 
#define NET_ITS_SET_IMGMERGE_CFG 5064 
#define NET_ITS_GET_UPLOAD_CFG 5065 
#define NET_ITS_SET_UPLOAD_CFG 5066 
#define NET_DVR_GET_SENSOR_PORT_CAPABILITIES 5067 
#define NET_ITS_GET_WORKSTATE 5069 
#define NET_ITS_GET_IPC_CHAN_CFG 5070 
#define NET_ITS_SET_IPC_CHAN_CFG 5071 
#define NET_ITS_GET_OVERLAP_CFG 5072 
#define NET_ITS_SET_OVERLAP_CFG 5073 
#define NET_DVR_GET_TRIGGEREX_CFG 5074 
#define NET_DVR_SET_TRIGGEREX_CFG 5075 
#define NET_ITS_GET_ROAD_INFO 5076 
#define NET_ITS_REMOTE_DEVICE_CONTROL 5077
#define NET_ITS_GET_GATEIPC_CHAN_CFG 5078
#define NET_ITS_SET_GATEIPC_CHAN_CFG 5079
#define NET_ITS_TRANSCHAN_START 5080
#define NET_ITS_GET_ECTWORKSTATE 5081
#define NET_ITS_GET_ECT_CHAN_INFO 5082
#define NET_DVR_GET_HEATMAP_RESULT 5083
#define NET_DVR_SET_ITS_EXDEVCFG 5084
#define NET_DVR_GET_ITS_EXDEVCFG 5085
#define NET_DVR_GET_ITS_EXDEVSTATUS 5086
#define NET_DVR_SET_ITS_ENDEVCMD 5087
#define NET_DVR_SET_ENISSUED_DATADEL 5088
#define NET_DVR_GET_PDC_RESULT 5089
#define NET_ITS_GET_LAMP_CTRLCFG 5090 
#define NET_ITS_SET_LAMP_CTRLCFG 5091 
#define NET_ITS_GET_PARKSPACE_ATTRIBUTE_CFG 5092 
#define NET_ITS_SET_PARKSPACE_ATTRIBUTE_CFG 5093 
#define NET_ITS_SET_LAMP_EXTERNAL_CFG 5095 
#define NET_ITS_SET_COMPEL_CAPTURE 5096 
#define NET_DVR_SET_TIMESIGN_CFG 5097 
#define NET_DVR_GET_TIMESIGN_CFG 5098 
#define NET_DVR_GET_SIGNALLAMP_STATUS 5099 
#define NET_DVR_GET_MONITOR_PLAN_VQD 5100 
#define NET_DVR_GET_MONITORID_VQD 5101 
#define NET_DVR_SET_MONITOR_INFO 5102 
#define NET_DVR_DEL_MONITOR_PLAN_VQD 5103 
#define NET_DVR_GET_MONITOR_VQD_STATUS 5104 
#define NET_DVR_GET_RECORD_INFO 5105 
#define NET_DVR_GET_MONITOR_VQDCFG 5106 
#define NET_DVR_SET_MONITOR_VQDCFG 5107 
#define NET_DVR_SET_MONITOR_PLAN_VQDCFG 5108 
#define NET_DVR_SCENE_CHANGE_UPDATE 5109 
#define NET_DVR_GET_CALIBRATE_POINT 5153 
#define NET_DVR_GET_SCENE_CFG 5201 
#define NET_DVR_SET_SCENE_CFG 5202 
#define NET_DVR_GET_SCENE_REFERENCE_REGION 5203 
#define NET_DVR_SET_SCENE_REFERENCE_REGION 5204 
#define NET_DVR_GET_SCENE_CALIBRATION 5205 
#define NET_DVR_SET_SCENE_CALIBRATION 5206 
#define NET_DVR_GET_SCENE_MASK_REGION 5207 
#define NET_DVR_SET_SCENE_MASK_REGION 5208 
#define NET_DVR_GET_SCENE_LANECFG 5209 
#define NET_DVR_SET_SCENE_LANECFG 5210 
#define NET_DVR_GET_SCENE_AID_RULECFG 5211 
#define NET_DVR_SET_SCENE_AID_RULECFG 5212 
#define NET_DVR_GET_SCENE_TPS_RULECFG 5213 
#define NET_DVR_SET_SCENE_TPS_RULECFG 5214 
#define NET_DVR_GET_SCENE_TIME_CFG 5215 
#define NET_DVR_SET_SCENE_TIME_CFG 5216 
#define NET_DVR_GET_FORENSICS_MODE 5217 
#define NET_DVR_SET_FORENSICS_MODE 5218 
#define NET_DVR_FORCESTOP_FORENSICS_CTRL 5219 
#define NET_DVR_GET_ALARM_PROCESS_CFG 5220 
#define NET_DVR_SET_ALARM_PROCESS_CFG 5221 
#define NET_DVR_GET_BLACKLIST_ALARM_INFO 5222 
#define NET_DVR_GET_STORAGE_RESOURCE_CFG 5225 
#define NET_DVR_SET_STORAGE_RESOURCE_CFG 5226 
#define NET_DVR_DEL_BLACKLIST_ALARM_RECORD 5227 
#define NET_DVR_SET_BLACKLIST_GROUP_INFO 5229 
#define NET_DVR_DEL_BLACKLIST_GROUP_INFO 5230 
#define NET_DVR_GET_BLACKLIST_GROUP_INFO 5231 
#define NET_DVR_SET_BLACKLIST_GROUP_RECORD_CFG 5232 
#define NET_DVR_GET_BLACKLIST_GROUP_RECORD_CFG 5234 
#define NET_DVR_DEL_BLACKLIST_GROUP_RECORD_CFG 5235 
#define NET_DVR_GET_AREA_MONITOR_CFG 5236 
#define NET_DVR_SET_AREA_MONITOR_CFG 5237 
#define NET_DVR_DEL_AREA_MONITOR_CFG 5238 
#define NET_DVR_RETRIEVAL_SNAP_RECORD 5240 
#define NET_DVR_GET_ALARMLIST 5241 
#define NET_DVR_DETECT_IMAGE 5242 
#define NET_DVR_GET_SNAP_RECORD 5243 
#define NET_DVR_DEL_SNAP_RECORD 5244 
#define NET_DVR_GET_FACE_RECORD 5245 
#define NET_DVR_SET_FACE_RECORD 5246 
#define NET_DVR_DEL_FACE_RECORD 5247 
#define NET_DVR_GET_FACE_DATABASE 5248 
#define NET_DVR_SET_FACE_DATABASE 5249 
#define NET_DVR_DEL_FACE_DATABASE 5250 
#define NET_DVR_RETRIEVAL_FACE_DATABASE 5251 
#define NET_DVR_SET_BLACKLIST_REL_DEV_CFG 5252 
#define NET_DVR_DEL_BLACKLIST_REL_DEV 5253 
#define NET_DVR_GET_DISK_RAID_INFO 6001 
#define NET_DVR_SET_DISK_RAID_INFO 6002 
#define NET_DVR_GET_DVR_SYNCHRONOUS_IPC 6005 
#define NET_DVR_SET_DVR_SYNCHRONOUS_IPC 6006 
#define NET_DVR_SET_DVR_IPC_PASSWD 6008 
#define NET_DVR_GET_DEVICE_NET_USING_INFO 6009 
#define NET_DVR_SET_DVR_IPC_NET 6012 
#define NET_DVR_GET_RECORD_CHANNEL_INFO 6013 
#define NET_DVR_SET_RECORD_CHANNEL_INFO 6014 
#define NET_DVR_MOUNT_DISK 6015 
#define NET_DVR_UNMOUNT_DISK 6016 
#define NET_DVR_GET_STREAM_SRC_INFO 6017 
#define NET_DVR_SET_STREAM_SRC_INFO 6018 
#define NET_DVR_GET_STREAM_RECORD_INFO 6019 
#define NET_DVR_SET_STREAM_RECORD_INFO 6020 
#define NET_DVR_GET_STREAM_RECORD_STATUS 6021 
#define NET_DVR_SET_STREAM_RECORD_STATUS 6022 
#define NET_DVR_GET_STREAM_INFO 6023 
#define NET_DVR_GET_STREAM_SRC_INFO_V40 6024 
#define NET_DVR_SET_STREAM_SRC_INFO_V40 6025 
#define NET_DVR_GET_RELOCATE_INFO 6026 
#define NET_DVR_START_GOP_INFO_PASSBACK 6032 
#define NET_DVR_GET_CHANS_RECORD_STATUS_CFG 6035 
#define NET_DVR_SET_CHANS_RECORD_STATUS_CFG 6036 
#define NET_DVR_GET_IP_ALARM_GROUP_NUM 6100 
#define NET_DVR_GET_IP_ALARM_IN 6101 
#define NET_DVR_GET_IP_ALARM_OUT 6102 
#define NET_DVR_GET_FTPCFG_SECOND 6103 
#define NET_DVR_SET_FTPCFG_SECOND 6104 
#define NET_DVR_GET_DEFAULT_VIDEO_EFFECT 6105 
#define NET_DVR_SET_VIDEO_EFFECT 6106 
#define NET_DVR_DEL_INVALID_DISK 6107 
#define NET_DVR_GET_DRAWFRAME_DISK_QUOTA_CFG 6109 
#define NET_DVR_SET_DRAWFRAME_DISK_QUOTA_CFG 6110 
#define NET_DVR_GET_NAT_CFG 6111 
#define NET_DVR_SET_NAT_CFG 6112 
#define NET_DVR_GET_AES_KEY 6113 
#define NET_DVR_GET_POE_CFG 6114 
#define NET_DVR_SET_POE_CFG 6115 
#define NET_DVR_GET_CUSTOM_PRO_CFG 6116 
#define NET_DVR_SET_CUSTOM_PRO_CFG 6117 
#define NET_DVR_GET_STREAM_CABAC 6118 
#define NET_DVR_SET_STREAM_CABAC 6119 
#define NET_DVR_GET_ESATA_MINISAS_USAGE_CFG 6120 
#define NET_DVR_SET_ESATA_MINISAS_USAGE_CFG 6121 
#define NET_DVR_GET_HDCFG_V40 6122 
#define NET_DVR_SET_HDCFG_V40 6123 
#define NET_DVR_GET_POE_CHANNEL_ADD_MODE 6124 
#define NET_DVR_SET_POE_CHANNEL_ADD_MODE 6125 
#define NET_DVR_GET_DIGITAL_CHANNEL_STATE 6126 
#define NET_DVR_GET_BONJOUR_CFG 6127
#define NET_DVR_SET_BONJOUR_CFG 6128
#define NET_DVR_GET_SOCKS_CFG 6130
#define NET_DVR_SET_SOCKS_CFG 6131
#define NET_DVR_GET_QOS_CFG 6132
#define NET_DVR_SET_QOS_CFG 6133
#define NET_DVR_GET_HTTPS_CFG 6134
#define NET_DVR_SET_HTTPS_CFG 6135
#define NET_DVR_GET_WD1_CFG 6136
#define NET_DVR_SET_WD1_CFG 6137
#define NET_DVR_CREATE_CERT 6138
#define NET_DVR_DELETE_CERT 6139
#define NET_DVR_GET_RECORD_LOCK_PERCENTAGE 6140 
#define NET_DVR_SET_RECORD_LOCK_PERCENTAGE 6141 
#define NET_DVR_CMD_TRIGGER_PERIOD_RECORD 6144
#define NET_DVR_UPLOAD_CERT 6145 
#define NET_DVR_DOWNLOAD_CERT 6146 
#define NET_DVR_GET_CERT 6147 
#define NET_DVR_GET_POS_FILTER_CFG 6148 
#define NET_DVR_SET_POS_FILTER_CFG 6149 
#define NET_DVR_GET_CONNECT_POS_CFG 6150 
#define NET_DVR_SET_CONNECT_POS_CFG 6151 
#define NET_DVR_GET_CHAN_FILTER_CFG 6152 
#define NET_DVR_SET_CHAN_FILTER_CFG 6153 
#define NET_DVR_GET_FTPCFG_V40 6162 
#define NET_DVR_SET_FTPCFG_V40 6163 
#define NET_DVR_GET_MONTHLY_RECORD_DISTRIBUTION 6164 
#define NET_DVR_GET_ACCESS_DEVICE_CHANNEL_INFO 6165 
#define NET_DVR_GET_PREVIEW_SWITCH_CFG 6166 
#define NET_DVR_SET_PREVIEW_SWITCH_CFG 6167 
#define NET_DVR_GET_N_PLUS_ONE_WORK_MODE 6168 
#define NET_DVR_SET_N_PLUS_ONE_WORK_MODE 6169 
#define NET_DVR_GET_HD_STATUS 6170 
#define NET_DVR_SET_HD_STATUS 6171 
#define NET_DVR_IMPORT_IPC_CFG_FILE 6172 
#define NET_DVR_EXPORT_IPC_CFG_FILE 6173 
#define NET_DVR_UPGRADE_IPC 6174 
#define NET_DVR_GET_RAID_BACKGROUND_TASK_SPEED 6175 
#define NET_DVR_SET_RAID_BACKGROUND_TASK_SPEED 6176 
#define NET_DVR_GET_EXCEPTIONCFG_V40 6177 
#define NET_DVR_SET_EXCEPTIONCFG_V40 6178 
#define NET_DVR_GET_PICCFG_V40 6179 
#define NET_DVR_SET_PICCFG_V40 6180 
#define NET_DVR_GET_ALARMINCFG_V40 6181 
#define NET_DVR_SET_ALARMINCFG_V40 6182 
#define NET_DVR_GET_IPALARMINCFG_V40 6183 
#define NET_DVR_GET_IPALARMOUTCFG_V40 6185 
#define NET_DVR_GET_USERCFG_V40 6187 
#define NET_DVR_SET_USERCFG_V40 6188 
#define NET_DVR_GET_WORK_STATUS 6189 
#define NET_DVR_GET_JPEG_CAPTURE_CFG_V40 6190 
#define NET_DVR_SET_JPEG_CAPTURE_CFG_V40 6191 
#define NET_DVR_GET_HDGROUP_CFG_V40 6192 
#define NET_DVR_SET_HDGROUP_CFG_V40 6193 
#define NET_DVR_GET_SMD_HOLIDAY_HANDLE 6194 
#define NET_DVR_SET_SMD_HOLIDAY_HANDLE 6195 
#define NET_DVR_GET_PIC_MODEL_CFG 6196 
#define NET_DVR_SET_PIC_MODEL_CFG 6197 
#define NET_DVR_START_LOCAL_MOUSE_EVENT 6198 
#define NET_DVR_START_SIMULARE_MOUSE_EVENT 6199 
#define NET_DVR_GET_WORK_STATUS_V50 6200 
#define NET_DVR_GET_ACCESS_CAMERA_INFO 6201
#define NET_DVR_SET_ACCESS_CAMERA_INFO 6202
#define NET_DVR_PULL_DISK 6203
#define NET_DVR_SCAN_RAID 6204
#define NET_DVR_GET_USER_RIGHT_CFG 6210 
#define NET_DVR_SET_USER_RIGHT_CFG 6211 
#define NET_DVR_ONE_KEY_CONFIG 6212 
#define NET_DVR_RESTART_SERVICE 6213 
#define NET_DVR_GET_MAX_MACHINE_NUM_CFG 6214 
#define NET_DVR_SET_MAX_MACHINE_NUM_CFG 6215 
#define NET_DVR_ADD_DEVICE 6216 
#define NET_DVR_DEL_DEVICE 6217 
#define NET_DVR_GET_DATA_CALLBACK_CFG 6218 
#define NET_DVR_SET_DATA_CALLBACK_CFG 6219 
#define NET_DVR_CLONE_LUN 6220 
#define NET_DVR_EXPAND_LUN 6221 
#define NET_DVR_GET_N_PLUS_ONE_DEVICE_INFO 6222 
#define NET_DVR_MODIFY_DVR_NET_DISK 6223 
#define NET_DVR_CREATE_NAS 6225 
#define NET_DVR_DELETE_NAS 6226 
#define NET_DVR_OPEN_ISCSI 6227 
#define NET_DVR_CLOSE_ISCSI 6228 
#define NET_DVR_GET_FC 6229 
#define NET_DVR_OPEN_FC 6230 
#define NET_DVR_CLOSE_FC 6231 
#define NET_DVR_ONE_KEY_CONFIG_SAN 6232 
#define NET_DVR_RECORD_CHECK 6233 
#define NET_DVR_ADD_RECORD_PASSBACK_TASK_MANUAL 6234 
#define NET_DVR_GET_ALL_RECORD_PASSBACK_TASK_MANUAL 6235 
#define NET_DVR_RECORD_PASSBACK_TASK_MANUAL_CTRL 6236 
#define NET_DVR_DEL_RECORD_PASSBACK_TASK_MANUAL 6237 
#define NET_DVR_GET_RECORD_PASSBACK_PLAN_CFG 6238 
#define NET_DVR_SET_RECORD_PASSBACK_PLAN_CFG 6239 
#define NET_DVR_GET_DEV_STORAGE_CFG 6240 
#define NET_DVR_GET_ONLINE_USER_CFG 6241 
#define NET_DVR_GET_RECORD_SEGMENT_CFG 6242 
#define NET_DVR_GET_REC_PASSBACK_TASK_EXECUTABLE 6243 
#define NET_DVR_GET_STREAM_MEDIA_CFG 6244 
#define NET_DVR_SET_STREAM_MEDIA_CFG 6245 
#define NET_DVR_GET_USERCFG_V50 6246 
#define NET_DVR_SET_USERCFG_V50 6247 
#define NET_DVR_GET_RECORD_PASSBACK_BASIC_CFG_CAP 6248 
#define NET_DVR_GET_RECORD_PASSBACK_BASIC_CFG 6249 
#define NET_DVR_SET_RECORD_PASSBACK_BASIC_CFG 6250 
#define NET_DVR_ONE_KEY_CONFIG_V50 6251 
#define NET_DVR_GET_RACM_CAP 6252 
#define NET_DVR_GET_THUMBNAILS 6253 
#define NET_DVR_ADD_RECORD_PASSBACK_TASK_MANUAL_V50 6254 
#define NET_DVR_GET_RECORD_PASSBACK_HISTORY_PLAN_CFG_CAP 6255 
#define NET_DVR_GET_RECORD_PASSBACK_HISTORY_PLAN_CFG 6256 
#define NET_DVR_SET_RECORD_PASSBACK_HISTORY_PLAN_CFG 6257 
#define NET_DVR_ONE_KEY_CONFIG_V51 6258 
#define NET_DVR_GET_RECORD_PACK 6301 
#define NET_DVR_SET_RECORD_PACK 6302 
#define NET_DVR_GET_CLOUD_STORAGE_CFG 6303 
#define NET_DVR_SET_CLOUD_STORAGE_CFG 6304 
#define NET_DVR_GET_GOP_INFO 6305 
#define NET_DVR_GET_PHY_DISK_INFO 6306 
#define NET_DVR_GET_RECORDING_AUTO_TRACK_CFG 6307 
#define NET_DVR_SET_RECORDING_AUTO_TRACK_CFG 6308 
#define NET_DVR_GET_RECORDING_PUBLISH_CFG 6309 
#define NET_DVR_SET_RECORDING_PUBLISH_CFG 6310 
#define NET_DVR_RECORDING_ONEKEY_CONTROL 6311 
#define NET_DVR_GET_RECORDING_END_TIME 6312 
#define NET_DVR_RECORDING_PUBLISH 6313 
#define NET_DVR_GET_CURRICULUM_CFG 6314 
#define NET_DVR_SET_CURRICULUM_CFG 6315 
#define NET_DVR_GET_COURSE_INDEX_CFG 6316 
#define NET_DVR_SET_COURSE_INDEX_CFG 6317 
#define NET_DVR_GET_PPT_CHANNEL 6318 
#define NET_DVR_GET_PPT_DETECT_CFG 6319 
#define NET_DVR_SET_PPT_DETECT_CFG 6320 
#define NET_DVR_GET_RECORDINGHOST_CFG 6321 
#define NET_DVR_SET_RECORDINGHOST_CFG 6322 
#define NET_DVR_GET_BACKUP_RECORD_CFG 6323 
#define NET_DVR_SET_BACKUP_RECORD_CFG 6324 
#define NET_DVR_GET_AUDIO_ACTIVATION_CFG 6326 
#define NET_DVR_SET_AUDIO_ACTIVATION_CFG 6327 
#define NET_DVR_GET_DECODERCFG_V40 6328 
#define NET_DVR_SET_DECODERCFG_V40 6329 
#define NET_DVR_INFRARED_OUTPUT_CONTROL 6330 
#define NET_DVR_GET_INFRARED_CMD_NAME_CFG 6331 
#define NET_DVR_SET_INFRARED_CMD_NAME_CFG 6332 
#define NET_DVR_START_INFRARED_LEARN 6333 
#define NET_DVR_GET_TRIAL_SYSTEM_CFG 6334 
#define NET_DVR_SET_CASE_INFO 6335 
#define NET_DVR_GET_TRIAL_MICROPHONE_STATUS 6336 
#define NET_DVR_SET_TRIAL_MICROPHONE_STATUS 6337 
#define NET_DVR_GET_TRIAL_HOST_STATUS 6338 
#define NET_DVR_GET_LAMP_OUT 6339 
#define NET_DVR_SET_LAMP_OUT 6340 
#define NET_DVR_LAMP_REMOTE_CONTROL 6341 
#define NET_DVR_REMOTE_CONTROL_PLAY 6342 
#define NET_DVR_GET_LOCAL_INPUT_CFG 6343 
#define NET_DVR_SET_LOCAL_INPUT_CFG 6344 
#define NET_DVR_GET_CASE_INFO 6345 
#define NET_DVR_INQUEST_GET_CDW_STATUS 6350 
#define NET_DVR_GET_MIX_AUDIOIN_CFG 6351 
#define NET_DVR_SET_MIX_AUDIOIN_CFG 6352 
#define NET_DVR_GET_MIX_AUDIOOUT_CFG 6353 
#define NET_DVR_SET_MIX_AUDIOOUT_CFG 6354 
#define NET_DVR_GET_AUDIOIN_VOLUME_CFG 6355 
#define NET_DVR_SET_AUDIOIN_VOLUME_CFG 6356 
#define NET_DVR_GET_AREA_MASK_CFG 6357 
#define NET_DVR_SET_AREA_MASK_CFG 6358 
#define NET_DVR_GET_AUDIO_DIACRITICAL_CFG 6359 
#define NET_DVR_SET_AUDIO_DIACRITICAL_CFG 6360 
#define NET_DVR_GET_WIFI_DHCP_ADDR_CFG 6361 
#define NET_DVR_SET_WIFI_DHCP_ADDR_CFG 6362 
#define NET_DVR_GET_WIFI_CLIENT_LIST_INFO 6363 
#define NET_DVR_REMOTECONTROL_POWER_ON 6364 
#define NET_DVR_GET_MULTISTREAM_RELATION_CHAN_CFG 6365 
#define NET_DVR_SET_MULTISTREAM_RELATION_CHAN_CFG 6366 
#define NET_DVR_GET_VIDEOOUT_RESOLUTION_CFG 6367 
#define NET_DVR_SET_VIDEOOUT_RESOLUTION_CFG 6368 
#define NET_DVR_GET_AUDIOOUT_VOLUME_CFG 6369 
#define NET_DVR_SET_AUDIOOUT_VOLUME_CFG 6370 
#define NET_DVR_INQUEST_PAUSE_CDW 6371 
#define NET_DVR_INQUEST_RESUME_CDW 6372 
#define NET_DVR_GET_INPUT_CHAN_CFG 6373 
#define NET_DVR_SET_INPUT_CHAN_CFG 6374 
#define NET_DVR_GET_INQUEST_MIX_AUDIOIN_CFG 6375 
#define NET_DVR_SET_INQUEST_MIX_AUDIOIN_CFG 6376 
#define NET_DVR_CASE_INFO_CTRL 6377 
#define NET_DVR_GET_INQUEST_USER_RIGHT 6378 
#define NET_DVR_SET_INQUEST_USER_RIGHT 6379 
#define NET_DVR_GET_INQUEST_CASE_INFO 6380 
#define NET_DVR_SET_INQUEST_CASE_INFO 6381 
#define NET_DVR_GET_FILM_MODE_CFG 6387 
#define NET_DVR_SET_FILM_MODE_CFG 6388 
#define NET_DVR_GET_FILM_MODE_CFG_CAP 6389 
#define NET_DVR_GET_DIRECTED_STRATEGY_CFG 6390 
#define NET_DVR_SET_DIRECTED_STRATEGY_CFG 6391 
#define NET_DVR_GET_DIRECTED_STRATEGY_CFG_CAP 6392 
#define NET_DVR_GET_FRAME_CFG 6393 
#define NET_DVR_SET_FRAME_CFG 6394 
#define NET_DVR_GET_FRAME_CFG_CAP 6395 
#define NET_DVR_GET_AUDIO_EFFECTIVE_CFG 6396 
#define NET_DVR_SET_AUDIO_EFFECTIVE_CFG 6397 
#define NET_DVR_GET_AUDIO_EFFECTIVE_CFG_CAP 6398 
#define NET_DVR_GET_RECORD_VIDEO_CFG 6399 
#define NET_DVR_SET_RECORD_VIDEO_CFG 6400 
#define NET_DVR_GET_OUTPUT_CFG 6401 
#define NET_DVR_SET_OUTPUT_CFG 6402 
#define NET_DVR_CODER_DISPLAY_START 6403 
#define NET_DVR_CODER_DISPLAY_STOP 6404 
#define NET_DVR_GET_WINDOW_STATUS 6405 
#define NET_DVR_GET_VQD_LOOP_DIAGNOSE_CFG 6406 
#define NET_DVR_SET_VQD_LOOP_DIAGNOSE_CFG 6407 
#define NET_DVR_GET_VQD_DIAGNOSE_INFO 6408 
#define NET_DVR_RECORDING_PUBLISH_FILE 6421 
#define NET_DVR_GET_RECORDING_PUBLISH_FILE_CAP 6422 
#define NET_DVR_GET_PUBLISH_PROGRESS 6423 
#define NET_DVR_GET_RECORD_VIDEO_CFG_CAP 6424 
#define NET_DVR_GET_RTMP_CFG 6425 
#define NET_DVR_SET_RTMP_CFG 6426 
#define NET_DVR_GET_RTMP_CFG_CAP 6427 
#define NET_DVR_DEL_BACKGROUND_PIC 6428 
#define NET_DVR_GET_BACKGROUND_PIC_CFG 6429 
#define NET_DVR_GET_BACKGROUND_PIC_INFO 6430 
#define NET_DVR_SET_BACKGROUND_PIC_INFO 6431 
#define NET_DVR_GET_BACKGROUND_PIC_INFO_CAP 6432 
#define NET_DVR_GET_RECORD_HOST_CAP 6433 
#define NET_DVR_GET_COURSE_LIST 6434 
#define NET_DVR_GET_RECORD_STATUS 6435
#define NET_DVR_MANUAL_CURRICULUM_CONTROL 6436 
#define NET_DVR_GET_IMAGE_DIFF_DETECTION_CFG 6437 
#define NET_DVR_SET_IMAGE_DIFF_DETECTION_CFG 6438 
#define NET_DVR_GET_IMAGE_DIFF_DETECTION_CFG_CAP 6439 
#define NET_DVR_GET_RECORDING_PUBLISH_FILE_INFO 6440 
#define NET_DVR_SET_RECORDING_PUBLISH_FILE_INFO 6441 
#define NET_DVR_GET_RECORDING_PUBLISH_FILE_INFO_CAP 6442 
#define NET_DVR_MANUAL_CURRICULUM_CONTROL_CAP 6443 
#define NET_DVR_GET_STATISTIC_DATA_LIST 6444 
#define NET_DVR_GET_DEVICE_LAN_ENCODE 6501 
#define NET_DVR_GET_GBT28181_SERVICE_CFG 6503 
#define NET_DVR_SET_GBT28181_SERVICE_CFG 6504 
#define NET_DVR_GET_GBT28181_SERVICE_CAPABILITIES 6505 
#define NET_DVR_GET_CLOUD_URL 6506 
#define NET_DVR_GET_CLOUD_URL_CAP 6507 
#define NET_DVR_GET_CLOUD_CFG 6508 
#define NET_DVR_SET_CLOUD_CFG 6509 
#define NET_DVR_GET_CLOUD_CFG_CAP 6510 
#define NET_DVR_GET_CLOUD_UPLOADSTRATEGY 6511 
#define NET_DVR_SET_CLOUD_UPLOADSTRATEGY 6512 
#define NET_DVR_GET_CLOUDSTORAGE_UPLOADSTRATEGY_CAP 6513 
#define NET_DVR_GET_VIDEO_IMAGE_DB_CFG 6601 
#define NET_DVR_SET_VIDEO_IMAGE_DB_CFG 6602 
#define NET_DVR_GET_VIDEO_IMAGE_DB_CFG_CAP 6603 
#define NET_DVR_GET_FILE_INFO_BY_ID 6604 
#define NET_DVR_QUERY_FILE_INFO_CAP 6605 
#define NET_DVR_DEL_FILE_FROM_DB 6606 
#define NET_DVR_GET_VIDEO_IMAGE_DB_CAP 6607 
#define NET_DVR_GET_FIGURE 6610 
#define NET_DVR_SYNC_IPC_PASSWD 6621 
#define NET_DVR_GET_VEHICLE_BLACKLST_SCHEDULE 6622 
#define NET_DVR_SET_VEHICLE_BLACKLST_SCHEDULE 6623 
#define NET_DVR_GET_VEHICLE_WHITELST_SCHEDULE 6624 
#define NET_DVR_SET_VEHICLE_WHITELST_SCHEDULE 6625 
#define NET_DVR_GET_VEHICLE_BLACKLIST_EVENT_TRIGGER 6626 
#define NET_DVR_SET_VEHICLE_BLACKLIST_EVENT_TRIGGER 6627 
#define NET_DVR_GET_VEHICLE_WHITELIST_EVENT_TRIGGER 6628 
#define NET_DVR_SET_VEHICLE_WHITELIST_EVENT_TRIGGER 6629 
#define NET_DVR_GET_TRAFFIC_CAP 6630 
#define NET_DVR_GET_VEHICLE_ALLLIST_EVENT_TRIGGER 6631 
#define NET_DVR_SET_VEHICLE_ALLLIST_EVENT_TRIGGER 6632 
#define NET_DVR_GET_VEHICLE_OTHERLIST_EVENT_TRIGGER 6633 
#define NET_DVR_SET_VEHICLE_OTHERLIST_EVENT_TRIGGER 6634 
#define NET_DVR_GET_STORAGEDETECTION_EVENT_TRIGGER 6635 
#define NET_DVR_SET_STORAGEDETECTION_EVENT_TRIGGER 6636 
#define NET_DVR_GET_STORAGEDETECTION_SCHEDULE_CAPABILITIES 6637 
#define NET_DVR_GET_STORAGEDETECTION_SCHEDULE 6638 
#define NET_DVR_SET_STORAGEDETECTION_SCHEDULE 6639 
#define NET_DVR_GET_STORAGEDETECTION_STATE 6640 
#define NET_DVR_GET_STORAGEDETECTION_RWLOCK 6646 
#define NET_DVR_GET_STORAGEDETECTION_RWLOCK_CAPABILITIES 6647 
#define NET_DVR_SET_STORAGEDETECTION_RWLOCK 6648 
#define NET_DVR_GET_PTZTRACKSTATUS 6649 
#define NET_DVR_SET_STORAGEDETECTION_UNLOCK 6653 
#define NET_DVR_GET_STORAGEDETECTION_UNLOCK_CAPABILITIES 6654 
#define NET_DVR_SET_SHIPSDETECTION_CFG 6655 
#define NET_DVR_GET_SHIPSDETECTION_CFG 6656 
#define NET_DVR_GET_SHIPSDETECTION_CAPABILITIES 6657 
#define NET_DVR_GET_SHIPSDETECTION_COUNT 6658 
#define NET_DVR_SHIPSCOUNT_DELETE_CTRL 6659 
#define NET_DVR_GET_BAREDATAOVERLAY_CAPABILITIES 6660 
#define NET_DVR_SET_BAREDATAOVERLAY_CFG 6661 
#define NET_DVR_GET_BAREDATAOVERLAY_CFG 6662 
#define NET_DVR_GET_SHIPSDETECTION_SCHEDULE 6663 
#define NET_DVR_SET_SHIPSDETECTION_SCHEDULE 6664 
#define NET_DVR_GET_SHIPSDETECTION_EVENT_TRIGGER 6665 
#define NET_DVR_SET_SHIPSDETECTION_EVENT_TRIGGER 6666 
#define NET_DVR_GET_SHIPSDETECTION_SCHEDULE_CAPABILITIES 6667 
#define NET_DVR_FIRE_FOCUSZOOM_CTRL 6670 
#define NET_DVR_GET_FIREDETECTION_SCHEDULE_CAPABILITIES 6671
#define NET_DVR_GET_FIREDETECTION_SCHEDULE 6672 
#define NET_DVR_SET_FIREDETECTION_SCHEDULE 6673 
#define NET_DVR_GET_MANUALRANGING_CAPABILITIES 6675 
#define NET_DVR_SET_MANUALRANGING 6677 
#define NET_DVR_GET_MANUALDEICING_CAPABILITIES 6678
#define NET_DVR_SET_MANUALDEICING 6679 
#define NET_DVR_GET_MANUALDEICING 6680 
#define NET_DVR_GET_THERMALPOWER_CAPABILITIES 6689 
#define NET_DVR_GET_THERMALPOWER 6690 
#define NET_DVR_SET_THERMALPOWER 6691 
#define NET_DVR_GET_PTZABSOLUTEEX_CAPABILITIES 6695 
#define NET_DVR_GET_PTZABSOLUTEEX 6696 
#define NET_DVR_SET_PTZABSOLUTEEX 6697 
#define NET_DVR_GET_CRUISE_CAPABILITIES 6698 
#define NET_DVR_GET_CRUISE_INFO 6699 
#define NET_DVR_GET_TEMP_HUMI_CAPABILITIES 6700 
#define NET_DVR_GET_TEMP_HUMI_INFO 6701 
#define NET_DVR_GET_MANUALTHERM_INFO 6706 
#define NET_DVR_GET_MANUALTHERM_CAPABILITIES 6707 
#define NET_DVR_SET_MANUALTHERM 6708 
#define NET_DVR_GET_ACCESSORY_CARD_INFO_CAPABILITIES 6709
#define NET_DVR_GET_ACCESSORY_CARD_INFO 6710
#define NET_DVR_GET_THERMINTELL_CAPABILITIES 6711 
#define NET_DVR_GET_THERMINTELL 6712 
#define NET_DVR_SET_THERMINTELL 6713 
#define NET_GET_CRUISEPOINT_V50 6714
#define NET_DVR_GET_MANUALTHERM_BASIC_CAPABILITIES 6715 
#define NET_DVR_SET_MANUALTHERM_BASICPARAM 6716 
#define NET_DVR_GET_MANUALTHERM_BASICPARAM 6717 
#define NET_DVR_GET_FIRESHIELDMASK_CAPABILITIES 6718 
#define NET_DVR_GET_HIDDEN_INFORMATION_CAPABILITIES 6720
#define NET_DVR_GET_HIDDEN_INFORMATION 6721
#define NET_DVR_SET_HIDDEN_INFORMATION 6722
#define NET_DVR_SET_FIRESHIELDMASK_CFG 6723 
#define NET_DVR_GET_FIRESHIELDMASK_CFG 6724 
#define NET_DVR_GET_SMOKESHIELDMASK_CAPABILITIES 6725 
#define NET_DVR_SET_SMOKESHIELDMASK_CFG 6726 
#define NET_DVR_GET_SMOKESHIELDMASK_CFG 6727 
#define NET_DVR_GET_AREASCAN_CAPABILITIES 6728 
#define NET_DVR_GET_AREASCAN_CFG 6730 
#define NET_DVR_DEL_AREASCAN_CFG 6731 
#define NET_DVR_AREASCAN_INIT_CTRL 6732 
#define NET_DVR_AREASCAN_CONFIRM_CTRL 6733 
#define NET_DVR_AREASCAN_STOP_CTRL 6734 
#define NET_DVR_SAVE_SCANZOOM_CTRL 6735 
#define NET_DVR_GET_SCANZOOM_CTRL 6736 
#define NET_DVR_DEL_FIRESHIELDMASK_CTRL 6737 
#define NET_DVR_DEL_SMOKESHIELDMASK_CTRL 6738 
#define NET_DVR_GET_DENSEFOG_EVENT_TRIGGER 6740 
#define NET_DVR_SET_DENSEFOG_EVENT_TRIGGER 6741 
#define NET_DVR_SET_DENSEFOGDETECTION_CFG 6742 
#define NET_DVR_GET_DENSEFOGDETECTION_CFG 6743 
#define NET_DVR_GET_DENSEFOGDETECTION_CAPABILITIES 6744 
#define NET_DVR_GET_THERMOMETRY_SCHEDULE_CAPABILITIES 6750 
#define NET_DVR_GET_THERMOMETRY_SCHEDULE 6751 
#define NET_DVR_SET_THERMOMETRY_SCHEDULE 6752 
#define NET_DVR_GET_TEMPERTURE_SCHEDULE_CAPABILITIES 6753 
#define NET_DVR_GET_TEMPERTURE_SCHEDULE 6754 
#define NET_DVR_SET_TEMPERTURE_SCHEDULE 6755 
#define NET_DVR_GET_SEARCH_LOG_CAPABILITIES 6756 
#define NET_DVR_GET_VEHICLEFLOW 6758 
#define NET_DVR_GET_IPADDR_FILTERCFG_V50 6759 
#define NET_DVR_SET_IPADDR_FILTERCFG_V50 6760 
#define NET_DVR_GET_TEMPHUMSENSOR_CAPABILITIES 6761 
#define NET_DVR_GET_TEMPHUMSENSOR 6762 
#define NET_DVR_SET_TEMPHUMSENSOR 6763 
#define NET_DVR_GET_THERMOMETRY_MODE_CAPABILITIES 6764 
#define NET_DVR_GET_THERMOMETRY_MODE 6765 
#define NET_DVR_SET_THERMOMETRY_MODE 6766 
#define NET_DVR_GET_THERMAL_PIP_CAPABILITIES 6767 
#define NET_DVR_GET_THERMAL_PIP 6768 
#define NET_DVR_SET_THERMAL_PIP 6769 
#define NET_DVR_GET_THERMAL_INTELRULEDISPLAY_CAPABILITIES 6770 
#define NET_DVR_GET_THERMAL_INTELRULE_DISPLAY 6771 
#define NET_DVR_SET_THERMAL_INTELRULE_DISPLAY 6772 
#define NET_DVR_GET_THERMAL_ALGVERSION 6773 
#define NET_DVR_GET_CURRENT_LOCK_CAPABILITIES 6774 
#define NET_DVR_GET_CURRENT_LOCK 6775 
#define NET_DVR_SET_CURRENT_LOCK 6776 
#define NET_DVR_DEL_MANUALTHERM_RULE 6778 
#define NET_DVR_GET_UPGRADE_INFO 6779 
#define NET_DVR_SWITCH_TRANSFER 7000 
#define NET_DVR_GET_MB_POWERCTRLPARA 8000
#define NET_DVR_SET_MB_POWERCTRLPARA 8001
#define NET_DVR_GET_AUTOBACKUPPARA 8002
#define NET_DVR_SET_AUTOBACKUPPARA 8003
#define NET_DVR_GET_MB_GPSPARA 8004
#define NET_DVR_SET_MB_GPSPARA 8005
#define NET_DVR_GET_MB_SENSORINPARA 8006
#define NET_DVR_SET_MB_SENSORINPARA 8007
#define NET_DVR_GET_GSENSORPARA 8008
#define NET_DVR_SET_GSENSORPARA 8009
#define NET_DVR_GET_MB_DOWNLOADSVRPARA 8010
#define NET_DVR_SET_MB_DOWNLOADSVRPARA 8011
#define NET_DVR_GET_PLATERECOG_PARA 8012
#define NET_DVR_SET_PLATERECOG_PARA 8013
#define NET_DVR_GET_ENFORCESYS_PARA 8014
#define NET_DVR_SET_ENFORCESYS_PARA 8015
#define NET_DVR_GET_GPS_DATA 8016
#define NET_DVR_GET_ANALOG_ALARMINCFG 8017
#define NET_DVR_SET_ANALOG_ALARMINCFG 8018
#define NET_DVR_GET_SYSTEM_CAPABILITIES 8100
#define NET_DVR_GET_EAGLEEYE_CAPABILITIES 8101
#define NET_DVR_GET_SLAVECAMERA_CALIB_V51 8102 
#define NET_DVR_SET_SLAVECAMERA_CALIB_V51 8103 
#define NET_DVR_SET_GOTOSCENE 8105 
#define NET_DVR_GET_PTZ_NOTIFICATION 8201
#define NET_DVR_SET_PTZ_NOTIFICATION 8202
#define NET_DVR_MATRIX_WALL_SET 9001 
#define NET_DVR_MATRIX_WALL_GET 9002 
#define NET_DVR_WALLWIN_GET 9003 
#define NET_DVR_WALLWIN_SET 9004 
#define NET_DVR_WALLWINPARAM_SET 9005 
#define NET_DVR_WALLWINPARAM_GET 9006 
#define NET_DVR_WALLSCENEPARAM_GET 9007 
#define NET_DVR_WALLSCENEPARAM_SET 9008 
#define NET_DVR_MATRIX_GETWINSTATUS 9009 
#define NET_DVR_GET_WINASSOCIATEDDEVINFO 9010 
#define NET_DVR_WALLOUTPUT_GET 9011 
#define NET_DVR_WALLOUTPUT_SET 9012 
#define NET_DVR_GET_UNITEDMATRIXSYSTEM 9013 
#define NET_DVR_GET_WALL_CFG 9014 
#define NET_DVR_SET_WALL_CFG 9015 
#define NET_DVR_CLOSE_ALL_WND 9016 
#define NET_DVR_SWITCH_WIN_TOP 9017 
#define NET_DVR_SWITCH_WIN_BOTTOM 9018 
#define NET_DVR_CLOSE_ALL_WND_V41 9019 
#define NET_DVR_GET_WALL_WINDOW_V41 9020 
#define NET_DVR_SET_WALL_WINDOW_V41 9021 
#define NET_DVR_GET_CURRENT_SCENE_V41 9022 
#define NET_DVR_GET_WALL_SCENE_PARAM_V41 9023 
#define NET_DVR_SET_WALL_SCENE_PARAM_V41 9024 
#define NET_DVR_GET_MATRIX_LOGO_CFG 9025 
#define NET_DVR_SET_MATRIX_LOGO_CFG 9026 
#define NET_DVR_GET_WIN_LOGO_CFG 9027 
#define NET_DVR_SET_WIN_LOGO_CFG 9028 
#define NET_DVR_DELETE_LOGO 9029 
#define NET_DVR_SET_DISPLAY_EFFECT_CFG 9030 
#define NET_DVR_GET_DISPLAY_EFFECT_CFG 9031 
#define NET_DVR_DEC_PLAY_REMOTE_FILE 9032 
#define NET_DVR_DEC_PLAY_REMOTE_FILE_V50 9314 
#define NET_DVR_GET_WIN_ZOOM_STATUS 9033 
#define NET_DVR_GET_ALL_MATRIX_LOGOCFG 9034 
#define NET_DVR_SIMULATE_REMOTE_CONTROL 9035 
#define NET_DVR_SET_SCREEN_SIGNAL_CFG 9036 
#define NET_DVR_GET_SCREEN_SIGNAL_CFG 9037 
#define NET_DVR_SET_SCREEN_SPLICE_CFG 9038 
#define NET_DVR_GET_SCREEN_SPLICE_CFG 9039 
#define NET_DVR_GET_SCREEN_FAN_WORK_MODE 9040 
#define NET_DVR_SET_SCREEN_FAN_WORK_MODE 9041 
#define NET_DVR_SHOW_SCREEN_WORK_STATUS 9044 
#define NET_DVR_GET_VGA_CFG 9045 
#define NET_DVR_SET_VGA_CFG 9046 
#define NET_DVR_GET_SCREEN_MENU_CFG 9048 
#define NET_DVR_SET_SCREEN_MENU_CFG 9049 
#define NET_DVR_SET_SCREEN_DISPLAY_CFG 9050 
#define NET_DVR_GET_SCREEN_DISPLAY_CFG 9051 
#define NET_DVR_SET_FUSION_CFG 9052 
#define NET_DVR_GET_FUSION_CFG 9053 
#define NET_DVR_SET_PIP_CFG 9060 
#define NET_DVR_GET_PIP_CFG 9061 
#define NET_DVR_SET_DEFOG_LCD 9073 
#define NET_DVR_GET_DEFOG_LCD 9074 
#define NET_DVR_SHOW_IP 9075 
#define NET_DVR_SCREEN_MAINTENANCE_WALL 9076 
#define NET_DVR_SET_SCREEN_POS 9077 
#define NET_DVR_GET_SCREEN_POS 9078 
#define NET_DVR_SCREEN_INDEX_SET 9079 
#define NET_DVR_SCREEN_INDEX_GET 9080 
#define NET_DVR_SCREEN_SPLICE_SET 9081 
#define NET_DVR_SCREEN_SPLICE_GET 9082 
#define NET_DVR_SET_SCREEN_PARAM 9083 
#define NET_DVR_GET_SCREEN_PARAM 9084 
#define NET_DVR_SET_SWITCH_CFG 9085 
#define NET_DVR_GET_SWITCH_CFG 9086 
#define NET_DVR_SET_POWERON_DELAY_CFG 9087 
#define NET_DVR_GET_POWERON_DELAY_CFG 9088 
#define NET_DVR_SET_SCREEN_POSITION 9089 
#define NET_DVR_GET_SCREEN_POSITION 9090 
#define NET_DVR_SCREEN_SCENE_CONTROL 9091 
#define NET_DVR_GET_CURRENT_SCREEN_SCENE 9092 
#define NET_DVR_GET_SCREEN_SCENE_PARAM 9093 
#define NET_DVR_SET_SCREEN_SCENE_PARAM 9094 
#define NET_DVR_GET_EXTERNAL_MATRIX_RELATION 9095 
#define NET_DVR_GET_LCD_AUDIO_CFG 9096 
#define NET_DVR_SET_LCD_AUDIO_CFG 9097 
#define NET_DVR_GET_LCD_WORK_STATE 9098 
#define NET_DVR_GET_BOOT_LOGO_CFG 9099 
#define NET_DVR_SET_BOOT_LOGO_CFG 9100 
#define NET_DVR_GET_STREAM_DST_COMPRESSIONINFO 9101 
#define NET_DVR_SET_STREAM_DST_COMPRESSIONINFO 9102 
#define NET_DVR_GET_STREAM_TRANS_STATUS 9103 
#define NET_DVR_GET_DEVICE_TRANS_STATUS 9104 
#define NET_DVR_GET_ALLSTREAM_SRC_INFO 9105 
#define NET_DVR_GET_BIG_SCREEN_AUDIO 9106 
#define NET_DVR_SET_BIG_SCREEN_AUDIO 9107 
#define NET_DVR_GET_DEV_WORK_MODE 9108 
#define NET_DVR_SET_DEV_WORK_MODE 9109 
#define NET_DVR_APPLY_TRANS_CHAN 9110 
#define NET_DVR_GET_DISPCHAN_CFG 9111 
#define NET_DVR_SET_DISPCHAN_CFG 9112 
#define NET_DVR_GET_DEC_CHAN_STATUS 9113 
#define NET_DVR_GET_DISP_CHAN_STATUS 9114 
#define NET_DVR_GET_ALARMIN_STATUS 9115 
#define NET_DVR_GET_ALARMOUT_STATUS 9116 
#define NET_DVR_GET_AUDIO_CHAN_STATUS 9117 
#define NET_DVR_GET_VIDEO_AUDIOIN_CFG 9118 
#define NET_DVR_SET_VIDEO_AUDIOIN_CFG 9119 
#define NET_DVR_SET_BASEMAP_CFG 9120 
#define NET_DVR_GET_BASEMAP_CFG 9121 
#define NET_DVR_GET_VIRTUAL_SCREEN_CFG 9122 
#define NET_DVR_SET_VIRTUAL_SCREEN_CFG 9123 
#define NET_DVR_GET_BASEMAP_WIN_CFG 9124 
#define NET_DVR_SET_BASEMAP_WIN_CFG 9125 
#define NET_DVR_DELETE_PICTURE 9126 
#define NET_DVR_GET_BASEMAP_PIC_INFO 9127 
#define NET_DVR_SET_BASEMAP_WIN_CFG_V40 9128 
#define NET_DVR_GET_BASEMAP_WIN_CFG_V40 9129 
#define NET_DVR_GET_DEC_VCA_CFG 9130 
#define NET_DVR_SET_DEC_VCA_CFG 9131 
#define NET_DVR_SET_VS_INPUT_CHAN_INIT_ALL 9132 
#define NET_DVR_GET_VS_INPUT_CHAN_INIT_ALL 9133 
#define NET_DVR_GET_VS_INPUT_CHAN_INIT 9134 
#define NET_DVR_GET_VS_INPUT_CHAN_CFG 9135 
#define NET_DVR_GET_TERMINAL_CONFERENCE_STATUS 9136 
#define NET_DVR_GET_TERMINAL_INPUT_CFG_CAP 9137 
#define NET_DVR_GET_TERMINAL_INPUT_CFG 9138 
#define NET_DVR_SET_TERMINAL_INPUT_CFG 9139 
#define NET_DVR_GET_CONFERENCE_REGION_CAP 9140 
#define NET_DVR_GET_CONFERENCE_REGION 9141 
#define NET_DVR_SET_CONFERENCE_REGION 9142 
#define NET_DVR_GET_TERMINAL_CALL_CFG_CAP 9143 
#define NET_DVR_GET_TERMINAL_CALL_CFG 9144 
#define NET_DVR_SET_TERMINAL_CALL_CFG 9145 
#define NET_DVR_GET_TERMINAL_CTRL_CAP 9146 
#define NET_DVR_TERMINAL_CTRL 9147 
#define NET_DVR_GET_CALL_QUERY_CAP 9148 
#define NET_DVR_GET_CALLINFO_BY_COND 9149 
#define NET_DVR_SET_FUSION_SCALE 9150 
#define NET_DVR_GET_FUSION_SCALE 9151 
#define NET_DVR_GET_VCS_CAP 9152 
#define NET_DVR_GET_TERMINAL_GK_CFG_CAP 9153 
#define NET_DVR_GET_TERMINAL_GK_CFG 9154 
#define NET_DVR_SET_TERMINAL_GK_CFG 9155 
#define NET_DVR_GET_MCU_CONFERENCESEARCH_CAP 9156 
#define NET_DVR_SET_VS_INPUT_CHAN_CFG 9157 
#define NET_DVR_GET_VS_NETSRC_CFG 9158 
#define NET_DVR_SET_VS_NETSRC_CFG 9159 
#define NET_DVR_GET_LLDP_CFG 9160 
#define NET_DVR_SET_LLDP_CFG 9161 
#define NET_DVR_GET_LLDP_CAP 9162 
#define NET_DVR_GET_FIBER_CONVERT_BASIC_INFO 9163 
#define NET_DVR_GET_FIBER_CONVERT_WORK_STATE 9164 
#define NET_DVR_GET_FIBER_CONVERT_TOPOLOGY 9165 
#define NET_DVR_GET_FC_PORT_REMARKS 9166 
#define NET_DVR_SET_FC_PORT_REMARKS 9167 
#define NET_DVR_GET_PORT_REMARKS_CAP 9168 
#define NET_DVR_GET_MCU_CONFERENCECONTROL_CAP 9169 
#define NET_DVR_GET_MCU_TERMINALCONTROL_CAP 9170 
#define NET_DVR_GET_MCU_TERIMINALGROUP_CAP 9171 
#define NET_DVR_GET_MCU_TERMINAL_CAP 9174 
#define NET_DVR_GET_MCU_CONFERENCE_CAP 9175 
#define NET_DVR_GET_MCU_GK_CFG_CAP 9176 
#define NET_DVR_GET_MCU_GK_SERVER_CAP 9177 
#define NET_DVR_GET_EDID_CFG_FILE_INFO 9178 
#define NET_DVR_GET_EDID_CFG_FILE_INFO_LIST 9179 
#define NET_DVR_SET_EDID_CFG_FILE_INFO 9180 
#define NET_DVR_DEL_EDID_CFG_FILE_INFO 9181 
#define NET_DVR_GET_EDID_CFG_FILE_INFO_CAP 9182 
#define NET_DVR_GET_SUBWND_DECODE_OSD 9183 
#define NET_DVR_GET_SUBWND_DECODE_OSD_ALL 9184 
#define NET_DVR_SET_SUBWND_DECODE_OSD 9185 
#define NET_DVR_GET_SUBWND_DECODE_OSD_CAP 9186 
#define NET_DVR_GET_DECODE_CHANNEL_OSD 9187 
#define NET_DVR_SET_DECODE_CHANNEL_OSD 9188 
#define NET_DVR_GET_OUTPUT_PIC_INFO 9200 
#define NET_DVR_SET_OUTPUT_PIC_INFO 9201 
#define NET_DVR_GET_OUTPUT_PIC_WIN_CFG 9202 
#define NET_DVR_SET_OUTPUT_PIC_WIN_CFG 9203 
#define NET_DVR_GET_OUTPUT_ALL_PIC_WIN_CFG 9204 
#define NET_DVR_DELETE_OUPUT_PIC 9205 
#define NET_DVR_GET_OUTPUT_OSD_CFG 9206 
#define NET_DVR_SET_OUTPUT_OSD_CFG 9207 
#define NET_DVR_GET_OUTPUT_ALL_OSD_CFG 9208 
#define NET_DVR_GET_CHAN_RELATION 9209 
#define NET_DVR_SET_CHAN_RELATION 9210 
#define NET_DVR_GET_ALL_CHAN_RELATION 9211 
#define NET_DVR_GET_NS_RING_CFG 9212 
#define NET_DVR_SET_NS_RING_CFG 9213 
#define NET_DVR_GET_NS_RING_STATUS 9214 
#define NET_DVR_GET_OPTICAL_PORT_INFO 9220 
#define NET_DVR_SET_OPTICAL_PORT_INFO 9221 
#define NET_DVR_GET_OPTICAL_CHAN_RELATE_CFG 9222 
#define NET_DVR_SET_OPTICAL_CHAN_RELATE_CFG 9223 
#define NET_DVR_GET_WIN_ROAM_SWITCH_CFG 9224 
#define NET_DVR_SET_WIN_ROAM_SWITCH_CFG 9225 
#define NET_DVR_START_SCREEN_CRTL 9226 
#define NET_DVR_GET_SCREEN_FLIE_LIST 9227 
#define NET_DVR_GET_SCREEN_FILEINFO 9228 
#define NET_DVR_SET_SCREEN_FILEINFO 9229 
#define NET_DVR_GET_LED_OUTPUT_CFG 9230 
#define NET_DVR_SET_LED_OUTPUT_CFG 9231 
#define NET_DVR_GET_LED_OUTPUT_PORT_CFG 9232 
#define NET_DVR_SET_LED_OUTPUT_PORT_CFG 9233 
#define NET_DVR_GET_LED_DISPLAY_AREA_CFG 9234 
#define NET_DVR_SET_LED_DISPLAY_AREA_CFG 9235 
#define NET_DVR_GET_LED_PORT_CFG 9236 
#define NET_DVR_SET_LED_PORT_CFG 9237 
#define NET_DVR_GET_LED_DISPLAY_CFG 9238 
#define NET_DVR_SET_LED_DISPLAY_CFG 9239 
#define NET_DVR_GET_ALL_LED_PORT_CFG 9240 
#define NET_DVR_SAVE_LED_CONFIGURATION 9241 
#define NET_DVR_GET_LED_TEST_SIGNAL_CFG 9242 
#define NET_DVR_SET_LED_TEST_SIGNAL_CFG 9243 
#define NET_DVR_GET_LED_NOSIGNAL_CFG 9244 
#define NET_DVR_SET_LED_NOSIGNAL_CFG 9245 
#define NET_DVR_GET_LED_INPUT_CFG 9246 
#define NET_DVR_SET_LED_INPUT_CFG 9247 
#define NET_DVR_GET_LED_RECV_GAMMA_CFG 9248 
#define NET_DVR_SET_LED_RECV_GAMMA_CFG 9249 
#define NET_DVR_GET_LED_RECV_CFG 9250 
#define NET_DVR_SET_LED_RECV_CFG 9251 
#define NET_DVR_GET_LED_RECV_ADVANCED_CFG 9252 
#define NET_DVR_SET_LED_RECV_ADVANCED_CFG 9253 
#define NET_DVR_GET_LED_SCREEN_DISPLAY_CFG 9254 
#define NET_DVR_SET_LED_SCREEN_DISPLAY_CFG 9255 
#define NET_DVR_GET_INSERTPLAY_PROGRESS 9273 
#define NET_DVR_GET_SCREEN_CONFIG 9260 
#define NET_DVR_SET_SCREEN_CONFIG 9261 
#define NET_DVR_GET_SCREEN_CONFIG_CAP 9262 
#define NET_DVR_GET_SCHEDULE_PUBLISH_PROGRESS 9271 
#define NET_DVR_GET_PUBLISH_UPGRADE_PROGRESS 9272 
#define NET_DVR_GET_INPUT_BOARD_CFG 9281 
#define NET_DVR_GET_INPUT_BOARD_CFG_LIST 9282 
#define NET_DVR_SET_INPUT_BOARD_CFG 9283 
#define NET_DVR_GET_INPUT_SOURCE_TEXT_CAP 9284 
#define NET_DVR_GET_INPUT_SOURCE_TEXT_CFG 9285 
#define NET_DVR_GET_INPUT_SOURCE_TEXT_CFG_LSIT 9286 
#define NET_DVR_SET_INPUT_SOURCE_TEXT_CFG 9287 
#define NET_DVR_SET_INPUT_SOURCE_TEXT_CFG_LIST 9288 
#define NET_DVR_GET_INPUT_SOURCE_RESOLUTION_CAP 9289 
#define NET_DVR_GET_INPUT_SOURCE_RESOLUTION_CFG 9290 
#define NET_DVR_GET_INPUT_SOURCE_RESOLUTION_CFG_LIST 9291
#define NET_DVR_SET_INPUT_SOURCE_RESOLUTION_CFG 9292 
#define NET_DVR_SET_INPUT_SOURCE_RESOLUTION_CFG_LIST 9293 
#define NET_DVR_GET_LED_AREA_INFO_LIST 9295 
#define NET_DVR_GET_DISPINPUT_CFG 9296 
#define NET_DVR_GET_DISPINPUT_CFG_LIST 9297 
#define NET_DVR_SET_DISPINPUT_CFG 9298 
#define NET_DVR_GET_DISPINPUT_CFG_CAP 9299 
#define NET_DVR_GET_CURRENT_VALID_PORT 9300 
#define NET_DVR_SET_ONLINE_UPGRADE 9301 
#define NET_DVR_GET_ONLINEUPGRADE_PROGRESS 9302 
#define NET_DVR_GET_FIRMWARECODE 9303 
#define NET_DVR_GET_ONLINEUPGRADE_SERVER 9304 
#define NET_DVR_GET_ONLINEUPGRADE_VERSION 9305 
#define NET_DVR_GET_RECOMMEN_VERSION 9306 
#define NET_DVR_GET_ONLINEUPGRADE_ABILITY 9309 
#define NET_DVR_GET_FIBER_CONVERT_BASIC_INFO_V50 9310 
#define NET_DVR_GET_FIBER_CONVERT_WORK_STATE_V50 9311 
#define NET_SDK_LED_SCREEN_CHECK 9312 
#define NET_SDK_GENERATE_OUTPUT_CONTROL	 9315 
#define NET_SDK_GET_MATRIX_STATUS_V51 9313 
#define NET_DVR_GET_ALARM_LINKAGE_CFG 9316 
#define NET_DVR_SET_ALARM_LINKAGE_CFG 9317 
#define NET_DVR_GET_RS485_WORK_MODE 10001
#define NET_DVR_SET_RS485_WORK_MODE 10002
#define NET_DVR_GET_SPLITTER_TRANS_CHAN_CFG 10003
#define NET_DVR_SET_SPLITTER_TRANS_CHAN_CFG 10004
#define NET_DVR_GET_RS485_PROTOCOL_VERSION 10301 
#define	 NET_DVR_ALARMHOST_REGISTER_DETECTOR 10302			
#define NET_DVR_GET_SIP_CFG 11001 
#define NET_DVR_SET_SIP_CFG 11002 
#define NET_DVR_GET_IP_VIEW_DEVCFG 11003 
#define NET_DVR_SET_IP_VIEW_DEVCFG 11004 
#define NET_DVR_GET_IP_VIEW_AUDIO_CFG 11005 
#define NET_DVR_SET_IP_VIEW_AUDIO_CFG 11006 
#define NET_DVR_GET_IP_VIEW_CALL_CFG 11007 
#define NET_DVR_SET_IP_VIEW_CALL_CFG 11008 
#define NET_DVR_GET_AUDIO_LIMIT_ALARM_CFG 11009 
#define NET_DVR_SET_AUDIO_LIMIT_ALARM_CFG 11010 
#define NET_DVR_GET_BUTTON_DOWN_ALARM_CFG 11011 
#define NET_DVR_SET_BUTTON_DOWN_ALARM_CFG 11012 
#define NET_DVR_GET_ISCSI_CFG 11070 
#define NET_DVR_SET_ISCSI_CFG 11071 
#define NET_DVR_GET_SECURITYMODE 12004 
#define NET_DVR_GET_TEMP_HUMI 12005
#define NET_DVR_SET_ALARMSOUNDMODE 12006 
#define NET_DVR_GET_ALARMSOUNDMODE 12007 
#define NET_DVR_SET_IPDEVICE_ACTIVATED 13000
#define NET_DVR_GET_DIGITAL_CHAN_SECURITY_STATUS 13001 
#define NET_DVR_GET_ACTIVATE_IPC_ABILITY 13003 
#define NET_DVR_GET_VIDEO_INTERCOM_DEVICEID_CFG 16001 
#define NET_DVR_SET_VIDEO_INTERCOM_DEVICEID_CFG 16002 
#define NET_DVR_SET_PRIVILEGE_PASSWORD 16003 
#define NET_DVR_GET_OPERATION_TIME_CFG 16004 
#define NET_DVR_SET_OPERATION_TIME_CFG 16005 
#define NET_DVR_GET_VIDEO_INTERCOM_RELATEDEV_CFG 16006 
#define NET_DVR_SET_VIDEO_INTERCOM_RELATEDEV_CFG 16007 
#define NET_DVR_REMOTECONTROL_NOTICE_DATA 16008 
#define NET_DVR_REMOTECONTROL_GATEWAY 16009 
#define NET_DVR_REMOTECONTROL_OPERATION_AUTH 16010 
#define NET_DVR_GET_VIDEO_INTERCOM_IOIN_CFG 16016 
#define NET_DVR_SET_VIDEO_INTERCOM_IOIN_CFG 16017 
#define NET_DVR_GET_VIDEO_INTERCOM_IOOUT_CFG 16018 
#define NET_DVR_SET_VIDEO_INTERCOM_IOOUT_CFG 16019 
#define NET_DVR_GET_ELEVATORCONTROL_CFG 16020 
#define NET_DVR_SET_ELEVATORCONTROL_CFG 16021 
#define NET_DVR_GET_VIDEOINTERCOM_STREAM 16022 
#define NET_DVR_SET_VIDEOINTERCOM_STREAM 16023 
#define NET_DVR_GET_WDR_CFG 16024 
#define NET_DVR_SET_WDR_CFG 16025 
#define NET_DVR_GET_VIS_DEVINFO 16026 
#define NET_DVR_GET_VIS_REGISTER_INFO 16027 
#define NET_DVR_GET_ELEVATORCONTROL_CFG_V40 16028 
#define NET_DVR_SET_ELEVATORCONTROL_CFG_V40 16029 
#define NET_DVR_GET_CALL_ROOM_CFG 16030 
#define NET_DVR_SET_CALL_ROOM_CFG 16031 
#define NET_DVR_VIDEO_CALL_SIGNAL_PROCESS 16032 
#define NET_DVR_GET_CALLER_INFO 16033 
#define NET_DVR_GET_CALL_STATUS 16034 
#define NET_DVR_GET_SERVER_DEVICE_INFO 16035 
#define NET_DVR_SET_CALL_SIGNAL 16036 
#define NET_DVR_GET_VIDEO_INTERCOM_ALARM_CFG 16037 
#define NET_DVR_SET_VIDEO_INTERCOM_ALARM_CFG 16038 
#define NET_DVR_GET_RING_LIST 16039 
#define NET_DVR_GET_ROOM_CUSTOM_CFG 16040 
#define NET_DVR_SET_ROOM_CUSTOM_CFG 16041 
#define NET_DVR_GET_ELEVATORCONTROL_CFG_V50 16042 
#define NET_DVR_SET_ELEVATORCONTROL_CFG_V50 16043 
#define NET_DVR_GET_SIP_CFG_V50 16044 
#define NET_DVR_SET_SIP_CFG_V50 16045 
#define NET_DVR_GET_NOTICE_VIDEO_DATA 16050 
#define NET_DVR_DEBUGINFO_START 18000 
#define NET_DVR_AUTO_TEST_START 18001 
#define NET_DVR_GET_SELFCHECK_RESULT 20000 
#define NET_DVR_SET_TEST_COMMAND 20001 
#define NET_DVR_SET_TEST_DEVMODULE 20002 
#define NET_DVR_GET_TEST_DEVMODULE 20003 
#define NET_DVR_SET_AUTOFOCUS_TEST 20004 
#define NET_DVR_CHECK_USER_STATUS 20005 
#define NET_DVR_GET_TEST_COMMAND 20010 
#define NET_DVR_GET_DIAL_SWITCH_CFG 20200 
#define NET_DVR_SET_AGING_TRICK_SCAN 20201 
#define NET_DVR_GET_ECCENTRIC_CORRECT_STATE 20202 
#define	NET_DVR_GET_THERMOMETRYRULE_TEMPERATURE_INFO 23001	
#define NET_DVR_T1_TEST_CMD 131073
#define NET_DVR_GET_MEMU_OUTPUT_MODE 155649 
#define NET_DVR_SET_MEMU_OUTPUT_MODE 155650 
#define NET_DVR_GET_DEV_LOGIN_RET_INFO 16777200 
#define NET_DVR_GET_TEST_VERSION_HEAD 268435441 
#define NET_DVR_SET_TEST_VERSION_HEAD 268435442 
#define NET_DVR_GET_TEST_VERSION_HEAD_V1 268435443 
#define NET_DVR_SET_TEST_VERSION_HEAD_V1 268435444 
#define NET_DVR_GET_TEST_VERSION_HEAD_V2 268435445 
#define NET_DVR_SET_TEST_VERSION_HEAD_V2 268435446 
#define NET_DVR_GET_TEST_VERSION_HEAD_ONLY_0 268435447 
#define NET_DVR_SET_TEST_VERSION_HEAD_ONLY_0 268435448 
#define MAX_LOCAL_ADDR_LEN 96 
#define MAX_COUNTRY_NAME_LEN 4 
#define MAJOR_ALARM 0x1
#define MINOR_ALARM_IN 0x1 
#define MINOR_ALARM_OUT 0x2 
#define MINOR_MOTDET_START 0x3 
#define MINOR_MOTDET_STOP 0x4 
#define MINOR_HIDE_ALARM_START 0x5 
#define MINOR_HIDE_ALARM_STOP 0x6 
#define MINOR_VCA_ALARM_START 0x7 
#define MINOR_VCA_ALARM_STOP 0x8 
#define MINOR_ITS_ALARM_START 0x09 
#define MINOR_ITS_ALARM_STOP 0x0A 
#define MINOR_NETALARM_START 0x0b 
#define MINOR_NETALARM_STOP 0x0c 
#define MINOR_NETALARM_RESUME 0x0d 
#define MINOR_WIRELESS_ALARM_START 0x0e 
#define MINOR_WIRELESS_ALARM_STOP 0x0f 
#define MINOR_PIR_ALARM_START 0x10 
#define MINOR_PIR_ALARM_STOP 0x11 
#define MINOR_CALLHELP_ALARM_START 0x12 
#define MINOR_CALLHELP_ALARM_STOP 0x13 
#define MINOR_IPCHANNEL_ALARMIN_START 0x14 
#define MINOR_IPCHANNEL_ALARMIN_STOP 0x15 
#define MINOR_DETECTFACE_ALARM_START 0x16 
#define MINOR_DETECTFACE_ALARM_STOP 0x17 
#define MINOR_VQD_ALARM_START 0x18 
#define MINOR_VQD_ALARM_STOP 0x19 
#define MINOR_VCA_SECNECHANGE_DETECTION 0x1a 
#define MINOR_SMART_REGION_EXITING_BEGIN 0x1b 
#define MINOR_SMART_REGION_EXITING_END 0x1c 
#define MINOR_SMART_LOITERING_BEGIN 0x1d 
#define MINOR_SMART_LOITERING_END 0x1e 
#define MINOR_VCA_ALARM_LINE_DETECTION_BEGIN 0x20 
#define MINOR_VCA_ALARM_LINE_DETECTION_END 0x21 
#define MINOR_VCA_ALARM_INTRUDE_BEGIN 0x22 
#define MINOR_VCA_ALARM_INTRUDE_END 0x23 
#define MINOR_VCA_ALARM_AUDIOINPUT 0x24 
#define MINOR_VCA_ALARM_AUDIOABNORMAL 0x25 
#define MINOR_VCA_DEFOCUS_DETECTION_BEGIN 0x26 
#define MINOR_VCA_DEFOCUS_DETECTION_END 0x27 
#define MINOR_EXT_ALARM 0x28
#define MINOR_VCA_FACE_ALARM_BEGIN 0x29 
#define MINOR_SMART_REGION_ENTRANCE_BEGIN 0x2a 
#define MINOR_SMART_REGION_ENTRANCE_END 0x2b 
#define MINOR_SMART_PEOPLE_GATHERING_BEGIN 0x2c 
#define MINOR_SMART_PEOPLE_GATHERING_END 0x2d 
#define MINOR_SMART_FAST_MOVING_BEGIN 0x2e 
#define MINOR_SMART_FAST_MOVING_END 0x2f 
#define MINOR_VCA_FACE_ALARM_END 0x30 
#define MINOR_VCA_SCENE_CHANGE_ALARM_BEGIN 0x31 
#define MINOR_VCA_SCENE_CHANGE_ALARM_END 0x32 
#define MINOR_VCA_ALARM_AUDIOINPUT_BEGIN 0x33 
#define MINOR_VCA_ALARM_AUDIOINPUT_END 0x34 
#define MINOR_VCA_ALARM_AUDIOABNORMAL_BEGIN 0x35 
#define MINOR_VCA_ALARM_AUDIOABNORMAL_END 0x36 
#define MINOR_VCA_LECTURE_DETECTION_BEGIN 0x37 
#define MINOR_VCA_LECTURE_DETECTION_END 0x38 
#define MINOR_VCA_ALARM_AUDIOSTEEPDROP 0x39 
#define MINOR_VCA_ANSWER_DETECTION_BEGIN 0x3a 
#define MINOR_VCA_ANSWER_DETECTION_END 0x3b 
#define MINOR_SMART_PARKING_BEGIN 0x3c 
#define MINOR_SMART_PARKING_END 0x3d 
#define MINOR_SMART_UNATTENDED_BAGGAGE_BEGIN 0x3e 
#define MINOR_SMART_UNATTENDED_BAGGAGE_END 0x3f 
#define MINOR_SMART_OBJECT_REMOVAL_BEGIN 0x40 
#define MINOR_SMART_OBJECT_REMOVAL_END 0x41 
#define MINOR_SMART_VEHICLE_ALARM_START 0x46 
#define MINOR_SMART_VEHICLE_ALARM_STOP 0x47 
#define MINOR_THERMAL_FIREDETECTION 0x48 
#define MINOR_THERMAL_FIREDETECTION_END 0x49 
#define MINOR_SMART_VANDALPROOF_BEGIN 0x50 
#define MINOR_SMART_VANDALPROOF_END 0x51 
#define MINOR_FACESNAP_MATCH_ALARM_START 0x55 
#define MINOR_FACESNAP_MATCH_ALARM_STOP 0x56 
#define MINOR_WHITELIST_FACESNAP_MATCH_ALARM_START 0x57 
#define MINOR_WHITELIST_FACESNAP_MATCH_ALARM_STOP 0x58 
#define MINOR_THERMAL_SHIPSDETECTION 0x5a 
#define MINOR_THERMAL_THERMOMETRY_EARLYWARNING_BEGIN 0x5b 
#define MINOR_THERMAL_THERMOMETRY_EARLYWARNING_END 0x5c 
#define MINOR_THERMAL_THERMOMETRY_ALARM_BEGIN 0x5d 
#define MINOR_THERMAL_THERMOMETRY_ALARM_END 0x5e 
#define MINOR_THERMAL_THERMOMETRY_DIFF_ALARM_BEGIN 0x5f 
#define MINOR_THERMAL_THERMOMETRY_DIFF_ALARM_END 0x60 
#define MINOR_FACE_THERMOMETRY_ALARM 0x63 
#define MINOR_SMART_DENSEFOGDETECTION_BEGIN 0x6e 
#define MINOR_SMART_DENSEFOGDETECTION_END 0x6f 
#define MINOR_RUNNING_ALARM 0x70 
#define MINOR_RETENTION_ALARM 0x71 
#define MINOR_SAFETY_HELMET_ALARM_START 0x72 
#define MINOR_SAFETY_HELMET_ALARM_STOP 0x73 
#define MINOR_HFPD_ALARM_START 0x74 
#define MINOR_HFPD_ALARM_STOP 0x75 
#define MINOR_MIXED_TARGET_ALARM_START 0x76 
#define MINOR_MIXED_TARGET_ALARM_STOP 0x77 
#define MINOR_VCA_PLAY_CELLPHONE_ALARM_BEGIN 0x78 
#define MINOR_VCA_PLAY_CELLPHONE_ALARM_END 0x79 
#define MINOR_VCA_GET_UP_ALARM_BEGIN 0x80 
#define MINOR_VCA_GET_UP_ALARM_END 0x81 
#define MINOR_VCA_ADV_REACH_HEIGHT_ALARM_BEGIN 0x82 
#define MINOR_VCA_ADV_REACH_HEIGHT_ALARM_END 0x83 
#define MINOR_VCA_TOILET_TARRY_ALARM_BEGIN 0x84 
#define MINOR_VCA_TOILET_TARRY_ALARM_END 0x85 
#define MINOR_HUMAN_RECOGNITION_ALARM_BEGIN 0x86 
#define MINOR_HUMAN_RECOGNITION_ALARM_END 0x87 
#define MINOR_STUDENTS_STOODUP_ALARM_BEGIN 0x88 
#define MINOR_STUDENTS_STOODUP_ALARM_END 0x89 
#define MINOR_FRAMES_PEOPLE_COUNTING_ALARM 0x8a 
#define MINOR_FACE_SNAP_ALARM_BEGIN 0x8b 
#define MINOR_FACE_SNAP_ALARM_END 0x8c 
#define MINOR_TEACHER_BEHAVIOR_DETECT_ALARM_BEGIN 0x8d 
#define MINOR_TEACHER_BEHAVIOR_DETECT_ALARM_END 0x8e 
#define MINOR_PERIMETER_CAPTURE_ALARM_BEGIN 0x8f 
#define MINOR_PERIMETER_CAPTURE_ALARM_END 0x90 
#define MINOR_UNREGISTERED_STREET_VENDOR_ALARM 0x91 
#define MINOR_PERSON_QUEUE_TIME_ALARM_BEGIN 0x92 
#define MINOR_PERSON_QUEUE_TIME_ALARM_END 0x93 
#define MINOR_PERSON_QUEUE_COUNTING_ALARM_BEGIN 0x94 
#define MINOR_PERSON_QUEUE_COUNTING_ALARM_END 0x95 
#define MINOR_FACE_SNAP_MATCH_FAILURE_ALARM_START 0x96 
#define MINOR_FACE_SNAP_MATCH_FAILURE_ALARM_END 0x97 
#define MINOR_ACCESS_CONTROLLER_EVENT 0x100 
#define MINOR_VIDEO_INTERCOM_EVENT 0x101 
#define MINOR_GJD_EVENT 0x102 
#define MINOR_LUMINITE_EVENT 0x103 
#define MINOR_OPTEX_EVENT 0x104 
#define MINOR_CAMERA_DETECTOR_EVENT 0x105 
#define MINOR_SECURITY_CONTROL_PANEL_EVENT 0x106 
#define MINOR_VCA_SPACE_CHANGE_START 0x10c
#define MINOR_VCA_SPACE_CHANGE_STOP 0x10d
#define MINOR_MANUAL_ALARM 0x10e
#define MINOR_DETECTOR_ALARM 0x10f
#define MINOR_LINKAGE_ALARM 0x110
#define MINOR_VCA_SITUATION_ANALYSIS_START 0x111
#define MINOR_VCA_SITUATION_ANALYSIS_STOP 0x112
#define MINOR_FIRE_ALARM 0x113
#define MINOR_SUPERVISE_ALARM 0x114
#define MINOR_SHIELD_ALARM 0x115
#define MINOR_ABNORMAL_ALARM 0x116
#define MINOR_RESIDUAL_CURRENT_ALARM 0x117
#define MINOR_TEMPERATURE_ALARM 0x118
#define MINOR_ARC_ALARM 0x119
#define MINOR_VCA_YARD_TARRY_ALARM_BEGIN 0x11a 
#define MINOR_VCA_YARD_TARRY_ALARM_END 0x11b 
#define MINOR_VCA_KEY_PERSON_GET_UP_ALARM_BEGIN 0x11c 
#define MINOR_VCA_KEY_PERSON_GET_UP_ALARM_END 0x11d 
#define MINOR_VCA_SIT_QUIETLY_ALARM_BEGIN 0x11e 
#define MINOR_VCA_SIT_QUIETLY_ALARM_END 0x11f 
#define MINOR_VCA_STAND_UP_ALARM_BEGIN 0x120 
#define MINOR_VCA_STAND_UP_ALARM_END 0x121 
#define MINOR_VCA_REACH_HIGHT_ALARM_BEGIN 0x122 
#define MINOR_VCA_REACH_HIGHT_ALARM_END 0x123 
#define MINOR_LFPD_ALARM_START 0x124 
#define MINOR_LFPD_ALARM_STOP 0x125 
#define MINOR_DREDGERDETECTION_ALARM 0x126
#define MINOR_ALARMIN_SHORT_CIRCUIT 0x400 
#define MINOR_ALARMIN_BROKEN_CIRCUIT 0x401 
#define MINOR_ALARMIN_EXCEPTION 0x402 
#define MINOR_ALARMIN_RESUME 0x403 
#define MINOR_HOST_DESMANTLE_ALARM 0x404 
#define MINOR_HOST_DESMANTLE_RESUME 0x405 
#define MINOR_CARD_READER_DESMANTLE_ALARM 0x406 
#define MINOR_CARD_READER_DESMANTLE_RESUME 0x407 
#define MINOR_CASE_SENSOR_ALARM 0x408 
#define MINOR_CASE_SENSOR_RESUME 0x409 
#define MINOR_STRESS_ALARM 0x40a 
#define MINOR_OFFLINE_ECENT_NEARLY_FULL 0x40b 
#define MINOR_CARD_MAX_AUTHENTICATE_FAIL 0x40c 
#define MINOR_SD_CARD_FULL 0x40d 
#define MINOR_LINKAGE_CAPTURE_PIC 0x40e 
#define MINOR_SECURITY_MODULE_DESMANTLE_ALARM 0x40f 
#define MINOR_SECURITY_MODULE_DESMANTLE_RESUME 0x410 
#define MINOR_POS_START_ALARM 0x411 
#define MINOR_POS_END_ALARM 0x412 
#define MINOR_FACE_IMAGE_QUALITY_LOW 0x413 
#define MINOR_FINGE_RPRINT_QUALITY_LOW 0x414 
#define MINOR_FIRE_IMPORT_SHORT_CIRCUIT 0x415 
#define MINOR_FIRE_IMPORT_BROKEN_CIRCUIT 0x416 
#define MINOR_FIRE_IMPORT_RESUME 0x417 
#define MINOR_FIRE_BUTTON_TRIGGER 0x418 
#define MINOR_FIRE_BUTTON_RESUME 0x419 
#define MINOR_MAINTENANCE_BUTTON_TRIGGER 0x41a 
#define MINOR_MAINTENANCE_BUTTON_RESUME 0x41b 
#define MINOR_EMERGENCY_BUTTON_TRIGGER 0x41c 
#define MINOR_EMERGENCY_BUTTON_RESUME 0x41d 
#define MINOR_DISTRACT_CONTROLLER_ALARM 0x41e 
#define MINOR_DISTRACT_CONTROLLER_RESUME 0x41f 
#define MINOR_PERSON_DENSITY_DETECTION_START 0x420 
#define MINOR_PERSON_DENSITY_DETECTION_END 0x421 
#define MINOR_CHANNEL_CONTROLLER_DESMANTLE_ALARM 0x422 
#define MINOR_CHANNEL_CONTROLLER_DESMANTLE_RESUME 0x423 
#define MINOR_CHANNEL_CONTROLLER_FIRE_IMPORT_ALARM 0x424 
#define MINOR_CHANNEL_CONTROLLER_FIRE_IMPORT_RESUME 0x425 
#define MINOR_HEART_RATE_ABNORMAL_BEGIN 0x426 
#define MINOR_HEART_RATE_ABNORMAL_END 0x427 
#define MINOR_BLOOD_OXYGEN_ABNORMAL_BEGIN 0x428 
#define MINOR_BLOOD_OXYGEN_ABNORMAL_END 0x429 
#define MINOR_SYSTOLIC_BLOOD_PRESSURE_ABNORMAL_BEGIN 0x42a 
#define MINOR_SYSTOLIC_BLOOD_PRESSURE_ABNORMAL_END 0x42b 
#define MINOR_DIASTOLIC_BLOOD_PRESSURE_ABNORMAL_BEGIN 0x42c 
#define MINOR_DIASTOLIC_BLOOD_PRESSURE_ABNORMAL_END 0x42d 
#define MINOR_VCA_LEAVE_POSITION_START 0x42e
#define MINOR_VCA_LEAVE_POSITION_STOP 0x42f
#define MINOR_VCA_STOOODUP_START 0x430
#define MINOR_VCA_STOOODUP_STOP 0x431
#define MINOR_VCA_PEOPLENUM_CHANGE_START 0x434
#define MINOR_VCA_PEOPLENUM_CHANGE_STOP 0x435
#define MINOR_VCA_RUNNING_START 0x438
#define MINOR_VCA_RUNNING_STOP 0x439
#define MINOR_VCA_VIOLENT_MOTION_START 0x43a
#define MINOR_VCA_VIOLENT_MOTION_STOP 0x43b
#define MINOR_VCA_FAIL_DOWN_START 0x43c
#define MINOR_VCA_FAIL_DOWN_STOP 0x43d
#define MINOR_VCA_RETENTION_START 0x43e
#define MINOR_VCA_RETENTION_STOP 0x43f
#define MINOR_PRINTER_OUT_OF_PAPER 0x440 
#define MINOR_LEGAL_EVENT_NEARLY_FULL 0x442 
#define MINOR_ALARM_CUSTOM1 0x900 
#define MINOR_ALARM_CUSTOM2 0x901 
#define MINOR_ALARM_CUSTOM3 0x902 
#define MINOR_ALARM_CUSTOM4 0x903 
#define MINOR_ALARM_CUSTOM5 0x904 
#define MINOR_ALARM_CUSTOM6 0x905 
#define MINOR_ALARM_CUSTOM7 0x906 
#define MINOR_ALARM_CUSTOM8 0x907 
#define MINOR_ALARM_CUSTOM9 0x908 
#define MINOR_ALARM_CUSTOM10 0x909 
#define MINOR_ALARM_CUSTOM11 0x90a 
#define MINOR_ALARM_CUSTOM12 0x90b 
#define MINOR_ALARM_CUSTOM13 0x90c 
#define MINOR_ALARM_CUSTOM14 0x90d 
#define MINOR_ALARM_CUSTOM15 0x90e 
#define MINOR_ALARM_CUSTOM16 0x90f 
#define MINOR_ALARM_CUSTOM17 0x910 
#define MINOR_ALARM_CUSTOM18 0x911 
#define MINOR_ALARM_CUSTOM19 0x912 
#define MINOR_ALARM_CUSTOM20 0x913 
#define MINOR_ALARM_CUSTOM21 0x914 
#define MINOR_ALARM_CUSTOM22 0x915 
#define MINOR_ALARM_CUSTOM23 0x916 
#define MINOR_ALARM_CUSTOM24 0x917 
#define MINOR_ALARM_CUSTOM25 0x918 
#define MINOR_ALARM_CUSTOM26 0x919 
#define MINOR_ALARM_CUSTOM27 0x91a 
#define MINOR_ALARM_CUSTOM28 0x91b 
#define MINOR_ALARM_CUSTOM29 0x91c 
#define MINOR_ALARM_CUSTOM30 0x91d 
#define MINOR_ALARM_CUSTOM31 0x91e 
#define MINOR_ALARM_CUSTOM32 0x91f 
#define MINOR_ALARM_CUSTOM33 0x920 
#define MINOR_ALARM_CUSTOM34 0x921 
#define MINOR_ALARM_CUSTOM35 0x922 
#define MINOR_ALARM_CUSTOM36 0x923 
#define MINOR_ALARM_CUSTOM37 0x924 
#define MINOR_ALARM_CUSTOM38 0x925 
#define MINOR_ALARM_CUSTOM39 0x926 
#define MINOR_ALARM_CUSTOM40 0x927 
#define MINOR_ALARM_CUSTOM41 0x928 
#define MINOR_ALARM_CUSTOM42 0x929 
#define MINOR_ALARM_CUSTOM43 0x92a 
#define MINOR_ALARM_CUSTOM44 0x92b 
#define MINOR_ALARM_CUSTOM45 0x92c 
#define MINOR_ALARM_CUSTOM46 0x92d 
#define MINOR_ALARM_CUSTOM47 0x92e 
#define MINOR_ALARM_CUSTOM48 0x92f 
#define MINOR_ALARM_CUSTOM49 0x930 
#define MINOR_ALARM_CUSTOM50 0x931 
#define MINOR_ALARM_CUSTOM51 0x932 
#define MINOR_ALARM_CUSTOM52 0x933 
#define MINOR_ALARM_CUSTOM53 0x934 
#define MINOR_ALARM_CUSTOM54 0x935 
#define MINOR_ALARM_CUSTOM55 0x936 
#define MINOR_ALARM_CUSTOM56 0x937 
#define MINOR_ALARM_CUSTOM57 0x938 
#define MINOR_ALARM_CUSTOM58 0x939 
#define MINOR_ALARM_CUSTOM59 0x93a 
#define MINOR_ALARM_CUSTOM60 0x93b 
#define MINOR_ALARM_CUSTOM61 0x93c 
#define MINOR_ALARM_CUSTOM62 0x93d 
#define MINOR_ALARM_CUSTOM63 0x93e 
#define MINOR_ALARM_CUSTOM64 0x93f 
#define MINOR_LOCK_HIJIACK_FINGER_ALARM 0x950 
#define MINOR_LOCK_HIJIACK_PASSWORD_ALARM 0x951 
#define MINOR_LOCK_PRY_DOOR_ALARM 0x952 
#define MINOR_LOCK_LOCKED_ALARM 0x953 
#define MINOR_LOCK_BATTERLOW_ALARM 0x954 
#define MINOR_LOCK_BLACKLIST_DOOR_ALARM 0x955 
#define MINOR_LOCK_OFFLINE_ALARM 0x956 
#define MINOR_LOCK_UNCLOSED_ALARM 0x957 
#define MINOR_LOCK_NO_HOME_ALARM 0x958 
#define MINOR_LOCK_MAGNETOMETER_ALARM 0x959 
#define MINOR_LOCK_IR_DETECTOR_ALARM 0x95a 
#define MINOR_LOCK_FP_LOCKED_ALARM 0x95b 
#define MINOR_LOCK_PASSWORD_LOCKED_ALARM 0x95c 
#define MINOR_LOCK_HIJIACK_ALARM 0x95d 
#define MINOR_ALARMHOST_SHORT_CIRCUIT 	 0x1001 
#define MINOR_ALARMHOST_BROKEN_CIRCUIT 		 0x1002 
#define MINOR_ALARMHOST_ALARM_RESET 	 0x1003 
#define MINOR_ALARMHOST_ALARM_NORMAL			 0x1004 	
#define MINOR_ALARMHOST_PASSWORD_ERROR 		 0x1005		
#define MINOR_ALARMHOST_ID_CARD_ILLEGALLY 	 0x1006		
#define MINOR_ALARMHOST_KEYPAD_REMOVE 		 0x1007	
#define MINOR_ALARMHOST_KEYPAD_REMOVE_RESTORE 0x1008	
#define MINOR_ALARMHOST_BELOW_ALARM_LIMIT1 	 0x1011	
#define MINOR_ALARMHOST_BELOW_ALARM_LIMIT2 	 0x1012 
#define MINOR_ALARMHOST_BELOW_ALARM_LIMIT3 	 0x1013 
#define MINOR_ALARMHOST_BELOW_ALARM_LIMIT4 	 0x1014 
#define MINOR_ALARMHOST_ABOVE_ALARM_LIMIT1 	 0x1015 
#define MINOR_ALARMHOST_ABOVE_ALARM_LIMIT2 	0x1016 
#define MINOR_ALARMHOST_ABOVE_ALARM_LIMIT3 	0x1017 
#define MINOR_ALARMHOST_ABOVE_ALARM_LIMIT4 	0x1018 
#define MINOR_ALARMHOST_VIRTUAL_DEFENCE_BANDIT 	0x1021 
#define MINOR_ALARMHOST_VIRTUAL_DEFENCE_FIRE 		0x1022 
#define MINOR_ALARMHOST_VIRTUAL_DEFENCE_URGENT 		0x1023 
#define MINOR_UPS_ALARM			0x1028 
#define MINOR_ELECTRICITY_METER_ALARM 0x1029 
#define MINOR_SWITCH_POWER_ALARM	 0x1030 
#define MINOR_GAS_DETECT_SYS_ALARM	 0x1031 
#define MINOR_TRANSFORMER_TEMPRATURE_ALARM 0x1032 
#define MINOR_TEMP_HUMI_ALARM		0x1033 
#define MINOR_UPS_ALARM_RESTORE	0x1034 
#define MINOR_ELECTRICITY_METER_ALARM_RESTORE 0x1035 
#define MINOR_SWITCH_POWER_ALARM_RESTORE	0x1036 
#define MINOR_GAS_DETECT_SYS_ALARM_RESTORE	 0x1037 
#define MINOR_TRANSFORMER_TEMPRATURE_ALARM_RESTORE 0x1038 
#define MINOR_TEMP_HUMI_ALARM_RESTORE	0x1039 
#define MINOR_WATER_LEVEL_SENSOR_ALARM 		0x1040 
#define MINOR_WATER_LEVEL_SENSOR_ALARM_RESTORE 	0x1041 
#define MINOR_DUST_NOISE_ALARM 	0x1042 
#define MINOR_DUST_NOISE_ALARM_RESTORE 	0x1043 
#define MINOR_ENVIRONMENTAL_LOGGER_ALARM 	0x1044 
#define MINOR_ENVIRONMENTAL_LOGGER_ALARM_RESTORE 0x1045 
#define MINOR_TRIGGER_TAMPER 0x1046 
#define MINOR_TRIGGER_TAMPER_RESTORE 0x1047 
#define MINOR_EMERGENCY_CALL_HELP_ALARM 0x1048 
#define MINOR_EMERGENCY_CALL_HELP_ALARM_RESTORE 0x1049 
#define MINOR_CONSULTING_ALARM 0x1050 
#define MINOR_CONSULTING_ALARM_RESTORE 0x1051 
#define MINOR_ALARMHOST_ZONE_MODULE_REMOVE 0x1052 
#define MINOR_ALARMHOST_ZONE_MODULE_RESET 0x1053 
#define MINOR_ALARMHOST_ALARM_WIND_SPEED_ALARM 0x1054 
#define MINOR_ALARMHOST_ALARM_WIND_SPEED_ALARM_RESTORE 0x1055 
#define MINOR_ALARMHOST_ALARM_GENERATE_OUTPUT_ALARM 0x1056 
#define MINOR_ALARMHOST_ALARM_GENERATE_OUTPUT_RESTORE 0x1057 
#define MINOR_ALARMHOST_ALARM_SOAK_ALARM 0x1058 
#define MINOR_ALARMHOST_ALARM_SOAK_ALARM_RESTORE 0x1059 
#define MINOR_ALARMHOST_ALARM_SOLAR_POWER_ALARM 0x1060 
#define MINOR_ALARMHOST_ALARM_SOLAR_POWER_ALARM_RESTORE 0x1061 
#define MINOR_ALARMHOST_ALARM_SF6_ALARM 0x1062 
#define MINOR_ALARMHOST_ALARM_SF6_ALARM_RESTORE 0x1063 
#define MINOR_ALARMHOST_ALARM_WEIGHT_ALARM 0x1064 
#define MINOR_ALARMHOST_ALARM_WEIGHT_ALARM_RESTORE 0x1065 
#define MINOR_ALARMHOST_ALARM_WEATHER_ALARM 0x1066 
#define MINOR_ALARMHOST_ALARM_WEATHER_ALARM_RESTORE 0x1067 
#define MINOR_ALARMHOST_ALARM_FUEL_GAS_ALARM 0x1068 
#define MINOR_ALARMHOST_ALARM_FUEL_GAS_ALARM_RESTORE 0x1069
#define MINOR_ALARMHOST_ALARM_FIRE_ALARM 0x1070 
#define MINOR_ALARMHOST_ALARM_FIRE_ALARM_RESTORE 0x1071 
#define MINOR_ALARMHOST_WIRELESS_OUTPUT_MODULE_REMOVE 0x1072 
#define MINOR_ALARMHOST_WIRELESS_OUTPUT_MODULE_RESET 0x1073 
#define MINOR_ALARMHOST_WIRELESS_REPEATER_MODULE_REMOVE 0x1074 
#define MINOR_ALARMHOST_WIRELESS_SIREN_MODULE_REMOVE 0x1075 
#define MINOR_ALARMHOST_WIRELESS_SIREN_MODULE_RESET 0x1076
#define MINOR_RS485_DEV_ALARM 0x1077 
#define MINOR_RS485_DEV_RESTORE 0x1078 
#define MINOR_ALARMHOST_ALARM_HOST_ALARM 0x1079 
#define MINOR_ALARMHOST_ALARM_HOST_RESTORE 0x107a 
#define MINOR_AIR_CONDITION_DEV_ALARM 0x107b 
#define MINOR_AIR_CONDITION_DEV_RESTORE 0x107c 
#define MINOR_ALARMHOST_WIRELESS_REPEATER_MODULE_RESET 0x107d
#define	 MINOR_ALARM_ELEVATOR_BREAKDOWN 0x107e
#define MINOR_WATER_PRESSURE_SENSOR_ALARM 0x107f 
#define MINOR_FLOW_SENSOR_ALARM 0x1080 
#define MINOR_SENSOR_LINKAGE_ALARM 0x1081 
#define MINOR_SENSOR_LINKAGE_ALARM_RESTORE 0x1082 
#define MAJOR_EXCEPTION 0x2
#define MINOR_SUBSYSTEM_ERROR 0x0a 
#define MINOR_RAID_ERROR 0x20 
#define MINOR_VI_LOST 0x21 
#define MINOR_ILLEGAL_ACCESS 0x22 
#define MINOR_HD_FULL 0x23 
#define MINOR_HD_ERROR 0x24 
#define MINOR_DCD_LOST 0x25 
#define MINOR_IP_CONFLICT 0x26 
#define MINOR_NET_BROKEN 0x27 
#define MINOR_REC_ERROR 0x28 
#define MINOR_IPC_NO_LINK 0x29 
#define MINOR_VI_EXCEPTION 0x2a 
#define MINOR_IPC_IP_CONFLICT 0x2b 
#define MINOR_SENCE_EXCEPTION 0x2c 
#define MINOR_PIC_REC_ERROR 0x2d 
#define MINOR_VI_MISMATCH 0x2e 
#define MINOR_RESOLUTION_MISMATCH 0x2f 
#define MINOR_FANABNORMAL 0x31 
#define MINOR_FANRESUME 0x32 
#define MINOR_SUBSYSTEM_ABNORMALREBOOT 0x33 
#define MINOR_MATRIX_STARTBUZZER 0x34 
#define MINOR_NET_ABNORMAL 0x35 
#define MINOR_MEM_ABNORMAL 0x36 
#define MINOR_FILE_ABNORMAL 0x37 
#define MINOR_PANEL_ABNORMAL 0x38 
#define MINOR_PANEL_RESUME 0x39 
#define MINOR_RS485_DEVICE_ABNORMAL 0x3a 
#define MINOR_RS485_DEVICE_REVERT 0x3b 
#define MINOR_SCREEN_SUBSYSTEM_ABNORMALREBOOT 0x3c 
#define MINOR_SCREEN_SUBSYSTEM_ABNORMALINSERT 0x3d 
#define MINOR_SCREEN_SUBSYSTEM_ABNORMALPULLOUT 0x3e 
#define MINOR_SCREEN_ABNARMALTEMPERATURE 0x3f 
#define MINOR_HIGH_TEMPERATURE_PROTECT 0x40
#define MINOR_RECORD_OVERFLOW 0x41 
#define MINOR_DSP_ABNORMAL 0x42 
#define MINOR_ANR_RECORD_FAIED 0x43 
#define MINOR_SPARE_WORK_DEVICE_EXCEPT 0x44 
#define MINOR_START_IPC_MAS_FAILED 0x45 
#define MINOR_IPCM_CRASH 0x46 
#define MINOR_POE_POWER_EXCEPTION 0x47 
#define MINOR_UPLOAD_DATA_CS_EXCEPTION 0x48 
#define MINOR_DIAL_EXCEPTION 0x49 
#define MINOR_DEV_EXCEPTION_OFFLINE 0x50 
#define MINOR_UPGRADEFAIL 0x51
#define MINOR_AI_LOST 0x52 
#define MINOR_SYNC_IPC_PASSWD 0x53 
#define MINOR_EZVIZ_OFFLINE 0x54 
#define MINOR_VQD_ABNORMAL 0x55
#define MINOR_ACCESSORIES_PLATE 0x57
#define MINOR_KMS_EXPAMSION_DISK_LOST 0x58
#define MINOR_ABNORMAL_PORT 0x59
#define MINOR_CAMERA_ANGLE_ANOMALY 0x60
#define MINOR_DATA_DISK_ERROE 0x61
#define MINOR_INTELLIGENT_SYSTEM_RUNNING_ERROR 0x62
#define MINOR_FACESNAP_RESOLUTION_OVERFLOW 0x63
#define MINOR_SMD_RESOLUTION_OVERFLOW 0x64
#define MINOR_AUDIO_LOSS_EXCEPTION 0x65
#define MINOR_SAFETY_HELMET_EXCEPTION 0x66
#define MINOR_VCA_PIC_LENGTH_OVERFLOW 0x67
#define MINOR_FACE_MODEL_EXCEPTION 0x68
#define MINOR_SSD_EXCEPTION 0x69
#define MINOR_CLUSTER_DEVICE_OFFLINE 0x70
#define MINOR_CLUSTER_CONFIG_FAILED 0x71
#define MINOR_CLUSTER_DISASTER_TOLERANCE_EXCEPT 0x72
#define MINOR_CLUSTER_STORFULL_EXCEPTION 0x73
#define MINOR_CLUSTER_VERSION_EXCEPTION 0x74 
#define MINOR_CLUSTER_OFFLINENODE_EXCEPTION 0x75 
#define MINOR_CLUSTER_RECORDCYCLE_EXCEPTION 0x76 
#define MINOR_CLUSTER_IPCTRANSFER_EXCEPTION 0x77 
#define MINOR_CLUSTER_IPCONFLICT_EXCEPTION 0x78 
#define MINOR_GET_SUB_STREAM_FAILURE 0x79
#define MINOR_HDD_SHM_DETECT_EXCEPTION 0x7a
#define MINOR_DEVICE_FORTIFY_FAILURE 0x7b
#define MINOR_EVENT_UPLOAD_EXCEPTION 0x7c
#define MINOR_LORA_EXCEPTION 0x7d
#define MINOR_AK_OR_SK_IS_EMPTY 0x7e
#define MINOR_HIGH_HD_TEMPERATURE 0x80 
#define MINOR_LOW_HD_TEMPERATURE 0x81 
#define MINOR_HD_IMPACT 0x82 
#define MINOR_HD_BAD_BLOCK 0x83 
#define MINOR_SEVERE_HD_FAILURE 0x84 
#define MINOR_RELEASE_FAILED 0x85
#define MINOR_PORT_CONFLICT 0x86 
#define MINOR_MODULE_STARTUP_FAILED 0x87 
#define MINOR_DEV_POWER_ON 0x400 
#define MINOR_DEV_POWER_OFF 0x401 
#define MINOR_WATCH_DOG_RESET 0x402 
#define MINOR_LOW_BATTERY 0x403 
#define MINOR_BATTERY_RESUME 0x404 
#define MINOR_AC_OFF 0x405 
#define MINOR_AC_RESUME 0x406 
#define MINOR_NET_RESUME 0x407 
#define MINOR_FLASH_ABNORMAL 0x408 
#define MINOR_CARD_READER_OFFLINE 0x409 
#define MINOR_CARD_READER_RESUME 0x40a 
#define MINOR_INDICATOR_LIGHT_OFF 0x40b 
#define MINOR_INDICATOR_LIGHT_RESUME 0x40c 
#define MINOR_CHANNEL_CONTROLLER_OFF 0x40d 
#define MINOR_CHANNEL_CONTROLLER_RESUME 0x40e 
#define MINOR_SECURITY_MODULE_OFF 0x40f 
#define MINOR_SECURITY_MODULE_RESUME 0x410 
#define MINOR_BATTERY_ELECTRIC_LOW 0x411 
#define MINOR_BATTERY_ELECTRIC_RESUME 0x412 
#define MINOR_LOCAL_CONTROL_NET_BROKEN 0x413 
#define MINOR_LOCAL_CONTROL_NET_RSUME 0x414 
#define MINOR_MASTER_RS485_LOOPNODE_BROKEN 0x415 
#define MINOR_MASTER_RS485_LOOPNODE_RESUME 0x416 
#define MINOR_LOCAL_CONTROL_OFFLINE 0x417 
#define MINOR_LOCAL_CONTROL_RESUME 0x418 
#define MINOR_LOCAL_DOWNSIDE_RS485_LOOPNODE_BROKEN 0x419 
#define MINOR_LOCAL_DOWNSIDE_RS485_LOOPNODE_RESUME 0x41a 
#define MINOR_DISTRACT_CONTROLLER_ONLINE 0x41b 
#define MINOR_DISTRACT_CONTROLLER_OFFLINE 0x41c 
#define MINOR_ID_CARD_READER_NOT_CONNECT 0x41d 
#define MINOR_ID_CARD_READER_RESUME 0x41e 
#define MINOR_FINGER_PRINT_MODULE_NOT_CONNECT 0x41f 
#define MINOR_FINGER_PRINT_MODULE_RESUME 0x420 
#define MINOR_CAMERA_NOT_CONNECT 0x421 
#define MINOR_CAMERA_RESUME 0x422 
#define MINOR_COM_NOT_CONNECT 0x423 
#define MINOR_COM_RESUME 0x424 
#define MINOR_DEVICE_NOT_AUTHORIZE 0x425 
#define MINOR_PEOPLE_AND_ID_CARD_DEVICE_ONLINE 0x426 
#define MINOR_PEOPLE_AND_ID_CARD_DEVICE_OFFLINE 0x427
#define MINOR_LOCAL_LOGIN_LOCK 0x428 
#define MINOR_LOCAL_LOGIN_UNLOCK 0x429 
#define MINOR_SUBMARINEBACK_COMM_BREAK 0x42a 
#define MINOR_SUBMARINEBACK_COMM_RESUME 0x42b 
#define MINOR_MOTOR_SENSOR_EXCEPTION 0x42c 
#define MINOR_CAN_BUS_EXCEPTION 0x42d 
#define MINOR_CAN_BUS_RESUME 0x42e 
#define MINOR_GATE_TEMPERATURE_OVERRUN 0x42f 
#define MINOR_IR_EMITTER_EXCEPTION 0x430 
#define MINOR_IR_EMITTER_RESUME 0x431 
#define MINOR_LAMP_BOARD_COMM_EXCEPTION 0x432 
#define MINOR_LAMP_BOARD_COMM_RESUME 0x433 
#define MINOR_IR_ADAPTOR_COMM_EXCEPTION 0x434 
#define MINOR_IR_ADAPTOR_COMM_RESUME 0x435 
#define MINOR_PRINTER_ONLINE 0x436 
#define MINOR_PRINTER_OFFLINE 0x437 
#define MINOR_4G_MOUDLE_ONLINE 0x438 
#define MINOR_4G_MOUDLE_OFFLINE 0x439 
#define MINOR_DSP_START_FAILED 0x43a 
#define MINOR_SMART_REGULATION_NOT_ALLOWED 0x43b 
#define MINOR_AUXILIARY_BOARD_OFFLINE 0x43c 
#define MINOR_AUXILIARY_BOARD_RESUME 0x43d 
#define MINOR_IDCARD_SECURITY_MOUDLE_EXCEPTION 0x43e 
#define MINOR_IDCARD_SECURITY_MOUDLE_RESUME 0x43f 
#define MINOR_FP_PERIPHERAL_EXCEPTION 0x440 
#define MINOR_FP_PERIPHERAL_RESUME 0x441 
#define MINOR_EXCEPTION_CUSTOM1 0x900 
#define MINOR_EXCEPTION_CUSTOM2 0x901 
#define MINOR_EXCEPTION_CUSTOM3 0x902 
#define MINOR_EXCEPTION_CUSTOM4 0x903 
#define MINOR_EXCEPTION_CUSTOM5 0x904 
#define MINOR_EXCEPTION_CUSTOM6 0x905 
#define MINOR_EXCEPTION_CUSTOM7 0x906 
#define MINOR_EXCEPTION_CUSTOM8 0x907 
#define MINOR_EXCEPTION_CUSTOM9 0x908 
#define MINOR_EXCEPTION_CUSTOM10 0x909 
#define MINOR_EXCEPTION_CUSTOM11 0x90a 
#define MINOR_EXCEPTION_CUSTOM12 0x90b 
#define MINOR_EXCEPTION_CUSTOM13 0x90c 
#define MINOR_EXCEPTION_CUSTOM14 0x90d 
#define MINOR_EXCEPTION_CUSTOM15 0x90e 
#define MINOR_EXCEPTION_CUSTOM16 0x90f 
#define MINOR_EXCEPTION_CUSTOM17 0x910 
#define MINOR_EXCEPTION_CUSTOM18 0x911 
#define MINOR_EXCEPTION_CUSTOM19 0x912 
#define MINOR_EXCEPTION_CUSTOM20 0x913 
#define MINOR_EXCEPTION_CUSTOM21 0x914 
#define MINOR_EXCEPTION_CUSTOM22 0x915 
#define MINOR_EXCEPTION_CUSTOM23 0x916 
#define MINOR_EXCEPTION_CUSTOM24 0x917 
#define MINOR_EXCEPTION_CUSTOM25 0x918 
#define MINOR_EXCEPTION_CUSTOM26 0x919 
#define MINOR_EXCEPTION_CUSTOM27 0x91a 
#define MINOR_EXCEPTION_CUSTOM28 0x91b 
#define MINOR_EXCEPTION_CUSTOM29 0x91c 
#define MINOR_EXCEPTION_CUSTOM30 0x91d 
#define MINOR_EXCEPTION_CUSTOM31 0x91e 
#define MINOR_EXCEPTION_CUSTOM32 0x91f 
#define MINOR_EXCEPTION_CUSTOM33 0x920 
#define MINOR_EXCEPTION_CUSTOM34 0x921 
#define MINOR_EXCEPTION_CUSTOM35 0x922 
#define MINOR_EXCEPTION_CUSTOM36 0x923 
#define MINOR_EXCEPTION_CUSTOM37 0x924 
#define MINOR_EXCEPTION_CUSTOM38 0x925 
#define MINOR_EXCEPTION_CUSTOM39 0x926 
#define MINOR_EXCEPTION_CUSTOM40 0x927 
#define MINOR_EXCEPTION_CUSTOM41 0x928 
#define MINOR_EXCEPTION_CUSTOM42 0x929 
#define MINOR_EXCEPTION_CUSTOM43 0x92a 
#define MINOR_EXCEPTION_CUSTOM44 0x92b 
#define MINOR_EXCEPTION_CUSTOM45 0x92c 
#define MINOR_EXCEPTION_CUSTOM46 0x92d 
#define MINOR_EXCEPTION_CUSTOM47 0x92e 
#define MINOR_EXCEPTION_CUSTOM48 0x92f 
#define MINOR_EXCEPTION_CUSTOM49 0x930 
#define MINOR_EXCEPTION_CUSTOM50 0x931 
#define MINOR_EXCEPTION_CUSTOM51 0x932 
#define MINOR_EXCEPTION_CUSTOM52 0x933 
#define MINOR_EXCEPTION_CUSTOM53 0x934 
#define MINOR_EXCEPTION_CUSTOM54 0x935 
#define MINOR_EXCEPTION_CUSTOM55 0x936 
#define MINOR_EXCEPTION_CUSTOM56 0x937 
#define MINOR_EXCEPTION_CUSTOM57 0x938 
#define MINOR_EXCEPTION_CUSTOM58 0x939 
#define MINOR_EXCEPTION_CUSTOM59 0x93a 
#define MINOR_EXCEPTION_CUSTOM60 0x93b 
#define MINOR_EXCEPTION_CUSTOM61 0x93c 
#define MINOR_EXCEPTION_CUSTOM62 0x93d 
#define MINOR_EXCEPTION_CUSTOM63 0x93e 
#define MINOR_EXCEPTION_CUSTOM64 0x93f 
#define MINOR_SWITCH_WIRED_NETWORK 0x950 
#define MINOR_SWITCH_WIRELESS_NETWORK 0x951 
#define MINOR_LOCK_ONLINE_RESUME 0x952 
#define MINOR_SUBSYSTEM_IP_CONFLICT 0x4000 
#define MINOR_SUBSYSTEM_NET_BROKEN 0x4001 
#define MINOR_FAN_ABNORMAL 0x4002 
#define MINOR_BACKPANEL_TEMPERATURE_ABNORMAL 0x4003 
#define MINOR_SDCARD_ABNORMAL 0x4004 
#define MINOR_SDCARD_DAMAGE 0x4005 
#define MINOR_POC_ABNORMAL				0x4006 
#define MINOR_MAIN_POWER_FAULT 0x4007
#define MINOR_BACK_UP_POWER_FAULT 0x4008
#define MINOR_TAMPER_FAULT 0x4009
#define MINOR_RS232_FAULT 0x400a
#define MINOR_RS485_FAULT 0x400b
#define MINOR_LAN_STATUS_FAULT 0x400c
#define MINOR_LAN_LINK1_FAULT 0x400d
#define MINOR_LAN_LINK2_FAULT 0x400e
#define MINOR_SIM_CARD_STATUS_FAULT 0x400f
#define MINOR_4G_LINK1_FAULT 0x4010
#define MINOR_4G_LINK2_FAULT 0x4011
#define MINOR_OTHER_FAULT 0x4012
#define MINOR_FIRE_CONTROL_CONNECT_FAULT 0x4013
#define MINOR_SENSOR_SHORT_CIRCUIT 0x4014
#define MINOR_SENSOR_OPEN_CIRCUIT 0x4015
#define MINOR_SENSOR_MIS_CONNECT 0x4016
#define MINOR_SENSOR_FAULT_RESTORE 0x4017
#define MINOR_DEVICE_FAULT 0x4018
#define MINOR_OVERVOLTAGE 0X4019 
#define MINOR_UNDERVOLTAGE 0X401a 
#define MINOR_ALARMHOST_WDT_RESET 			 0x1003 
#define MINOR_ALARMHOST_RTC_EXCEPTION 			0x1007 
#define MINOR_ALARMHOST_TEL_LINE_CONNECT_FAILURE 	0x100a 
#define MINOR_ALARMHOST_TEL_LINE_CONNECT_RESTORE 	0x100b 
#define MINOR_ALARMHOST_EXPANDER_BUS_LOSS 		0x100c 
#define MINOR_ALARMHOST_EXPANDER_BUS_RESTORE 	0x100d 
#define MINOR_ALARMHOST_KEYPAD_BUS_LOSS 			0x100e 
#define MINOR_ALARMHOST_KEYPAD_BUS_RESTORE 		0x100f 
#define MINOR_ALARMHOST_SENSOR_FAILURE 			0x1010 
#define MINOR_ALARMHOST_SENSOR_RESTORE 			0x1011 
#define MINOR_ALARMHOST_RS485_CONNECT_FAILURE 	0x1012 
#define MINOR_ALARMHOST_RS485_CONNECT_RESTORE 	0x1013 
#define	MINOR_ALARMHOST_WIRED_NETWORK_ABNORMAL 	0x1015 
#define	MINOR_ALARMHOST_WIRED_NETWORK_RESTORE 		0x1016 
#define	MINOR_ALARMHOST_GPRS_ABNORMAL 				0x1017 
#define	MINOR_ALARMHOST_GPRS_RESTORE 					0x1018 
#define	MINOR_ALARMHOST_3G_ABNORMAL 					0x1019 
#define	MINOR_ALARMHOST_3G_RESTORE 					0x101a 
#define	MINOR_ALARMHOST_SIM_CARD_ABNORMAL 			0x101b 
#define	MINOR_ALARMHOST_SIM_CARD_RESTORE 			0x101c 
#define	MINOR_FORMAT_HDD_ERROR 0x1026
#define	MINOR_USB_ERROR		0x1027 
#define	MINOR_USB_RESTORE		0x1028 
#define	MINOR_PRINT_ERROR	 0x1029 
#define	MINOR_PRINT_RESTORE 0x1030 
#define MINOR_ALARMHOST_SUBSYSTEM_COMMUNICATION_ERROR 0x1031 
#define MINOR_MCU_RESTART 0x1035 
#define MINOR_GPRS_MODULE_FAULT 0x1036 
#define MINOR_TELEPHONE_MODULE_FAULT 0x1037 
#define MINOR_WIFI_ABNORMAL 0x1038 
#define MINOR_WIFI_RESTORE 0x1039 
#define MINOR_RF_ABNORMAL 0x103a 
#define MINOR_RF_RESTORE 0x103b 
#define MINOR_DETECTOR_ONLINE 0x103c 
#define MINOR_DETECTOR_OFFLINE 0x103d 
#define MINOR_DETECTOR_BATTERY_NORMAL 0x103e 
#define MINOR_DETECTOR_BATTERY_LOW 0x103f 
#define MINOR_DATA_TRAFFIC_OVERFLOW 0x1040 
#define MINOR_ALARMHOST_ZONE_MODULE_LOSS 0x1041 
#define MINOR_ALARMHOST_ZONE_MODULE_RESTORE 0x1042 
#define MINOR_WIRELESS_OUTPUT_LOSS 0x1043 
#define MINOR_WIRELESS_OUTPUT_RESTORE 0x1044 
#define MINOR_WIRELESS_REPEATER_LOSS 0x1045 
#define MINOR_WIRELESS_REPEATER_RESTORE 0x1046 
#define MINOR_ALARMHOST_TRIGGER_MODULE_LOSS 0x1047 
#define MINOR_ALARMHOST_TRIGGER_MODULE_RESTORE 0x1048 
#define MINOR_ALARMHOST_WIRELESS_SIREN_LOSS 0x1049 
#define MINOR_ALARMHOST_WIRELESS_SIREN_RESTORE 0x104a 
#define MINOR_TX1_SUB_SYSTEM_EXCEPTION 0x1050 
#define MINOR_TX1_REBOOT_EXCEPTION 0x1051 
#define MINOR_TX1_SUB_SYSTEM_LOSS 0x1052 
#define MINOR_TX1_SUB_SYSTEM_RESTORE 0x1053 
#define MINOR_WIRELESS_SPEED_EXCEPTION 0x1054 
#define MAJOR_OPERATION 0x3
#define MINOR_VCA_MOTIONEXCEPTION 0x29 
#define MINOR_START_DVR 0x41 
#define MINOR_STOP_DVR 0x42 
#define MINOR_STOP_ABNORMAL 0x43 
#define MINOR_REBOOT_DVR 0x44 
#define MINOR_LOCAL_LOGIN 0x50 
#define MINOR_LOCAL_LOGOUT 0x51 
#define MINOR_LOCAL_CFG_PARM 0x52 
#define MINOR_LOCAL_PLAYBYFILE 0x53 
#define MINOR_LOCAL_PLAYBYTIME 0x54 
#define MINOR_LOCAL_START_REC 0x55 
#define MINOR_LOCAL_STOP_REC 0x56 
#define MINOR_LOCAL_PTZCTRL 0x57 
#define MINOR_LOCAL_PREVIEW 0x58 
#define MINOR_LOCAL_MODIFY_TIME 0x59 
#define MINOR_LOCAL_UPGRADE 0x5a 
#define MINOR_LOCAL_RECFILE_OUTPUT 0x5b 
#define MINOR_LOCAL_FORMAT_HDD 0x5c 
#define MINOR_LOCAL_CFGFILE_OUTPUT 0x5d 
#define MINOR_LOCAL_CFGFILE_INPUT 0x5e 
#define MINOR_LOCAL_COPYFILE 0x5f 
#define MINOR_LOCAL_LOCKFILE 0x60 
#define MINOR_LOCAL_UNLOCKFILE 0x61 
#define MINOR_LOCAL_DVR_ALARM 0x62 
#define MINOR_IPC_ADD 0x63 
#define MINOR_IPC_DEL 0x64 
#define MINOR_IPC_SET 0x65 
#define MINOR_LOCAL_START_BACKUP 0x66 
#define MINOR_LOCAL_STOP_BACKUP 0x67 
#define MINOR_LOCAL_COPYFILE_START_TIME 0x68 
#define MINOR_LOCAL_COPYFILE_END_TIME 0x69 
#define MINOR_LOCAL_ADD_NAS 0x6a 
#define MINOR_LOCAL_DEL_NAS 0x6b 
#define MINOR_LOCAL_SET_NAS 0x6c 
#define MINOR_LOCAL_RESET_PASSWD 0x6d 
#define MINOR_REMOTE_LOGIN 0x70 
#define MINOR_REMOTE_LOGOUT 0x71 
#define MINOR_REMOTE_START_REC 0x72 
#define MINOR_REMOTE_STOP_REC 0x73 
#define MINOR_START_TRANS_CHAN 0x74 
#define MINOR_STOP_TRANS_CHAN 0x75 
#define MINOR_REMOTE_GET_PARM 0x76 
#define MINOR_REMOTE_CFG_PARM 0x77 
#define MINOR_REMOTE_GET_STATUS 0x78 
#define MINOR_REMOTE_ARM 0x79 
#define MINOR_REMOTE_DISARM 0x7a 
#define MINOR_REMOTE_REBOOT 0x7b 
#define MINOR_START_VT 0x7c 
#define MINOR_STOP_VT 0x7d 
#define MINOR_REMOTE_UPGRADE 0x7e 
#define MINOR_REMOTE_PLAYBYFILE 0x7f 
#define MINOR_REMOTE_PLAYBYTIME 0x80 
#define MINOR_REMOTE_PTZCTRL 0x81 
#define MINOR_REMOTE_FORMAT_HDD 0x82 
#define MINOR_REMOTE_STOP 0x83 
#define MINOR_REMOTE_LOCKFILE 0x84 
#define MINOR_REMOTE_UNLOCKFILE 0x85 
#define MINOR_REMOTE_CFGFILE_OUTPUT 0x86 
#define MINOR_REMOTE_CFGFILE_INTPUT 0x87 
#define MINOR_REMOTE_RECFILE_OUTPUT 0x88 
#define MINOR_REMOTE_DVR_ALARM 0x89 
#define MINOR_REMOTE_IPC_ADD 0x8a 
#define MINOR_REMOTE_IPC_DEL 0x8b 
#define MINOR_REMOTE_IPC_SET 0x8c 
#define MINOR_REBOOT_VCA_LIB 0x8d 
#define MINOR_REMOTE_ADD_NAS 0x8e 
#define MINOR_REMOTE_DEL_NAS 0x8f 
#define MINOR_REMOTE_SET_NAS 0x90 
#define MINOR_LOCAL_OPERATE_LOCK 0x9d 
#define MINOR_LOCAL_OPERATE_UNLOCK 0x9e 
#define MINOR_REMOTE_DELETE_HDISK 0x9a 
#define MINOR_REMOTE_LOAD_HDISK 0x9b 
#define MINOR_REMOTE_UNLOAD_HDISK 0x9c 
#define MINOR_SCHEDULE_ANGLECALIBRATION 0x139 
#define MINOR_OTHER_OPERATE 0x200 
#define MINOR_LOCAL_START_REC_CDRW 0x91 
#define MINOR_LOCAL_STOP_REC_CDRW 0x92 
#define MINOR_REMOTE_START_REC_CDRW 0x93 
#define MINOR_REMOTE_STOP_REC_CDRW 0x94 
#define MINOR_LOCAL_PIC_OUTPUT 0x95 
#define MINOR_REMOTE_PIC_OUTPUT 0x96 
#define MINOR_LOCAL_INQUEST_RESUME 0x97 
#define MINOR_REMOTE_INQUEST_RESUME 0x98 
#define MINOR_LOCAL_ADD_FILE 0x99 
#define MINOR_LOCAL_DEL_FILE 0x9f 
#define MINOR_REMOTE_INQUEST_ADD_FILE 0x100 
#define MINOR_SUBSYSTEMREBOOT 0xa0 
#define MINOR_MATRIX_STARTTRANSFERVIDEO 0xa1 
#define MINOR_MATRIX_STOPTRANSFERVIDEO 0xa2 
#define MINOR_REMOTE_SET_ALLSUBSYSTEM 0xa3 
#define MINOR_REMOTE_GET_ALLSUBSYSTEM 0xa4 
#define MINOR_REMOTE_SET_PLANARRAY 0xa5 
#define MINOR_REMOTE_GET_PLANARRAY 0xa6 
#define MINOR_MATRIX_STARTTRANSFERAUDIO 0xa7 
#define MINOR_MATRIX_STOPRANSFERAUDIO 0xa8 
#define MINOR_LOGON_CODESPITTER 0xa9 
#define MINOR_LOGOFF_CODESPITTER 0xaa 
#define MINOR_START_DYNAMIC_DECODE 0xb0 
#define MINOR_STOP_DYNAMIC_DECODE 0xb1 
#define MINOR_GET_CYC_CFG 0xb2 
#define MINOR_SET_CYC_CFG 0xb3 
#define MINOR_START_CYC_DECODE 0xb4 
#define MINOR_STOP_CYC_DECODE 0xb5 
#define MINOR_GET_DECCHAN_STATUS 0xb6 
#define MINOR_GET_DECCHAN_INFO 0xb7 
#define MINOR_START_PASSIVE_DEC 0xb8 
#define MINOR_STOP_PASSIVE_DEC 0xb9 
#define MINOR_CTRL_PASSIVE_DEC 0xba 
#define MINOR_RECON_PASSIVE_DEC 0xbb 
#define MINOR_GET_DEC_CHAN_SW 0xbc 
#define MINOR_SET_DEC_CHAN_SW 0xbd 
#define MINOR_CTRL_DEC_CHAN_SCALE 0xbe 
#define MINOR_SET_REMOTE_REPLAY 0xbf 
#define MINOR_GET_REMOTE_REPLAY 0xc0 
#define MINOR_CTRL_REMOTE_REPLAY 0xc1 
#define MINOR_SET_DISP_CFG 0xc2 
#define MINOR_GET_DISP_CFG 0xc3 
#define MINOR_SET_PLANTABLE 0xc4 
#define MINOR_GET_PLANTABLE 0xc5 
#define MINOR_START_PPPPOE 0xc6 
#define MINOR_STOP_PPPPOE 0xc7 
#define MINOR_UPLOAD_LOGO 0xc8 
#define MINOR_LOCAL_PIN 0xc9 
#define MINOR_LOCAL_DIAL 0xca 
#define MINOR_SMS_CONTROL 0xcb 
#define MINOR_CALL_ONLINE 0xcc 
#define MINOR_REMOTE_PIN 0xcd 
#define MINOR_REMOTE_BYPASS 0xd0 
#define MINOR_REMOTE_UNBYPASS 0xd1 
#define MINOR_REMOTE_SET_ALARMIN_CFG 0xd2 
#define MINOR_REMOTE_GET_ALARMIN_CFG 0xd3 
#define MINOR_REMOTE_SET_ALARMOUT_CFG 0xd4 
#define MINOR_REMOTE_GET_ALARMOUT_CFG 0xd5 
#define MINOR_REMOTE_ALARMOUT_OPEN_MAN 0xd6 
#define MINOR_REMOTE_ALARMOUT_CLOSE_MAN 0xd7 
#define MINOR_REMOTE_ALARM_ENABLE_CFG 0xd8 
#define MINOR_DBDATA_OUTPUT 0xd9 
#define MINOR_DBDATA_INPUT 0xda 
#define MINOR_MU_SWITCH 0xdb 
#define MINOR_MU_PTZ 0xdc 
#define MINOR_DELETE_LOGO 0xdd 
#define MINOR_REMOTE_INQUEST_DEL_FILE 0xde 
#define MINOR_LOCAL_CONF_REB_RAID 0x101 
#define MINOR_LOCAL_CONF_SPARE 0x102 
#define MINOR_LOCAL_ADD_RAID 0x103 
#define MINOR_LOCAL_DEL_RAID 0x104 
#define MINOR_LOCAL_MIG_RAID 0x105 
#define MINOR_LOCAL_REB_RAID 0x106 
#define MINOR_LOCAL_QUICK_CONF_RAID 0x107 
#define MINOR_LOCAL_ADD_VD 0x108 
#define MINOR_LOCAL_DEL_VD 0x109 
#define MINOR_LOCAL_RP_VD 0x10a 
#define MINOR_LOCAL_FORMAT_EXPANDVD 0X10b 
#define MINOR_LOCAL_RAID_UPGRADE 0X10c 
#define MINOR_LOCAL_STOP_RAID 0x10d 
#define MINOR_REMOTE_CONF_REB_RAID 0x111 
#define MINOR_REMOTE_CONF_SPARE 0x112 
#define MINOR_REMOTE_ADD_RAID 0x113 
#define MINOR_REMOTE_DEL_RAID 0x114 
#define MINOR_REMOTE_MIG_RAID 0x115 
#define MINOR_REMOTE_REB_RAID 0x116 
#define MINOR_REMOTE_QUICK_CONF_RAID 0x117 
#define MINOR_REMOTE_ADD_VD 0x118 
#define MINOR_REMOTE_DEL_VD 0x119 
#define MINOR_REMOTE_RP_VD 0x11a 
#define MINOR_REMOTE_FORMAT_EXPANDVD 0X11b 
#define MINOR_REMOTE_RAID_UPGRADE 0X11c 
#define MINOR_REMOTE_STOP_RAID 0x11d 
#define MINOR_LOCAL_START_PIC_REC 0x121 
#define MINOR_LOCAL_STOP_PIC_REC 0x122 
#define MINOR_LOCAL_SET_SNMP 0x125 
#define MINOR_LOCAL_TAG_OPT 0x126 
#define MINOR_REMOTE_START_PIC_REC 0x131 
#define MINOR_REMOTE_STOP_PIC_REC 0x132 
#define MINOR_REMOTE_SET_SNMP 0x135 
#define MINOR_REMOTE_TAG_OPT 0x136 
#define MINOR_REMOTE_LOGIN_LOCK 0x137 
#define MINOR_REMOTE_LOGIN_UNLOCK 0x138 
#define MINOR_LOCAL_VOUT_SWITCH 0x140 
#define MINOR_STREAM_CABAC 0x141 
#define MINOR_LOCAL_SPARE_OPT 0x142 
#define MINOR_REMOTE_SPARE_OPT 0x143 
#define MINOR_LOCAL_IPCCFGFILE_OUTPUT 0x144 
#define MINOR_LOCAL_IPCCFGFILE_INPUT 0x145 
#define MINOR_LOCAL_IPC_UPGRADE 0x146 
#define MINOR_REMOTE_IPCCFGFILE_OUTPUT 0x147 
#define MINOR_REMOTE_IPCCFGFILE_INPUT 0x148 
#define MINOR_REMOTE_IPC_UPGRADE 0x149 
#define MINOR_LOCAL_UNLOAD_HDISK 0x150 
#define MINOR_LOCAL_AUDIO_MIX 0x151 
#define MINOR_REMOTE_AUDIO_MIX 0x152 
#define MINOR_LOCAL_TRIAL_PAUSE 0x153 
#define MINOR_LOCAL_TRIAL_RESUME 0x154 
#define MINOR_REMOTE_TRIAL_PAUSE 0x155 
#define MINOR_REMOTE_TRIAL_RESUME 0x156 
#define MINOR_REMOTE_MODIFY_VERIFICATION_CODE 0x157 
#define MINOR_LOCAL_MAKECALL 0x180 
#define MINOR_LOCAL_REJECTCALL 0x181 
#define MINOR_LOCAL_ANSWERCALL 0x182 
#define MINOR_LOCAL_HANGUPCALL 0x183 
#define MINOR_REMOTE_MAKECALL 0x188 
#define MINOR_REMOTE_REJECTCALL 0x189 
#define MINOR_REMOTE_ANSWERCALL 0x18a 
#define MINOR_REMOTE_HANGUPCALL 0x18b 
#define MINOR_SET_MULTI_MASTER 0x201 
#define MINOR_SET_MULTI_SLAVE 0x202 
#define MINOR_CANCEL_MULTI_MASTER 0x203 
#define MINOR_CANCEL_MULTI_SLAVE 0x204 
#define MINOR_DISPLAY_LOGO 0x205 
#define MINOR_HIDE_LOGO 0x206 
#define MINOR_SET_DEC_DELAY_LEVEL 0x207 
#define MINOR_SET_BIGSCREEN_DIPLAY_AREA 0x208 
#define MINOR_CUT_VIDEO_SOURCE 0x209 
#define MINOR_SET_BASEMAP_AREA 0x210 
#define MINOR_DOWNLOAD_BASEMAP 0x211 
#define MINOR_CUT_BASEMAP 0x212 
#define MINOR_CONTROL_ELEC_ENLARGE 0x213 
#define MINOR_SET_OUTPUT_RESOLUTION 0x214 
#define MINOR_SET_TRANCSPARENCY 0X215 
#define MINOR_SET_OSD 0x216 
#define MINOR_RESTORE_DEC_STATUS 0x217 
#define MINOR_SCREEN_OPEN_SCREEN 0x218 
#define MINOR_SCREEN_CLOSE_SCREEN 0x219 
#define MINOR_SCREEN_SWITCH_SIGNAL 0x21a 
#define MINOR_SCREEN_MODIFY_NETWORK 0x21b 
#define MINOR_SCREEN_MODIFY_LEDRES 0x21c 
#define MINOR_SCREEN_SHOW_NORMAL 0x21d 
#define MINOR_SCREEN_SHOW_TILE 0x21e 
#define MINOR_SCREEN_DEC_NORMAL 0x21f 
#define MINOR_SCREEN_DEC_LOWLATENCY 0x220 
#define MINOR_SCREEN_MODIFY_SELFRES 0x221 
#define MINOR_SCREEN_OUTPUT_POSITION 0x222 
#define MINOR_SCREEN_IMAGE_ENHANCE 0x223 
#define MINOR_SCREEN_JOIN_SIGNAL 0x224 
#define MINOR_SCREEN_SIGNAL_OSD 0x225 
#define MINOR_SCREEN_ASSOCIATED_INTERACTION 0x226 
#define MINOR_SCREEN_MODIFY_MATRIX 0x227 
#define MINOR_SCREEN_WND_TOP_KEEP 0x228 
#define MINOR_SCREEN_WND_OPEN_KEEP 0x229 
#define MINOR_SCREEN_WALL_MIRROR 0x22a 
#define MINOR_SCREEN_UPLOAD_BASEMAP 0x22b 
#define MINOR_SCREEN_SHOW_BASEMAP 0x22c 
#define MINOR_SCREEN_HIDE_BASEMAP 0x22d 
#define MINOR_SCREEN_MODIFY_SERIAL 0x22e 
#define MINOR_SCREEN_SET_INPUT 0x251 
#define MINOR_SCREEN_SET_OUTPUT 0x252 
#define MINOR_SCREEN_SET_OSD 0x253 
#define MINOR_SCREEN_SET_LOGO 0x254 
#define MINOR_SCREEN_SET_LAYOUT 0x255 
#define MINOR_SCREEN_PICTUREPREVIEW 0x256 
#define MINOR_SCREEN_GET_OSD 0x257 
#define MINOR_SCREEN_GET_LAYOUT 0x258 
#define MINOR_SCREEN_LAYOUT_CTRL 0x259 
#define MINOR_GET_ALL_VALID_WND 0x260 
#define MINOR_GET_SIGNAL_WND 0x261 
#define MINOR_WINDOW_CTRL 0x262 
#define MINOR_GET_LAYOUT_LIST 0x263 
#define MINOR_LAYOUT_CTRL 0x264 
#define MINOR_SET_LAYOUT 0x265 
#define MINOR_GET_SIGNAL_LIST 0x266 
#define MINOR_GET_PLAN_LIST 0x267 
#define MINOR_SET_PLAN 0x268 
#define MINOR_CTRL_PLAN 0x269 
#define MINOR_CTRL_SCREEN 0x270 
#define MINOR_ADD_NETSIG 0x271 
#define MINOR_SET_NETSIG 0x272 
#define MINOR_SET_DECBDCFG 0x273 
#define MINOR_GET_DECBDCFG 0x274 
#define MINOR_GET_DEVICE_STATUS 0x275 
#define MINOR_UPLOAD_PICTURE 0x276 
#define MINOR_SET_USERPWD 0x277 
#define MINOR_ADD_LAYOUT 0x278 
#define MINOR_DEL_LAYOUT 0x279 
#define MINOR_DEL_NETSIG 0x280 
#define MINOR_ADD_PLAN 0x281 
#define MINOR_DEL_PLAN 0x282 
#define MINOR_GET_EXTERNAL_MATRIX_CFG 0x283 
#define MINOR_SET_EXTERNAL_MATRIX_CFG 0x284 
#define MINOR_GET_USER_CFG 0x285 
#define MINOR_SET_USER_CFG 0x286 
#define MINOR_GET_DISPLAY_PANEL_LINK_CFG 0x287 
#define MINOR_SET_DISPLAY_PANEL_LINK_CFG 0x288 
#define MINOR_GET_WALLSCENE_PARAM 0x289 
#define MINOR_SET_WALLSCENE_PARAM 0x28a 
#define MINOR_GET_CURRENT_WALLSCENE 0x28b 
#define MINOR_SWITCH_WALLSCENE 0x28c 
#define MINOR_SIP_LOGIN 0x28d 
#define MINOR_VOIP_START 0x28e 
#define MINOR_VOIP_STOP 0x28f 
#define MINOR_WIN_TOP 0x290 
#define MINOR_WIN_BOTTOM 0x291 
#define MINOR_SET_USER_ADD_CFG 0x292 
#define MINOR_SET_USER_MODF_CFG 0x293 
#define MINOR_SET_USER_DEL_CFG 0x294 
#define MINOR_LOCAL_LOAD_HDISK 0x300 
#define MINOR_LOCAL_DELETE_HDISK 0x301 
#define MINOR_LOCAL_MAIN_AUXILIARY_PORT_SWITCH 0X302
#define MINOR_LOCAL_HARD_DISK_CHECK 0x303
#define MINOR_LOCAL_CFG_DEVICE_TYPE 0x310 
#define MINOR_REMOTE_CFG_DEVICE_TYPE 0x311 
#define MINOR_LOCAL_CFG_WORK_HOT_SERVER 0x312 
#define MINOR_REMOTE_CFG_WORK_HOT_SERVER 0x313 
#define MINOR_LOCAL_DELETE_WORK 0x314 
#define MINOR_REMOTE_DELETE_WORK 0x315 
#define MINOR_LOCAL_ADD_WORK 0x316 
#define MINOR_REMOTE_ADD_WORK 0x317 
#define MINOR_LOCAL_IPCHEATMAP_OUTPUT 0x318 
#define MINOR_LOCAL_IPCHEATFLOW_OUTPUT 0x319 
#define MINOR_REMOTE_SMS_SEND 0x350 
#define MINOR_LOCAL_SMS_SEND 0x351 
#define MINOR_ALARM_SMS_SEND 0x352 
#define MINOR_SMS_RECV 0x353 
#define MINOR_LOCAL_SMS_SEARCH 0x354 
#define MINOR_REMOTE_SMS_SEARCH 0x355 
#define MINOR_LOCAL_SMS_READ 0x356 
#define MINOR_REMOTE_SMS_READ 0x357 
#define MINOR_REMOTE_DIAL_CONNECT 0x358 
#define MINOR_REMOTE_DIAL_DISCONN 0x359 
#define MINOR_LOCAL_WHITELIST_SET 0x35A 
#define MINOR_REMOTE_WHITELIST_SET 0x35B 
#define MINOR_LOCAL_DIAL_PARA_SET 0x35C 
#define MINOR_REMOTE_DIAL_PARA_SET 0x35D 
#define MINOR_LOCAL_DIAL_SCHEDULE_SET 0x35E 
#define MINOR_REMOTE_DIAL_SCHEDULE_SET 0x35F 
#define MINOR_PLAT_OPER 0x360 
#define MINOR_REMOTE_CFG_POE_WORK_MODE 0x361
#define MINOR_LOCAL_CFG_POE_WORK_MODE 0x362
#define MINOR_REMOTE_CFG_FACE_CONTRAST 0x363
#define MINOR_LOCAL_CFG_FACE_CONTRAST 0x364
#define MINOR_REMOTE_CFG_WHITELIST_FACE_CONTRAST 0x365
#define MINOR_LOCAL_CFG_WHITELIST_FACE_CONTRAST 0x366
#define MINOR_LOCAL_CHECK_TIME 0x367 
#define MINOR_VCA_ONEKEY_EXPORT_PICTURE 0x368
#define MINOR_VCA_ONEKEY_DELETE_PICTURE 0x369
#define MINOR_VCA_ONEKEY_EXPORT_VIDEO 0x36a
#define MINOR_VCA_ONEKEY_DELETE_VIDEO 0x36b
#define MINOR_REMOTE_CFG_WIRELESS_DIALPARAM 0x36c 
#define MINOR_LOCAL_CFG_WIRELESS_DIALPARAM 0x36d 
#define MINOR_REMOTE_CFG_WIRELESS_SMSPARAM 0x36e 
#define MINOR_LOCAL_CFG_WIRELESS_SMSPARAM 0x36f 
#define MINOR_REMOTE_CFG_WIRELESS_SMSSElFHELP 0x370 
#define MINOR_LOCAL_CFG_WIRELESS_SMSSElFHELP 0x371 
#define MINOR_REMOTE_CFG_WIRELESS_NETFLOWPARAM 0x372 
#define MINOR_LOCAL_CFG_WIRELESS_NETFLOWPARAM 0x373 
#define MINOR_REMOTE_OPEN_DOOR 0x400 
#define MINOR_REMOTE_CLOSE_DOOR 0x401 
#define MINOR_REMOTE_ALWAYS_OPEN 0x402 
#define MINOR_REMOTE_ALWAYS_CLOSE 0x403 
#define MINOR_REMOTE_CHECK_TIME 0x404 
#define MINOR_NTP_CHECK_TIME 0x405 
#define MINOR_REMOTE_CLEAR_CARD 0x406 
#define MINOR_REMOTE_RESTORE_CFG 0x407 
#define MINOR_ALARMIN_ARM 0x408 
#define MINOR_ALARMIN_DISARM 0x409 
#define MINOR_LOCAL_RESTORE_CFG 0x40a 
#define MINOR_REMOTE_CAPTURE_PIC 0x40b 
#define MINOR_MOD_NET_REPORT_CFG 0x40c 
#define MINOR_MOD_GPRS_REPORT_PARAM 0x40d 
#define MINOR_MOD_REPORT_GROUP_PARAM 0x40e 
#define MINOR_UNLOCK_PASSWORD_OPEN_DOOR 0x40f 
#define MINOR_AUTO_RENUMBER 0x410 
#define MINOR_AUTO_COMPLEMENT_NUMBER 0x411 
#define MINOR_NORMAL_CFGFILE_INPUT 0x412 
#define MINOR_NORMAL_CFGFILE_OUTTPUT 0x413 
#define MINOR_CARD_RIGHT_INPUT 0x414 
#define MINOR_CARD_RIGHT_OUTTPUT 0x415 
#define MINOR_LOCAL_USB_UPGRADE 0x416 
#define MINOR_REMOTE_VISITOR_CALL_LADDER 0x417 
#define MINOR_REMOTE_HOUSEHOLD_CALL_LADDER 0x418 
#define MINOR_REMOTE_ACTUAL_GUARD 0x419 
#define MINOR_REMOTE_ACTUAL_UNGUARD 0x41a 
#define MINOR_REMOTE_CONTROL_NOT_CODE_OPER_FAILED 0x41b 
#define MINOR_REMOTE_CONTROL_CLOSE_DOOR 0x41c 
#define MINOR_REMOTE_CONTROL_OPEN_DOOR 0x41d 
#define MINOR_REMOTE_CONTROL_ALWAYS_OPEN_DOOR 0x41e 
#define MINOR_M1_CARD_ENCRYPT_VERIFY_OPEN 0x41f 
#define MINOR_M1_CARD_ENCRYPT_VERIFY_CLOSE 0x420 
#define MINOR_NFC_FUNCTION_OPEN 0x421 
#define MINOR_NFC_FUNCTION_CLOSE 0x422 
#define MINOR_OFFLINE_DATA_OUTPUT 0x423 
#define MINOR_CREATE_SSH_LINK 0x42d 
#define MINOR_CLOSE_SSH_LINK 0x42e 
#define MINOR_OPERATION_CUSTOM1 0x900 
#define MINOR_OPERATION_CUSTOM2 0x901 
#define MINOR_OPERATION_CUSTOM3 0x902 
#define MINOR_OPERATION_CUSTOM4 0x903 
#define MINOR_OPERATION_CUSTOM5 0x904 
#define MINOR_OPERATION_CUSTOM6 0x905 
#define MINOR_OPERATION_CUSTOM7 0x906 
#define MINOR_OPERATION_CUSTOM8 0x907 
#define MINOR_OPERATION_CUSTOM9 0x908 
#define MINOR_OPERATION_CUSTOM10 0x909 
#define MINOR_OPERATION_CUSTOM11 0x90a 
#define MINOR_OPERATION_CUSTOM12 0x90b 
#define MINOR_OPERATION_CUSTOM13 0x90c 
#define MINOR_OPERATION_CUSTOM14 0x90d 
#define MINOR_OPERATION_CUSTOM15 0x90e 
#define MINOR_OPERATION_CUSTOM16 0x90f 
#define MINOR_OPERATION_CUSTOM17 0x910 
#define MINOR_OPERATION_CUSTOM18 0x911 
#define MINOR_OPERATION_CUSTOM19 0x912 
#define MINOR_OPERATION_CUSTOM20 0x913 
#define MINOR_OPERATION_CUSTOM21 0x914 
#define MINOR_OPERATION_CUSTOM22 0x915 
#define MINOR_OPERATION_CUSTOM23 0x916 
#define MINOR_OPERATION_CUSTOM24 0x917 
#define MINOR_OPERATION_CUSTOM25 0x918 
#define MINOR_OPERATION_CUSTOM26 0x919 
#define MINOR_OPERATION_CUSTOM27 0x91a 
#define MINOR_OPERATION_CUSTOM28 0x91b 
#define MINOR_OPERATION_CUSTOM29 0x91c 
#define MINOR_OPERATION_CUSTOM30 0x91d 
#define MINOR_OPERATION_CUSTOM31 0x91e 
#define MINOR_OPERATION_CUSTOM32 0x91f 
#define MINOR_OPERATION_CUSTOM33 0x920 
#define MINOR_OPERATION_CUSTOM34 0x921 
#define MINOR_OPERATION_CUSTOM35 0x922 
#define MINOR_OPERATION_CUSTOM36 0x923 
#define MINOR_OPERATION_CUSTOM37 0x924 
#define MINOR_OPERATION_CUSTOM38 0x925 
#define MINOR_OPERATION_CUSTOM39 0x926 
#define MINOR_OPERATION_CUSTOM40 0x927 
#define MINOR_OPERATION_CUSTOM41 0x928 
#define MINOR_OPERATION_CUSTOM42 0x929 
#define MINOR_OPERATION_CUSTOM43 0x92a 
#define MINOR_OPERATION_CUSTOM44 0x92b 
#define MINOR_OPERATION_CUSTOM45 0x92c 
#define MINOR_OPERATION_CUSTOM46 0x92d 
#define MINOR_OPERATION_CUSTOM47 0x92e 
#define MINOR_OPERATION_CUSTOM48 0x92f 
#define MINOR_OPERATION_CUSTOM49 0x930 
#define MINOR_OPERATION_CUSTOM50 0x931 
#define MINOR_OPERATION_CUSTOM51 0x932 
#define MINOR_OPERATION_CUSTOM52 0x933 
#define MINOR_OPERATION_CUSTOM53 0x934 
#define MINOR_OPERATION_CUSTOM54 0x935 
#define MINOR_OPERATION_CUSTOM55 0x936 
#define MINOR_OPERATION_CUSTOM56 0x937 
#define MINOR_OPERATION_CUSTOM57 0x938 
#define MINOR_OPERATION_CUSTOM58 0x939 
#define MINOR_OPERATION_CUSTOM59 0x93a 
#define MINOR_OPERATION_CUSTOM60 0x93b 
#define MINOR_OPERATION_CUSTOM61 0x93c 
#define MINOR_OPERATION_CUSTOM62 0x93d 
#define MINOR_OPERATION_CUSTOM63 0x93e 
#define MINOR_OPERATION_CUSTOM64 0x93f 
#define MINOR_SET_WIFI_PARAMETER 0x950 
#define MINOR_EZVIZ_LOGIN 0x951 
#define MINOR_EZVIZ_LOGINOUT 0x952 
#define MINOR_LOCK_ADD 0x953 
#define MINOR_LOCK_DELETE 0x954 
#define MINOR_LOCK_GET_STATUS 0x955 
#define MINOR_LOCK_SET_TMP_PASSWORD 0x956 
#define MINOR_LOCK_SET_SILENT_MODE 0x957 
#define MINOR_LOCK_SET_LATE_WARNING 0x958 
#define MINOR_LOCK_IPC_ADD 0x959 
#define MINOR_LOCK_IPC_REMOVE 0x95a 
#define MINOR_LOCK_DETECTOR_ADD 0x95b 
#define MINOR_LOCK_DETECTOR_REMOVE 0x95c 
#define MINOR_LOCK_MESSAGE_REMINDING_OPEN 0x95d 
#define MINOR_LOCK_MESSAGE_REMINDING_CLOSE 0x95e 
#define MINOR_LOCK_SET_HEART_BEAT 0x95f 
#define MINOR_LOCK_REBOOT 0x960 
#define MINOR_LOCK_CLEAR_USER 0x961 
#define MINOR_LOCK_FORMAT 0x962 
#define MINOR_LOCK_FINGER_CHANGE 0x963 
#define MINOR_LOCK_PASSWORD_CHANGE 0x964 
#define MINOR_LOCK_CARD_CHANGE 0x965 
#define MINOR_LOCK_USER_CHANGE 0x966 
#define MINOR_LOCK_SYSTEM_CHANGE 0x967 
#define MINOR_LOCK_CHANGE_ADD_UESR 0x968 
#define MINOR_LOCK_CHANGE_DEL_UESR 0x969 
#define MINOR_LOCK_CHANGE_CUSTOM_USER_NAME 0x96a 
#define MINOR_LOCK_CHANGE_REMOTE_DEVICE 0x96b 
#define MINOR_LOCK_CHANGE_ADD_FP 0x96c 
#define MINOR_LOCK_CHANGE_DEL_FP 0x96d 
#define MINOR_LOCK_CHANGE_ADD_PASSWORD 0x96e 
#define MINOR_LOCK_CHANGE_DEL_PASSWORD 0x96f 
#define MINOR_LOCK_CHANGE_ADD_CARD 0x970 
#define MINOR_LOCK_CHANGE_DEL_CARD 0x971 
#define MINOR_LOCK_NETWORK_SWITCH 0x972 
#define MINOR_LOCK_CLEAR_NETWORK_DATA 0x973 
#define MINOR_LOCK_CLEAR_HOST_USER 0x974 
#define MINOR_LOCK_CLEAR_GUEST_USER 0x975 
#define MINOR_LOCK_CLEAN_ALL_REMOTE_DEVICE 0x976 
#define MINOR_LOCK_CLEAN_NORMAL_USER_FINGRT 0x977 
#define MINOR_LOCK_CLEAN_ALL_CARD 0x978 
#define MINOR_LOCK_CLEAN_ALL_PASSWORD 0x979 
#define MINOR_START_WIRELESSSERVER 0x97a 
#define MINOR_STOP_WIRELESSSERVER 0x97b 
#define MINOR_EMERGENCY_CARD_AUTH_NORMAL_CARD 0x97c 
#define MINOR_CHANGE_ALWAYS_OPEN_RIGHT 0x97d 
#define MINOR_LOCK_DOOR_BELL_EVENT 0x97e 
#define MINOR_SET_TRIGGERMODE_CFG 0x1001 
#define MINOR_GET_TRIGGERMODE_CFG 0x1002 
#define MINOR_SET_IOOUT_CFG 0x1003 
#define MINOR_GET_IOOUT_CFG 0x1004 
#define MINOR_GET_TRIGGERMODE_DEFAULT 0x1005 
#define MINOR_GET_ITCSTATUS 0x1006 
#define MINOR_SET_STATUS_DETECT_CFG 0x1007 
#define MINOR_GET_STATUS_DETECT_CFG 0x1008 
#define MINOR_SET_VIDEO_TRIGGERMODE_CFG 0x1009 
#define MINOR_GET_VIDEO_TRIGGERMODE_CFG 0x100a 
#define MINOR_ALARMHOST_GUARD 		0x1010 
#define MINOR_ALARMHOST_UNGUARD 		0x1011 
#define MINOR_ALARMHOST_BYPASS 				0x1012 
#define MINOR_ALARMHOST_DURESS_ACCESS 			0x1013 
#define MINOR_ALARMHOST_RS485_PARAM 0x1018 
#define MINOR_ALARMHOST_ALARM_OUTPUT 				0x1019 
#define MINOR_ALARMHOST_ACCESS_OPEN 				0x101a 
#define MINOR_ALARMHOST_ACCESS_CLOSE 				0x101b 
#define MINOR_ALARMHOST_SIREN_OPEN 				0x101c 
#define MINOR_ALARMHOST_SIREN_CLOSE 				0x101d 
#define MINOR_ALARMHOST_MOD_ZONE_CONFIG 			0x101e 
#define MINOR_ALARMHOST_MOD_ALARMOUT_CONIFG 	0x101f 
#define MINOR_ALARMHOST_MOD_ANALOG_CONFIG 		0x1020 
#define MINOR_ALARMHOST_RS485_CONFIG 				0x1021 
#define MINOR_ALARMHOST_PHONE_CONFIG 				0x1022 
#define MINOR_ALARMHOST_ADD_ADMIN 				0x1023 
#define MINOR_ALARMHOST_MOD_ADMIN_PARAM 		0x1024 
#define MINOR_ALARMHOST_DEL_ADMIN 					0x1025 
#define MINOR_ALARMHOST_ADD_NETUSER 				0x1026 
#define MINOR_ALARMHOST_MOD_NETUSER_PARAM 		0x1027 
#define MINOR_ALARMHOST_DEL_NETUSER 				0x1028 
#define MINOR_ALARMHOST_ADD_OPERATORUSER 		0x1029 
#define MINOR_ALARMHOST_MOD_OPERATORUSER_PW 	0x102a 
#define MINOR_ALARMHOST_DEL_OPERATORUSER 		0x102b 
#define MINOR_ALARMHOST_ADD_KEYPADUSER 		0x102c 
#define MINOR_ALARMHOST_DEL_KEYPADUSER 		0x102d 
#define MINOR_ALARMHOST_MOD_HOST_CONFIG 0x1032 
#define MINOR_ALARMHOST_RESTORE_BYPASS 			0x1033 
#define MINOR_ALARMHOST_ALARMOUT_OPEN 			0x1034 
#define MINOR_ALARMHOST_ALARMOUT_CLOSE 			0x1035 
#define MINOR_ALARMHOST_MOD_SUBSYSTEM_PARAM 	0x1036 
#define MINOR_ALARMHOST_GROUP_BYPASS 				0x1037 
#define MINOR_ALARMHOST_RESTORE_GROUP_BYPASS 	0x1038 
#define MINOR_ALARMHOST_MOD_GRPS_PARAM 			0x1039 
#define MINOR_ALARMHOST_MOD_REPORT_MOD 			0x103b 
#define MINOR_ALARMHOST_MOD_GATEWAY_PARAM 		0x103c 
#define MINOR_STAY_ARM 	0x104c 
#define MINOR_QUICK_ARM 			0x104d 
#define MINOR_AUTOMATIC_ARM 		0x104e 
#define MINOR_AUTOMATIC_DISARM 		0x104f 
#define MINOR_KEYSWITCH_ARM 	0x1050 
#define MINOR_KEYSWITCH_DISARM	0x1051 
#define MINOR_CLEAR_ALARM	0x1052 
#define MINOR_MOD_FAULT_CFG		0x1053 
#define MINOR_MOD_EVENT_TRIGGER_ALARMOUT_CFG	0x1054 
#define MINOR_SEARCH_EXTERNAL_MODULE 0x1055
#define MINOR_REGISTER_EXTERNAL_MODULE 0x1056 
#define MINOR_CLOSE_KEYBOARD_ALARM	0x1057
#define MINOR_MOD_3G_PARAM		0x1058 
#define MINOR_MOD_PRINT_PARAM 0x1059 
#define MINOR_ALARMHOST_SD_CARD_FORMAT		0x1060 
#define MINOR_ALARMHOST_SUBSYSTEM_UPGRADE 0x1061
#define MINOR_PLAN_ARM_CFG 0x1062
#define MINOR_PHONE_ARM 0x1063
#define MINOR_PHONE_STAY_ARM 0x1064
#define MINOR_PHONE_QUICK_ARM 0x1065
#define MINOR_PHONE_DISARM 0x1066
#define MINOR_PHONE_CLEAR_ALARM 0x1067
#define MINOR_WHITELIST_CFG 0x1068
#define MINOR_TIME_TRIGGER_CFG 0x1069
#define MINOR_CAPTRUE_CFG 0x106a
#define MINOR_TAMPER_CFG 0x106b
#define MINOR_REMOTE_KEYPAD_UPGRADE 0x106c
#define MINOR_ONETOUCH_AWAY_ARMING 0x106d
#define MINOR_ONETOUCH_STAY_ARMING 0x106e
#define MINOR_SINGLE_PARTITION_ARMING_OR_DISARMING 0x106f
#define MINOR_CARD_CONFIGURATION 0x1070
#define MINOR_CARD_ARMING_OR_DISARMING 0x1071
#define MINOR_EXPENDING_NETCENTER_CONFIGURATION 0x1072
#define MINOR_NETCARD_CONFIGURATION 0x1073
#define MINOR_DDNS_CONFIGURATION 0x1074
#define MINOR_RS485BUS_CONFIGURATION 0x1075
#define MINOR_RS485BUS_RE_REGISTRATION 0x1076
#define MINOR_REMOTE_OPEN_ELECTRIC_LOCK 0x1077
#define MINOR_REMOTE_CLOSE_ELECTRIC_LOCK 0x1078
#define MINOR_LOCAL_OPEN_ELECTRIC_LOCK 0x1079
#define MINOR_LOCAL_CLOSE_ELECTRIC_LOCK 0x107a
#define MINOR_OPEN_ALARM_LAMP 0x107b
#define MINOR_CLOSE_ALARM_LAMP 0x107c
#define MINOR_TEMPORARY_PASSWORD 0x107d
#define MINOR_HIDDNS_CONFIG 0x1082
#define MINOR_REMOTE_KEYBOARD_UPDATA 0x1083
#define MINOR_ZONE_ADD_DETECTOR 0x1084
#define MINOR_ZONE_DELETE_DETECTOR 0x1085
#define MINOR_QUERY_DETECTOR_SIGNAL 0x1086
#define MINOR_QUERY_DETECTOR_BATTERY 0x1087
#define MINOR_SET_DETECTOR_GUARD 0x1088
#define MINOR_SET_DETECTOR_UNGUARD 0x1089
#define MINOR_WIRELESS_CONFIGURATION 0x108a 
#define MINOR_OPEN_VOICE 0x108b
#define MINOR_CLOSE_VOICE 0x108c
#define MINOR_ENABLE_FUNCTION_KEY 0x108d
#define MINOR_DISABLE_FUNCTION_KEY 0x108e
#define MINOR_READ_CARD 0x108f
#define MINOR_START_BROADCAST 0x1090
#define MINOR_STOP_BROADCAST 0x1091
#define MINOR_REMOTE_ZONE_MODULE_UPGRADE 0x1092
#define MINOR_NETWORK_MODULE_EXTEND 0x1093
#define MINOR_ADD_CONTROLLER 	0x1094
#define MINOR_DELETE_CONTORLLER 	0x1095
#define MINOR_REMOTE_NETWORKMODULE_UPGRADE 0x1096
#define MINOR_WIRELESS_OUTPUT_ADD 0x1097
#define MINOR_WIRELESS_OUTPUT_DEL 0x1098
#define MINOR_WIRELESS_REPEATER_ADD 0x1099
#define MINOR_WIRELESS_REPEATER_DEL 0x109a
#define MINOR_PHONELIST_CFG 0x109b
#define MINOR_RF_SIGNAL_CHECK 0x109c
#define MINOR_USB_UPGRADE 0x109d
#define MINOR_DOOR_TIME_REMINDER_CFG 0x109f
#define MINOR_WIRELESS_SIREN_ADD 0x1100
#define MINOR_WIRELESS_SIREN_DEL 0x1101
#define MINOR_OUT_SCALE_OPEN 0x1102
#define MINOR_OUT_SCALE_CLOSE 0x1103
#define MINOR_ALARMHOST_4G_MODULS_START 0x1108 
#define MINOR_ALARMHOST_4G_MODULS_STOP 0x1109 
#define MINOR_EZVIZ_CLOUD_START 0x1110 
#define MINOR_EZVIZ_CLOUD_STOP 0x1111 
#define MINOR_SIPUA_GRID_START 0x1112 
#define MINOR_SIPUA_GRID_STOP 0x1113 
#define MINOR_MODBUS_FILE_DOWNLOAD 0x1114 
#define MINOR_MODBUS_FILE_UPLOAD 0x1115 
#define MINOR_RS485_DLL_FILE_DOWNLOAD 0x1116 
#define MINOR_RS485_DLL_FLIE_UPLOAD 0x1117 
#define MINOR_TX1_REBOOT 0x1118 
#define MINOR_LORA_PARAM 0x1119 
#define MINOR_GB28181_PLATE_CFG_PARAM 0x111a 
#define MINOR_GB28181_SERVER_START 0x111b 
#define MINOR_GB28181_SERVER_STOP 0x111c 
#define MINOR_WEB_AUTHENTICATION 0x111d 
#define MINOR_SADP_ENABLED 0x111e 
#define MINOR_HTTPS_ENABLED 0x111f 
#define MINOR_EZVIZ_PARAM_CFG 0x1120 
#define MINOR_SET_MOTION_DETECTION_CFG 0x1121 
#define MINOR_GET_MOTION_DETECTION_CFG 0x1122 
#define MINOR_SET_SHELTER_ALARM_CFG 0x1123 
#define MINOR_GET_SHELTER_ALARM_CFG 0x1124 
#define MINOR_SET_VIDEO_LOSS_CFG 0x1125 
#define MINOR_GET_VIDEO_LOSS_CFG 0x1126 
#define MINOR_SET_ABNORMAL_CFG 0x1127 
#define MINOR_GET_ABNORMAL_CFG 0x1128 
#define MINOR_SET_ALARM_LINKAGE_CFG 0x1129 
#define MINOR_GET_ALARM_LINKAGE_CFG 0x112a 
#define MINOR_SET_NETWORK_CFG 0x112b 
#define MINOR_GET_NETWORK_CFG 0x112c 
#define MINOR_SET_VIDEO_MASK_CFG 0x112d 
#define MINOR_GET_VIDEO_MASK_CFG 0x112e 
#define MINOR_LOCAL_ADD_CAR_INFO 0x2001 
#define MINOR_LOCAL_MOD_CAR_INFO 0x2002 
#define MINOR_LOCAL_DEL_CAR_INFO 0x2003 
#define MINOR_LOCAL_FIND_CAR_INFO 0x2004 
#define MINOR_LOCAL_ADD_MONITOR_INFO 0x2005 
#define MINOR_LOCAL_MOD_MONITOR_INFO 0x2006 
#define MINOR_LOCAL_DEL_MONITOR_INFO 0x2007 
#define MINOR_LOCAL_FIND_MONITOR_INFO 0x2008 
#define MINOR_LOCAL_FIND_NORMAL_PASS_INFO 0x2009 
#define MINOR_LOCAL_FIND_ABNORMAL_PASS_INFO 0x200a 
#define MINOR_LOCAL_FIND_PEDESTRIAN_PASS_INFO 0x200b 
#define MINOR_LOCAL_PIC_PREVIEW 0x200c 
#define MINOR_LOCAL_SET_GATE_PARM_CFG 0x200d 
#define MINOR_LOCAL_GET_GATE_PARM_CFG 0x200e 
#define MINOR_LOCAL_SET_DATAUPLOAD_PARM_CFG 0x200f 
#define MINOR_LOCAL_GET_DATAUPLOAD_PARM_CFG 0x2010 
#define MINOR_LOCAL_DEVICE_CONTROL 0x2011 
#define MINOR_LOCAL_ADD_EXTERNAL_DEVICE_INFO 0x2012 
#define MINOR_LOCAL_MOD_EXTERNAL_DEVICE_INFO 0x2013 
#define MINOR_LOCAL_DEL_EXTERNAL_DEVICE_INFO 0x2014 
#define MINOR_LOCAL_FIND_EXTERNAL_DEVICE_INFO 0x2015 
#define MINOR_LOCAL_ADD_CHARGE_RULE 0x2016 
#define MINOR_LOCAL_MOD_CHARGE_RULE 0x2017 
#define MINOR_LOCAL_DEL_CHARGE_RULE 0x2018 
#define MINOR_LOCAL_FIND_CHARGE_RULE 0x2019 
#define MINOR_LOCAL_COUNT_NORMAL_CURRENTINFO 0x2020 
#define MINOR_LOCAL_EXPORT_NORMAL_CURRENTINFO_REPORT 0x2021 
#define MINOR_LOCAL_COUNT_ABNORMAL_CURRENTINFO 0x2022 
#define MINOR_LOCAL_EXPORT_ABNORMAL_CURRENTINFO_REPORT 0x2023 
#define MINOR_LOCAL_COUNT_PEDESTRIAN_CURRENTINFO 0x2024 
#define MINOR_LOCAL_EXPORT_PEDESTRIAN_CURRENTINFO_REPORT 0x2025 
#define MINOR_LOCAL_FIND_CAR_CHARGEINFO 0x2026 
#define MINOR_LOCAL_COUNT_CAR_CHARGEINFO 0x2027 
#define MINOR_LOCAL_EXPORT_CAR_CHARGEINFO_REPORT 0x2028 
#define MINOR_LOCAL_FIND_SHIFTINFO 0x2029 
#define MINOR_LOCAL_FIND_CARDINFO 0x2030 
#define MINOR_LOCAL_ADD_RELIEF_RULE 0x2031 
#define MINOR_LOCAL_MOD_RELIEF_RULE 0x2032 
#define MINOR_LOCAL_DEL_RELIEF_RULE 0x2033 
#define MINOR_LOCAL_FIND_RELIEF_RULE 0x2034 
#define MINOR_LOCAL_GET_ENDETCFG 0x2035 
#define MINOR_LOCAL_SET_ENDETCFG 0x2036 
#define MINOR_LOCAL_SET_ENDEV_ISSUEDDATA 0x2037 
#define MINOR_LOCAL_DEL_ENDEV_ISSUEDDATA 0x2038 
#define MINOR_REMOTE_DEVICE_CONTROL 0x2101 
#define MINOR_REMOTE_SET_GATE_PARM_CFG 0x2102 
#define MINOR_REMOTE_GET_GATE_PARM_CFG 0x2103 
#define MINOR_REMOTE_SET_DATAUPLOAD_PARM_CFG 0x2104 
#define MINOR_REMOTE_GET_DATAUPLOAD_PARM_CFG 0x2105 
#define MINOR_REMOTE_GET_BASE_INFO 0x2106 
#define MINOR_REMOTE_GET_OVERLAP_CFG 0x2107 
#define MINOR_REMOTE_SET_OVERLAP_CFG 0x2108 
#define MINOR_REMOTE_GET_ROAD_INFO 0x2109 
#define MINOR_REMOTE_START_TRANSCHAN 0x210a 
#define MINOR_REMOTE_GET_ECTWORKSTATE 0x210b 
#define MINOR_REMOTE_GET_ECTCHANINFO 0x210c 
#define MINOR_REMOTE_ADD_EXTERNAL_DEVICE_INFO 0x210d 
#define MINOR_REMOTE_MOD_EXTERNAL_DEVICE_INFO 0x210e 
#define MINOR_REMOTE_GET_ENDETCFG 0x210f 
#define MINOR_REMOTE_SET_ENDETCFG 0x2110 
#define MINOR_REMOTE_ENDEV_ISSUEDDATA 0x2111 
#define MINOR_REMOTE_DEL_ENDEV_ISSUEDDATA 0x2112 
#define MINOR_REMOTE_ON_CTRL_LAMP 0x2115 
#define MINOR_REMOTE_OFF_CTRL_LAMP 0x2116 
#define MINOR_SET_VOICE_LEVEL_PARAM 0x2117 
#define MINOR_SET_VOICE_INTERCOM_PARAM 0x2118 
#define MINOR_SET_INTELLIGENT_PARAM 0x2119 
#define MINOR_LOCAL_SET_RAID_SPEED 0x211a 
#define MINOR_REMOTE_SET_RAID_SPEED 0x211b 
#define MINOR_REMOTE_CREATE_STORAGE_POOL 0x211c 
#define MINOR_REMOTE_DEL_STORAGE_POOL 0x211d 
#define MINOR_REMOTE_DEL_PIC 0x2120 
#define MINOR_REMOTE_DEL_RECORD 0x2121 
#define MINOR_REMOTE_CLOUD_ENABLE 0x2123 
#define MINOR_REMOTE_CLOUD_DISABLE 0x2124 
#define MINOR_REMOTE_CLOUD_MODIFY_PARAM 0x2125 
#define MINOR_REMOTE_CLOUD_MODIFY_VOLUME 0x2126 
#define MINOR_REMOTE_GET_GB28181_SERVICE_PARAM 0x2127 
#define MINOR_REMOTE_SET_GB28181_SERVICE_PARAM 0x2128 
#define MINOR_LOCAL_GET_GB28181_SERVICE_PARAM 0x2129 
#define MINOR_LOCAL_SET_GB28181_SERVICE_PARAM 0x212a 
#define MINOR_REMOTE_SET_SIP_SERVER 0x212b 
#define MINOR_LOCAL_SET_SIP_SERVER 0x212c 
#define MINOR_LOCAL_BLACKWHITEFILE_OUTPUT 0x212d 
#define MINOR_LOCAL_BLACKWHITEFILE_INPUT 0x212e 
#define MINOR_REMOTE_BALCKWHITECFGFILE_OUTPUT 0x212f 
#define MINOR_REMOTE_BALCKWHITECFGFILE_INPUT 0x2130 
#define MINOR_REMOTE_CREATE_MOD_VIEWLIB_SPACE 0x2200 
#define MINOR_REMOTE_DELETE_VIEWLIB_FILE 0x2201 
#define MINOR_REMOTE_DOWNLOAD_VIEWLIB_FILE 0x2202 
#define MINOR_REMOTE_UPLOAD_VIEWLIB_FILE 0x2203 
#define MINOR_LOCAL_CREATE_MOD_VIEWLIB_SPACE 0x2204 
#define MINOR_LOCAL_SET_DEVICE_ACTIVE 0x3000 
#define MINOR_REMOTE_SET_DEVICE_ACTIVE 0x3001 
#define MINOR_LOCAL_PARA_FACTORY_DEFAULT 0x3002 
#define MINOR_REMOTE_PARA_FACTORY_DEFAULT 0x3003 
#define MINOR_UPLAOD_STATIC_MATERIAL 0x2401 
#define MINOR_UPLOAD_DYNAMIC_MATERIAL 0x2402 
#define MINOR_DELETE_MATERIAL 0x2403 
#define MINOR_DOWNLOAD_STATIC_MATERIAL 0x2404 
#define MINOR_COVER_STATIC_MATERIAL 0x2405 
#define MINOR_APPROVE_MATERIAL 0x2406 
#define MINOR_UPLAOD_PROGRAM 0x2407 
#define MINOR_DOWNLOAD_PROGRAM 0x2408 
#define MINOR_DELETE_PROGRAM 0x2409 
#define MINOR_MODIFY_PROGRAM 0x240a 
#define MINOR_APPROVE_PRAGRAM 0x240b 
#define MINOR_UPLAOD_SCHEDULE 0x240c 
#define MINOR_DOWNLOAD_SCHEDULE 0x240d 
#define MINOR_DELETE_SCHEDULE 0x240e 
#define MINOR_MODIFY_SCHEDULE 0x240f 
#define MINOR_RELEASE_SCHEDULE 0x2410 
#define MINOR_ADD_TERMINAL 0x2411 
#define MINOR_DELETE_TERMINAL 0x2412 
#define MINOR_MODIFY_TERMIANL_PARAM 0x2413 
#define MINOR_MODIFY_TERMIANL_PLAY_PARAM 0x2414 
#define MINOR_ADD_TERMIANL_GROUP 0x2415 
#define MINOR_MODIFY_TERMINAL_GROUP_PARAM 0x2416 
#define MINOR_DELETE_TERMIANL_GROUP 0x2417 
#define MINOR_TERMINAL_PLAY_CONTROL 0x2418 
#define MINOR_TERMINAL_ON_OFF_LINE 0x2419 
#define MINOR_SET_SWITCH_PLAN 0x241a 
#define MINOR_SET_VOLUME_PLAN 0x241b 
#define MINOR_TERMINAL_SCREENSHOT 0x241c 
#define MINOR_SYSTEM_TIME_CFG 0x241d 
#define MINOR_ADD_USER_CFG 0x241e 
#define MINOR_DEL_USER_CFG 0x241f 
#define MINOR_REMOTE_MANAGE_HDD 0x2420 
#define MINOR_TERMINAL_UPDATE_START 0x2421 
#define MINOR_SVR_RESTORE_DEFAULT_PARAM 0x2422 
#define MINOR_SVR_REMOTE_RESTORE_FACTORY 0x2423 
#define MINOR_SVR_REMOTE_REBOOT 0x2424 
#define MINOR_SVR_MODIFY_NETWORK_PARAM 0x2425 
#define MINOR_SVR_SOFTWARE_UPGRADE 0x2426 
#define MINOR_BACKUP_DATA 0xc41 
#define MINOR_TRANSFER_DATA 0xc42 
#define MINOR_RESTORE_DATA 0xc43 
#define MINOR_SET_INPUT_PLAN 0xc44
#define MINOR_TERMINAL_ADB 0xc45
#define MINOR_TERMINAL_VOLUME 0xc46 
#define MINOR_TERMINAL_LOGO 0xc47
#define MINOR_TERMINAL_DEFAULT_SCHEDULE 0xc48
#define MINOR_TERMINAL_PASSWORD 0xc49
#define MINOR_TERMINAL_IP 0xc4a
#define MINOR_TERMINAL_RELATE_IPC 0xc4b
#define MINOR_TERMINAL_SERVER 0xc4c
#define MINOR_TERMINAL_SADP 0xc4d
#define MINOR_TERMINAL_TIMEZONE 0xc4e
#define MINOR_TERMINAL_TEMP_PROTECT 0xc4f
#define MINOR_ADD_ORGANIZATION 0xc50
#define MINOR_DELETE_ORGANIZATION 0xc51
#define MINOR_MODIFY_ORGANIZATION 0xc52
#define MINOR_WEATHER_FACTORY 0xc53
#define MINOR_SADP_ENABLE 0xc54
#define MINOR_SSH_ENABLE 0xc55
#define MINOR_MODIFY_MATERIAL 0xc56
#define MINOR_INSERT_CHARACTER 0xc57
#define MINOR_TERMINAL_BACKLIGHT 0xc58
#define MINOR_DOWNLOAD_MATERIAL_THUMBNAIL 0xc59
#define MINOR_UPLOAD_PROGRAM_THUMBNAIL 0xc5a
#define MINOR_TDOWNLOAD_PROGRAM_THUMBNAIL 0xc5b
#define MINOR_BATCH_DELETE_SCHEDULE_PLAN 0xc5c
#define MINOR_REPUBLISH 0xc5d
#define MINOR_CLEAR_TERMINAL_PLAY_INFO 0xc5e
#define MINOR_GET_TERMINAL_RESOLUTION 0xc5f
#define MINOR_SET_TERMINAL_RESOLUTION 0xc60
#define MINOR_GET_BATCH_TERMINAL_UPGRATE_PROGRESS 0xc61
#define MINOR_GET_BATCH_PROGRESS 0xc62
#define MINOR_GET_TEMPLATE 0xc64
#define MINOR_INIT_TEMPLATE 0xc65
#define MINOR_GET_TERMINAL_NTP_SERVERS 0xc66
#define MINOR_SET_TERMINAL_NTP_SERVERS 0xc67
#define MINOR_GET_RELEASE_DETAILS 0xc68
#define MINOR_UPLOAD_TEMPLATE_THUMBNAIL 0xc69
#define MINOR_DOWNLOAD_TEMPLATE_THUMBNAIL 0xc6a
#define MINOR_ADD_TEMPLATE 0xc6b
#define MINOR_DELETE_TEMPLATE 0xc6c
#define MINOR_MODIFY_TEMPLATE 0xc6d
#define MINOR_ADD_SCHEDULE_PLAN 0xc6e
#define MINOR_MODIFY_SCHEDULE_PLAN 0xc6f
#define MINOR_CANCEL_SCHEDULE_RELEASE 0xc70
#define MINOR_GET_SCHEDULE 0xc71
#define MINOR_ADD_INSERT 0xc72
#define MINOR_CANCEL_INSERT 0xc73
#define MINOR_SWITCH_LANGUAGE 0xc74
#define MINOR_SET_ADMIN_INITIAL_PASSWORD 0xc75
#define MINOR_MODIFY_PORT 0xc76
#define MINOR_MODIFY_STORAGE_PATH 0xc77
#define MINOR_EXIT_PROGRAM 0xc78
#define MINOR_MODULE_STARTUP_SUCCESS 0xc79
#define MINOR_APPROVE_SCHEDULE 0xc80 
#define MINOR_GENERAL_DATA_SEND 0xc81 
#define MINOR_REMOTE_CONFERENCE_CONFIG 0x2501 
#define MINOR_REMOTE_TERMINAL_CONFIG 0x2502 
#define MINOR_REMOTE_GROUP_CONFIG 0x2503 
#define MINOR_REMOTE_CONFERENCE_CTRL 0x2504 
#define MINOR_REMOTE_TERMINAL_CTRL 0x2505 
#define MINOR_LOCAL_RESET_LOGIN_PASSWORD 0x2600 
#define MINOR_REMOTE_RESET_LOGIN_PASSWORD 0x2601 
#define MINOR_LOCAL_FACE_BASE_CREATE 0x2602 
#define MINOR_REMOTE_FACE_BASE_CREATE 0x2603 
#define MINOR_LOCAL_FACE_BASE_MODIFY 0x2604 
#define MINOR_REMOTE_FACE_BASE_MODIFY 0x2605 
#define MINOR_LOCAL_FACE_BASE_DELETE 0x2606 
#define MINOR_REMOTE_FACE_BASE_DELETE 0x2607 
#define MINOR_LOCAL_FACE_DATA_APPEND 0x2608 
#define MINOR_REMOTE_FACE_DATA_APPEND 0x2609 
#define MINOR_LOCAL_FACE_DATA_SEARCH 0x2610 
#define MINOR_REMOTE_FACE_DATA_SEARCH 0x2611 
#define MINOR_LOCAL_FACE_DATA_ANALYSIS 0x2612 
#define MINOR_REMOTE_FACE_DATA_ANALYSIS 0x2613 
#define MINOR_LOCAL_FACE_DATA_EDIT 0x2614 
#define MINOR_REMOTE_FACE_DATA_EDIT 0x2615 
#define MINOR_LOCAL_FACE_DATA_DELETE 0x2616 
#define MINOR_REMOTE_FACE_DATA_DELET 0x2617 
#define MINOR_LOCAL_VCA_ANALYSIS_CFG 0x2618 
#define MINOR_REMOTE_VCA_ANALYSIS_CFG 0x2619 
#define MINOR_LOCAL_FACE_BASE_IMPORT 0x261a 
#define MINOR_LOCAL_FACE_BASE_EXPORT 0x261b 
#define MINOR_REMOTE_CLUSTER_MODE_CONFIG 0x261c 
#define MINOR_LOCAL_CLUSTER_MODE_CONFIG 0x261d 
#define MINOR_REMOTE_CLUSTER_NETWORK_CONFIG 0x261e 
#define MINOR_LOCAL_CLUSTER_NETWORK_CONFIG 0x261f 
#define MINOR_REMOTE_CLUSTER_ADD_DEVICE 0x2620 
#define MINOR_LOCAL_CLUSTER_ADD_DEVICE 0x2621 
#define MINOR_REMOTE_CLUSTER_DEL_DEVICE 0x2622 
#define MINOR_LOCAL_CLUSTER_DEL_DEVICE 0x2623 
#define MINOR_REMOTE_HFPD_CFG 0x2624 
#define MINOR_REMOTE_FACE_CONTRAST_TASK 0x2625 
#define MINOR_REMOTE_LFPD_CFG 0x2626 
#define MINOR_REMOTE_IOTCFGFILE_INPUT 0x2627
#define MINOR_REMOTE_IOTCFGFILE_OUTPUT 0x2628
#define MINOR_LOCAL_IOT_ADD 0x2629
#define MINOR_REMOTE_IOT_ADD 0x262a
#define MINOR_LOCAL_IOT_DEL 0x262b
#define MINOR_REMOTE_IOT_DEL 0x262c
#define MINOR_LOCAL_IOT_SET 0x262d
#define MINOR_REMOTE_IOT_SET 0x262e
#define MINOR_LOCAL_IOTCFGFILE_INPUT 0x262f
#define MINOR_LOCAL_IOTCFGFILE_OUTPUT 0x2630
#define MINOR_LOCAL_VAD_CFG 0x2631 
#define MINOR_REMOTE_VAD_CFG 0x2632 
#define MINOR_LOCAL_ADDRESS_FILTER_CONFIG 0x2633 
#define MINOR_REMOTE_ADDRESS_FILTER_CONFIG 0x2634 
#define MINOR_LOCAL_POE_CFG 0x2635 
#define MINOR_REMOTE_POE_CFG 0x2636 
#define MINOR_LOCAL_RESET_CHANNEL_PASSWORD 0x2637 
#define MINOR_REMOTE_RESET_CHANNEL_PASSWORD 0x2638 
#define MINOR_LOCAL_SSD_UPGRADE_START 0x2639 
#define MINOR_LOCAL_SSD_UPGRADE_STOP 0x2640 
#define MINOR_REMOTE_SSD_UPGRADE_START 0x2641 
#define MINOR_REMOTE_SSD_UPGRADE_STOP 0x2642 
#define MINOR_LOCAL_SSD_FORMAT_START 0x2643 
#define MINOR_LOCAL_SSD_FORMAT_STOP 0x2644 
#define MINOR_REMOTE_SSD_FORMAT_START 0x2645 
#define MINOR_REMOTE_SSD_FORMAT_STOP 0x2646 
#define MINOR_LOCAL_AUTO_SWITCH_CONFIG 0x2647 
#define MINOR_REMOTE_AUTO_SWITCH_CONFIG 0x2648 
#define MINOR_LOCAL_SSD_INITIALIZATION_START 0x264a 
#define MINOR_LOCAL_SSD_INITIALIZATION_END 0x264b 
#define MINOR_REMOTE_SSD_INITIALIZATION_START 0x264c 
#define MINOR_REMOTE_SSD_INITIALIZATION_END 0x264d 
#define MINOR_REMOTE_AI_MODEL_ADD 0x2650
#define MINOR_REMOTE_AI_MODEL_QUERY 0x2651
#define MINOR_REMOTE_AI_MODEL_DELETE 0x2652
#define MINOR_REMOTE_AI_MODEL_UPDATE 0x2653
#define MINOR_REMOTE_AI_PICTURE_POLLING_TASK_ADD 0x2654
#define MINOR_REMOTE_AI_PICTURE_POLLING_TASK_QUERY 0x2655
#define MINOR_REMOTE_AI_PICTURE_POLLING_TASK_DELETE 0x2656
#define MINOR_REMOTE_AI_PICTURE_POLLING_TASK_MODIFY 0x2657
#define MINOR_REMOTE_AI_VIDEO_POLLING_TASK_ADD 0x2658
#define MINOR_REMOTE_AI_VIDEO_POLLING_TASK_QUERY 0x2659
#define MINOR_REMOTE_AI_VIDEO_POLLING_TASK_DELETE 0x265A
#define MINOR_REMOTE_AI_VIDEO_POLLING_TASK_MODIFY 0x265B
#define MINOR_REMOTE_AI_PICTURE_TASK_ADD 0x265C
#define MINOR_REMOTE_AI_PICTURE_TASK_QUERY 0x265D
#define MINOR_REMOTE_AI_PICTURE_TASK_DELETE 0x265E
#define MINOR_REMOTE_AI_PICTURE_TASK_MODIFY 0x265F
#define MINOR_REMOTE_AI_VIDEO_TASK_ADD 0x2660
#define MINOR_REMOTE_AI_VIDEO_TASK_QUERY 0x2661
#define MINOR_REMOTE_AI_VIDEO_TASK_DELETE 0x2662
#define MINOR_REMOTE_AI_VIDEO_TASK_MODIFY 0x2663
#define MINOR_REMOTE_AI_RULE_CONFIG 0x2664
#define MINOR_STOP_SOUND 0x2700 
#define MINOR_SELF_CHECK 0x2701 
#define MINOR_DUTY_CHECK 0x2702 
#define MINOR_SWITCH_SIMPLE_WORKMODE 0x2703 
#define MINOR_SWITCH_NORMAL_WORKMODE 0x2704 
#define MAJOR_INFORMATION 0x4 
#define MINOR_HDD_INFO 0xa1 
#define MINOR_SMART_INFO 0xa2 
#define MINOR_REC_START 0xa3 
#define MINOR_REC_STOP 0xa4 
#define MINOR_REC_OVERDUE 0xa5 
#define MINOR_LINK_START 0xa6
#define MINOR_LINK_STOP 0xa7
#define MINOR_NET_DISK_INFO 0xa8
#define MINOR_RAID_INFO 0xa9
#define MINOR_RUN_STATUS_INFO 0xaa 
#define MINOR_SPARE_START_BACKUP 0xab 
#define MINOR_SPARE_STOP_BACKUP 0xac 
#define MINOR_SPARE_CLIENT_INFO 0xad 
#define MINOR_ANR_RECORD_START 0xae 
#define MINOR_ANR_RECORD_END 0xaf 
#define MINOR_ANR_ADD_TIME_QUANTUM 0xb0 
#define MINOR_ANR_DEL_TIME_QUANTUM 0xb1 
#define MINOR_PIC_REC_START 0xb3 
#define MINOR_PIC_REC_STOP 0xb4 
#define MINOR_PIC_REC_OVERDUE 0xb5 
#define MINOR_CLIENT_LOGIN 0xb6 
#define MINOR_CLIENT_RELOGIN 0xb7 
#define MINOR_CLIENT_LOGOUT 0xb8 
#define MINOR_CLIENT_SYNC_START 0xb9 
#define MINOR_CLIENT_SYNC_STOP 0xba 
#define MINOR_CLIENT_SYNC_SUCC 0xbb 
#define MINOR_CLIENT_SYNC_EXCP 0xbc 
#define MINOR_GLOBAL_RECORD_ERR_INFO 0xbd 
#define MINOR_BUFFER_STATE 0xbe 
#define MINOR_DISK_ERRORINFO_V2 0xbf 
#define MINOR_CS_DATA_EXPIRED 0xc0 
#define MINOR_PLAT_INFO 0xc1 
#define MINOR_DIAL_STAT 0xc2 
#define MINOR_UNLOCK_RECORD 0xc3 
#define MINOR_VIS_ALARM 0xc4 
#define MINOR_TALK_RECORD 0xc5 
#define MINOR_ACCESSORIES_MESSAGE 0xc6
#define MINOR_KMS_EXPAMSION_DISK_INSERT 0xc7
#define MINOR_IPC_CONNECT 0xc8
#define MINOR_INTELLIGENT_BOARD_STATUS 0xc9
#define MINOR_IPC_CONNECT_STATUS 0xca
#define MINOR_AUTO_TIMING 0xcb 
#define MINOR_EZVIZ_OPERATION 0xcc 
#define MINOR_CLUSTER_DEVICE_ONLINE 0xcd 
#define MINOR_CLUSTER_MGR_SERVICE_STARTUP 0xce 
#define MINOR_CLUSTER_BUSINESS_TRANSFER 0xcf 
#define MINOR_CLUSTER_STATUS 0xd0 
#define MINOR_CLUSTER_CS_STATUS 0xd1 
#define MINOR_CLUSTER_CM_STATUS 0xd2 
#define MINOR_VOICE_START_DETECTED 0xd3 
#define MINOR_VOICE_END_DETECTED 0xd4 
#define MINOR_DOUBLE_VERIFICATION_PASS 0xd5 
#define MINOR_WIRELESS_RUNNING_STATUS 0xd6 
#define MINOR_SYSTEM_DATA_SYNCHRONIZATION 0xd7 
#define MINOR_HD_FORMAT_START 0xd8 
#define MINOR_HD_FORMAT_STOP 0xd9 
#define MINOR_LIVE_DETECT_OPEN 0x400 
#define MINOR_LIVE_DETECT_CLOSE 0x401 
#define MINOR_CLEAR_DATA_COLLECTION 0x402 
#define MINOR_DELETE_DATA_COLLECTION 0x403 
#define MINOR_EXPORT_DATA_COLLECTION 0x404 
#define MINOR_CARD_LEN_CONFIG 0x405 
#define MINOR_DATA_BASE_INIT_FAILED 0x406 
#define MINOR_DATA_BASE_PATCH_UPDATE 0x407 
#define MINOR_PSAM_CARD_INSERT 0x408 
#define MINOR_PSAM_CARD_REMOVE 0x409 
#define MINOR_HARD_FAULT_REBOOT 0x40a 
#define MINOR_PSAM_CARD_OCP 0x40b 
#define MINOR_STACK_OVERFLOW 0x40c 
#define MINOR_PARM_CFG 0x40d 
#define MAJOR_EVENT 0x5 
#define MINOR_LEGAL_CARD_PASS 0x01 
#define MINOR_CARD_AND_PSW_PASS 0x02 
#define MINOR_CARD_AND_PSW_FAIL 0x03 
#define MINOR_CARD_AND_PSW_TIMEOUT 0x04 
#define MINOR_CARD_AND_PSW_OVER_TIME 0x05 
#define MINOR_CARD_NO_RIGHT 0x06 
#define MINOR_CARD_INVALID_PERIOD 0x07 
#define MINOR_CARD_OUT_OF_DATE 0x08 
#define MINOR_INVALID_CARD 0x09 
#define MINOR_ANTI_SNEAK_FAIL 0x0a 
#define MINOR_INTERLOCK_DOOR_NOT_CLOSE 0x0b 
#define MINOR_NOT_BELONG_MULTI_GROUP 0x0c 
#define MINOR_INVALID_MULTI_VERIFY_PERIOD 0x0d 
#define MINOR_MULTI_VERIFY_SUPER_RIGHT_FAIL 0x0e 
#define MINOR_MULTI_VERIFY_REMOTE_RIGHT_FAIL 0x0f 
#define MINOR_MULTI_VERIFY_SUCCESS 0x10 
#define MINOR_LEADER_CARD_OPEN_BEGIN 0x11 
#define MINOR_LEADER_CARD_OPEN_END 0x12 
#define MINOR_ALWAYS_OPEN_BEGIN 0x13 
#define MINOR_ALWAYS_OPEN_END 0x14 
#define MINOR_LOCK_OPEN 0x15 
#define MINOR_LOCK_CLOSE 0x16 
#define MINOR_DOOR_BUTTON_PRESS 0x17 
#define MINOR_DOOR_BUTTON_RELEASE 0x18 
#define MINOR_DOOR_OPEN_NORMAL 0x19 
#define MINOR_DOOR_CLOSE_NORMAL 0x1a 
#define MINOR_DOOR_OPEN_ABNORMAL 0x1b 
#define MINOR_DOOR_OPEN_TIMEOUT 0x1c 
#define MINOR_ALARMOUT_ON 0x1d 
#define MINOR_ALARMOUT_OFF 0x1e 
#define MINOR_ALWAYS_CLOSE_BEGIN 0x1f 
#define MINOR_ALWAYS_CLOSE_END 0x20 
#define MINOR_MULTI_VERIFY_NEED_REMOTE_OPEN 0x21 
#define MINOR_MULTI_VERIFY_SUPERPASSWD_VERIFY_SUCCESS 0x22 
#define MINOR_MULTI_VERIFY_REPEAT_VERIFY 0x23 
#define MINOR_MULTI_VERIFY_TIMEOUT 0x24 
#define MINOR_DOORBELL_RINGING 0x25 
#define MINOR_FINGERPRINT_COMPARE_PASS 0x26 
#define MINOR_FINGERPRINT_COMPARE_FAIL 0x27 
#define MINOR_CARD_FINGERPRINT_VERIFY_PASS 0x28 
#define MINOR_CARD_FINGERPRINT_VERIFY_FAIL 0x29 
#define MINOR_CARD_FINGERPRINT_VERIFY_TIMEOUT 0x2a 
#define MINOR_CARD_FINGERPRINT_PASSWD_VERIFY_PASS 0x2b 
#define MINOR_CARD_FINGERPRINT_PASSWD_VERIFY_FAIL 0x2c 
#define MINOR_CARD_FINGERPRINT_PASSWD_VERIFY_TIMEOUT 0x2d 
#define MINOR_FINGERPRINT_PASSWD_VERIFY_PASS 0x2e 
#define MINOR_FINGERPRINT_PASSWD_VERIFY_FAIL 0x2f 
#define MINOR_FINGERPRINT_PASSWD_VERIFY_TIMEOUT 0x30 
#define MINOR_FINGERPRINT_INEXISTENCE 0x31 
#define MINOR_CARD_PLATFORM_VERIFY 0x32 
#define MINOR_CALL_CENTER 0x33 
#define MINOR_FIRE_RELAY_TURN_ON_DOOR_ALWAYS_OPEN 0x34 
#define MINOR_FIRE_RELAY_RECOVER_DOOR_RECOVER_NORMAL 0x35 
#define MINOR_FACE_AND_FP_VERIFY_PASS 0x36 
#define MINOR_FACE_AND_FP_VERIFY_FAIL 0x37 
#define MINOR_FACE_AND_FP_VERIFY_TIMEOUT 0x38 
#define MINOR_FACE_AND_PW_VERIFY_PASS 0x39 
#define MINOR_FACE_AND_PW_VERIFY_FAIL 0x3a 
#define MINOR_FACE_AND_PW_VERIFY_TIMEOUT 0x3b 
#define MINOR_FACE_AND_CARD_VERIFY_PASS 0x3c 
#define MINOR_FACE_AND_CARD_VERIFY_FAIL 0x3d 
#define MINOR_FACE_AND_CARD_VERIFY_TIMEOUT 0x3e 
#define MINOR_FACE_AND_PW_AND_FP_VERIFY_PASS 0x3f 
#define MINOR_FACE_AND_PW_AND_FP_VERIFY_FAIL 0x40 
#define MINOR_FACE_AND_PW_AND_FP_VERIFY_TIMEOUT 0x41 
#define MINOR_FACE_CARD_AND_FP_VERIFY_PASS 0x42 
#define MINOR_FACE_CARD_AND_FP_VERIFY_FAIL 0x43 
#define MINOR_FACE_CARD_AND_FP_VERIFY_TIMEOUT 0x44 
#define MINOR_EMPLOYEENO_AND_FP_VERIFY_PASS 0x45 
#define MINOR_EMPLOYEENO_AND_FP_VERIFY_FAIL 0x46 
#define MINOR_EMPLOYEENO_AND_FP_VERIFY_TIMEOUT 0x47 
#define MINOR_EMPLOYEENO_AND_FP_AND_PW_VERIFY_PASS 0x48 
#define MINOR_EMPLOYEENO_AND_FP_AND_PW_VERIFY_FAIL 0x49 
#define MINOR_EMPLOYEENO_AND_FP_AND_PW_VERIFY_TIMEOUT 0x4a 
#define MINOR_FACE_VERIFY_PASS 0x4b 
#define MINOR_FACE_VERIFY_FAIL 0x4c 
#define MINOR_EMPLOYEENO_AND_FACE_VERIFY_PASS 0x4d 
#define MINOR_EMPLOYEENO_AND_FACE_VERIFY_FAIL 0x4e 
#define MINOR_EMPLOYEENO_AND_FACE_VERIFY_TIMEOUT 0x4f 
#define MINOR_FACE_RECOGNIZE_FAIL 0x50 
#define MINOR_FIRSTCARD_AUTHORIZE_BEGIN 0x51 
#define MINOR_FIRSTCARD_AUTHORIZE_END 0x52 
#define MINOR_DOORLOCK_INPUT_SHORT_CIRCUIT 0x53 
#define MINOR_DOORLOCK_INPUT_BROKEN_CIRCUIT 0x54 
#define MINOR_DOORLOCK_INPUT_EXCEPTION 0x55 
#define MINOR_DOORCONTACT_INPUT_SHORT_CIRCUIT 0x56 
#define MINOR_DOORCONTACT_INPUT_BROKEN_CIRCUIT 0x57 
#define MINOR_DOORCONTACT_INPUT_EXCEPTION 0x58 
#define MINOR_OPENBUTTON_INPUT_SHORT_CIRCUIT 0x59 
#define MINOR_OPENBUTTON_INPUT_BROKEN_CIRCUIT 0x5a 
#define MINOR_OPENBUTTON_INPUT_EXCEPTION 0x5b 
#define MINOR_DOORLOCK_OPEN_EXCEPTION 0x5c 
#define MINOR_DOORLOCK_OPEN_TIMEOUT 0x5d 
#define MINOR_FIRSTCARD_OPEN_WITHOUT_AUTHORIZE 0x5e 
#define MINOR_CALL_LADDER_RELAY_BREAK 0x5f 
#define MINOR_CALL_LADDER_RELAY_CLOSE 0x60 
#define MINOR_AUTO_KEY_RELAY_BREAK 0x61 
#define MINOR_AUTO_KEY_RELAY_CLOSE 0x62 
#define MINOR_KEY_CONTROL_RELAY_BREAK 0x63 
#define MINOR_KEY_CONTROL_RELAY_CLOSE 0x64 
#define MINOR_EMPLOYEENO_AND_PW_PASS 0x65 
#define MINOR_EMPLOYEENO_AND_PW_FAIL 0x66 
#define MINOR_EMPLOYEENO_AND_PW_TIMEOUT 0x67 
#define MINOR_HUMAN_DETECT_FAIL 0x68 
#define MINOR_PEOPLE_AND_ID_CARD_COMPARE_PASS 0x69 
#define MINOR_PEOPLE_AND_ID_CARD_COMPARE_FAIL 0x70 
#define MINOR_CERTIFICATE_BLACK_LIST 0x71 
#define MINOR_LEGAL_MESSAGE 0x72 
#define MINOR_ILLEGAL_MESSAGE 0x73 
#define MINOR_DOOR_OPEN_OR_DORMANT_FAIL 0x75 
#define MINOR_AUTH_PLAN_DORMANT_FAIL 0x76 
#define MINOR_CARD_ENCRYPT_VERIFY_FAIL 0x77 
#define MINOR_SUBMARINEBACK_REPLY_FAIL 0x78 
#define MINOR_DOOR_OPEN_OR_DORMANT_OPEN_FAIL 0x82 
#define MINOR_HEART_BEAT 0x83 
#define MINOR_DOOR_OPEN_OR_DORMANT_LINKAGE_OPEN_FAIL 0x84 
#define MINOR_TRAILING 0x85 
#define MINOR_REVERSE_ACCESS 0x86 
#define MINOR_FORCE_ACCESS 0x87 
#define MINOR_CLIMBING_OVER_GATE 0x88 
#define MINOR_PASSING_TIMEOUT 0x89 
#define MINOR_INTRUSION_ALARM 0x8a 
#define MINOR_FREE_GATE_PASS_NOT_AUTH 0x8b 
#define MINOR_DROP_ARM_BLOCK 0x8c 
#define MINOR_DROP_ARM_BLOCK_RESUME 0x8d 
#define MINOR_LOCAL_FACE_MODELING_FAIL 0x8e 
#define MINOR_STAY_EVENT 0x8f 
#define MINOR_PASSWORD_MISMATCH 0x97 
#define MINOR_EMPLOYEE_NO_NOT_EXIST 0x98 
#define MINOR_COMBINED_VERIFY_PASS 0x99 
#define MINOR_COMBINED_VERIFY_TIMEOUT 0x9a 
#define MINOR_VERIFY_MODE_MISMATCH 0x9b 
#define MINOR_PASSPORT_VERIFY_FAIL 0xa1 
#define MINOR_INFORMAL_MIFARE_CARD_VERIFY_FAIL 0xa2 
#define MINOR_CPU_CARD_ENCRYPT_VERIFY_FAIL 0xa3 
#define MINOR_NFC_DISABLE_VERIFY_FAIL 0xa4 
#define MINOR_LORA_MODULE_ONLINE 0xa5 
#define MINOR_LORA_MODULE_OFFLINE 0xa6 
#define MINOR_MQTT_STATUS 0xa7 
#define MINOR_EM_CARD_RECOGNIZE_NOT_ENABLED 0xa8 
#define MINOR_M1_CARD_RECOGNIZE_NOT_ENABLED 0xa9 
#define MINOR_CPU_CARD_RECOGNIZE_NOT_ENABLED 0xaa 
#define MINOR_ID_CARD_RECOGNIZE_NOT_ENABLED 0xab 
#define MINOR_CARD_SET_SECRET_KEY_FAIL 0xac 
#define MINOR_LOCAL_UPGRADE_FAIL 0xad 
#define MINOR_REMOTE_UPGRADE_FAIL 0xae 
#define MINOR_REMOTE_EXTEND_MODULE_UPGRADE_SUCC 0xaf 
#define MINOR_REMOTE_EXTEND_MODULE_UPGRADE_FAIL 0xb0 
#define MINOR_REMOTE_FINGER_PRINT_MODULE_UPGRADE_SUCC 0xb1 
#define MINOR_REMOTE_FINGER_PRINT_MODULE_UPGRADE_FAIL 0xb2 
#define MINOR_EVENT_CUSTOM1 0x500 
#define MINOR_EVENT_CUSTOM2 0x501 
#define MINOR_EVENT_CUSTOM3 0x502 
#define MINOR_EVENT_CUSTOM4 0x503 
#define MINOR_EVENT_CUSTOM5 0x504 
#define MINOR_EVENT_CUSTOM6 0x505 
#define MINOR_EVENT_CUSTOM7 0x506 
#define MINOR_EVENT_CUSTOM8 0x507 
#define MINOR_EVENT_CUSTOM9 0x508 
#define MINOR_EVENT_CUSTOM10 0x509 
#define MINOR_EVENT_CUSTOM11 0x50a 
#define MINOR_EVENT_CUSTOM12 0x50b 
#define MINOR_EVENT_CUSTOM13 0x50c 
#define MINOR_EVENT_CUSTOM14 0x50d 
#define MINOR_EVENT_CUSTOM15 0x50e 
#define MINOR_EVENT_CUSTOM16 0x50f 
#define MINOR_EVENT_CUSTOM17 0x510 
#define MINOR_EVENT_CUSTOM18 0x511 
#define MINOR_EVENT_CUSTOM19 0x512 
#define MINOR_EVENT_CUSTOM20 0x513 
#define MINOR_EVENT_CUSTOM21 0x514 
#define MINOR_EVENT_CUSTOM22 0x515 
#define MINOR_EVENT_CUSTOM23 0x516 
#define MINOR_EVENT_CUSTOM24 0x517 
#define MINOR_EVENT_CUSTOM25 0x518 
#define MINOR_EVENT_CUSTOM26 0x519 
#define MINOR_EVENT_CUSTOM27 0x51a 
#define MINOR_EVENT_CUSTOM28 0x51b 
#define MINOR_EVENT_CUSTOM29 0x51c 
#define MINOR_EVENT_CUSTOM30 0x51d 
#define MINOR_EVENT_CUSTOM31 0x51e 
#define MINOR_EVENT_CUSTOM32 0x51f 
#define MINOR_EVENT_CUSTOM33 0x520 
#define MINOR_EVENT_CUSTOM34 0x521 
#define MINOR_EVENT_CUSTOM35 0x522 
#define MINOR_EVENT_CUSTOM36 0x523 
#define MINOR_EVENT_CUSTOM37 0x524 
#define MINOR_EVENT_CUSTOM38 0x525 
#define MINOR_EVENT_CUSTOM39 0x526 
#define MINOR_EVENT_CUSTOM40 0x527 
#define MINOR_EVENT_CUSTOM41 0x528 
#define MINOR_EVENT_CUSTOM42 0x529 
#define MINOR_EVENT_CUSTOM43 0x52a 
#define MINOR_EVENT_CUSTOM44 0x52b 
#define MINOR_EVENT_CUSTOM45 0x52c 
#define MINOR_EVENT_CUSTOM46 0x52d 
#define MINOR_EVENT_CUSTOM47 0x52e 
#define MINOR_EVENT_CUSTOM48 0x52f 
#define MINOR_EVENT_CUSTOM49 0x530 
#define MINOR_EVENT_CUSTOM50 0x531 
#define MINOR_EVENT_CUSTOM51 0x532 
#define MINOR_EVENT_CUSTOM52 0x533 
#define MINOR_EVENT_CUSTOM53 0x534 
#define MINOR_EVENT_CUSTOM54 0x535 
#define MINOR_EVENT_CUSTOM55 0x536 
#define MINOR_EVENT_CUSTOM56 0x537 
#define MINOR_EVENT_CUSTOM57 0x538 
#define MINOR_EVENT_CUSTOM58 0x539 
#define MINOR_EVENT_CUSTOM59 0x53a 
#define MINOR_EVENT_CUSTOM60 0x53b 
#define MINOR_EVENT_CUSTOM61 0x53c 
#define MINOR_EVENT_CUSTOM62 0x53d 
#define MINOR_EVENT_CUSTOM63 0x53e 
#define MINOR_EVENT_CUSTOM64 0x53f 
#define MINOR_LOCK_FINGER_OPEN_DOOR 0x600 
#define MINOR_LOCK_PASSWORD_OPEN_DOOR 0x601 
#define MINOR_LOCK_CARD_OPEN_DOOR 0x602 
#define MINOR_LOCK_CENTER_OPEN_DOOR 0x603 
#define MINOR_LOCK_APP_OPEN_DOOR 0x604 
#define MINOR_LOCK_KEY_OPEN_DOOR 0x605 
#define MINOR_LOCK_REMOTE_DEVICE_OPEN_DOOR 0x606 
#define MINOR_LOCK_TMP_PASSWORD_OPEN_DOOR 0x607 
#define MINOR_LOCK_BLUETOOTH_OPEN_DOOR 0x608 
#define MINOR_LOCK_MULTI_OPEN_DOOR 0x609
#define MINOR_ALARMHOST_SCHOOLTIME_IRGI_B 0x1001 
#define MINOR_ALARMHOST_SCHOOLTIME_SDK 0x1002 
#define MINOR_ALARMHOST_SCHOOLTIME_SELFTEST 0x1003 
#define MINOR_ALARMHOST_SUBSYSTEM_ABNORMALINSERT 0x1004 
#define MINOR_ALARMHOST_SUBSYSTEM_ABNORMALPULLOUT 0x1005 
#define MINOR_ALARMHOST_AUTO_ARM 0x1006 
#define MINOR_ALARMHOST_AUTO_DISARM 0x1007 
#define MINOR_ALARMHOST_TIME_TIGGER_ON 0x1008 
#define MINOR_ALARMHOST_TIME_TIGGER_OFF 0x1009 
#define MINOR_ALARMHOST_AUTO_ARM_FAILD 0x100a 
#define MINOR_ALARMHOST_AUTO_DISARM_FAILD 0x100b 
#define MINOR_ALARMHOST_TIME_TIGGER_ON_FAILD 0x100c 
#define MINOR_ALARMHOST_TIME_TIGGER_OFF_FAILD 0x100d 
#define MINOR_ALARMHOST_MANDATORY_ALARM 0x100e 
#define MINOR_ALARMHOST_KEYPAD_LOCKED 0x100f 
#define MINOR_ALARMHOST_USB_INSERT 0x1010 
#define MINOR_ALARMHOST_USB_PULLOUT 0x1011
#define MINOR_ALARMHOST_4G_MODULS_ONLINE 0x1012 
#define MINOR_ALARMHOST_4G_MODULS_OFFLINE 0x1013 
#define MINOR_EZVIZ_CLOUD_ONLINE 0x1014 
#define MINOR_EZVIZ_CLOUD_OFFLINE 0x1015 
#define MINOR_SIPUA_GRID_ONLINE 0x1016 
#define MINOR_SIPUA_GRID_OFFLINE 0x1017 
#define MINOR_INTERNET_ACCESS_CONNECTED 0x1018 
#define MINOR_INTERNET_ACCESS_BREAK 0x1019 
#define MINOR_WIRELESS_CONNECTED 0x101a 
#define MINOR_WIRELESS_BREAK 0x101b 
#define MINOR_PORT_LINK_DOWN 0x101c 
#define MINOR_PORT_LINK_UP 0x101d 
#define MINOR_POE_PORT_POWER_ON 0x101e 
#define MINOR_POE_PORT_POWER_OFF 0x101f 
#define MINOR_POE_TOTAL_POWER_MAX 0x1020 
#define MINNOR_POE_TOTAL_POWER_RESUME 0x1021 
typedef enum tagALARMHOST_MAJOR_TYPE
{
 MAJOR_ALARMHOST_ALARM = 1,
 MAJOR_ALARMHOST_EXCEPTION,
 MAJOR_ALARMHOST_OPERATION,
 MAJ0R_ALARMHOST_EVENT
}ALARMHOST_MAJOR_TYPE;
typedef enum tagALARMHOST_MINOR_TYPE
{
 MINOR_SHORT_CIRCUIT =0x01, MINOR_BROKEN_CIRCUIT, MINOR_ALARM_RESET, MINOR_ALARM_NORMAL, MINOR_PASSWORD_ERROR, MINOR_ID_CARD_ILLEGALLY, MINOR_KEYPAD_REMOVE, MINOR_KEYPAD_REMOVE_RESTORE, MINOR_DEV_REMOVE, MINOR_DEV_REMOVE_RESTORE, MINOR_BELOW_ALARM_LIMIT1, MINOR_BELOW_ALARM_LIMIT2, MINOR_BELOW_ALARM_LIMIT3, MINOR_BELOW_ALARM_LIMIT4, MINOR_ABOVE_ALARM_LIMIT1, MINOR_ABOVE_ALARM_LIMIT2, MINOR_ABOVE_ALARM_LIMIT3, MINOR_ABOVE_ALARM_LIMIT4, MINOR_URGENCYBTN_ON, MINOR_URGENCYBTN_OFF, MINOR_VIRTUAL_DEFENCE_BANDIT, MINOR_VIRTUAL_DEFENCE_FIRE, MINOR_VIRTUAL_DEFENCE_URGENT, MINOR_ALARMHOST_MOTDET_START, MINOR_ALARMHOST_MOTDET_STOP, MINOR_ALARMHOST_HIDE_ALARM_START, MINOR_ALARMHOST_HIDE_ALARM_STOP, MINOR_ALARMHOST_UPS_ALARM, MINOR_ALARMHOST_ELECTRICITY_METER_ALARM, MINOR_ALARMHOST_SWITCH_POWER_ALARM, MINOR_ALARMHOST_GAS_DETECT_SYS_ALARM, MINOR_ALARMHOST_TRANSFORMER_TEMPRATURE_ALARM, MINOR_ALARMHOST_TEMP_HUMI_ALARM, MINOR_ALARMHOST_UPS_ALARM_RESTORE, MINOR_ALARMHOST_ELECTRICITY_METER_ALARM_RESTORE, MINOR_ALARMHOST_SWITCH_POWER_ALARM_RESTORE, MINOR_ALARMHOST_GAS_DETECT_SYS_ALARM_RESTORE, MINOR_ALARMHOST_TRANSFORMER_TEMPRATURE_ALARM_RESTORE, MINOR_ALARMHOST_TEMP_HUMI_ALARM_RESTORE, MINOR_ALARMHOST_WATER_LEVEL_SENSOR_ALARM, MINOR_ALARMHOST_WATER_LEVEL_SENSOR_ALARM_RESTORE, MINOR_ALARMHOST_DUST_NOISE_ALARM, MINOR_ALARMHOST_DUST_NOISE_ALARM_RESTORE, MINOR_ALARMHOST_ENVIRONMENTAL_LOGGER_ALARM, MINOR_ALARMHOST_ENVIRONMENTAL_LOGGER_ALARM_RESTORE, 
 MINOR_ALARMHOST_TRIGGER_TAMPER, MINOR_ALARMHOST_TRIGGER_TAMPER_RESTORE, MINOR_ALARMHOST_EMERGENCY_CALL_HELP_ALARM, MINOR_ALARMHOST_EMERGENCY_CALL_HELP_ALARM_RESTORE, MINOR_ALARMHOST_CONSULTING_ALARM, MINOR_ALARMHOST_CONSULTING_ALARM_RESTORE, MINOR_ZONE_MODULE_REMOVE, MINOR_ZONE_MODULE_RESET, MINOR_ALARM_WIND_SPEED_ALARM, MINOR_ALARM_WIND_SPEED_ALARM_RESTORE, MINOR_ALARM_GENERATE_OUTPUT_ALARM, MINOR_ALARM_GENERATE_OUTPUT_RESTORE, MINOR_ALARM_SOAK_ALARM, MINOR_ALARM_SOAK_ALARM_RESTORE, MINOR_ALARM_SOLAR_POWER_ALARM, MINOR_ALARM_SOLAR_POWER_ALARM_RESTORE, MINOR_ALARM_SF6_ALARM, MINOR_ALARM_SF6_ALARM_RESTORE, MINOR_ALARM_WEIGHT_ALARM, MINOR_ALARM_WEIGHT_ALARM_RESTORE, MINOR_ALARM_WEATHER_ALARM, MINOR_ALARM_WEATHER_ALARM_RESTORE, MINOR_ALARM_FUEL_GAS_ALARM, MINOR_ALARM_FUEL_GAS_ALARM_RESTORE, MINOR_ALARM_FIRE_ALARM, MINOR_ALARM_FIRE_ALARM_RESTORE, MINOR_WIRELESS_OUTPUT_MODULE_REMOVE, MINOR_WIRELESS_OUTPUT_MODULE_RESET, MINOR_WIRELESS_REPEATER_MODULE_REMOVE, MINOR_WIRELESS_REPEATER_MODULE_RESET, MINOR_WIRELESS_SIREN_MODULE_REMOVE, MINOR_WIRELESS_SIREN_MODULE_RESET, MINOR_SOUND_INTENSITY_RISE, MINOR_SOUND_INTENSITY_RISE_RESET, MINOR_SOUND_INTENSITY_DROP, MINOR_SOUND_INTENSITY_DROP_RESET, MINOR_AUDIO_INPUT_EXCEPTION, MINOR_AUDIO_INPUT_EXCEPTION_RESET, MINOR_POWER_ON = 0x01, MINOR_POWER_OFF, MINOR_WDT_RESET, MINOR_LOW_BATTERY_VOLTAGE, MINOR_AC_LOSS, MINOR_AC_RESTORE, MINOR_RTC_EXCEPTION, MINOR_NETWORK_CONNECT_FAILURE, MINOR_NETWORK_CONNECT_RESTORE, MINOR_TEL_LINE_CONNECT_FAILURE, MINOR_TEL_LINE_CONNECT_RESTORE, MINOR_EXPANDER_BUS_LOSS, MINOR_EXPANDER_BUS_RESTORE, MINOR_KEYPAD_BUS_LOSS, MINOR_KEYPAD_BUS_RESTORE, MINOR_SENSOR_FAILURE, MINOR_SENSOR_RESTORE, MINOR_RS485_CONNECT_FAILURE, MINOR_RS485_CONNECT_RESTORE, MINOR_BATTERT_VOLTAGE_RESTORE, MINOR_WIRED_NETWORK_ABNORMAL, MINOR_WIRED_NETWORK_RESTORE, MINOR_GPRS_ABNORMAL, MINOR_GPRS_RESTORE, MINOR_3G_ABNORMAL, MINOR_3G_RESTORE, MINOR_SIM_CARD_ABNORMAL, MINOR_SIM_CARD_RESTORE, MINOR_ALARMHOST_VI_LOST, MINOR_ALARMHOST_ILLEGAL_ACCESS, MINOR_ALARMHOST_HD_FULL, MINOR_ALARMHOST_HD_ERROR, MINOR_ALARMHOST_DCD_LOST, MINOR_ALARMHOST_IP_CONFLICT, MINOR_ALARMHOST_NET_BROKEN, MINOR_ALARMHOST_REC_ERROR, MINOR_ALARMHOST_VI_EXCEPTION, MINOR_ALARMHOST_FORMAT_HDD_ERROR, MINOR_ALARMHOST_USB_ERROR, MINOR_ALARMHOST_USB_RESTORE, MINOR_ALARMHOST_PRINT_ERROR, MINOR_ALARMHOST_PRINT_RESTORE, MINOR_SUBSYSTEM_COMMUNICATION_ERROR, MINOR_ALARMHOST_IPC_NO_LINK, 
 MINOR_ALARMHOST_IPC_IP_CONFLICT, 
 MINOR_ALARMHOST_VI_MISMATCH, 
 MINOR_ALARMHOST_MCU_RESTART, MINOR_ALARMHOST_GPRS_MODULE_FAULT, MINOR_ALARMHOST_TELEPHONE_MODULE_FAULT, MINOR_ALARMHOST_WIFI_ABNORMAL, MINOR_ALARMHOST_WIFI_RESTORE, MINOR_ALARMHOST_RF_ABNORMAL, MINOR_ALARMHOST_RF_RESTORE, MINOR_ALARMHOST_DETECTOR_ONLINE, MINOR_ALARMHOST_DETECTOR_OFFLINE, MINOR_ALARMHOST_DETECTOR_BATTERY_NORMAL, MINOR_ALARMHOST_DETECTOR_BATTERY_LOW, MINOR_ALARMHOST_DATA_TRAFFIC_OVERFLOW, MINOR_ZONE_MODULE_LOSS, MINOR_ZONE_MODULE_RESTORE, MINOR_ALARMHOST_WIRELESS_OUTPUT_LOSS, MINOR_ALARMHOST_WIRELESS_OUTPUT_RESTORE, MINOR_ALARMHOST_WIRELESS_REPEATER_LOSS, MINOR_ALARMHOST_WIRELESS_REPEATER_RESTORE, MINOR_TRIGGER_MODULE_LOSS, MINOR_TRIGGER_MODULE_RESTORE, MINOR_WIRELESS_SIREN_LOSS, MINOR_WIRELESS_SIREN_RESTORE, MINOR_ALARMHOST_WIRELESS_RS485_LOSS, MINOR_ALARMHOST_WIRELESS_RS485_RESTORE, MINOR_GUARD = 0x01, MINOR_UNGUARD, MINOR_BYPASS, MINOR_DURESS_ACCESS, MINOR_ALARMHOST_LOCAL_REBOOT, MINOR_ALARMHOST_REMOTE_REBOOT, MINOR_ALARMHOST_LOCAL_UPGRADE, MINOR_ALARMHOST_REMOTE_UPGRADE, MINOR_RECOVERY_DEFAULT_PARAM, MINOR_ALARM_OUTPUT, MINOR_ACCESS_OPEN, MINOR_ACCESS_CLOSE, MINOR_SIREN_OPEN, MINOR_SIREN_CLOSE, MINOR_MOD_ZONE_CONFIG, MINOR_MOD_ALARMOUT_CONIFG, MINOR_MOD_ANALOG_CONFIG, MINOR_RS485_CONFIG, MINOR_PHONE_CONFIG, MINOR_ADD_ADMIN, MINOR_MOD_ADMIN_PARAM, MINOR_DEL_ADMIN, MINOR_ADD_NETUSER, MINOR_MOD_NETUSER_PARAM, MINOR_DEL_NETUSER, MINOR_ADD_OPERATORUSER, MINOR_MOD_OPERATORUSER_PW, MINOR_DEL_OPERATORUSER, MINOR_ADD_KEYPADUSER, MINOR_DEL_KEYPADUSER, MINOR_REMOTEUSER_LOGIN, MINOR_REMOTEUSER_LOGOUT, MINOR_REMOTE_GUARD, MINOR_REMOTE_UNGUARD, MINOR_MOD_HOST_CONFIG, MINOR_RESTORE_BYPASS, MINOR_ALARMOUT_OPEN, MINOR_ALARMOUT_CLOSE, MINOR_MOD_SUBSYSTEM_PARAM, MINOR_GROUP_BYPASS, MINOR_RESTORE_GROUP_BYPASS, MINOR_MOD_GRPS_PARAM, MINOR_MOD_NET_REPORT_PARAM, MINOR_MOD_REPORT_MOD, MINOR_MOD_GATEWAY_PARAM, MINOR_ALARMHOST_REMOTE_START_REC, MINOR_ALARMHOST_REMOTE_STOP_REC, MINOR_ALARMHOST_START_TRANS_CHAN, MINOR_ALARMHOST_STOP_TRANS_CHAN, MINOR_ALARMHOST_START_VT, MINOR_ALARMHOST_STOP_VTM, MINOR_ALARMHOST_REMOTE_PLAYBYFILE, MINOR_ALARMHOST_REMOTE_PLAYBYTIME, MINOR_ALARMHOST_REMOTE_PTZCTRL, MINOR_ALARMHOST_REMOTE_FORMAT_HDD, MINOR_ALARMHOST_REMOTE_LOCKFILE, MINOR_ALARMHOST_REMOTE_UNLOCKFILE, MINOR_ALARMHOST_REMOTE_CFGFILE_OUTPUT, MINOR_ALARMHOST_REMOTE_CFGFILE_INTPUT, MINOR_ALARMHOST_REMOTE_RECFILE_OUTPUT, 
 MINOR_ALARMHOST_STAY_ARM, MINOR_ALARMHOST_QUICK_ARM, MINOR_ALARMHOST_AUTOMATIC_ARM, MINOR_ALARMHOST_AUTOMATIC_DISARM, MINOR_ALARMHOST_KEYSWITCH_ARM, MINOR_ALARMHOST_KEYSWITCH_DISARM, MINOR_ALARMHOST_CLEAR_ALARM, MINOR_ALARMHOST_MOD_FAULT_CFG, MINOR_ALARMHOST_MOD_EVENT_TRIGGER_ALARMOUT_CFG, MINOR_ALARMHOST_SEARCH_EXTERNAL_MODULE, MINOR_ALARMHOST_REGISTER_EXTERNAL_MODULE, MINOR_ALARMHOST_CLOSE_KEYBOARD_ALARM, MINOR_ALARMHOST_MOD_3G_PARAM, MINOR_ALARMHOST_MOD_PRINT_PARAM, MINOR_SD_CARD_FORMAT, MINOR_SUBSYSTEM_UPGRADE, 
 MINOR_ALARMHOST_PLAN_ARM_CFG, MINOR_ALARMHOST_PHONE_ARM, MINOR_ALARMHOST_PHONE_STAY_ARM, MINOR_ALARMHOST_PHONE_QUICK_ARM, MINOR_ALARMHOST_PHONE_DISARM, MINOR_ALARMHOST_PHONE_CLEAR_ALARM, MINOR_ALARMHOST_WHITELIST_CFG, MINOR_ALARMHOST_TIME_TRIGGER_CFG, MINOR_ALARMHOST_CAPTRUE_CFG, MINOR_ALARMHOST_TAMPER_CFG, MINOR_ALARMHOST_REMOTE_KEYPAD_UPGRADE, MINOR_ALARMHOST_ONETOUCH_AWAY_ARMING, MINOR_ALARMHOST_ONETOUCH_STAY_ARMING, MINOR_ALARMHOST_SINGLE_PARTITION_ARMING_OR_DISARMING, MINOR_ALARMHOST_CARD_CONFIGURATION, MINOR_ALARMHOST_CARD_ARMING_OR_DISARMING, MINOR_ALARMHOST_EXPENDING_NETCENTER_CONFIGURATION, MINOR_ALARMHOST_NETCARD_CONFIGURATION, MINOR_ALARMHOST_DDNS_CONFIGURATION, MINOR_ALARMHOST_RS485BUS_CONFIGURATION, MINOR_ALARMHOST_RS485BUS_RE_REGISTRATION, MINOR_ALARMHOST_REMOTE_OPEN_ELECTRIC_LOCK, MINOR_ALARMHOST_REMOTE_CLOSE_ELECTRIC_LOCK, MINOR_ALARMHOST_LOCAL_OPEN_ELECTRIC_LOCK, MINOR_ALARMHOST_LOCAL_CLOSE_ELECTRIC_LOCK, MINOR_ALARMHOST_OPEN_ALARM_LAMP, MINOR_ALARMHOST_CLOSE_ALARM_LAMP, 
 MINOR_ALARMHOST_TEMPORARY_PASSWORD, MINOR_ALARMHOST_ONEKEY_AWAY_ARM, MINOR_ALARMHOST_ONEKEY_STAY_ARM, MINOR_ALARMHOST_SINGLE_ZONE_ARM, MINOR_ALARMHOST_SINGLE_ZONE_DISARM, MINOR_ALARMHOST_HIDDNS_CONFIG, MINOR_ALARMHOST_REMOTE_KEYBOARD_UPDATA, MINOR_ALARMHOST_ZONE_ADD_DETECTOR, MINOR_ALARMHOST_ZONE_DELETE_DETECTOR, MINOR_ALARMHOST_QUERY_DETECTOR_SIGNAL, MINOR_ALARMHOST_QUERY_DETECTOR_BATTERY, MINOR_ALARMHOST_SET_DETECTOR_GUARD, MINOR_ALARMHOST_SET_DETECTOR_UNGUARD, MINOR_ALARMHOST_SET_WIFI_PARAMETER, MINOR_ALARMHOST_OPEN_VOICE, MINOR_ALARMHOST_CLOSE_VOICE, MINOR_ALARMHOST_ENABLE_FUNCTION_KEY, MINOR_ALARMHOST_DISABLE_FUNCTION_KEY, MINOR_ALARMHOST_READ_CARD, MINOR_ALARMHOST_START_BROADCAST, MINOR_ALARMHOST_STOP_BROADCAST, MINOR_ALARMHOST_REMOTE_ZONE_MODULE_UPGRADE, MINOR_ALARMHOST_NETWORK_MODULE_EXTEND, MINOR_ALARMHOST_ADD_CONTROLLER,		 MINOR_ALARMHOST_DELETE_CONTORLLER,		 MINOR_ALARMHOST_REMOTE_NETWORKMODULE_UPGRADE, MINOR_ALARMHOST_WIRELESS_OUTPUT_ADD, MINOR_ALARMHOST_WIRELESS_OUTPUT_DEL, MINOR_ALARMHOST_WIRELESS_REPEATER_ADD, MINOR_ALARMHOST_WIRELESS_REPEATER_DEL, MINOR_ALARMHOST_PHONELIST_CFG, MINOR_ALARMHOST_RF_SIGNAL_CHECK, MINOR_ALARMHOST_USB_UPGRADE, MINOR_ALARMHOST_DOOR_TIME_REMINDER_CFG, MINOR_ALARMHOST_WIRELESS_SIREN_ADD, MINOR_ALARMHOST_WIRELESS_SIREN_DEL, MINOR_ALARMHOST_OUT_SCALE_OPEN, MINOR_ALARMHOST_OUT_SCALE_CLOSE, MINOR_ALARMHOST_LOCAL_SET_DEVICE_ACTIVE = 0xf0, MINOR_ALARMHOST_REMOTE_SET_DEVICE_ACTIVE = 0xf1, MINOR_ALARMHOST_LOCAL_PARA_FACTORY_DEFAULT = 0xf2, MINOR_ALARMHOST_REMOTE_PARA_FACTORY_DEFAULT = 0xf3, MINOR_ADD_IPC = 0xf4, MINOR_MODIFY_IPC = 0xf5, MINOR_DELETE_IPC = 0xf6, MINOR_SYS_CHECK_START = 0xf7, MINOR_SYS_CHECK_STOP = 0xf8, MINOR_SYS_CHECK_FINISH = 0xf9, MINOR_SCHOOLTIME_IRGI_B = 0x01, MINOR_SCHOOLTIME_SDK, MINOR_SCHOOLTIME_SELFTEST, MINOR_SUBSYSTEM_ABNORMALINSERT, MINOR_SUBSYSTEM_ABNORMALPULLOUT, 
 MINOR_AUTO_ARM, MINOR_AUTO_DISARM, MINOR_TIME_TIGGER_ON, MINOR_TIME_TIGGER_OFF, MINOR_AUTO_ARM_FAILD, MINOR_AUTO_DISARM_FAILD, MINOR_TIME_TIGGER_ON_FAILD, MINOR_TIME_TIGGER_OFF_FAILD, MINOR_MANDATORY_ALARM, MINOR_KEYPAD_LOCKED, MINOR_USB_INSERT, MINOR_USB_PULLOUT, }ALARMHOST_MINOR_TYPE;
#define PARA_VIDEOOUT 0x1
#define PARA_IMAGE 0x2
#define PARA_ENCODE 0x4
#define PARA_NETWORK 0x8
#define PARA_ALARM 0x10
#define PARA_EXCEPTION 0x20
#define PARA_DECODER 0x40 
#define PARA_RS232 0x80
#define PARA_PREVIEW 0x100
#define PARA_SECURITY 0x200
#define PARA_DATETIME 0x400
#define PARA_FRAMETYPE 0x800 
#define PARA_DETECTION 0x1000 
#define PARA_VCA_RULE 0x1001 
#define PARA_VCA_CTRL 0x1002 
#define PARA_VCA_PLATE 0x1003
#define PARA_CODESPLITTER 0x2000 
#define PARA_RS485 0x2001 
#define PARA_DEVICE 0x2002 
#define PARA_HARDDISK 0x2003 
#define PARA_AUTOBOOT 0x2004 
#define PARA_HOLIDAY 0x2005 
#define PARA_IPC 0x2006 
#define NET_DVR_FILE_SUCCESS 1000 
#define NET_DVR_FILE_NOFIND 1001 
#define NET_DVR_ISFINDING 1002 
#define NET_DVR_NOMOREFILE 1003 
#define NET_DVR_FILE_EXCEPTION 1004 
#define COMM_ALARM 0x1100 
#define COMM_ALARM_RULE 0x1102 
#define COMM_ALARM_PDC 0x1103 
#define COMM_ALARM_VIDEOPLATFORM 0x1104 
#define COMM_ALARM_ALARMHOST 0x1105 
#define COMM_ALARM_FACE 0x1106 
#define COMM_RULE_INFO_UPLOAD 0x1107 
#define COMM_ALARM_AID 0x1110 
#define COMM_ALARM_TPS 0x1111 
#define COMM_UPLOAD_FACESNAP_RESULT 0x1112 
#define COMM_ALARM_TFS 0x1113 
#define COMM_ALARM_TPS_V41 0x1114 
#define COMM_ALARM_AID_V41 0x1115 
#define COMM_ALARM_VQD_EX 0x1116 
#define COMM_ALARM_NOTIFICATION_REPORT 0x1117 
#define COMM_SENSOR_VALUE_UPLOAD 0x1120 
#define COMM_SENSOR_ALARM 0x1121 
#define COMM_SWITCH_ALARM 0x1122 
#define COMM_ALARMHOST_EXCEPTION 0x1123 
#define COMM_ALARMHOST_OPERATEEVENT_ALARM 0x1124 
#define COMM_ALARMHOST_SAFETYCABINSTATE 0x1125 
#define COMM_ALARMHOST_ALARMOUTSTATUS 0x1126 
#define COMM_ALARMHOST_CID_ALARM 0x1127 
#define COMM_ALARMHOST_EXTERNAL_DEVICE_ALARM 0x1128 
#define COMM_ALARMHOST_DATA_UPLOAD 0x1129 
#define COMM_FACECAPTURE_STATISTICS_RESULT 0x112a 
#define COMM_ALARM_WIRELESS_INFO 0x122b 
#define COMM_SCENECHANGE_DETECTION_UPLOAD 0x1130 
#define COMM_CROSSLINE_ALARM 0x1131 
#define COMM_UPLOAD_VIDEO_INTERCOM_EVENT 0x1132 
#define COMM_ALARM_VIDEO_INTERCOM 0x1133 
#define COMM_UPLOAD_NOTICE_DATA 0x1134 
#define COMM_ALARM_AUDIOEXCEPTION 0x1150 
#define COMM_ALARM_DEFOCUS 0x1151 
#define COMM_ALARM_BUTTON_DOWN_EXCEPTION 0x1152 
#define COMM_ALARM_ALARMGPS 0x1202 
#define COMM_TRADEINFO 0x1500 
#define COMM_UPLOAD_PLATE_RESULT 0x2800 
#define COMM_ITC_STATUS_DETECT_RESULT 0x2810 
#define COMM_IPC_AUXALARM_RESULT 0x2820 
#define COMM_UPLOAD_PICTUREINFO 0x2900 
#define COMM_SNAP_MATCH_ALARM 0x2902 
#define COMM_ITS_PLATE_RESULT 0x3050 
#define COMM_ITS_TRAFFIC_COLLECT 0x3051 
#define COMM_ITS_GATE_VEHICLE 0x3052 
#define COMM_ITS_GATE_FACE 0x3053 
#define COMM_ITS_GATE_COSTITEM 0x3054 
#define COMM_ITS_GATE_HANDOVER 0x3055 
#define COMM_ITS_PARK_VEHICLE 0x3056 
#define COMM_ITS_BLACKLIST_ALARM 0x3057 
#define COMM_VEHICLE_CONTROL_LIST_DSALARM 0x3058 
#define COMM_VEHICLE_CONTROL_ALARM 0x3059 
#define COMM_FIRE_ALARM 0x3060 
#define COMM_ITS_GATE_ALARMINFO 0x3061 
#define COMM_VEHICLE_RECOG_RESULT 0x3062 
#define COMM_PLATE_RESULT_V50 0x3063 
#define COMM_GATE_CHARGEINFO_UPLOAD 0x3064 
#define COMM_TME_VEHICLE_INDENTIFICATION 0x3065 
#define COMM_GATE_CARDINFO_UPLOAD 0x3066 
#define COMM_LOADING_DOCK_OPERATEINFO 0x3067 
#define COMM_ALARM_SENSORINFO_UPLOAD 0x3077 
#define COMM_ALARM_CAPTURE_UPLOAD 0x3078 
#define COMM_ITS_RADARINFO 0x3079 
#define COMM_SIGNAL_LAMP_ABNORMAL 0x3080 
#define COMM_ALARM_TPS_REAL_TIME 0x3081 
#define COMM_ALARM_TPS_STATISTICS 0x3082 
#define COMM_ALARM_V30 0x4000 
#define COMM_IPCCFG 0x4001 
#define COMM_IPCCFG_V31 0x4002 
#define COMM_IPCCFG_V40 0x4003 
#define COMM_ALARM_DEVICE 0x4004 
#define COMM_ALARM_CVR 0x4005 
#define COMM_ALARM_HOT_SPARE 0x4006 
#define COMM_ALARM_V40 0x4007 
#define COMM_UPLOAD_HEATMAP_RESULT 0x4008
#define COMM_ALARM_DEVICE_V40 0x4009 
#define COMM_ALARM_FACE_DETECTION 0x4010
#define COMM_ALARM_TARGET_LEFT_REGION 0x4011
#define COMM_GISINFO_UPLOAD 0x4012
#define COMM_VANDALPROOF_ALARM 0x4013
#define COMM_PEOPLE_DETECTION_UPLOAD 0x4014
#define COMM_ALARM_STORAGE_DETECTION 0x4015
#define COMM_MVM_REGISTER 0x4016
#define COMM_MVM_STATUS_INFO 0x4017
#define COMM_UPLOAD_HEATMAP_RESULT_PDC 0x4018
#define COMM_UPLOAD_HEATMAP_RESULT_DURATION 0x4019
#define COMM_UPLOAD_HEATMAP_RESULT_INTERSECTION 0x4020
#define COMM_UPLOAD_AIOP_VIDEO 0x4021
#define COMM_UPLOAD_AIOP_PICTURE 0x4022
#define COMM_UPLOAD_AIOP_POLLING_SNAP 0x4023
#define COMM_UPLOAD_AIOP_POLLING_VIDEO 0x4024
#define COMM_ITS_ROAD_EXCEPTION 0x4500 
#define COMM_ITS_EXTERNAL_CONTROL_ALARM 0x4520 
#define COMM_ALARM_SHIPSDETECTION 0x4521 
#define COMM_VCA_DBD_ALARM 0x4550 
#define COMM_VCA_ADAS_ALARM 0x4551 
#define COMM_VEH_REALTIME_INFO 0x4552 
#define COMM_FIREDETECTION_ALARM 0x4991
#define COMM_ALARM_DENSEFOGDETECTION 0x4992 
#define COMM_VCA_ALARM 0x4993 
#define COMM_FACE_THERMOMETRY_ALARM 0x4994 
#define COMM_TAPE_ARCHIVE_ALARM 0x4996
#define COMM_SCREEN_ALARM 0x5000 
#define COMM_DVCS_STATE_ALARM 0x5001 
#define COMM_ALARM_ACS 0x5002 
#define COMM_ALARM_FIBER_CONVERT 0x5003 
#define COMM_ALARM_SWITCH_CONVERT 0x5004 
#define COMM_ALARM_DEC_VCA 0x5010 
#define COMM_ALARM_LCD 0x5011 
#define COMM_CONFERENCE_CALL_ALARM 0x5012 
#define COMM_ALARM_WALL_CONFERNECE 0x5015 
#define COMM_DIAGNOSIS_UPLOAD 0x5100 
#define COMM_HIGH_DENSITY_UPLOAD 0x5101 
#define COMM_ID_INFO_ALARM 0x5200 
#define COMM_PASSNUM_INFO_ALARM 0x5201 
#define COMM_PASSPORT_ALARM 0x5202 
#define COMM_THERMOMETRY_DIFF_ALARM 0x5211 
#define COMM_THERMOMETRY_ALARM 0x5212 
#define COMM_PANORAMIC_LINKAGE_ALARM 0x5213 
#define COMM_TAG_INFO_ALARM 0x5215 
#define COMM_ALARM_VQD 0x6000 
#define COMM_PUSH_UPDATE_RECORD_INFO 0x6001 
#define COMM_SWITCH_LAMP_ALARM 0x6002 
#define COMM_INQUEST_ALARM 0x6005 
#define COMM_VIDEO_PARKING_POLE_ALARM 0x6006 
#define COMM_GPS_STATUS_ALARM 0x6010 
#define COMM_BASE_STATION_INFO_ALARM 0x6011 
#define COMM_ALARM_SUBSCRIBE_EVENT 0x6012 
#define COMM_FACESNAP_RAWDATA_ALARM 0x6015 
#define COMM_CLUSTER_ALARM 0x6020 
#define COMM_ISAPI_ALARM 0x6009
#define COMM_FRAMES_PEOPLE_COUNTING_ALARM	 0x6069	
#define COMM_SIGN_ABNORMAL_ALARM 0x6120
#define COMM_HFPD_ALARM 0x6121
#define COMM_HCU_ALARM 0x6150 
#define COMM_DEV_STATUS_CHANGED 0x7000 
#define EXCEPTION_EXCHANGE 0x8000 
#define EXCEPTION_AUDIOEXCHANGE 0x8001 
#define EXCEPTION_ALARM 0x8002 
#define EXCEPTION_PREVIEW 0x8003 
#define EXCEPTION_SERIAL 0x8004 
#define EXCEPTION_RECONNECT 0x8005 
#define EXCEPTION_ALARMRECONNECT 0x8006 
#define EXCEPTION_SERIALRECONNECT 0x8007 
#define SERIAL_RECONNECTSUCCESS 0x8008 
#define EXCEPTION_PLAYBACK 0x8010 
#define EXCEPTION_DISKFMT 0x8011 
#define EXCEPTION_PASSIVEDECODE 0x8012 
#define EXCEPTION_EMAILTEST 0x8013 
#define EXCEPTION_BACKUP 0x8014 
#define PREVIEW_RECONNECTSUCCESS 0x8015 
#define ALARM_RECONNECTSUCCESS 0x8016 
#define RESUME_EXCHANGE 0x8017 
#define NETWORK_FLOWTEST_EXCEPTION 0x8018 
#define EXCEPTION_PICPREVIEWRECONNECT 0x8019 
#define PICPREVIEW_RECONNECTSUCCESS 0x8020 
#define EXCEPTION_PICPREVIEW 0x8021 
#define EXCEPTION_MAX_ALARM_INFO 0x8022 
#define EXCEPTION_LOST_ALARM 0x8023 
#define EXCEPTION_PASSIVETRANSRECONNECT 0x8024 
#define PASSIVETRANS_RECONNECTSUCCESS 0x8025 
#define EXCEPTION_PASSIVETRANS 0x8026 
#define SUCCESS_PUSHDEVLOGON 0x8030 
#define EXCEPTION_RELOGIN 0x8040 
#define RELOGIN_SUCCESS 0x8041 
#define EXCEPTION_PASSIVEDECODE_RECONNNECT 0x8042 
#define EXCEPTION_CLUSTER_CS_ARMFAILED 0x8043 
#define EXCEPTION_RELOGIN_FAILED 0x8044 
#define EXCEPTION_PREVIEW_RECONNECT_CLOSED 0x8045 
#define EXCEPTION_ALARM_RECONNECT_CLOSED 0x8046 
#define EXCEPTION_SERIAL_RECONNECT_CLOSED 0x8047 
#define EXCEPTION_PIC_RECONNECT_CLOSED 0x8048 
#define EXCEPTION_PASSIVE_DECODE_RECONNECT_CLOSED 0x8049
#define EXCEPTION_PASSIVE_TRANS_RECONNECT_CLOSED 0x804a 
#define EXCEPTION_VIDEO_DOWNLOAD 0x804b 
#define NET_DVR_SYSHEAD 1 
#define NET_DVR_STREAMDATA 2 
#define NET_DVR_AUDIOSTREAMDATA 3 
#define NET_DVR_STD_VIDEODATA 4 
#define NET_DVR_STD_AUDIODATA 5 
#define NET_DVR_SDP 6 
#define NET_DVR_CHANGE_FORWARD 10 
#define NET_DVR_CHANGE_REVERSE 11 
#define NET_DVR_PLAYBACK_ALLFILEEND 12 
#define NET_DVR_VOD_DRAW_FRAME 13 
#define NET_DVR_VOD_DRAW_DATA 14 
#define NET_DVR_PRIVATE_DATA 112 
#define DVR 1 
#define ATMDVR 2 
#define DVS 3 
#define DEC 4 
#define ENC_DEC 5 
#define DVR_HC 6 
#define DVR_HT 7 
#define DVR_HF 8 
#define DVR_HS 9 
#define DVR_HTS 10 
#define DVR_HB 11 
#define DVR_HCS 12 
#define DVS_A 13 
#define DVR_HC_S 14 
#define DVR_HT_S 15 
#define DVR_HF_S 16 
#define DVR_HS_S 17 
#define ATMDVR_S 18 
#define DVR_7000H 19 
#define DEC_MAT 20 
#define DVR_MOBILE 21 
#define DVR_HD_S 22 
#define DVR_HD_SL 23 
#define DVR_HC_SL 24 
#define DVR_HS_ST 25 
#define DVS_HW 26 
#define DS630X_D 27 
#define DS640X_HD 28 
#define DS610X_D 29 
#define IPCAM 30 
#define MEGA_IPCAM 31 
#define IPCAM_X62MF 32 
#define ITCCAM 35 
#define IVS_IPCAM 36 
#define ZOOMCAM 38 
#define IPDOME 40 
#define IPDOME_MEGA200 41 
#define IPDOME_MEGA130 42 
#define IPDOME_AI 43 
#define TII_IPCAM 44 
#define IPTC_DOME 45 
#define DS_2DP_Z 46 
#define DS_2DP 47 
#define ITS_WMS 48 
#define IPMOD 50 
#define TRAFFIC_YTDOME 51 
#define TRAFFIC_RDDOME 52 
#define IDS6501_HF_P 60 
#define IDS6101_HF_A 61 
#define IDS6002_HF_B 62 
#define IDS6101_HF_B 63 
#define IDS52XX 64 
#define IDS90XX 65 
#define IDS8104_AHL_S_HX 66 
#define IDS8104_AHL_S_H 67 
#define IDS91XX 68 
#define IIP_CAM_B 69 
#define IIP_CAM_F 70 
#define DS71XX_H 71 
#define DS72XX_H_S 72 
#define DS73XX_H_S 73 
#define DS72XX_HF_S 74 
#define DS73XX_HFI_S 75 
#define DS76XX_H_S 76 
#define DS76XX_N_S 77 
#define DS_TP3200_EC 78 
#define DS81XX_HS_S 81 
#define DS81XX_HL_S 82 
#define DS81XX_HC_S 83 
#define DS81XX_HD_S 84 
#define DS81XX_HE_S 85 
#define DS81XX_HF_S 86 
#define DS81XX_AH_S 87 
#define DS81XX_AHF_S 88 
#define DS90XX_HF_S 90 
#define DS91XX_HF_S 91 
#define DS91XX_HD_S 92 
#define IDS90XX_A 93 
#define IDS91XX_A 94 
#define DS95XX_N_S 95 
#define DS96XX_N_SH 96 
#define DS90XX_HF_SH 97 
#define DS91XX_HF_SH 98 
#define DS_B10_XY 100 
#define DS_6504HF_B10 101 
#define DS_6504D_B10 102 
#define DS_1832_B10 103 
#define DS_6401HFH_B10 104 
#define DS_65XXHC 105 
#define DS_65XXHC_S 106 
#define DS_65XXHF 107 
#define DS_65XXHF_S 108 
#define DS_6500HF_B 109 
#define IVMS_6200_C 110 
#define IVMS_6200_B 111 
#define DS_72XXHV_ST15 112 
#define DS_72XXHV_ST20 113 
#define IVMS_6200_T 114 
#define IVMS_6200_BP 115 
#define DS_81XXHC_ST 116 
#define DS_81XXHS_ST 117 
#define DS_81XXAH_ST 118 
#define DS_81XXAHF_ST 119 
#define DS_66XXDVS 120 
#define DS_1964_B10 121 
#define DS_B10N04_IN 122 
#define DS_B10N04_OUT 123 
#define DS_B10N04_INTEL 124 
#define DS_6408HFH_B10E_RM 125 
#define DS_B10N64F1_RTM 126 
#define DS_B10N64F1D_RTM 127 
#define DS_B10_SDS 128 
#define DS_B10_DS 129 
#define DS_6401HFH_B10V 130 
#define DS_6504D_B10B 131 
#define DS_6504D_B10H 132 
#define DS_6504D_B10V 133 
#define DS_6408HFH_B10S 134 
#define DS_18XX_N 135 
#define DS_6504HF_B10F_CLASS 136 
#define DS_18XX_PTZ 141 
#define DS_19AXX 142 
#define DS_19BXX 143 
#define DS_19CXX 144 
#define DS_19DXX 145 
#define DS_19XX 146 
#define DS_19SXX 147 
#define DS_1HXX 148 
#define DS_PWXX 150 
#define DS_PMXX 151 
#define DS_19DXX_S 152 
#define DS_PWAXX 153 
#define DS_PHAXX 154 
#define DS_C10H 161 
#define DS_C10N_BI 162 
#define DS_C10N_DI 163 
#define DS_C10N_SI 164 
#define DS_C10N_DO 165 
#define DS_C10N_SERVER 166 
#define IDS_8104_AHFL_S_H 171 
#define IDS_65XX_HF_A 172 
#define IDS90XX_HF_RH 173 
#define IDS91XX_HF_RH 174 
#define IDS_65XX_HF_B 175 
#define IDS_65XX_HF_P 176 
#define IVMS_6200_F 177 
#define IVMS_6200_A 178 
#define IVMS_6200_F_S 179 
#define DS90XX_HF_RH 181 
#define DS91XX_HF_RH 182 
#define DS78XX_S 183 
#define DS81XXHW_S 185 
#define DS81XXHW_ST 186 
#define DS91XXHW_ST 187 
#define DS91XX_ST 188 
#define DS81XX_ST 189 
#define DS81XXHX_ST 190 
#define DS73XXHX_ST 191 
#define DS81XX_SH 192 
#define DS81XX_SN 193 
#define DS96XXN_ST 194 
#define DS86XXN_ST 195 
#define DS80XXHF_ST 196 
#define DS90XXHF_ST 197 
#define DS76XXN_ST 198 
#define DS_9664N_RX 199 
#define ENCODER_SERVER 200 
#define DECODER_SERVER 201 
#define PCNVR_SERVER 202 
#define CVR_SERVER 203 
#define DS_91XXHFH_ST 204 
#define DS_66XXHFH 205 
#define TRAFFIC_TS_SERVER 210 
#define TRAFFIC_VAR 211 
#define IPCALL 212 
#define SAN_SERVER 213 
#define DS_B11_M_CLASS 301 
#define DS_B12_M_CLASS 302 
#define DS_6504HF_B11_CLASS 303 
#define DS_6504HF_B12_CLASS 304 
#define DS_6401HFH_B11V_CLASS 305 
#define DS_6401HFH_B12V_CLASS 306 
#define DS_6408HFH_B11S_CLASS 307 
#define DS_6408HFH_B12S_CLASS 308 
#define DS_6504D_B11H_CLASS 309 
#define DS_6504D_B11B_CLASS 310 
#define DS_6504D_B12B_CLASS 311 
#define DS_6504D_B11V_CLASS 312 
#define DS_6504D_B12V_CLASS 313 
#define DS_6401HFH_B10R_CLASS 314 
#define DS_6401HFH_B10D_CLASS 315 
#define DS_6401HFH_B10H_CLASS 316 
#define DS_6401HFH_B11R_CLASS 317 
#define DS_6401HFH_B11D_CLASS 318 
#define DS_6401HFH_B11H_CLASS 319 
#define DS_6401HFH_B12R_CLASS 320 
#define DS_6401HFH_B12D_CLASS 321 
#define DS_6401HFH_B12H_CLASS 322 
#define DS_65XXD_B10Ex_CLASS 323 
#define DS_6516HW_B10_CLASS 324 
#define DS_6401HFH_B10F_RX_CLASS 326 
#define DS_6502HW_B10F_RX_CLASS 327 
#define DS_6504D_B11Ex_CLASS 328 
#define DS_6504D_B12Ex_CLASS 329 
#define DS_6512_B11_CLASS 330 
#define DS_6512_B12_CLASS 331 
#define DS_6504D_B10H_CLASS 332 
#define DS_65XXT_B10_CLASS 333 
#define DS_65XXD_B10_CLASS 335 
#define DS_IVMSE_B10X_CLASS 336 
#define DS_6532D_B10ES_CLASS 337 
#define DS_6508HFH_B10ES_CLASS 338 
#define DS_82NCG_CLASS 340 
#define DS_82VAG_CLASS 341 
#define DS_1802XXF_B10_CLASS 342 
#define iDS_6504_B10EVAC_CLASS 343 
#define iDS_6504_B10EDEC_CLASS 344 
#define DS_6402HFH_B10EV_CLASS 345 
#define DS_6402HFH_B10ED_CLASS 346 
#define DS_6402HFH_B10EH_CLASS 347 
#define DS_6404HFH_B10T_RX_CLASS 348 
#define DS_6504D_AIO_CLASS 349 
#define DS_IVMST_B10_CLASS 350 
#define DS_6402_AIO_CLASS 351 
#define DS_iVMSE_AIO_CLASS 352 
#define DS_AIO_M_CLASS 353 
#define DS_6508HF_B10E_CLASS 355 
#define DS_6404HFH_B10ES_CLASS 356 
#define DS_6402HFH_B10ER_CLASS 358 
#define DS_6404HFH_B10T_RM_CLASS 361 
#define DS_6516D_B10EB_CLASS 362 
#define DS_6516D_B10ES_CLASS 363 
#define DS_6508D_B10FH_CLASS 364
#define DS_6508D_B10FD_CLASS 364
#define DS_6508D_B10FV_CLASS 364
#define DS_6508_B11E_CLASS 365 
#define DS_6402_B11ES_CLASS 366 
#define DS_6402_B11EV_CLASS 367 
#define DS_6402_B11ER_CLASS 368 
#define DS_6402_B11ED_CLASS 369 
#define DS_6402_B11EH_CLASS 370 
#define DS_6516D_B11EB_CLASS 371 
#define DS_6516D_B11ES_CLASS 372 
#define DS_6508_B12E_CLASS 373 
#define DS_6402_B12ES_CLASS 375 
#define DS_6402_B12EV_CLASS 376 
#define DS_6402_B12ER_CLASS 377 
#define DS_6402_B12ED_CLASS 378 
#define DS_6402_B12EH_CLASS 379 
#define DS_6516D_B12EB_CLASS 380 
#define DS_iVMSE_AIO_8100x_CLASS 381 
#define DS_iVMSE_AIO_87x_CLASS 382 
#define DS_6532D_B11ES_CLASS 384 
#define DS_6532D_B12ES_CLASS 385 
#define DS_B20_MSU_NP 400 
#define DS_6416HFH_B20S 401 
#define DS_6416HFH_B20_RM 402 
#define DS_6564D_B20D 403 
#define DS_6564D_B20H 404 
#define DS_6564D_B20V 405 
#define DS_B20_6516D_DEV_CLASS 406 
#define DS_6408HFH_B20V 407 
#define DS_MMC_B20_CLASS 408 
#define DS_CARD_CHIP_B20_CLASS 409 
#define DS_6564D_B20B_DEV_CLASS 410 
#define DS_6564D_B20S_DEV_CLASS 411 
#define DS_6532HF_B20B_DEV_CLASS 412 
#define DS_6408HFH_B20D_DEV_CLASS 413 
#define DS_6408HFH_B20H_DEV_CLASS 414 
#define DS_IVMSE_B20_CLASS 415 
#define DS_6402HFH_B20Y_DEV_CLASS 416 
#define DS_6508HW_B20_DEV_CLASS 417 
#define DS_B20N128Fx_B20_DEV_CLASS 418 
#define DS_AIO_MCU_NP_DEV_CLASS 419 
#define DS_6402_AIO_EV_DEV_CLASS 420 
#define DS_6508D_AIO_EV_DEV_CLASS 421 
#define DS_6508D_AIO_ED_DEV_CLASS 422 
#define DS_6508D_AIO_EH_DEV_CLASS 423 
#define DS_6508HD_B20F_DEV_CLASS 424 
#define DS_6402HFH_B20ES_DEV_CLASS 425 
#define DS_6532D_B20_DEV_CLASS 426 
#define DS_IVMST_B20_DEV_CLASS 427 
#define DS_6416HFH_B20DD_DEV_CLASS 428 
#define DS_6441VS_B20_DEV_CLASS 429 
#define DS_6404HFH_B20T_CLASS 431 
#define DS_FS22_B20_DEV_CLASS 432 
#define DS_IVMSE_B20UH_DEV_CLASS 433 
#define IDS_6524J_B20_DEV_CLASS 434
#define IDS_6532B_B20_DEV_CLASS 435
#define DS_6404HFH_B20Fx_DEV_CLASS 436 
#define DS_N128x_B20Fy_CLASS 437 
#define DS_181600F_B20_CLASS 438 
#define DS_6904UD_B20H_CLASS 439 
#define DS_B21_MCU_NP_CLASS 440 
#define DS_B21_S10_x_CLASS 441 
#define DS_6402HFH_B21D_CLASS 442 
#define DS_6508HD_B21D_CLASS 443 
#define DS_iVMSE_B21HW_CLASS 444 
#define DS_C10S 501 
#define DS_C10N_SDI 551 
#define DS_C10N_BIW 552 
#define DS_C10N_DON 553 
#define DS_C10N_TVI 554 
#define DS_C10N_DI2 555 
#define DS_C10N_AUDIO_OUT 556 
#define DS_C10N_AUDIO_IN 557 
#define DS_C20N 570 
#define DS_C20N_BNC 571 
#define DS_C20N_DVI 572 
#define DS_C20N_DP 573 
#define DS_C20N_OUT 574 
#define DS_C20N_VWMS 5351 
#define DS_C20N_DI2 5352 
#define DS_C20N_DO2 5353 
#define DS_C20N_UHDI 5354 
#define DS_C20N_YI2 5355 
#define DS_C12N_VWMS 5356 
#define DS_C12N_DO 5357 
#define DS_C12N_HOE 5358 
#define DS_C20N_HI2 5359
#define DS_C20N_VI2 5360
#define DS_C20N_SI2 5361
#define DS_C20N_HO2 5362
#define DS_C20N_S24G 5363
#define DS_C20N_S24X 5364
#define DS_C12A_0104H 5365
#define DS_D1HXX 5591 
#define ELEVATO_BRIDGE 5751 
#define DS_3WF01S_5NG_M 5752 
#define DS_3WF0EC_2N_D 5753 
#define DS_3WF0EC_5ACT 5754 
#define DS_3WF03S_5AC 5755 
#define DS_3WF0ES_5AC_H 5756 
#define DS_19M00_MN 601 
#define DS_KH8302_A 602 
#define DS_KD8101_2 603 
#define DS_KM8301 604 
#define DS_KVXXXX_XX 605 
#define DS_LHPM1D_C 606 
#define DS_KAM03 607
#define DS64XXHD_T 701 
#define DS_65XXD 703 
#define DS63XXD_T 704 
#define SCE_SERVER 705 
#define DS_64XXHD_S 706 
#define DS_68XXT 707 
#define DS_65XXD_T 708 
#define DS_65XXHD_T 709 
#define DS_69XXUD 710 
#define DS_65XXUD 711 
#define DS_65XXUD_L 712 
#define DS_65XXUD_T 713 
#define DS_69XXHD 5001 
#define DS_D20XX 750 
#define DS_C50S 751 
#define DS_D50XX 752 
#define DS_D40 760 
#define DS_65VMXX 770 
#define DS_65VTXX 771 
#define DS_65VTA 772 
#define DS_65VT_RX 773 
#define DS_65VM_MCU_NP 774 
#define DS_65VT0010 5571 
#define DS_65VM_MCU 5572 
#define DS_65VM_MPC 5573 
#define DS_65VT2XXYR_SF 5574 
#define DS_65VT0XXY 5575 
#define DS_65VT0010Z 5576 
#define DS_65VT0050Z 5577 
#define DS_65VS0XXXS 5878 
#define DS_65VS0XXXM 5579 
#define DS_65VM00XX_X 5580 
#define DS_CS_SERVER 800 
#define DS_68GAP_MCU 831 
#define DS_K260X 850 
#define DS_K1TXXX 851 
#define DS_K280X 852 
#define DS_K1T80X 854 
#define RAC_6X00 856 
#define DS_K2602_AX 857 
#define DS_K1T803F 858 
#define DS_K2700 859 
#define DS_K270X 860 
#define DS_K1T500S 861 
#define DS_K1A801F 862 
#define DS_K1T600X 863 
#define DS_K22X 864 
#define DS_K2M0016AX 865 
#define DS_K2602S_AX 867 
#define DS_K560XX 870 
#define DS_K260X_E 873 
#define DS_K5603X 874 
#define DS_K3M200X 875 
#define DS_K3M100X 879 
#define DS_K1T8101XT 881 
#define DS_K1T8101XX 882 
#define DS_K5604 883 
#define DS_K1T607XXXX 884 
#define DS_K1A850X 885 
#define DS_K1T800X 886 
#define DS_K1T610XXXX 887 
#define DS_K1T8115X 888 
#define DS_K1T815LC_M 889 
#define DS_K1T606M_Z 890 
#define DS_K5607_XXX 891 
#define DS_K1T950MX 893 
#define DS_K1T331XX 894 
#define DS_K1T671T 895 
#define DS_K1T671 896 
#define DS_K5671 897 
#define DS_K1T640 898 
#define DS_K1A802A 899 
#define DS_6800M 900 
#define DS_68NTH 901 
#define DS_D60S 902 
#define DS_D10 931 
#define DS_3K0X_NM 951 
#define DS_3E2328 952 
#define DS_3E1528 953 
#define SCREEN_LINK_SERVER 971 
#define DS_D51OPSXX 972 
#define IP_PTSYS_MEGA200 1001 
#define IPCAM_FISHEYE 1002 
#define IPCAM_FISHEYE_E 1003 
#define IPCAM_BINOCULAR 1004 
#define IPCAM_365 1010 
#define IPCAM_R0 1011 
#define IPCAM_R1 1012 
#define IPCAM_R2 1013 
#define IPCAM_R3 1014 
#define IPCAM_R4 1015 
#define IPDOME_365 1110 
#define IPDOME_R0 1111 
#define IPDOME_R1 1112 
#define IPDOME_R2 1113 
#define IPDOME_R3 1114 
#define IPDOME_R4 1115 
#define ITCCAM_R3 1211 
#define UAV_S 1300 
#define TRAFFIC_ECT 1400 
#define TRAFFIC_PARKING_SERVER 1401 
#define TRAFFIC_TME 1402 
#define DS90XXHW_ST 2001 
#define DS72XXHX_SH 2002 
#define DS_92XX_HF_ST 2003 
#define DS_91XX_HF_XT 2004 
#define DS_90XX_HF_XT 2005 
#define DS_73XXHX_SH 2006 
#define DS_72XXHFH_ST 2007 
#define DS_67XXHF_SATA 2008
#define DS_67XXHW 2009
#define DS_67XXHW_SATA 2010
#define DS_67XXHF 2011
#define DS_72XXHF_SV 2012 
#define DS_72XXHW_SV 2013 
#define DS_81XXHX_SH 2014 
#define DS_71XXHX_SL 2015 
#define DS_76XXH_ST 2016 
#define DS_73XXHFH_ST 2017 
#define DS_81XXHFH_ST 2018 
#define DS_72XXHFH_SL 2019 
#define DS_FDXXCGA_FLT 2020 
#define IDS_91XX_HF_ST_A 2100 
#define IDS_91XX_HF_ST_B 2101 
#define IDS_90XX_HF_ST_A 2102 
#define IDS_90XX_HF_ST_B 2103 
#define IDS_81XX_HF_ST_A 2104 
#define IDS_81XX_HF_ST_B 2105 
#define IDS_80XX_HF_ST_A 2106 
#define IDS_80XX_HF_ST_B 2107 
#define IDS_8104_AHFL_ST 2108 
#define IDS_2CD6812F_C 2109 
#define DS_77XXN_ST 2201 
#define DS_95XX_N_ST 2202 
#define DS_85XX_N_ST 2203 
#define DS_96XX_N_XT 2204 
#define DS_76XX_N_SE 2205 
#define DS_86XXSN_SX 2206 
#define DS_71XXN_SL 2208 
#define CS_N1_1XX 2209 
#define DS_71XXN_SN 2210 
#define CS_N1_2XX 2211 
#define DS_76XX_N_SHT 2212 
#define DS_96XXX_N_E 2213 
#define DS_76XXN_EX 2214 
#define DS_77XXN_E4 2215
#define DS_86XXN_E8 2216
#define DS_9616N_H8 2217 
#define DS_72XXHX_EX_GXY 2218 
#define DS_76XXN_EX_GXY 2219 
#define DS_72XXHXH_SH_21 2220 
#define DS_72XXHXH_SH_31 2221 
#define DS_73XXHXH_SH_31 2222 
#define DS_81XXHXH_SH_31 2223 
#define DS_71XXHXH_SH_21 2224 
#define DS_71XXHXH_SH_31 2225 
#define DS_NBXX_N_E1_X 2226 
#define DS_96XXN_FX 2230
#define DS_86XXN_FX 2231
#define DS_96XXXN_HX 2232 
#define DS_86XXN_I 2233 
#define DS_77XX_N_I 2234 
#define DS_76XX_N_I 2235 
#define DS_78XX_N_I 2236 
#define DS_96XXXN_IX 2237 
#define DS_90XXHXH_XT 2238 
#define PCNVR_IVMS_4200 2301 
#define IVMS_6200_TP 2401 
#define IVMS_6200_TF 2402 
#define IVMS_6200_D 2403 
#define IDS_81XXAHW_ST 2405 
#define IDS_81XXAHW_SP 2406 
#define IDS_81XXAHWL_ST 2407 
#define IDS_81XXAHWL_SP 2408 
#define IDS_9616N_H8 2409 
#define IVMS_6200_SMD 2500 
#define DS_81XXAHW_ST 2501
#define DS_81XXAHW_SP 2502
#define DS_81XXAHWL_ST 2503
#define DS_81XXAHWL_SP 2504
#define DS_81XXAHGH_E4 2601 
#define DS_6904UD_AIOE_H_CLASS 4002 
#define DS_6402HFH_B21B_CLASS 4005 
#define DS_6902UD_B21H_CLASS 4006 
#define DS_6902UD_B21D_CLASS 4007 
#define DS_6902UD_B21V_CLASS 4008 
#define DS_6904UD_B20D_CLASS 4010 
#define DS_6904UD_B20V_CLASS 4011 
#define DS_AIOH_MCU_NP 4042 
#define DS_6404HFH_AIOH_D 4043 
#define DS_6908UD_AIOH_D 4044 
#define DS_6908UD_AIOH_H 4045 
#define DS_69XXUD_B 4046 
#define DS_6404HFH_I 4047 
#define DS_6904UD_O 4048 
#define DS_C12L_0204H 4060 
#define DS_Y10_MCU 5771 
#define DS_Y10_SW1 5772 
#define DS_6516UD_Y10D 5773 
#define DS_6532UD_Y10D 5774 
#define DS_6E2724_Y10 5775 
#define DS_68SAA_AA_Y10 5776 
#define DS_68SBA_AA_Y10 5777 
#define DS_68SCA_AA_Y10 5778 
#define DS_68GPU_A1_Y10 5779 
#define DS_CPU_SERVER 5780 
#define DS_GPU_SERVER 5781 
#define DS_BIGDATA_SERVER 5782 
#define DS_B80_MCU 5821
#define DS_B80_SW 5822
#define DS_B80_SR_01 5823
#define DS_B80_AI04 5824
#define DS_B80_ST 5825
#define DS_B80_D04 5826
#define DS_3LGCX 5841
#define DS_3LGRX 5842
#define DS_3LGT4 5843 
#define DS_3LGT40_N 			 5844 
#define DS_3E11XX 5681 
#define DS_3E13XX 5682 
#define DS_3E15XX 5683 
#define DS_3E11XXP 5684 
#define DS_3E13XXP 5685 
#define DS_3E15XXP 5686 
#define DS_3D01R_NM 5691 
#define DS_3D01T_NM 5692 
#define DS_3K02_RNM 5693 
#define IDS_90XX_HXH_XX_S 6001 
#define IDS_90XX_HXH_XX_FA 6002 
#define DS_81XX_SHXL_K4 6101 
#define DS_8116THFHL_F4 6201 
#define DS_81XXAHQ_E4 6301 
#define IDS_81XXAHQ_E4 6302 
#define IDS_86XX_NX_A 7501 
#define IDS_96XX_NX_S 7502 
#define IDS_96XX_NX_V 7503 
#define IDS_96XX_NX_FA 7504 
#define IDS_86XX_NX_IX_B 7505 
#define IDS_67XX_NX_S_X 7506 
#define IDS_ECDXX_HE 8001
#define IDS_ECDXX_HT 8002
#define IDS_ECDXX_E 8101
#define IDS_EPTXX_HF 8201
#define DS_2CD69XXX_I 8351 
#define DS_TRIXX 8471 
#define DS_K1F600_D6EXX 10501 
#define DS_K1T341 10502 
#define DS_K1T641XXX 10503 
#define DS_K1T642XXX 10504 
#define DS_K1T601 10505 
#define DS_K1T672XXX 10506 
#define DS_K56A0X 10507 
#define DS_IEXX_E_J 11501 
#define IDS_67XX_NX_A 12501 
#define IDS_67XX_NX_L 12502 
#define IDS_ENIXX_XHE 12503 
#define IDS_67XX_NX_V 12504 
#define IDS_67XX_NX_B 12505 
#define DS_IE63XX_E_FA 13001
#define DS_DS_GPKIA 13002
#define DS_DS_PURE 13003
#define DS_DS_FS 13004
#define DS_DS_FD 13005
#define DS_DS_BLADE 13006
#define DS_DS_HMCP 13007
#define DS_LNX_RF 13501
#define DS_PA_RADAR 13551
#define DS_PERIMETER_RADAR 13552
#define DS_SECURITY_RADAR 13553
#define DS_N1104X 14001
#define DS_N1103X 14002
#define NP_FSC201 14003
#define NP_FDC240 14004
#define DS_N1107 14005
#define NP_FAXXX 14006
#define NP_ST204_X 14501 
#define DEV_CLASS_DVR 1 
#define DEV_CLASS_INTERROGATION 2 
#define DEV_CLASS_SIMPLE_TRAIL 3 
#define DEV_CLASS_TRAIL 4 
#define DEV_CLASS_RECORD_PLAY 5 
#define DEV_CLASS_ATM 6 
#define DEV_CLASS_DVS 51 
#define DEV_CLASS_NVR 101 
#define DEV_CLASS_GUN 151 
#define DEV_CLASS_BALL 152 
#define DEV_CLASS_SNAP 153 
#define DEV_CLASS_INTELLI_TILT 154 
#define DEV_CLASS_FISH_EYE 155 
#define DEV_CLASS_2DP_Z 156 
#define DEV_CLASS_2DP 157 
#define DEV_CLASS_PT 158 
#define DEV_CLASS_TRI 159 
#define DEV_CLASS_CVR 201 
#define DEV_CLASS_B20 251 
#define DEV_CLASS_B10 252 
#define DEV_CLASS_DECODER 253 
#define DEV_CLASS_MATRIXMANAGEDEVICE 254 
#define DEV_CLASS_OTICAL 255 
#define DEV_CLASS_CODESPITTER 256 
#define DEV_CLASS_ALARMHOST 257 
#define DEV_CLASS_MOVING_RING 258 
#define DEV_CLASS_CVCS 259 
#define DEV_CLASS_DVCS 260 
#define DEV_CLASS_TRANSCODER 261 
#define DEV_CLASS_LCD_SCREEN 262 
#define DEV_CLASS_LED_SCREEN 263 
#define DEV_CLASS_MATRIX 264 
#define DEV_CLASS_CONFERENCE_SYSTEM 265 
#define DEV_CLASS_INFORMATION_RELEASE_EQUIPMENT 266 
#define DEV_CLASS_NET_GAP 267 
#define DEV_CLASS_MERGE 268 
#define DEV_CLASS_REAR_PROJECTION 269 
#define DEV_CLASS_SWITCH 270 
#define DEV_CLASS_FIBER_CONVERTER 271 
#define DEV_CLASS_SCREEN_SERVER 272 
#define DEV_CLASS_SCE_SERVER 273 
#define DEV_CLASS_WIRELESS_TRANS 274 
#define DEV_CLASS_Y10_SERIES 275 
#define DEV_CLASS_SAFETY_MAVHINE 276 
#define DEV_CLASS_IOTGATEWAY 277 
#define DEV_CLASS_VIDEO_ALARM_HOST 301 
#define DEV_CLASS_NET_ALARM_HOST 302 
#define DEV_CLASS_ONE_KEY_ALARM 303 
#define DEV_CLASS_WIRELESS_ALARM_HOST 304 
#define DEV_CLASS_ALARM_MODULE 305 
#define DEV_CLASS_HOME_ALARM_HOST 306 
#define DEV_CLASS_HYBRID_ALARM_HOST 307 
#define DEV_CLASS_ACCESS_CONTROL 351 
#define DEV_CLASS_VIDEO_INTERCOM 401 
#define DEV_CLASS_UMMANNED_AERIAL_VEHICLE 451 
#define DEV_CLASS_MOBILE 501 
#define DEV_CLASS_MOBILE_VEHICLE 551 
#define DEV_CLASS_INTELLIGENT_ANALYZER 601 
#define DEV_CLASS_INTELLIGENT_TRAFFIC_SERVER 651 
#define DS_TP2200_EC 652 
#define DEV_CLASS_NVS 701 
#define DS_TRI21A_1_P 751 
#define DS_CLASS_FA 801
#define DS_CLASS_PURE 802
#define DS_CLASS_FS 803
#define DS_CLASS_FD 804
#define DS_CLASS_HAWK 805
#define DS_CLASS_BLADE 806
#define DS_CLASS_HMCP 807 
#define DEV_CLASS_SMART_LOCK 851 
#define DEV_CLASS_RADAR 901 
#define DEV_CLASS_FIRE_CONTROL 951 
#define DEV_CLASS_SECURITY_CHECK 1001 
#define iDS_PT 8451 
#define DEV_CLASS_DEFAULT 65534 
#define DEVICE_SOFTHARDWARE_ABILITY 0x001 
#define DEVICE_NETWORK_ABILITY 0x002 
#define DEVICE_ENCODE_ALL_ABILITY 0x003 
#define DEVICE_ENCODE_CURRENT 0x004 
#define IPC_FRONT_PARAMETER 0x005 
#define IPC_UPGRADE_DESCRIPTION 0x006 
#define DEVICE_RAID_ABILITY 0x007 
#define DEVICE_ENCODE_ALL_ABILITY_V20 0x008 
#define IPC_FRONT_PARAMETER_V20 0x009 
#define DEVICE_ALARM_ABILITY 0x00a 
#define DEVICE_DYNCHAN_ABILITY 0x00b 
#define DEVICE_USER_ABILITY 0x00c 
#define DEVICE_NETAPP_ABILITY 0x00d 
#define DEVICE_VIDEOPIC_ABILITY 0x00e 
#define DEVICE_JPEG_CAP_ABILITY 0x00f 
#define DEVICE_SERIAL_ABILITY 0x010 
#define DEVICE_ABILITY_INFO 0x011 
#define STREAM_ABILITY 0x012 
#define SYSTEM_MANAGEMENT_ABILITY 0x013 
#define IP_VIEW_DEV_ABILITY 0x014 
#define VCA_DEV_ABILITY 0x100 
#define VCA_CHAN_ABILITY 0x110 
#define TRANSFER_ABILITY 0x120 
#define MATRIXDECODER_ABILITY 0x200 
#define VIDEOPLATFORM_ABILITY 0x210
#define VIDEOPLATFORM_SBUCODESYSTEM_ABILITY 0x211
#define WALL_ABILITY 0x212 
#define MATRIX_ABILITY 0x213 
#define DECODECARD_ABILITY 0x220
#define VIDEOPLATFORM_ABILITY_V40 0x230
#define MATRIXMANAGEDEVICE_ABILITY 0x240
#define MATRIXDECODER_ABILITY_V41 0x260
#define DECODER_ABILITY 0x261
#define DECODECARD_ABILITY_V41 0x270
#define CODECARD_ABILITY 0x271 
#define SNAPCAMERA_ABILITY 0x300 
#define ITC_TRIGGER_MODE_ABILITY 0x301 
#define COMPRESSIONCFG_ABILITY 0x400 
#define COMPRESSION_LIMIT 0x401 
#define PIC_CAPTURE_ABILITY 0x402 
#define ALARMHOST_ABILITY 0x500
#define IT_DEVICE_ABILITY 0x501 
#define SCREENCONTROL_ABILITY 0x600 
#define SCREENSERVER_ABILITY 0x610 
#define FISHEYE_ABILITY 0x700 
#define LCD_SCREEN_ABILITY 0x800 
#define ACS_ABILITY 0x801 
#define MERGEDEV_ABILITY 0x802 
#define CAM_FUSION_ABILITY 0x803 
#define OPTICAL_DEV_ACCESS_ABILITY 0x805 
#define NET_RING_ABILITY 0x806 
#define LED_ABILITY 0x807 
#define PUBLISHDEV_ABILITY 0x80a 
#define SCREEN_EXCHANGE_ABILITY 0x80b 
#define REMOTE_NETMGR_FOT_ABILITY 0x80e /*************************************************
参数配置结构、参数(其中_V30为9000新增)
**************************************************/
#define EXCEPTION_MAJOR_MAINBOARD_BOOT 0x1 
#define EXCEPTION_MINOR_PCIE_SCAN 0x1 
#define EXCEPTION_MINOR_DOWNLOAD_SUBBOARD 0xa 
#define EXCEPTION_MAJOR_SUBBOARD_BOOT 0x2 
#define EXCEPTION_MINOR_INEXISTENCE 0x1 
#define EXCEPTION_MINOR_UBOOT_DOWNLOAD 0xa 
#define EXCEPTION_MINOR_UBOOT_INIT 0xe 
#define EXCEPTION_MINOR_ROOTFS_DOWNLOAD 0x14 
#define EXCEPTION_MINOR_UIMAGE_DOWNLOAD 0x19 
#define EXCEPTION_MINOR_UBOOT_SETBOOTFLAG 0x1e 
#define EXCEPTION_MINOR_ROOTFS_BOOT_SUBBOARD 0x23 
#define EXCEPTION_MINOR_NEED_FILE_FINISH 0x28 
#define EXCEPTION_MAJOR_SUBBOARD_HARDWARE 0x3 
#define EXCEPTION_MINOR_AD 0x1 
#define EXCEPTION_MINOR_DA 0xa 
#define EXCEPTION_MINOR_TIMER 0xb 
#define EXCEPTION_MAJOR_FPGA 0x4 
#define EXCEPTION_MINOR_IDLE 0x1 
#define EXCEPTION_MINOR_LANE 0xa 
#define EXCEPTION_MINOR_REGISTER_ALL_F 0xe 
#define EXCEPTION_MINOR_MEMORY_INIT_FAIL 0x14
#define EXCEPTION_MAJOR_DSP 0x5 
#define EXCEPTION_MAJOR_ARM 0x6 
#define EXCEPTION_MAJOR_BACKBOARD 0x7 
#define EXCEPTION_MINOR_BLACKBOARD_TYPE 0x1 
#define EXCEPTION_MINOR_SERDES 0xa 
#define EXCEPTION_MINOR_CLOCK 0xe 
#define EXCEPTION_MINOR_SYNCH 0x14 
#define EXCEPTION_MAJOR_SUBBOARD_NET 0x8 
#define EXCEPTION_MINOR_IP_CONFLICT 0x1 
#define EXCEPTION_MINOR_DISCONNECT 0x14 
#define MAX_FIRE_ALARM_ZONE 12 
#define MAX_FIRE_ALARM_POINT_ZONE 32 
typedef enum tagCharEncodeType
{
 ENUM_MEM_CHAR_ENCODE_ERR = -1, ENUM_MEM_CHAR_ENCODE_NO = 0, ENUM_MEM_CHAR_ENCODE_CN = 1, ENUM_MEM_CHAR_ENCODE_GBK = 2, ENUM_MEM_CHAR_ENCODE_BIG5 = 3, ENUM_MEM_CHAR_ENCODE_JP = 4, ENUM_MEM_CHAR_ENCODE_KR = 5, ENUM_MEM_CHAR_ENCODE_UTF8 = 6, ENUM_MEM_CHAR_ENCODE_ISO8859_1 = 7, ENUM_MEM_CHAR_ENCODE_UNICODE = 8, }CHAR_ENCODE_TYPE;
typedef struct
{
 DWORD dwYear;
DWORD dwMonth;
DWORD dwDay;
DWORD dwHour;
DWORD dwMinute;
DWORD dwSecond;
}NET_DVR_TIME, *LPNET_DVR_TIME;
typedef struct tagNET_DVR_TIME_V30
{
 WORD wYear;
 BYTE byMonth;
 BYTE byDay;
 BYTE byHour;
 BYTE byMinute;
 BYTE bySecond;
 BYTE byISO8601;
 WORD	wMilliSec;
char cTimeDifferenceH;
		 char cTimeDifferenceM;
	}NET_DVR_TIME_V30, *LPNET_DVR_TIME_V30;
typedef struct tagNET_DVR_TIME_SEARCH
{
 WORD wYear;
BYTE byMonth;
BYTE byDay;
BYTE byHour;
BYTE byMinute;
BYTE bySecond;
char cTimeDifferenceH;
char cTimeDifferenceM;
BYTE byLocalOrUTC;
WORD wMillisecond;
}NET_DVR_TIME_SEARCH, *LPNET_DVR_TIME_SEARCH;
typedef struct tagNET_DVR_TIME_SEARCH_COND
{
 WORD wYear;
BYTE byMonth;
BYTE byDay;
BYTE byHour;
BYTE byMinute;
BYTE bySecond;
BYTE byLocalOrUTC;
WORD wMillisecond;
char cTimeDifferenceH;
char cTimeDifferenceM;
}NET_DVR_TIME_SEARCH_COND, *LPNET_DVR_TIME_SEARCH_COND;
typedef struct tagNET_DVR_TIME_V50
{
 WORD 		wYear;
		 BYTE		byMonth;
BYTE 		byDay;
		 BYTE 		byHour;
		 BYTE 		byMinute;
	 BYTE 		bySecond;
	 BYTE 	 byISO8601;
WORD 	 wMillisecond;
char cTimeDifferenceH;
char cTimeDifferenceM;
}NET_DVR_TIME_V50, *LPNET_DVR_TIME_V50;
typedef struct tagNET_DVR_CALIBRATE_TIME
{
 DWORD dwSize;
 NET_DVR_TIME struTime;
 WORD wMilliSec;
 BYTE byRes[14];
}NET_DVR_CALIBRATE_TIME,*LPNET_DVR_CALIBRATE_TIME;
#define MAX_TIMESIGN_LEN 32 
typedef struct tagNET_DVR_TIMESIGN_CFG
{
 DWORD dwSize;
 BYTE byCustomSetTimeSign[MAX_TIMESIGN_LEN];
BYTE byRes[96];
 
}NET_DVR_TIMESIGN_CFG,*LPNET_DVR_TIMESIGN_CFG;
typedef struct tagNET_DVR_TIME_EX
{
 WORD wYear;
 BYTE byMonth;
 BYTE byDay;
 BYTE byHour;
 BYTE byMinute;
 BYTE bySecond;
 BYTE byRes;
}NET_DVR_TIME_EX,*LPNET_DVR_TIME_EX;
typedef struct
{
 BYTE byStartHour;
 BYTE byStartMin;
 BYTE byStopHour;
 BYTE byStopMin;
}NET_DVR_SCHEDTIME, *LPNET_DVR_SCHEDTIME;
#define NOACTION 0x0 
#define WARNONMONITOR 0x1 
#define WARNONAUDIOOUT 0x2 
#define UPTOCENTER 0x4 
#define TRIGGERALARMOUT 0x8 
#define TRIGGERCATPIC 0x10 
#define SEND_PIC_FTP 0x200 
typedef struct tagNET_DVR_STRUCTHEAD
{
 WORD wLength;
BYTE byVersion ;
 BYTE byRes;
}NET_DVR_STRUCTHEAD, *LPNET_DVR_STRUCTHEAD;
typedef struct tagNET_DVR_HANDLEEXCEPTION_V41
{ 
 DWORD dwHandleType;
 DWORD dwMaxRelAlarmOutChanNum ;
DWORD dwRelAlarmOut[MAX_ALARMOUT_V40];
BYTE byRes[64];
}NET_DVR_HANDLEEXCEPTION_V41, *LPNET_DVR_HANDLEEXCEPTION_V41;
typedef struct tagNET_DVR_HANDLEEXCEPTION_V40
{ 
 DWORD dwHandleType;
 
 
 DWORD dwMaxRelAlarmOutChanNum ;
DWORD dwRelAlarmOutChanNum;
DWORD dwRelAlarmOut[MAX_CHANNUM_V30];
BYTE byWhiteLightDurationTime;
BYTE byBrightness;
BYTE byAudioType;
BYTE byTimes;
BYTE byRes[60];
}NET_DVR_HANDLEEXCEPTION_V40, *LPNET_DVR_HANDLEEXCEPTION_V40;
typedef struct
{
 DWORD dwHandleType;
 BYTE byRelAlarmOut[MAX_ALARMOUT_V30];
 }NET_DVR_HANDLEEXCEPTION_V30, *LPNET_DVR_HANDLEEXCEPTION_V30;
typedef struct
{
 DWORD dwHandleType;
 BYTE byRelAlarmOut[MAX_ALARMOUT];
}NET_DVR_HANDLEEXCEPTION, *LPNET_DVR_HANDLEEXCEPTION;
typedef struct
{
 DWORD dwSize;
 BYTE sDVRName[NAME_LEN];
DWORD dwDVRID;
DWORD dwRecycleRecord;
BYTE sSerialNumber[SERIALNO_LEN];
DWORD dwSoftwareVersion;
DWORD dwSoftwareBuildDate;
DWORD dwDSPSoftwareVersion;
DWORD dwDSPSoftwareBuildDate;
DWORD dwPanelVersion;
DWORD dwHardwareVersion;
BYTE byAlarmInPortNum;
BYTE byAlarmOutPortNum;
BYTE byRS232Num;
BYTE byRS485Num;
BYTE byNetworkPortNum;
BYTE byDiskCtrlNum;
BYTE byDiskNum;
BYTE byDVRType;
BYTE byChanNum;
BYTE byStartChan;
BYTE byDecordChans;
BYTE byVGANum;
BYTE byUSBNum;
BYTE byAuxoutNum;
BYTE byAudioNum;
BYTE byIPChanNum;
}NET_DVR_DEVICECFG, *LPNET_DVR_DEVICECFG;
/*
IP地址
*/
typedef struct
{ 
 char sIpV4[16];
 BYTE byIPv6[128];
}NET_DVR_IPADDR, *LPNET_DVR_IPADDR;
typedef struct tagNET_DVR_ADDRESS
{
 NET_DVR_IPADDR struIP;
WORD wPort;
BYTE byRes[2];
}NET_DVR_ADDRESS, *LPNET_DVR_ADDRESS;
/*
网络数据结构(子结构)(9000扩展)
*/
typedef struct 
{
 NET_DVR_IPADDR struDVRIP;
NET_DVR_IPADDR struDVRIPMask;
DWORD dwNetInterface;
WORD wDVRPort;
WORD wMTU;
BYTE byMACAddr[MACADDR_LEN];
BYTE byEthernetPortNo;
BYTE byRes[1];
}NET_DVR_ETHERNET_V30, *LPNET_DVR_ETHERNET_V30;
/*
网络数据结构(子结构)
*/
typedef struct
{
 char sDVRIP[16];
char sDVRIPMask[16];
DWORD dwNetInterface;
WORD wDVRPort;
BYTE byMACAddr[MACADDR_LEN];
}NET_DVR_ETHERNET;
typedef struct 
{
 DWORD dwPPPOE;
BYTE sPPPoEUser[NAME_LEN];
char sPPPoEPassword[PASSWD_LEN];
NET_DVR_IPADDR struPPPoEIP;
}NET_DVR_PPPOECFG, *LPNET_DVR_PPPOECFG;
typedef struct
{ 
 DWORD dwSize;
 NET_DVR_ETHERNET_V30 struEtherNet[MAX_ETHERNET];
NET_DVR_IPADDR struRes1[2];
 NET_DVR_IPADDR struAlarmHostIpAddr;
 BYTE byRes2[4];
 WORD wAlarmHostIpPort;
 BYTE byUseDhcp;
 BYTE byIPv6Mode;
NET_DVR_IPADDR struDnsServer1IpAddr;
 NET_DVR_IPADDR struDnsServer2IpAddr;
 BYTE byIpResolver[MAX_DOMAIN_NAME];
 WORD wIpResolverPort;
 WORD wHttpPortNo;
 NET_DVR_IPADDR struMulticastIpAddr;
 NET_DVR_IPADDR struGatewayIpAddr;
 NET_DVR_PPPOECFG struPPPoE;
 BYTE byEnablePrivateMulticastDiscovery;
BYTE byEnableOnvifMulticastDiscovery;
BYTE byEnableDNS;
BYTE byRes[61];
} NET_DVR_NETCFG_V30, *LPNET_DVR_NETCFG_V30;
typedef struct 
{
 NET_DVR_IPADDR struDVRIP;
NET_DVR_IPADDR struDVRIPMask;
DWORD dwNetInterface;
BYTE byCardType;
BYTE byEnableDNS;
WORD wMTU;
BYTE byMACAddr[MACADDR_LEN];
BYTE byEthernetPortNo;
BYTE bySilkScreen;
BYTE byUseDhcp;
 BYTE byRes3[3];
 NET_DVR_IPADDR struGatewayIpAddr;
 NET_DVR_IPADDR struDnsServer1IpAddr;
 
 NET_DVR_IPADDR struDnsServer2IpAddr;
 
}NET_DVR_ETHERNET_MULTI, *LPNET_DVR_ETHERNET_MULTI;
typedef struct
{
 DWORD dwSize;
 BYTE byDefaultRoute;
BYTE byNetworkCardNum;
BYTE byWorkMode;
BYTE byRes;
NET_DVR_ETHERNET_MULTI struEtherNet[MAX_NETWORK_CARD];
NET_DVR_IPADDR struManageHost1IpAddr;
 NET_DVR_IPADDR struManageHost2IpAddr;
 NET_DVR_IPADDR struAlarmHostIpAddr;
 
 WORD wManageHost1Port;
 WORD wManageHost2Port;
 WORD wAlarmHostIpPort;
 BYTE byIpResolver[MAX_DOMAIN_NAME];
 WORD wIpResolverPort;
 
 WORD wDvrPort;
WORD wHttpPortNo;
 
 WORD wDvrPort2;
BYTE byRes2[4];
 NET_DVR_IPADDR struMulticastIpAddr;
 
 NET_DVR_PPPOECFG struPPPoE;
 BYTE byRes3[24];
}NET_DVR_NETCFG_MULTI, *LPNET_DVR_NETCFG_MULTI;
typedef struct
{
 DWORD dwSize;
 NET_DVR_ETHERNET struEtherNet[MAX_ETHERNET];
 char sManageHostIP[16];
WORD wManageHostPort;
char sIPServerIP[16];
char sMultiCastIP[16];
char sGatewayIP[16];
char sNFSIP[16];
BYTE sNFSDirectory[PATHNAME_LEN];
DWORD dwPPPOE;
BYTE sPPPoEUser[NAME_LEN];
char sPPPoEPassword[PASSWD_LEN];
char sPPPoEIP[16];
WORD wHttpPort;
}NET_DVR_NETCFG, *LPNET_DVR_NETCFG;
typedef struct tagNET_DVR_NETCFG_V50
{
 DWORD dwSize;
 NET_DVR_ETHERNET_V30 struEtherNet[MAX_ETHERNET];
NET_DVR_IPADDR struRes1[2];
 NET_DVR_IPADDR struAlarmHostIpAddr;
 BYTE byRes2[4];
 WORD wAlarmHostIpPort;
 BYTE byUseDhcp;
 BYTE byIPv6Mode;
NET_DVR_IPADDR struDnsServer1IpAddr;
 NET_DVR_IPADDR struDnsServer2IpAddr;
 BYTE byIpResolver[MAX_DOMAIN_NAME];
 WORD wIpResolverPort;
 WORD wHttpPortNo;
 NET_DVR_IPADDR struMulticastIpAddr;
 NET_DVR_IPADDR struGatewayIpAddr;
 NET_DVR_PPPOECFG struPPPoE;
 BYTE byEnablePrivateMulticastDiscovery;
BYTE byEnableOnvifMulticastDiscovery;
WORD wAlarmHost2IpPort;
 NET_DVR_IPADDR struAlarmHost2IpAddr;
 BYTE byEnableDNS;
BYTE byRes[599];
}NET_DVR_NETCFG_V50, *LPNET_DVR_NETCFG_V50;
typedef struct tagNET_DVR_SIP_CFG
{
 DWORD dwSize;
 BYTE byEnableAutoLogin;
BYTE byLoginStatus;
BYTE byRes1[2];
 NET_DVR_IPADDR stuServerIP;
WORD wServerPort;
BYTE byRes2[2];
 BYTE byUserName[NAME_LEN];
BYTE byPassWord[PASSWD_LEN];
BYTE byLocalNo[MAX_NUMBER_LEN];
 BYTE byDispalyName[MAX_NAME_LEN];
WORD wLocalPort;
BYTE byLoginCycle;
BYTE byType;
BYTE byDomainName[MAX_DOMAIN_NAME];
BYTE byRes[64];
}NET_DVR_SIP_CFG, *LPNET_DVR_SIP_CFG;
typedef struct tagNET_DVR_SIP_CFG_V50
{
 DWORD dwSize;
 BYTE byEnableAutoLogin;
BYTE byLoginStatus;
BYTE byRes1[2];
 NET_DVR_IPADDR stuServerIP;
WORD wServerPort;
BYTE byRes2[2];
 BYTE byUserName[NAME_LEN];
BYTE byPassWord[PASSWD_LEN];
BYTE byLocalNo[MAX_NUMBER_LEN];
 BYTE byDispalyName[MAX_NAME_LEN];
WORD wLocalPort;
BYTE byLoginCycle;
BYTE byRes3;
 BYTE bySIPServerDomain[MAX_DOMAIN_NAME];
NET_DVR_IPADDR stuSTUNServerIP;
BYTE bySTUNServerDomain[MAX_DOMAIN_NAME];
WORD wSTUNServerPort;
BYTE byRes4[2];
 NET_DVR_IPADDR stuProxyServerIP;
BYTE byProxyServerDomain[MAX_DOMAIN_NAME];
WORD wProxyServerPort;
BYTE byNetWork;
BYTE byRes[257];
}NET_DVR_SIP_CFG_V50, *LPNET_DVR_SIP_CFG_V50;
typedef struct tagNET_DVR_IP_VIEW_DEVCFG
{
 DWORD dwSize;
 BYTE byDefaultRing;
BYTE byRingVolume;
BYTE byInputVolume;
BYTE byOutputVolume;
WORD wRtpPort;
BYTE byRes1[2];
 DWORD dwPreviewDelayTime;
BYTE byRes2[64];
}NET_DVR_IP_VIEW_DEVCFG,*LPNET_DVR_IP_VIEW_DEVCFG;
typedef struct tagNET_DVR_IP_VIEW_AUDIO_CFG
{
 DWORD dwSize;
 BYTE byAudioEncPri1;
BYTE byAudioEncPri2;
WORD wAudioPacketLen1;
WORD wAudioPacketLen2;
BYTE byRes[30];
}NET_DVR_IP_VIEW_AUDIO_CFG,*LPNET_DVR_IP_VIEW_AUDIO_CFG;
typedef struct tagNET_DVR_IP_VIEW_CALL_CFG
{
 DWORD dwSize ;
 BYTE byEnableAutoResponse;
BYTE byAudoResponseTime;
BYTE byRes1[2];
 BYTE byEnableAlarmNumber1;
BYTE byRes2[3];
 BYTE byAlarmNumber1[MAX_NUMBER_LEN];
BYTE byEnableAlarmNumber2;
BYTE byRes3[3];
 BYTE byAlarmNumber2[MAX_NUMBER_LEN];
BYTE byRes4[72];
}NET_DVR_IP_VIEW_CALL_CFG,*LPNET_DVR_IP_VIEW_CALL_CFG;
typedef struct
{ 
 DWORD dwMaxRecordChanNum;
DWORD dwCurRecordChanNum;
DWORD dwRelRecordChan[MAX_CHANNUM_V30];
 BYTE byRes[64];
}NET_DVR_RECORDCHAN, *LPNET_DVR_RECORDCHAN;
typedef struct 
{
 BYTE byMotionScope[64][96];
 BYTE byMotionSensitive;
 BYTE byEnableHandleMotion;
 BYTE byEnableDisplay;
 char reservedData;
 NET_DVR_HANDLEEXCEPTION_V30 struMotionHandleType;
 NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];
 
 BYTE byRelRecordChan[MAX_CHANNUM_V30];
}NET_DVR_MOTION_V30, *LPNET_DVR_MOTION_V30;
typedef struct 
{
 BYTE byMotionScope[18][22];
 BYTE byMotionSensitive;
 BYTE byEnableHandleMotion;
 BYTE byEnableDisplay;
 char reservedData;
 NET_DVR_HANDLEEXCEPTION strMotionHandleType;
 NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT];
BYTE byRelRecordChan[MAX_CHANNUM];
 }NET_DVR_MOTION, *LPNET_DVR_MOTION;
typedef struct 
{
 DWORD dwEnableHideAlarm;
 WORD wHideAlarmAreaTopLeftX;
 WORD wHideAlarmAreaTopLeftY;
 WORD wHideAlarmAreaWidth;
 WORD wHideAlarmAreaHeight;
 NET_DVR_HANDLEEXCEPTION_V30 strHideAlarmHandleType;
 NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];
}NET_DVR_HIDEALARM_V30, *LPNET_DVR_HIDEALARM_V30;
typedef struct 
{
 DWORD dwEnableHideAlarm;
 WORD wHideAlarmAreaTopLeftX;
 WORD wHideAlarmAreaTopLeftY;
 WORD wHideAlarmAreaWidth;
 WORD wHideAlarmAreaHeight;
 NET_DVR_HANDLEEXCEPTION strHideAlarmHandleType;
 NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT];
}NET_DVR_HIDEALARM, *LPNET_DVR_HIDEALARM;
typedef struct 
{
 BYTE byEnableHandleVILost;
 NET_DVR_HANDLEEXCEPTION_V30 strVILostHandleType;
 NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];
}NET_DVR_VILOST_V30, *LPNET_DVR_VILOST_V30;
typedef struct 
{
 BYTE byEnableHandleVILost;
 NET_DVR_HANDLEEXCEPTION strVILostHandleType;
 NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT];
}NET_DVR_VILOST, *LPNET_DVR_VILOST;
typedef struct 
{
 WORD wHideAreaTopLeftX;
 WORD wHideAreaTopLeftY;
 WORD wHideAreaWidth;
 WORD wHideAreaHeight;
}NET_DVR_SHELTER, *LPNET_DVR_SHELTER;
typedef struct
{
 BYTE byBrightness;
 BYTE byContrast;
 BYTE bySaturation;
 BYTE byHue;
}NET_DVR_COLOR, *LPNET_DVR_COLOR;
typedef struct
{
 BYTE byRed;
BYTE byGreen;
BYTE byBlue;
BYTE byRes;
}NET_DVR_RGB_COLOR, *LPNET_DVR_RGB_COLOR;
typedef struct tagNET_VCA_POINT
{ 
 float fX;
float fY;
}NET_VCA_POINT, *LPNET_VCA_POINT;
typedef struct
{
 DWORD dwSize;
 BYTE sChanName[NAME_LEN];
 DWORD dwVideoFormat;
 BYTE byReservedData[64];
 DWORD dwShowChanName;
WORD wShowNameTopLeftX;
 WORD wShowNameTopLeftY;
 NET_DVR_VILOST_V30 struVILost;
 NET_DVR_VILOST_V30 struRes;
 NET_DVR_MOTION_V30 struMotion;
 NET_DVR_HIDEALARM_V30 struHideAlarm;
 DWORD dwEnableHide;
 NET_DVR_SHELTER struShelter[MAX_SHELTERNUM];
 DWORD dwShowOsd;
WORD wOSDTopLeftX;
 WORD wOSDTopLeftY;
 BYTE byOSDType;
 BYTE byDispWeek;
 BYTE byOSDAttrib;
 BYTE byHourOSDType;
 BYTE byFontSize;
BYTE byOSDColorType;
/*当对齐方式选择国标模式时，可以分别对右下角、左下角两个区域做字符叠加。
 右下角区域：
 共支持6行字符叠加，可以通过NET_DVR_SET_SHOWSTRING_V30字符叠加接口，对应NET_DVR_SHOWSTRINGINFO结构体数组中的第0至第5个下标的值。叠加字符的方式为从下到上的方式。
 左下角区域：
 共支持2行字符叠加，可以通过NET_DVR_SET_SHOWSTRING_V30字符叠加接口，对应NET_DVR_SHOWSTRINGINFO结构体数组中的第6和第7个下标的值。叠加字符的方式为从下到上的方式。
 */
 BYTE byAlignment;
BYTE byOSDMilliSecondEnable;
NET_DVR_RGB_COLOR struOsdColor;
DWORD dwBoundary;
NET_DVR_RGB_COLOR struOsdBkColor;
BYTE byOSDBkColorMode;
BYTE byUpDownBoundary;
BYTE byLeftRightBoundary;
BYTE byAngleEnabled;
WORD wTiltAngleTopLeftX;
 WORD wTiltAngleTopLeftY;
 BYTE byRes[40];
}NET_DVR_PICCFG_V30, *LPNET_DVR_PICCFG_V30;
typedef struct 
{
 DWORD dwSize;
 BYTE sChanName[NAME_LEN];
 DWORD dwVideoFormat;
 BYTE byBrightness;
 BYTE byContrast;
 BYTE bySaturation;
 BYTE byHue;
 DWORD dwShowChanName;
WORD wShowNameTopLeftX;
 WORD wShowNameTopLeftY;
 NET_DVR_VILOST struVILost;
 NET_DVR_MOTION struMotion;
 NET_DVR_HIDEALARM struHideAlarm;
 DWORD dwEnableHide;
 NET_DVR_SHELTER struShelter[MAX_SHELTERNUM];
 DWORD dwShowOsd;
WORD wOSDTopLeftX;
 WORD wOSDTopLeftY;
 BYTE byOSDType;
 BYTE byDispWeek;
 BYTE byOSDAttrib;
 BYTE byHourOsdType;
}NET_DVR_PICCFG_EX, *LPNET_DVR_PICCFG_EX;
typedef struct 
{
 DWORD dwSize;
 BYTE sChanName[NAME_LEN];
 DWORD dwVideoFormat;
 BYTE byBrightness;
 BYTE byContrast;
 BYTE bySaturation;
 BYTE byHue;
 DWORD dwShowChanName;
WORD wShowNameTopLeftX;
 WORD wShowNameTopLeftY;
 NET_DVR_VILOST struVILost;
 NET_DVR_MOTION struMotion;
 NET_DVR_HIDEALARM struHideAlarm;
 DWORD dwEnableHide;
 WORD wHideAreaTopLeftX;
 WORD wHideAreaTopLeftY;
 WORD wHideAreaWidth;
 WORD wHideAreaHeight;
 DWORD dwShowOsd;
WORD wOSDTopLeftX;
 WORD wOSDTopLeftY;
 BYTE byOSDType;
 BYTE byDispWeek;
 BYTE byOSDAttrib;
 char reservedData2;
}NET_DVR_PICCFG, *LPNET_DVR_PICCFG;
typedef enum _BITRATE_ENCODE_INDEX_
{
 BITRATE_ENCODE_def = 0,
 BITRATE_ENCODE_8kps = 1,
 BITRATE_ENCODE_16kps = 2,
 BITRATE_ENCODE_32kps = 3,
 BITRATE_ENCODE_64kps = 4,
 BITRATE_ENCODE_128kps = 5,
 BITRATE_ENCODE_192kps = 6,
 BITRATE_ENCODE_40kps = 7,
 BITRATE_ENCODE_48kps = 8,
 BITRATE_ENCODE_56kps = 9,
 BITRATE_ENCODE_80kps = 10,
 BITRATE_ENCODE_96kps = 11,
 BITRATE_ENCODE_112kps = 12,
 BITRATE_ENCODE_144kps = 13,
 BITRATE_ENCODE_160kps = 14,
 BITRATE_ENCODE_224kps = 15,
 BITRATE_ENCODE_256kps = 16,
 BITRATE_ENCODE_320kps = 17
}BITRATE_ENCODE_INDEX;
typedef struct 
{
 BYTE byStreamType;
/*分辨率0-DCIF 1-CIF, 2-QCIF, 3-4CIF, 
 4-2CIF 5（保留）, 6-QVGA(320*240), 7-QQVGA(160*120), 
 12-384*288 13-576*576, 
 16-VGA（640*480）, 17-UXGA（1600*1200）, 18-SVGA(800*600), 19-HD720p(1280*720）, 
 20-XVGA, 21-HD900p, 22-1360*1024, 23-1536*1536, 
 24-1920*1920, 27-HD1080i, 
 28-2560*1920, 29-1600*304, 30-2048*1536, 31-2448*2048, 
 32-2448*1200, 33-2448*800, 34-XGA（1024*768）， 35-SXGA（1280*1024）, 
 36-WD1(960*576/960*480), 37-1080i, 38-WSXGA(1440*900), 39-HD_F(1920*1080/1280*720), 
 40-HD_H(1920*540/1280*360), 41-HD_Q(960*540/630*360), 42-2336*1744, 43-1920*1456, 
 44-2592*2048, 45-3296*2472, 46-1376*768, 47-1366*768, 
 48-1360*768, 49-WSXGA+, 50-720*720, 51-1280*1280, 
 52-2048*768, 53-2048*2048, 54-2560*2048, 55-3072*2048,
 56-2304*1296 57-WXGA(1280*800), 58-1600*600, 59-1600*900,
 60-2752*2208, 61-保留, 62-4000*3000, 63-4096*2160,
 64-3840*2160, 65-4000*2250, 66-3072*1728, 67-2592*1944,
 68-2464*1520, 69-1280*1920, 70-2560*1440, 71-1024*1024,
 72-160*128, 73-324*240, 74-324*256, 75-336*256, 
 76-640*512, 77-2720*2048, 78-384*256, 79-384*216, 
 80-320*256, 81-320*180, 82-320*192, 83-512*384,
 84-325*256, 85-256*192, 86-640*360, 87-1776x1340,
 88-1936x1092, 89-2080x784, 90-2144x604, 91-1920*1200,
 92-4064*3040, 93-3040*3040, 94-3072*2304, 95-3072*1152,
 96-2560*2560, 97-2688*1536, 98-2688*1520, 99-3072*3072,
 100-3392*2008, 101-4000*3080, 102-960*720, 103-1024*1536,
 104-704*1056, 105-352*528, 106-2048*1530, 107-2560*1600,
 108-2800*2100, 109-4088*4088, 110-4000*3072, 111-960*1080(1080p Lite)
 112-640*720(half 720p), 113-640*960, 114-320*480, 115-3840*2400,
 116-3840*1680, 117-2560*1120, 118-704*320, 119-1200*1920,
 120-480*768, 121-768*480, 122-320*512, 123-512*320,
 124-4096*1800, 125-1280*560, 126-2400*3840, 127-480*272,
 128-512*272, 129-2592*2592, 130-1792*2880, 131-1600*2560,
 132-2720*1192, 133-3MP(1920*1536/2048*1536)， 134-5MP(2560*1944)，
 135-2560*960, 136-2064*1544 137-4096*1200,
 138-3840*1080 139-2720*800 140-512*232 141-704*200,
 142-512*152, 143-2048*896 144-2048*600 145-1280*376,
 146-2592*1520, 147-2592*1536, 148-3072*8192, 149-768*2048,
 150-8208*3072, 151-4096*1536, 152-6912*2800, 153-3456*1400
 154-480*720, 155-800*450, 156-480*270, 157-2560*1536,
 160-3264*2448, 161-288*320, 162-144*176, 163-480*640, 
 164-240*320, 165-120*160, 166-576*720, 167-720*1280,
 168-576*960, 169-2944*1656, 170-432*240, 171-2160*3840,
 172-1080*1920, 173-7008*1080, 174-3504*540, 175-1752*270,
 176-876*135, 177-4096*1440, 178-4096*1080, 179-1536*864,
 180-180*240, 181-360*480, 182-540*720, 183-720*960, 
 184-960*1280, 185-1080*1440,
 186-3200*1800, 187-1752*272, 188-872*136, 189-1280*1440,
 190-3520*544, 191-1728*256, 192-864*128, 193-5470*3684,
 194-2560*750, 195-1600*480, 196-1024*300, 197-848*480,
							198-8160*3616,				199-8160*2304, 200-4064*2560, 201-1400*1050,
 202-2688*1512, 203-704*288, 204-1560*656, 205-3072*1280,
 206-4320*1808, 207-6120*2560, 208-1280*960, 209-3000*3000,
 210-2032*3616, 211-7680*4320, 212-5760*3240, 213-3264*1836,
 214-2712*1536, 215-1080*720(占位，未测试), 216-360x640(占位，未测试),217-1440*812,
 218-8160*2416, 219-5760*1712, 220-4080*1200, 221-6144*2560,
 222-1568*656, 223-4096*1808, 224-2720*1200, 225-2896*848
 226-2048*608 227-3840*1120 228-2720*784 229-1920*560,
 230-1360*400 231-704*208 232-496*144 233-352*128,
 234-512*240 235-512*160 236-368*128 237-256*128
 238-2048*592 239-1456*416 240-1024*304 241-1280*368
 242-912*256 243-640*192 244-252*112 （未使用） 245-(576*704[P制]/480*704[N制])
 
 254-表示超出该字段范围，使用NET_DVR_MULTI_STREAM_COMPRESSIONCFG中的dwResolution表示分辨率
 0xff-Auto(使用当前码流分辨率)
 256-3888*1696 257-2784*1200 258-496*224 259-352*160
 260-912*400 261-640*288 262-1456*640 263-1024*448
 264-2896*1280 265-2544*1080 266-2736*768 267-1920*544
 268-3840*1696 269-2880*848 270-5424*2400 271-5520*1600
 272-848*376 273-912*272 274-1360*600 275-1456*432
 276-2736*1200 277-5760*1696 278-8160*2400 279-5520*2400
 280-4608*2592 281-4944*3280 282-6016*4008 283-720*480
 284-3200*2400 285-2784*800 286-1968*848 287-1392*608
 288-2736*1184 289-1920*848 290-2560*2880 291-1944*1212
 292-1920*2400 293-384*384 294-768*768 295-4800*2688
 296-6480*1080 297-8640*1440 298-4800*800 299-6720*1200
 300-3600*600 301-4800*840 302-2400*400 303-3072*540
 304-1440*810 305-1920*320 306-2688*480 307-1440*240
 308-4800*1792 309-3360*1264 310-2304*880 311-3840*1440
 312-2688*1008 313-1824*704 314-1248*496 315-1920*720
 316-1344*496 317-912*336 318-1280*480 319-864*336
 320-576*224 321-2704*1008 322-1904*704 323-1808*672
 324-1264*464 325-944*336 326-2400*1344 327-2032*1440
 328-4064*1792 329-304*112 330-960*360 331-672*240
 332-464*160 333-896*336 334-624*224 335-640*240
 336-448*160 337-4976*1452 338-1968*560 339-2736*784
 340-3888*1136 341-6120*1800 342-4320*1280 343-3056*896
 344-1776*528 345-1392*400 346-7256*1520 347-512*288 
 348-1936*1210 349-640*400 350-2688*1792
 
 */
 BYTE byResolution;
 BYTE byBitrateType;
BYTE byPicQuality;
/*视频码率:0-保留，1-16K(保留)，2-32K，3-48k，4-64K，5-80K，6-96K，7-128K，8-160k，9-192K，10-224K，
 11-256K，12-320K，13-384K，14-448K，15-512K，16-640K，17-768K，18-896K，19-1024K，20-1280K，21-1536K，22-1792K，23-2048K，
 24-3072K，25-4096K，26-8192K，27-16384K。最高位(31位)置成1表示是自定义码流，0～30位表示码流值，最小值16k,0xfffffffe，自动，和源一致*/
 DWORD dwVideoBitrate;
 DWORD dwVideoFrameRate;
WORD wIntervalFrameI;
BYTE byIntervalBPFrame;
BYTE byres1;
BYTE byVideoEncType;
BYTE byAudioEncType;
BYTE byVideoEncComplexity;
BYTE byEnableSvc;
BYTE byFormatType;
BYTE byAudioBitRate;
BYTE byStreamSmooth;
BYTE byAudioSamplingRate;
BYTE bySmartCodec;
BYTE byDepthMapEnable;
WORD wAverageVideoBitrate;
 
}NET_DVR_COMPRESSION_INFO_V30, *LPNET_DVR_COMPRESSION_INFO_V30;
typedef struct
{
 DWORD dwSize;
 NET_DVR_COMPRESSION_INFO_V30 struNormHighRecordPara;
NET_DVR_COMPRESSION_INFO_V30 struRes;
NET_DVR_COMPRESSION_INFO_V30 struEventRecordPara;
NET_DVR_COMPRESSION_INFO_V30 struNetPara;
}NET_DVR_COMPRESSIONCFG_V30, *LPNET_DVR_COMPRESSIONCFG_V30;
typedef struct 
{
 BYTE byStreamType;
BYTE byResolution;
BYTE byBitrateType;
BYTE byPicQuality;
DWORD dwVideoBitrate;
DWORD dwVideoFrameRate;
}NET_DVR_COMPRESSION_INFO, *LPNET_DVR_COMPRESSION_INFO;
typedef struct 
{
 DWORD dwSize;
 NET_DVR_COMPRESSION_INFO struRecordPara;
NET_DVR_COMPRESSION_INFO struNetPara;
}NET_DVR_COMPRESSIONCFG, *LPNET_DVR_COMPRESSIONCFG;
typedef struct 
{
 BYTE byStreamType;
BYTE byResolution;
BYTE byBitrateType;
BYTE byPicQuality;
DWORD dwVideoBitrate;
DWORD dwVideoFrameRate;
WORD wIntervalFrameI;
BYTE byIntervalBPFrame;
BYTE byRes;
}NET_DVR_COMPRESSION_INFO_EX, *LPNET_DVR_COMPRESSION_INFO_EX;
typedef struct 
{
 DWORD dwSize;
 NET_DVR_COMPRESSION_INFO_EX struRecordPara;
NET_DVR_COMPRESSION_INFO_EX struNetPara;
}NET_DVR_COMPRESSIONCFG_EX, *LPNET_DVR_COMPRESSIONCFG_EX;
typedef struct 
{
 NET_DVR_SCHEDTIME struRecordTime;
 BYTE byRecordType;
char reservedData[3];
}NET_DVR_RECORDSCHED, *LPNET_DVR_RECORDSCHED;
typedef struct 
{
 WORD wAllDayRecord;
 BYTE byRecordType;
/* 录象类型 0:定时录像，1:移动侦测，2:报警录像，3:动测|报警，4:动测&报警 5:命令触发, 6: 智能录像,
 10-PIR报警，11-无线报警，12-呼救报警，13-移动|报警输入|PIR|无线报警|呼救报警,14-智能交通事件,15-越界侦测,16-区域入侵,17-声音异常,
 18-场景变更侦测,19-智能侦测（越界侦测|区域入侵|进入区域|离开区域|人脸识别）,20－人脸侦测, 21-POS录像*/
 char reservedData;
}NET_DVR_RECORDDAY, *LPNET_DVR_RECORDDAY;
typedef struct 
{
 DWORD dwSize;
 DWORD dwRecord;
 NET_DVR_RECORDDAY struRecAllDay[MAX_DAYS];
 NET_DVR_RECORDSCHED struRecordSched[MAX_DAYS][MAX_TIMESEGMENT_V30];
 DWORD dwRecordTime;
 DWORD dwPreRecordTime;
 DWORD dwRecorderDuration;
 BYTE byRedundancyRec;
 BYTE byAudioRec;
 BYTE byStreamType;
BYTE byPassbackRecord;
WORD wLockDuration;
BYTE byRecordBackup;
BYTE bySVCLevel;
BYTE byRecordManage;
BYTE byExtraSaveAudio;
 BYTE byIntelligentRecord;
BYTE byReserve;
}NET_DVR_RECORD_V30, *LPNET_DVR_RECORD_V30;
typedef struct 
{
 NET_DVR_SCHEDTIME struRecordTime;
 /*录像类型，0:定时录像，1:移动侦测，2:报警录像，3:动测|报警，4:动测&报警 5:命令触发, 
 6-智能报警录像，10-PIR报警，11-无线报警，12-呼救报警，13-全部事件,14-智能交通事件, 
 15-越界侦测,16-区域入侵,17-声音异常,18-场景变更侦测,
 19-智能侦测(越界侦测|区域入侵|人脸侦测|声音异常|场景变更侦测),20－人脸侦测,21-POS录像,
 22-进入区域侦测, 23-离开区域侦测,24-徘徊侦测,25-人员聚集侦测,26-快速运动侦测,27-停车侦测,
 28-物品遗留侦测,29-物品拿取侦测,30-火点检测，31-防破坏检测,32-打架斗殴事件(司法),33-起身事件(司法), 34-瞌睡事件(司法)
 35-船只检测, 36-测温预警，37-测温报警，38-温差报警，39-离线测温报警,40-防区报警，41-紧急求助,42-业务咨询,43-起身检测,44-折线攀高,45-如厕超时，46-人脸抓拍，47-非法摆摊,48-目标抓拍,
 49-剧烈运动，50离岗检测，51-起立，52人数变化 */
 BYTE byRecordType;
 
 BYTE byRes[31];
}NET_DVR_RECORDSCHED_V40, *LPNET_DVR_RECORDSCHED_V40;
typedef struct 
{
 BYTE byAllDayRecord;
 
 /*录像类型，0:定时录像，1:移动侦测，2:报警录像，3:动测|报警，4:动测&报警 5:命令触发, 
 6-智能报警录像，10-PIR报警，11-无线报警，12-呼救报警，13-全部事件,14-智能交通事件, 
 15-越界侦测,16-区域入侵,17-声音异常,18-场景变更侦测,
 19-智能侦测(越界侦测|区域入侵|人脸侦测|声音异常|场景变更侦测),20－人脸侦测,21-POS录像,
 22-进入区域侦测, 23-离开区域侦测,24-徘徊侦测,25-人员聚集侦测,26-快速运动侦测,27-停车侦测,
 28-物品遗留侦测,29-物品拿取侦测,30-火点检测，31-防破坏检测,32-打架斗殴事件(司法),33-起身事件(司法), 34-瞌睡事件(司法)
 35-船只检测, 36-测温预警，37-测温报警，38-温差报警，39-离线测温报警,40-防区报警，41-紧急求助,42-业务咨询,43-起身检测,44-折线攀高,45-如厕超时,46-人脸抓拍,47-非法摆摊,48-目标抓拍,
 49-剧烈运动，50离岗检测，51-起立，52人数变化*/
 BYTE byRecordType;
 
 BYTE byRes[62];
}NET_DVR_RECORDDAY_V40, *LPNET_DVR_RECORDDAY_V40;
typedef struct 
{
 DWORD dwSize;
 DWORD dwRecord;
 NET_DVR_RECORDDAY_V40 struRecAllDay[MAX_DAYS];
 NET_DVR_RECORDSCHED_V40 struRecordSched[MAX_DAYS][MAX_TIMESEGMENT_V30];
 DWORD dwRecordTime;
 DWORD dwPreRecordTime;
 DWORD dwRecorderDuration;
 BYTE byRedundancyRec;
 BYTE byAudioRec;
 BYTE byStreamType;
BYTE byPassbackRecord;
WORD wLockDuration;
BYTE byRecordBackup;
BYTE bySVCLevel;
BYTE byRecordManage;
BYTE byExtraSaveAudio;
 BYTE byIntelligentRecord;
BYTE byRes[125];
}NET_DVR_RECORD_V40, *LPNET_DVR_RECORD_V40;
typedef struct 
{
 DWORD dwSize;
 DWORD dwRecord;
 NET_DVR_RECORDDAY struRecAllDay[MAX_DAYS];
 NET_DVR_RECORDSCHED struRecordSched[MAX_DAYS][MAX_TIMESEGMENT];
 DWORD dwRecordTime;
 DWORD dwPreRecordTime;
}NET_DVR_RECORD, *LPNET_DVR_RECORD;
typedef struct
{ 
 DWORD dwType;
 BYTE byDescribe[DESC_LEN];
}NET_DVR_PTZ_PROTOCOL;
typedef struct
{ 
 DWORD dwSize;
 NET_DVR_PTZ_PROTOCOL struPtz[PTZ_PROTOCOL_NUM];
 DWORD dwPtzNum;
 BYTE byRes[8];
}NET_DVR_PTZCFG, *LPNET_DVR_PTZCFG;
typedef struct tagNET_DVR_SERIALSTART_V40 {
 DWORD dwSize;
DWORD dwSerialType;
BYTE bySerialNum;
BYTE byRes[255];
}NET_DVR_SERIALSTART_V40,*LPNET_DVR_SERIALSTART_V40;
typedef struct tagNET_DVR_DECODERCFG_V40
{
 DWORD dwSize;
DWORD dwBaudRate;
BYTE byDataBit;
BYTE byStopBit;
BYTE byParity;
BYTE byFlowcontrol;
WORD wDecoderType;
WORD wDecoderAddress;
BYTE bySetPreset [MAX_PRESET_V30];
BYTE bySetCruise[MAX_CRUISE_V30];
BYTE bySetTrack [MAX_TRACK_V30];
BYTE bySerialNO;
BYTE byWorkMode;
 BYTE byRes[254];
}NET_DVR_DECODERCFG_V40,*LPNET_DVR_DECODERCFG_V40;
typedef	struct tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO
{
 float fMaxTemperature;
float fMinTemperature;
float fAverageTemperature;
NET_VCA_POINT struHighestPoint;
NET_VCA_POINT struLowestPoint;
 	BYTE byIsFreezedata;
BYTE byRes[15];
}NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, *LPNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO;
typedef struct 
{
 DWORD dwSize;
 DWORD dwBaudRate;
BYTE byDataBit;
BYTE byStopBit;
BYTE byParity;
BYTE byFlowcontrol;
WORD wDecoderType;
WORD wDecoderAddress;
 BYTE bySetPreset[MAX_PRESET_V30];
 BYTE bySetCruise[MAX_CRUISE_V30];
 BYTE bySetTrack[MAX_TRACK_V30];
}NET_DVR_DECODERCFG_V30, *LPNET_DVR_DECODERCFG_V30;
typedef struct 
{
 DWORD dwSize;
 DWORD dwBaudRate;
BYTE byDataBit;
BYTE byStopBit;
BYTE byParity;
BYTE byFlowcontrol;
WORD wDecoderType;
WORD wDecoderAddress;
 BYTE bySetPreset[MAX_PRESET];
 BYTE bySetCruise[MAX_CRUISE];
 BYTE bySetTrack[MAX_TRACK];
}NET_DVR_DECODERCFG, *LPNET_DVR_DECODERCFG;
typedef struct 
{
 NET_DVR_IPADDR struRemoteIP;
NET_DVR_IPADDR struLocalIP;
char sLocalIPMask[16];
BYTE sUsername[NAME_LEN];
 BYTE sPassword[PASSWD_LEN];
 BYTE byPPPMode;
BYTE byRedial;
BYTE byRedialMode;
BYTE byDataEncrypt;
DWORD dwMTU;
char sTelephoneNumber[PHONENUMBER_LEN];
}NET_DVR_PPPCFG_V30, *LPNET_DVR_PPPCFG_V30;
typedef struct 
{
 char sRemoteIP[16];
char sLocalIP[16];
char sLocalIPMask[16];
BYTE sUsername[NAME_LEN];
 BYTE sPassword[PASSWD_LEN];
 BYTE byPPPMode;
BYTE byRedial;
BYTE byRedialMode;
BYTE byDataEncrypt;
DWORD dwMTU;
char sTelephoneNumber[PHONENUMBER_LEN];
}NET_DVR_PPPCFG, *LPNET_DVR_PPPCFG;
typedef struct
{
 DWORD dwBaudRate;
 BYTE byDataBit;
 BYTE byStopBit;
 BYTE byParity;
 BYTE byFlowcontrol;
 
 DWORD dwWorkMode;
}NET_DVR_SINGLE_RS232;
typedef struct tagNET_DVR_USB_RS232
{
 DWORD dwBaudRate;
 BYTE byDataBit;
 BYTE byStopBit;
 BYTE byParity;
 BYTE byFlowcontrol;
 
 BYTE byVirtualSerialPort;
BYTE byRes[3];
}NET_DVR_USB_RS232,*LPNET_DVR_USB_RS232;
typedef struct 
{
 DWORD dwSize;
 NET_DVR_SINGLE_RS232 struRs232[MAX_SERIAL_PORT];
 NET_DVR_PPPCFG_V30 struPPPConfig;
}NET_DVR_RS232CFG_V30, *LPNET_DVR_RS232CFG_V30;
typedef struct 
{
 DWORD dwSize;
 DWORD dwBaudRate;
BYTE byDataBit;
BYTE byStopBit;
BYTE byParity;
BYTE byFlowcontrol;
DWORD dwWorkMode;
NET_DVR_PPPCFG struPPPConfig;
}NET_DVR_RS232CFG, *LPNET_DVR_RS232CFG;
typedef struct 
{
 DWORD dwEnablePresetChan;
 DWORD dwPresetPointNo;
}NET_DVR_PRESETCHAN_INFO, LPNET_DVR_PRESETCHAN_INFO;
typedef struct 
{
 DWORD dwEnableCruiseChan;
 DWORD dwCruiseNo;
}NET_DVR_CRUISECHAN_INFO, LPNET_DVR_CRUISECHAN_INFO;
typedef struct 
{
 DWORD dwEnablePtzTrackChan;
 DWORD dwPtzTrackNo;
}NET_DVR_PTZTRACKCHAN_INFO, LPNET_DVR_PTZTRACKCHAN_INFO;
typedef struct tagNET_DVR_PTZ_NOTIFICATION_COND
{
 DWORD dwSize;
 /*
 0-facedetection,
 1-vehicleDetection,
 2-scenechangedetection,
 3-LineDetection,
 4-regionEntrance,
 5-regionExiting,
 6-loitering,
 7-group,
 8-rapidMove,
 9-parking,
 10-unattendedBaggage,
 11-attendedBaggage,
 12-audioDetection,
 13-PIR,
 14-defocusDetection
 15-temperature,
 16-fireDetection,
 17-thermometry,
 18-shipsDetection
 19-fieldDetection
 20-blackListFaceContrast
 21-whiteListFaceContrast
 22- humanRecognition
 23- faceContrast
 */
 WORD byEventType;
 BYTE byRes[2];
 DWORD dwChannel;
 BYTE byRes1[128];
}NET_DVR_PTZ_NOTIFICATION_COND, *LPNET_DVR_PTZ_NOTIFICATION_COND;
typedef struct tagNET_DVR_PTZ_NOTIFICATION_CFG
{
 DWORD dwSize;
 DWORD dwEnablePresetChanNum;
NET_DVR_PRESETCHAN_INFO struPresetChanInfo[MAX_CHANNUM_V40];
DWORD dwEnableCruiseChanNum;
NET_DVR_CRUISECHAN_INFO struCruiseChanInfo[MAX_CHANNUM_V40];
DWORD dwEnablePtzTrackChanNum;
NET_DVR_PTZTRACKCHAN_INFO struPtzTrackInfo[MAX_CHANNUM_V40];
BYTE byRes1[1024];
}NET_DVR_PTZ_NOTIFICATION_CFG, *LPNET_DVR_PTZ_NOTIFICATION_CFG;
typedef struct tagNET_DVR_PTZ_NOTIFICATION
{
 DWORD dwSize;
 /*
 0-facedetection,
 1-vehicleDetection,
 2-scenechangedetection,
 3-LineDetection,
 4-regionEntrance,
 5-regionExiting,
 6-loitering,
 7-group,
 8-rapidMove,
 9-parking,
 10-unattendedBaggage,
 11-attendedBaggage,
 12-audioDetection,
 13-PIR,
 14-defocusDetection，
 15-temperature,
 16-fireDetection,
 17-thermometry,
 18-shipsDetection
 19-fieldDetection
 20-blackListFaceContrast
 21-whiteListFaceContrast
 22- humanRecognition
 */
 WORD byEventType;
 BYTE byRes[62];
 DWORD dwEnablePresetChanNum;
NET_DVR_PRESETCHAN_INFO struPresetChanInfo[MAX_CHANNUM_V40];
DWORD dwEnableCruiseChanNum;
NET_DVR_CRUISECHAN_INFO struCruiseChanInfo[MAX_CHANNUM_V40];
DWORD dwEnablePtzTrackChanNum;
NET_DVR_PTZTRACKCHAN_INFO struPtzTrackInfo[MAX_CHANNUM_V40];
BYTE byRes1[1024];
}NET_DVR_PTZ_NOTIFICATION, *LPNET_DVR_PTZ_NOTIFICATION;
#define NET_SDK_MAX_EVENT_NUM 64 
typedef struct tagNET_DVR_ALARMINCFG_V40
{
 DWORD dwSize;
 BYTE sAlarmInName[NAME_LEN];
 BYTE byAlarmType;
BYTE byAlarmInHandle;
 BYTE byChannel;
BYTE byInputType;
DWORD dwHandleType;
 
 DWORD dwMaxRelAlarmOutChanNum ;
DWORD dwRelAlarmOutChanNum;
DWORD dwRelAlarmOut[MAX_ALARMOUT_V40];
NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];
 DWORD dwMaxRecordChanNum;
DWORD dwCurRecordChanNum;
DWORD dwRelRecordChan[MAX_CHANNUM_V40];
 DWORD dwMaxEnablePtzCtrlNun;
DWORD dwEnablePresetChanNum;
NET_DVR_PRESETCHAN_INFO struPresetChanInfo[MAX_CHANNUM_V40];
BYTE byPresetDurationTime[MAX_CHANNUM_V40];
BYTE byRes2[4];
 DWORD dwEnableCruiseChanNum;
NET_DVR_CRUISECHAN_INFO struCruiseChanInfo[MAX_CHANNUM_V40];
DWORD dwEnablePtzTrackChanNum;
NET_DVR_PTZTRACKCHAN_INFO struPtzTrackInfo[MAX_CHANNUM_V40];
WORD wEventType[NET_SDK_MAX_EVENT_NUM];
 BYTE byRes[128];
}NET_DVR_ALARMINCFG_V40, *LPNET_DVR_ALARMINCFG_V40;
typedef struct 
{
 DWORD dwSize;
 BYTE sAlarmInName[NAME_LEN];
 BYTE byAlarmType;
BYTE byAlarmInHandle;
 BYTE byChannel;
BYTE byInputType;
NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType;
 NET_DVR_SCHEDTIME struAlarmTime[MAX_DAYS][MAX_TIMESEGMENT_V30];
BYTE byRelRecordChan[MAX_CHANNUM_V30];
BYTE byEnablePreset[MAX_CHANNUM_V30];
 BYTE byPresetNo[MAX_CHANNUM_V30];
 BYTE byRes2[192];
 BYTE byEnableCruise[MAX_CHANNUM_V30];
 BYTE byCruiseNo[MAX_CHANNUM_V30];
 BYTE byEnablePtzTrack[MAX_CHANNUM_V30];
 BYTE byPTZTrack[MAX_CHANNUM_V30];
 BYTE byRes3[16];
}NET_DVR_ALARMINCFG_V30, *LPNET_DVR_ALARMINCFG_V30;
void test_NET_DVR_ALARMINCFG_V30(NET_DVR_ALARMINCFG_V30 *a){
    a->dwSize=100;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if(alloc) *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERN size_t
SWIG_strnlen(const char* s, size_t maxlen)
{
  const char *p;
  for (p = s; maxlen-- && *p; p++)
    ;
  return p - s;
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined __cplusplus && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_PLAYRECT_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PLAYRECT_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___PLAYRECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLAYRECT_x_set" "', argument " "1"" of type '" "__PLAYRECT *""'"); 
  }
  arg1 = reinterpret_cast< __PLAYRECT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PLAYRECT_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLAYRECT_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PLAYRECT_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___PLAYRECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLAYRECT_x_get" "', argument " "1"" of type '" "__PLAYRECT *""'"); 
  }
  arg1 = reinterpret_cast< __PLAYRECT * >(argp1);
  result = (int) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLAYRECT_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PLAYRECT_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___PLAYRECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLAYRECT_y_set" "', argument " "1"" of type '" "__PLAYRECT *""'"); 
  }
  arg1 = reinterpret_cast< __PLAYRECT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PLAYRECT_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLAYRECT_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PLAYRECT_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___PLAYRECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLAYRECT_y_get" "', argument " "1"" of type '" "__PLAYRECT *""'"); 
  }
  arg1 = reinterpret_cast< __PLAYRECT * >(argp1);
  result = (int) ((arg1)->y);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLAYRECT_uWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PLAYRECT_uWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___PLAYRECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLAYRECT_uWidth_set" "', argument " "1"" of type '" "__PLAYRECT *""'"); 
  }
  arg1 = reinterpret_cast< __PLAYRECT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PLAYRECT_uWidth_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->uWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLAYRECT_uWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PLAYRECT_uWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___PLAYRECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLAYRECT_uWidth_get" "', argument " "1"" of type '" "__PLAYRECT *""'"); 
  }
  arg1 = reinterpret_cast< __PLAYRECT * >(argp1);
  result = (int) ((arg1)->uWidth);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLAYRECT_uHeight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PLAYRECT_uHeight_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___PLAYRECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLAYRECT_uHeight_set" "', argument " "1"" of type '" "__PLAYRECT *""'"); 
  }
  arg1 = reinterpret_cast< __PLAYRECT * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PLAYRECT_uHeight_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->uHeight = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLAYRECT_uHeight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PLAYRECT_uHeight_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___PLAYRECT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLAYRECT_uHeight_get" "', argument " "1"" of type '" "__PLAYRECT *""'"); 
  }
  arg1 = reinterpret_cast< __PLAYRECT * >(argp1);
  result = (int) ((arg1)->uHeight);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PLAYRECT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __PLAYRECT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PLAYRECT")) SWIG_fail;
  result = (__PLAYRECT *)new __PLAYRECT();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p___PLAYRECT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PLAYRECT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PLAYRECT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___PLAYRECT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PLAYRECT" "', argument " "1"" of type '" "__PLAYRECT *""'"); 
  }
  arg1 = reinterpret_cast< __PLAYRECT * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PLAYRECT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p___PLAYRECT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_TIME_dwYear_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_TIME *arg1 = (NET_DVR_TIME *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_dwYear_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_dwYear_set" "', argument " "1"" of type '" "NET_DVR_TIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_TIME * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_dwYear_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_dwYear_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwYear = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_dwYear_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_TIME *arg1 = (NET_DVR_TIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_dwYear_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_dwYear_get" "', argument " "1"" of type '" "NET_DVR_TIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_TIME * >(argp1);
  result =  ((arg1)->dwYear);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_dwMonth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_TIME *arg1 = (NET_DVR_TIME *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_dwMonth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_dwMonth_set" "', argument " "1"" of type '" "NET_DVR_TIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_TIME * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_dwMonth_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_dwMonth_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwMonth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_dwMonth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_TIME *arg1 = (NET_DVR_TIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_dwMonth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_dwMonth_get" "', argument " "1"" of type '" "NET_DVR_TIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_TIME * >(argp1);
  result =  ((arg1)->dwMonth);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_dwDay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_TIME *arg1 = (NET_DVR_TIME *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_dwDay_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_dwDay_set" "', argument " "1"" of type '" "NET_DVR_TIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_TIME * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_dwDay_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_dwDay_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwDay = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_dwDay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_TIME *arg1 = (NET_DVR_TIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_dwDay_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_dwDay_get" "', argument " "1"" of type '" "NET_DVR_TIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_TIME * >(argp1);
  result =  ((arg1)->dwDay);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_dwHour_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_TIME *arg1 = (NET_DVR_TIME *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_dwHour_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_dwHour_set" "', argument " "1"" of type '" "NET_DVR_TIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_TIME * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_dwHour_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_dwHour_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwHour = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_dwHour_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_TIME *arg1 = (NET_DVR_TIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_dwHour_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_dwHour_get" "', argument " "1"" of type '" "NET_DVR_TIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_TIME * >(argp1);
  result =  ((arg1)->dwHour);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_dwMinute_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_TIME *arg1 = (NET_DVR_TIME *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_dwMinute_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_dwMinute_set" "', argument " "1"" of type '" "NET_DVR_TIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_TIME * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_dwMinute_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_dwMinute_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwMinute = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_dwMinute_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_TIME *arg1 = (NET_DVR_TIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_dwMinute_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_dwMinute_get" "', argument " "1"" of type '" "NET_DVR_TIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_TIME * >(argp1);
  result =  ((arg1)->dwMinute);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_dwSecond_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_TIME *arg1 = (NET_DVR_TIME *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_dwSecond_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_dwSecond_set" "', argument " "1"" of type '" "NET_DVR_TIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_TIME * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_dwSecond_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_dwSecond_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSecond = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_dwSecond_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_TIME *arg1 = (NET_DVR_TIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_dwSecond_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_dwSecond_get" "', argument " "1"" of type '" "NET_DVR_TIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_TIME * >(argp1);
  result =  ((arg1)->dwSecond);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_TIME(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_TIME *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_TIME")) SWIG_fail;
  result = (NET_DVR_TIME *)new NET_DVR_TIME();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_TIME, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_TIME(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_TIME *arg1 = (NET_DVR_TIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_TIME",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_TIME, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_TIME" "', argument " "1"" of type '" "NET_DVR_TIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_TIME * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_TIME_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_TIME, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_wYear_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V30_wYear_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_wYear_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_V30_wYear_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_V30_wYear_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wYear = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_wYear_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V30_wYear_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_wYear_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  result =  ((arg1)->wYear);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_byMonth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V30_byMonth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_byMonth_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_V30_byMonth_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_V30_byMonth_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byMonth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_byMonth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V30_byMonth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_byMonth_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  result =  ((arg1)->byMonth);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_byDay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V30_byDay_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_byDay_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_V30_byDay_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_V30_byDay_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDay = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_byDay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V30_byDay_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_byDay_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  result =  ((arg1)->byDay);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_byHour_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V30_byHour_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_byHour_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_V30_byHour_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_V30_byHour_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byHour = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_byHour_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V30_byHour_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_byHour_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  result =  ((arg1)->byHour);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_byMinute_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V30_byMinute_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_byMinute_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_V30_byMinute_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_V30_byMinute_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byMinute = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_byMinute_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V30_byMinute_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_byMinute_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  result =  ((arg1)->byMinute);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_bySecond_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V30_bySecond_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_bySecond_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_V30_bySecond_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_V30_bySecond_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->bySecond = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_bySecond_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V30_bySecond_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_bySecond_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  result =  ((arg1)->bySecond);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_byISO8601_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V30_byISO8601_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_byISO8601_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_V30_byISO8601_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_V30_byISO8601_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byISO8601 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_byISO8601_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V30_byISO8601_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_byISO8601_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  result =  ((arg1)->byISO8601);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_wMilliSec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V30_wMilliSec_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_wMilliSec_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_V30_wMilliSec_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_V30_wMilliSec_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wMilliSec = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_wMilliSec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V30_wMilliSec_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_wMilliSec_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  result =  ((arg1)->wMilliSec);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_cTimeDifferenceH_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V30_cTimeDifferenceH_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_cTimeDifferenceH_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_DVR_TIME_V30_cTimeDifferenceH_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->cTimeDifferenceH = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_cTimeDifferenceH_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V30_cTimeDifferenceH_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_cTimeDifferenceH_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  result = (char) ((arg1)->cTimeDifferenceH);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_cTimeDifferenceM_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V30_cTimeDifferenceM_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_cTimeDifferenceM_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_DVR_TIME_V30_cTimeDifferenceM_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->cTimeDifferenceM = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V30_cTimeDifferenceM_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V30_cTimeDifferenceM_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V30_cTimeDifferenceM_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  result = (char) ((arg1)->cTimeDifferenceM);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_TIME_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_TIME_V30")) SWIG_fail;
  result = (tagNET_DVR_TIME_V30 *)new tagNET_DVR_TIME_V30();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_TIME_V30, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_TIME_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V30 *arg1 = (tagNET_DVR_TIME_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_TIME_V30",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V30, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_TIME_V30" "', argument " "1"" of type '" "tagNET_DVR_TIME_V30 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V30 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_TIME_V30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_TIME_V30, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_wYear_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_wYear_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_wYear_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_SEARCH_wYear_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_SEARCH_wYear_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wYear = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_wYear_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_wYear_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_wYear_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  result =  ((arg1)->wYear);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_byMonth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_byMonth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_byMonth_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_SEARCH_byMonth_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_SEARCH_byMonth_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byMonth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_byMonth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_byMonth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_byMonth_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  result =  ((arg1)->byMonth);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_byDay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_byDay_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_byDay_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_SEARCH_byDay_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_SEARCH_byDay_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDay = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_byDay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_byDay_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_byDay_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  result =  ((arg1)->byDay);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_byHour_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_byHour_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_byHour_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_SEARCH_byHour_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_SEARCH_byHour_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byHour = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_byHour_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_byHour_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_byHour_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  result =  ((arg1)->byHour);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_byMinute_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_byMinute_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_byMinute_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_SEARCH_byMinute_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_SEARCH_byMinute_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byMinute = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_byMinute_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_byMinute_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_byMinute_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  result =  ((arg1)->byMinute);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_bySecond_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_bySecond_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_bySecond_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_SEARCH_bySecond_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_SEARCH_bySecond_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->bySecond = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_bySecond_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_bySecond_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_bySecond_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  result =  ((arg1)->bySecond);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_cTimeDifferenceH_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_cTimeDifferenceH_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_cTimeDifferenceH_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_DVR_TIME_SEARCH_cTimeDifferenceH_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->cTimeDifferenceH = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_cTimeDifferenceH_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_cTimeDifferenceH_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_cTimeDifferenceH_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  result = (char) ((arg1)->cTimeDifferenceH);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_cTimeDifferenceM_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_cTimeDifferenceM_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_cTimeDifferenceM_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_DVR_TIME_SEARCH_cTimeDifferenceM_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->cTimeDifferenceM = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_cTimeDifferenceM_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_cTimeDifferenceM_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_cTimeDifferenceM_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  result = (char) ((arg1)->cTimeDifferenceM);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_byLocalOrUTC_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_byLocalOrUTC_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_byLocalOrUTC_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_SEARCH_byLocalOrUTC_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_SEARCH_byLocalOrUTC_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byLocalOrUTC = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_byLocalOrUTC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_byLocalOrUTC_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_byLocalOrUTC_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  result =  ((arg1)->byLocalOrUTC);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_wMillisecond_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_wMillisecond_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_wMillisecond_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_SEARCH_wMillisecond_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_SEARCH_wMillisecond_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wMillisecond = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_wMillisecond_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_wMillisecond_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_wMillisecond_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  result =  ((arg1)->wMillisecond);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_TIME_SEARCH(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_TIME_SEARCH")) SWIG_fail;
  result = (tagNET_DVR_TIME_SEARCH *)new tagNET_DVR_TIME_SEARCH();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_TIME_SEARCH(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH *arg1 = (tagNET_DVR_TIME_SEARCH *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_TIME_SEARCH",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_TIME_SEARCH" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_TIME_SEARCH_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_TIME_SEARCH, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_wYear_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_COND_wYear_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_wYear_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_SEARCH_COND_wYear_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_SEARCH_COND_wYear_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wYear = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_wYear_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_COND_wYear_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_wYear_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  result =  ((arg1)->wYear);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_byMonth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_COND_byMonth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_byMonth_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_SEARCH_COND_byMonth_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_SEARCH_COND_byMonth_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byMonth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_byMonth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_COND_byMonth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_byMonth_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  result =  ((arg1)->byMonth);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_byDay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_COND_byDay_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_byDay_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_SEARCH_COND_byDay_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_SEARCH_COND_byDay_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDay = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_byDay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_COND_byDay_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_byDay_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  result =  ((arg1)->byDay);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_byHour_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_COND_byHour_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_byHour_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_SEARCH_COND_byHour_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_SEARCH_COND_byHour_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byHour = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_byHour_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_COND_byHour_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_byHour_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  result =  ((arg1)->byHour);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_byMinute_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_COND_byMinute_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_byMinute_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_SEARCH_COND_byMinute_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_SEARCH_COND_byMinute_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byMinute = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_byMinute_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_COND_byMinute_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_byMinute_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  result =  ((arg1)->byMinute);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_bySecond_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_COND_bySecond_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_bySecond_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_SEARCH_COND_bySecond_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_SEARCH_COND_bySecond_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->bySecond = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_bySecond_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_COND_bySecond_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_bySecond_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  result =  ((arg1)->bySecond);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_byLocalOrUTC_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_COND_byLocalOrUTC_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_byLocalOrUTC_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_SEARCH_COND_byLocalOrUTC_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_SEARCH_COND_byLocalOrUTC_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byLocalOrUTC = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_byLocalOrUTC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_COND_byLocalOrUTC_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_byLocalOrUTC_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  result =  ((arg1)->byLocalOrUTC);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_wMillisecond_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_COND_wMillisecond_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_wMillisecond_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_SEARCH_COND_wMillisecond_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_SEARCH_COND_wMillisecond_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wMillisecond = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_wMillisecond_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_COND_wMillisecond_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_wMillisecond_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  result =  ((arg1)->wMillisecond);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_cTimeDifferenceH_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_COND_cTimeDifferenceH_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_cTimeDifferenceH_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_DVR_TIME_SEARCH_COND_cTimeDifferenceH_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->cTimeDifferenceH = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_cTimeDifferenceH_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_COND_cTimeDifferenceH_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_cTimeDifferenceH_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  result = (char) ((arg1)->cTimeDifferenceH);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_cTimeDifferenceM_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_SEARCH_COND_cTimeDifferenceM_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_cTimeDifferenceM_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_DVR_TIME_SEARCH_COND_cTimeDifferenceM_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->cTimeDifferenceM = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_SEARCH_COND_cTimeDifferenceM_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_SEARCH_COND_cTimeDifferenceM_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_SEARCH_COND_cTimeDifferenceM_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  result = (char) ((arg1)->cTimeDifferenceM);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_TIME_SEARCH_COND(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_TIME_SEARCH_COND")) SWIG_fail;
  result = (tagNET_DVR_TIME_SEARCH_COND *)new tagNET_DVR_TIME_SEARCH_COND();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_TIME_SEARCH_COND(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_SEARCH_COND *arg1 = (tagNET_DVR_TIME_SEARCH_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_TIME_SEARCH_COND",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_TIME_SEARCH_COND" "', argument " "1"" of type '" "tagNET_DVR_TIME_SEARCH_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_SEARCH_COND * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_TIME_SEARCH_COND_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_TIME_SEARCH_COND, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_wYear_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V50_wYear_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_wYear_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_V50_wYear_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_V50_wYear_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wYear = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_wYear_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V50_wYear_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_wYear_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  result =  ((arg1)->wYear);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_byMonth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V50_byMonth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_byMonth_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_V50_byMonth_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_V50_byMonth_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byMonth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_byMonth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V50_byMonth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_byMonth_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  result =  ((arg1)->byMonth);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_byDay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V50_byDay_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_byDay_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_V50_byDay_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_V50_byDay_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDay = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_byDay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V50_byDay_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_byDay_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  result =  ((arg1)->byDay);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_byHour_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V50_byHour_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_byHour_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_V50_byHour_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_V50_byHour_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byHour = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_byHour_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V50_byHour_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_byHour_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  result =  ((arg1)->byHour);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_byMinute_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V50_byMinute_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_byMinute_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_V50_byMinute_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_V50_byMinute_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byMinute = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_byMinute_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V50_byMinute_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_byMinute_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  result =  ((arg1)->byMinute);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_bySecond_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V50_bySecond_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_bySecond_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_V50_bySecond_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_V50_bySecond_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->bySecond = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_bySecond_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V50_bySecond_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_bySecond_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  result =  ((arg1)->bySecond);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_byISO8601_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V50_byISO8601_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_byISO8601_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_V50_byISO8601_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_V50_byISO8601_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byISO8601 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_byISO8601_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V50_byISO8601_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_byISO8601_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  result =  ((arg1)->byISO8601);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_wMillisecond_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V50_wMillisecond_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_wMillisecond_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_V50_wMillisecond_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_V50_wMillisecond_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wMillisecond = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_wMillisecond_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V50_wMillisecond_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_wMillisecond_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  result =  ((arg1)->wMillisecond);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_cTimeDifferenceH_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V50_cTimeDifferenceH_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_cTimeDifferenceH_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_DVR_TIME_V50_cTimeDifferenceH_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->cTimeDifferenceH = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_cTimeDifferenceH_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V50_cTimeDifferenceH_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_cTimeDifferenceH_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  result = (char) ((arg1)->cTimeDifferenceH);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_cTimeDifferenceM_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_V50_cTimeDifferenceM_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_cTimeDifferenceM_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_DVR_TIME_V50_cTimeDifferenceM_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->cTimeDifferenceM = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_V50_cTimeDifferenceM_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_V50_cTimeDifferenceM_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_V50_cTimeDifferenceM_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  result = (char) ((arg1)->cTimeDifferenceM);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_TIME_V50(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_TIME_V50")) SWIG_fail;
  result = (tagNET_DVR_TIME_V50 *)new tagNET_DVR_TIME_V50();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_TIME_V50, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_TIME_V50(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_V50 *arg1 = (tagNET_DVR_TIME_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_TIME_V50",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_V50, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_TIME_V50" "', argument " "1"" of type '" "tagNET_DVR_TIME_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_V50 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_TIME_V50_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_TIME_V50, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_CALIBRATE_TIME_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_CALIBRATE_TIME *arg1 = (tagNET_DVR_CALIBRATE_TIME *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_CALIBRATE_TIME_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_CALIBRATE_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_CALIBRATE_TIME_dwSize_set" "', argument " "1"" of type '" "tagNET_DVR_CALIBRATE_TIME *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_CALIBRATE_TIME * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_CALIBRATE_TIME_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_CALIBRATE_TIME_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_CALIBRATE_TIME_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_CALIBRATE_TIME *arg1 = (tagNET_DVR_CALIBRATE_TIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_CALIBRATE_TIME_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_CALIBRATE_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_CALIBRATE_TIME_dwSize_get" "', argument " "1"" of type '" "tagNET_DVR_CALIBRATE_TIME *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_CALIBRATE_TIME * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_CALIBRATE_TIME_struTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_CALIBRATE_TIME *arg1 = (tagNET_DVR_CALIBRATE_TIME *) 0 ;
  NET_DVR_TIME *arg2 = (NET_DVR_TIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_CALIBRATE_TIME_struTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_CALIBRATE_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_CALIBRATE_TIME_struTime_set" "', argument " "1"" of type '" "tagNET_DVR_CALIBRATE_TIME *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_CALIBRATE_TIME * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_TIME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_CALIBRATE_TIME_struTime_set" "', argument " "2"" of type '" "NET_DVR_TIME *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_TIME * >(argp2);
  if (arg1) (arg1)->struTime = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_CALIBRATE_TIME_struTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_CALIBRATE_TIME *arg1 = (tagNET_DVR_CALIBRATE_TIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_TIME *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_CALIBRATE_TIME_struTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_CALIBRATE_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_CALIBRATE_TIME_struTime_get" "', argument " "1"" of type '" "tagNET_DVR_CALIBRATE_TIME *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_CALIBRATE_TIME * >(argp1);
  result = (NET_DVR_TIME *)& ((arg1)->struTime);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_TIME, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_CALIBRATE_TIME_wMilliSec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_CALIBRATE_TIME *arg1 = (tagNET_DVR_CALIBRATE_TIME *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_CALIBRATE_TIME_wMilliSec_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_CALIBRATE_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_CALIBRATE_TIME_wMilliSec_set" "', argument " "1"" of type '" "tagNET_DVR_CALIBRATE_TIME *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_CALIBRATE_TIME * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_CALIBRATE_TIME_wMilliSec_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_CALIBRATE_TIME_wMilliSec_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wMilliSec = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_CALIBRATE_TIME_wMilliSec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_CALIBRATE_TIME *arg1 = (tagNET_DVR_CALIBRATE_TIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_CALIBRATE_TIME_wMilliSec_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_CALIBRATE_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_CALIBRATE_TIME_wMilliSec_get" "', argument " "1"" of type '" "tagNET_DVR_CALIBRATE_TIME *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_CALIBRATE_TIME * >(argp1);
  result =  ((arg1)->wMilliSec);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_CALIBRATE_TIME_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_CALIBRATE_TIME *arg1 = (tagNET_DVR_CALIBRATE_TIME *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_CALIBRATE_TIME_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_CALIBRATE_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_CALIBRATE_TIME_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_CALIBRATE_TIME *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_CALIBRATE_TIME * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_CALIBRATE_TIME_byRes_set" "', argument " "2"" of type '" "BYTE [14]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)14; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [14]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_CALIBRATE_TIME_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_CALIBRATE_TIME *arg1 = (tagNET_DVR_CALIBRATE_TIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_CALIBRATE_TIME_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_CALIBRATE_TIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_CALIBRATE_TIME_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_CALIBRATE_TIME *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_CALIBRATE_TIME * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_CALIBRATE_TIME(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_CALIBRATE_TIME *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_CALIBRATE_TIME")) SWIG_fail;
  result = (tagNET_DVR_CALIBRATE_TIME *)new tagNET_DVR_CALIBRATE_TIME();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_CALIBRATE_TIME, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_CALIBRATE_TIME(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_CALIBRATE_TIME *arg1 = (tagNET_DVR_CALIBRATE_TIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_CALIBRATE_TIME",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_CALIBRATE_TIME, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_CALIBRATE_TIME" "', argument " "1"" of type '" "tagNET_DVR_CALIBRATE_TIME *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_CALIBRATE_TIME * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_CALIBRATE_TIME_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_CALIBRATE_TIME, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_TIMESIGN_CFG_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIMESIGN_CFG *arg1 = (tagNET_DVR_TIMESIGN_CFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIMESIGN_CFG_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIMESIGN_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIMESIGN_CFG_dwSize_set" "', argument " "1"" of type '" "tagNET_DVR_TIMESIGN_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIMESIGN_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIMESIGN_CFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIMESIGN_CFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIMESIGN_CFG_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIMESIGN_CFG *arg1 = (tagNET_DVR_TIMESIGN_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIMESIGN_CFG_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIMESIGN_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIMESIGN_CFG_dwSize_get" "', argument " "1"" of type '" "tagNET_DVR_TIMESIGN_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIMESIGN_CFG * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIMESIGN_CFG_byCustomSetTimeSign_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIMESIGN_CFG *arg1 = (tagNET_DVR_TIMESIGN_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIMESIGN_CFG_byCustomSetTimeSign_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIMESIGN_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIMESIGN_CFG_byCustomSetTimeSign_set" "', argument " "1"" of type '" "tagNET_DVR_TIMESIGN_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIMESIGN_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIMESIGN_CFG_byCustomSetTimeSign_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->byCustomSetTimeSign[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byCustomSetTimeSign""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIMESIGN_CFG_byCustomSetTimeSign_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIMESIGN_CFG *arg1 = (tagNET_DVR_TIMESIGN_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIMESIGN_CFG_byCustomSetTimeSign_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIMESIGN_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIMESIGN_CFG_byCustomSetTimeSign_get" "', argument " "1"" of type '" "tagNET_DVR_TIMESIGN_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIMESIGN_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byCustomSetTimeSign);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIMESIGN_CFG_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIMESIGN_CFG *arg1 = (tagNET_DVR_TIMESIGN_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIMESIGN_CFG_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIMESIGN_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIMESIGN_CFG_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_TIMESIGN_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIMESIGN_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIMESIGN_CFG_byRes_set" "', argument " "2"" of type '" "BYTE [96]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)96; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [96]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIMESIGN_CFG_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIMESIGN_CFG *arg1 = (tagNET_DVR_TIMESIGN_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIMESIGN_CFG_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIMESIGN_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIMESIGN_CFG_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_TIMESIGN_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIMESIGN_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_TIMESIGN_CFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIMESIGN_CFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_TIMESIGN_CFG")) SWIG_fail;
  result = (tagNET_DVR_TIMESIGN_CFG *)new tagNET_DVR_TIMESIGN_CFG();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_TIMESIGN_CFG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_TIMESIGN_CFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIMESIGN_CFG *arg1 = (tagNET_DVR_TIMESIGN_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_TIMESIGN_CFG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIMESIGN_CFG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_TIMESIGN_CFG" "', argument " "1"" of type '" "tagNET_DVR_TIMESIGN_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIMESIGN_CFG * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_TIMESIGN_CFG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_TIMESIGN_CFG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_TIME_EX_wYear_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_EX_wYear_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_EX_wYear_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_EX *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_EX_wYear_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_EX_wYear_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wYear = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_EX_wYear_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_EX_wYear_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_EX_wYear_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_EX *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_EX * >(argp1);
  result =  ((arg1)->wYear);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_EX_byMonth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_EX_byMonth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_EX_byMonth_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_EX *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_EX_byMonth_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_EX_byMonth_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byMonth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_EX_byMonth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_EX_byMonth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_EX_byMonth_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_EX *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_EX * >(argp1);
  result =  ((arg1)->byMonth);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_EX_byDay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_EX_byDay_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_EX_byDay_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_EX *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_EX_byDay_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_EX_byDay_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDay = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_EX_byDay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_EX_byDay_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_EX_byDay_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_EX *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_EX * >(argp1);
  result =  ((arg1)->byDay);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_EX_byHour_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_EX_byHour_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_EX_byHour_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_EX *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_EX_byHour_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_EX_byHour_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byHour = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_EX_byHour_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_EX_byHour_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_EX_byHour_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_EX *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_EX * >(argp1);
  result =  ((arg1)->byHour);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_EX_byMinute_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_EX_byMinute_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_EX_byMinute_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_EX *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_EX_byMinute_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_EX_byMinute_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byMinute = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_EX_byMinute_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_EX_byMinute_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_EX_byMinute_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_EX *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_EX * >(argp1);
  result =  ((arg1)->byMinute);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_EX_bySecond_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_EX_bySecond_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_EX_bySecond_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_EX *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_EX_bySecond_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_EX_bySecond_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->bySecond = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_EX_bySecond_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_EX_bySecond_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_EX_bySecond_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_EX *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_EX * >(argp1);
  result =  ((arg1)->bySecond);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_EX_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_TIME_EX_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_EX_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_TIME_EX *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_TIME_EX_byRes_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_TIME_EX_byRes_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRes = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_TIME_EX_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_TIME_EX_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_TIME_EX_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_TIME_EX *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_EX * >(argp1);
  result =  ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_TIME_EX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_EX *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_TIME_EX")) SWIG_fail;
  result = (tagNET_DVR_TIME_EX *)new tagNET_DVR_TIME_EX();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_TIME_EX, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_TIME_EX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_TIME_EX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_TIME_EX, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_TIME_EX" "', argument " "1"" of type '" "tagNET_DVR_TIME_EX *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_TIME_EX * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_TIME_EX_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_TIME_EX, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_SCHEDTIME_byStartHour_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SCHEDTIME *arg1 = (NET_DVR_SCHEDTIME *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SCHEDTIME_byStartHour_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SCHEDTIME_byStartHour_set" "', argument " "1"" of type '" "NET_DVR_SCHEDTIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SCHEDTIME * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SCHEDTIME_byStartHour_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SCHEDTIME_byStartHour_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStartHour = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SCHEDTIME_byStartHour_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SCHEDTIME *arg1 = (NET_DVR_SCHEDTIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SCHEDTIME_byStartHour_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SCHEDTIME_byStartHour_get" "', argument " "1"" of type '" "NET_DVR_SCHEDTIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SCHEDTIME * >(argp1);
  result =  ((arg1)->byStartHour);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SCHEDTIME_byStartMin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SCHEDTIME *arg1 = (NET_DVR_SCHEDTIME *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SCHEDTIME_byStartMin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SCHEDTIME_byStartMin_set" "', argument " "1"" of type '" "NET_DVR_SCHEDTIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SCHEDTIME * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SCHEDTIME_byStartMin_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SCHEDTIME_byStartMin_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStartMin = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SCHEDTIME_byStartMin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SCHEDTIME *arg1 = (NET_DVR_SCHEDTIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SCHEDTIME_byStartMin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SCHEDTIME_byStartMin_get" "', argument " "1"" of type '" "NET_DVR_SCHEDTIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SCHEDTIME * >(argp1);
  result =  ((arg1)->byStartMin);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SCHEDTIME_byStopHour_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SCHEDTIME *arg1 = (NET_DVR_SCHEDTIME *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SCHEDTIME_byStopHour_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SCHEDTIME_byStopHour_set" "', argument " "1"" of type '" "NET_DVR_SCHEDTIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SCHEDTIME * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SCHEDTIME_byStopHour_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SCHEDTIME_byStopHour_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStopHour = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SCHEDTIME_byStopHour_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SCHEDTIME *arg1 = (NET_DVR_SCHEDTIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SCHEDTIME_byStopHour_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SCHEDTIME_byStopHour_get" "', argument " "1"" of type '" "NET_DVR_SCHEDTIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SCHEDTIME * >(argp1);
  result =  ((arg1)->byStopHour);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SCHEDTIME_byStopMin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SCHEDTIME *arg1 = (NET_DVR_SCHEDTIME *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SCHEDTIME_byStopMin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SCHEDTIME_byStopMin_set" "', argument " "1"" of type '" "NET_DVR_SCHEDTIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SCHEDTIME * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SCHEDTIME_byStopMin_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SCHEDTIME_byStopMin_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStopMin = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SCHEDTIME_byStopMin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SCHEDTIME *arg1 = (NET_DVR_SCHEDTIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SCHEDTIME_byStopMin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SCHEDTIME_byStopMin_get" "', argument " "1"" of type '" "NET_DVR_SCHEDTIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SCHEDTIME * >(argp1);
  result =  ((arg1)->byStopMin);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_SCHEDTIME(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SCHEDTIME *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_SCHEDTIME")) SWIG_fail;
  result = (NET_DVR_SCHEDTIME *)new NET_DVR_SCHEDTIME();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_SCHEDTIME, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_SCHEDTIME(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SCHEDTIME *arg1 = (NET_DVR_SCHEDTIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_SCHEDTIME",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SCHEDTIME, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_SCHEDTIME" "', argument " "1"" of type '" "NET_DVR_SCHEDTIME *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SCHEDTIME * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_SCHEDTIME_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_SCHEDTIME, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_STRUCTHEAD_wLength_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_STRUCTHEAD *arg1 = (tagNET_DVR_STRUCTHEAD *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_STRUCTHEAD_wLength_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_STRUCTHEAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_STRUCTHEAD_wLength_set" "', argument " "1"" of type '" "tagNET_DVR_STRUCTHEAD *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_STRUCTHEAD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_STRUCTHEAD_wLength_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_STRUCTHEAD_wLength_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wLength = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_STRUCTHEAD_wLength_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_STRUCTHEAD *arg1 = (tagNET_DVR_STRUCTHEAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_STRUCTHEAD_wLength_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_STRUCTHEAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_STRUCTHEAD_wLength_get" "', argument " "1"" of type '" "tagNET_DVR_STRUCTHEAD *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_STRUCTHEAD * >(argp1);
  result =  ((arg1)->wLength);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_STRUCTHEAD_byVersion_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_STRUCTHEAD *arg1 = (tagNET_DVR_STRUCTHEAD *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_STRUCTHEAD_byVersion_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_STRUCTHEAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_STRUCTHEAD_byVersion_set" "', argument " "1"" of type '" "tagNET_DVR_STRUCTHEAD *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_STRUCTHEAD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_STRUCTHEAD_byVersion_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_STRUCTHEAD_byVersion_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byVersion = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_STRUCTHEAD_byVersion_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_STRUCTHEAD *arg1 = (tagNET_DVR_STRUCTHEAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_STRUCTHEAD_byVersion_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_STRUCTHEAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_STRUCTHEAD_byVersion_get" "', argument " "1"" of type '" "tagNET_DVR_STRUCTHEAD *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_STRUCTHEAD * >(argp1);
  result =  ((arg1)->byVersion);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_STRUCTHEAD_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_STRUCTHEAD *arg1 = (tagNET_DVR_STRUCTHEAD *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_STRUCTHEAD_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_STRUCTHEAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_STRUCTHEAD_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_STRUCTHEAD *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_STRUCTHEAD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_STRUCTHEAD_byRes_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_STRUCTHEAD_byRes_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRes = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_STRUCTHEAD_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_STRUCTHEAD *arg1 = (tagNET_DVR_STRUCTHEAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_STRUCTHEAD_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_STRUCTHEAD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_STRUCTHEAD_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_STRUCTHEAD *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_STRUCTHEAD * >(argp1);
  result =  ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_STRUCTHEAD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_STRUCTHEAD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_STRUCTHEAD")) SWIG_fail;
  result = (tagNET_DVR_STRUCTHEAD *)new tagNET_DVR_STRUCTHEAD();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_STRUCTHEAD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_STRUCTHEAD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_STRUCTHEAD *arg1 = (tagNET_DVR_STRUCTHEAD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_STRUCTHEAD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_STRUCTHEAD, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_STRUCTHEAD" "', argument " "1"" of type '" "tagNET_DVR_STRUCTHEAD *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_STRUCTHEAD * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_STRUCTHEAD_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_STRUCTHEAD, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V41_dwHandleType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V41 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V41 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_V41_dwHandleType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V41, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V41_dwHandleType_set" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V41 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V41 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_V41_dwHandleType_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HANDLEEXCEPTION_V41_dwHandleType_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwHandleType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V41_dwHandleType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V41 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V41 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_V41_dwHandleType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V41, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V41_dwHandleType_get" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V41 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V41 * >(argp1);
  result =  ((arg1)->dwHandleType);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V41_dwMaxRelAlarmOutChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V41 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V41 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_V41_dwMaxRelAlarmOutChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V41, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V41_dwMaxRelAlarmOutChanNum_set" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V41 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V41 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_V41_dwMaxRelAlarmOutChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HANDLEEXCEPTION_V41_dwMaxRelAlarmOutChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwMaxRelAlarmOutChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V41_dwMaxRelAlarmOutChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V41 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V41 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_V41_dwMaxRelAlarmOutChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V41, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V41_dwMaxRelAlarmOutChanNum_get" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V41 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V41 * >(argp1);
  result =  ((arg1)->dwMaxRelAlarmOutChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V41_dwRelAlarmOut_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V41 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V41 *) 0 ;
  DWORD *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_V41_dwRelAlarmOut_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V41, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V41_dwRelAlarmOut_set" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V41 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V41 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DWORD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_V41_dwRelAlarmOut_set" "', argument " "2"" of type '" "DWORD [(4096+32)]""'"); 
  } 
  arg2 = reinterpret_cast< DWORD * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)(4096+32); ++ii) *(DWORD *)&arg1->dwRelAlarmOut[ii] = *((DWORD *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""dwRelAlarmOut""' of type '""DWORD [(4096+32)]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V41_dwRelAlarmOut_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V41 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V41 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_V41_dwRelAlarmOut_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V41, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V41_dwRelAlarmOut_get" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V41 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V41 * >(argp1);
  result = (DWORD *)(DWORD *) ((arg1)->dwRelAlarmOut);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DWORD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V41_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V41 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V41 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_V41_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V41, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V41_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V41 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V41 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_V41_byRes_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [64]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V41_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V41 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V41 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_V41_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V41, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V41_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V41 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V41 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_HANDLEEXCEPTION_V41(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V41 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_HANDLEEXCEPTION_V41")) SWIG_fail;
  result = (tagNET_DVR_HANDLEEXCEPTION_V41 *)new tagNET_DVR_HANDLEEXCEPTION_V41();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V41, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_HANDLEEXCEPTION_V41(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V41 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V41 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_HANDLEEXCEPTION_V41",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V41, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_HANDLEEXCEPTION_V41" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V41 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V41 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_HANDLEEXCEPTION_V41_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V41, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_dwHandleType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_V40_dwHandleType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_dwHandleType_set" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_dwHandleType_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HANDLEEXCEPTION_V40_dwHandleType_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwHandleType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_dwHandleType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_V40_dwHandleType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_dwHandleType_get" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  result =  ((arg1)->dwHandleType);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_dwMaxRelAlarmOutChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_V40_dwMaxRelAlarmOutChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_dwMaxRelAlarmOutChanNum_set" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_dwMaxRelAlarmOutChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HANDLEEXCEPTION_V40_dwMaxRelAlarmOutChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwMaxRelAlarmOutChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_dwMaxRelAlarmOutChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_V40_dwMaxRelAlarmOutChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_dwMaxRelAlarmOutChanNum_get" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  result =  ((arg1)->dwMaxRelAlarmOutChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOutChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOutChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOutChanNum_set" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOutChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOutChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwRelAlarmOutChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOutChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOutChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOutChanNum_get" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  result =  ((arg1)->dwRelAlarmOutChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOut_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  DWORD *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOut_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOut_set" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DWORD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOut_set" "', argument " "2"" of type '" "DWORD [(32+32)]""'"); 
  } 
  arg2 = reinterpret_cast< DWORD * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)(32+32); ++ii) *(DWORD *)&arg1->dwRelAlarmOut[ii] = *((DWORD *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""dwRelAlarmOut""' of type '""DWORD [(32+32)]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOut_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOut_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOut_get" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  result = (DWORD *)(DWORD *) ((arg1)->dwRelAlarmOut);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DWORD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_byWhiteLightDurationTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_V40_byWhiteLightDurationTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byWhiteLightDurationTime_set" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byWhiteLightDurationTime_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byWhiteLightDurationTime_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byWhiteLightDurationTime = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_byWhiteLightDurationTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_V40_byWhiteLightDurationTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byWhiteLightDurationTime_get" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  result =  ((arg1)->byWhiteLightDurationTime);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_byBrightness_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_V40_byBrightness_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byBrightness_set" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byBrightness_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byBrightness_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byBrightness = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_byBrightness_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_V40_byBrightness_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byBrightness_get" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  result =  ((arg1)->byBrightness);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_byAudioType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_V40_byAudioType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byAudioType_set" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byAudioType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byAudioType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAudioType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_byAudioType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_V40_byAudioType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byAudioType_get" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  result =  ((arg1)->byAudioType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_byTimes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_V40_byTimes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byTimes_set" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byTimes_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byTimes_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byTimes = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_byTimes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_V40_byTimes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byTimes_get" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  result =  ((arg1)->byTimes);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_V40_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byRes_set" "', argument " "2"" of type '" "BYTE [60]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)60; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [60]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V40_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_V40_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V40_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_HANDLEEXCEPTION_V40(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_HANDLEEXCEPTION_V40")) SWIG_fail;
  result = (tagNET_DVR_HANDLEEXCEPTION_V40 *)new tagNET_DVR_HANDLEEXCEPTION_V40();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_HANDLEEXCEPTION_V40(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_HANDLEEXCEPTION_V40 *arg1 = (tagNET_DVR_HANDLEEXCEPTION_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_HANDLEEXCEPTION_V40",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_HANDLEEXCEPTION_V40" "', argument " "1"" of type '" "tagNET_DVR_HANDLEEXCEPTION_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_HANDLEEXCEPTION_V40 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_HANDLEEXCEPTION_V40_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_HANDLEEXCEPTION_V40, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V30_dwHandleType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HANDLEEXCEPTION_V30 *arg1 = (NET_DVR_HANDLEEXCEPTION_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_V30_dwHandleType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V30_dwHandleType_set" "', argument " "1"" of type '" "NET_DVR_HANDLEEXCEPTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_V30_dwHandleType_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HANDLEEXCEPTION_V30_dwHandleType_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwHandleType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V30_dwHandleType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HANDLEEXCEPTION_V30 *arg1 = (NET_DVR_HANDLEEXCEPTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_V30_dwHandleType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V30_dwHandleType_get" "', argument " "1"" of type '" "NET_DVR_HANDLEEXCEPTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION_V30 * >(argp1);
  result =  ((arg1)->dwHandleType);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V30_byRelAlarmOut_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HANDLEEXCEPTION_V30 *arg1 = (NET_DVR_HANDLEEXCEPTION_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_V30_byRelAlarmOut_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V30_byRelAlarmOut_set" "', argument " "1"" of type '" "NET_DVR_HANDLEEXCEPTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_V30_byRelAlarmOut_set" "', argument " "2"" of type '" "BYTE [(32+64)]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)(32+64); ++ii) *(BYTE *)&arg1->byRelAlarmOut[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRelAlarmOut""' of type '""BYTE [(32+64)]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_V30_byRelAlarmOut_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HANDLEEXCEPTION_V30 *arg1 = (NET_DVR_HANDLEEXCEPTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_V30_byRelAlarmOut_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_V30_byRelAlarmOut_get" "', argument " "1"" of type '" "NET_DVR_HANDLEEXCEPTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRelAlarmOut);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_HANDLEEXCEPTION_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HANDLEEXCEPTION_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_HANDLEEXCEPTION_V30")) SWIG_fail;
  result = (NET_DVR_HANDLEEXCEPTION_V30 *)new NET_DVR_HANDLEEXCEPTION_V30();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION_V30, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_HANDLEEXCEPTION_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HANDLEEXCEPTION_V30 *arg1 = (NET_DVR_HANDLEEXCEPTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_HANDLEEXCEPTION_V30",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION_V30, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_HANDLEEXCEPTION_V30" "', argument " "1"" of type '" "NET_DVR_HANDLEEXCEPTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION_V30 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_HANDLEEXCEPTION_V30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION_V30, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_dwHandleType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HANDLEEXCEPTION *arg1 = (NET_DVR_HANDLEEXCEPTION *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_dwHandleType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_dwHandleType_set" "', argument " "1"" of type '" "NET_DVR_HANDLEEXCEPTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_dwHandleType_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HANDLEEXCEPTION_dwHandleType_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwHandleType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_dwHandleType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HANDLEEXCEPTION *arg1 = (NET_DVR_HANDLEEXCEPTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_dwHandleType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_dwHandleType_get" "', argument " "1"" of type '" "NET_DVR_HANDLEEXCEPTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION * >(argp1);
  result =  ((arg1)->dwHandleType);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_byRelAlarmOut_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HANDLEEXCEPTION *arg1 = (NET_DVR_HANDLEEXCEPTION *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HANDLEEXCEPTION_byRelAlarmOut_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_byRelAlarmOut_set" "', argument " "1"" of type '" "NET_DVR_HANDLEEXCEPTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HANDLEEXCEPTION_byRelAlarmOut_set" "', argument " "2"" of type '" "BYTE [4]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) *(BYTE *)&arg1->byRelAlarmOut[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRelAlarmOut""' of type '""BYTE [4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HANDLEEXCEPTION_byRelAlarmOut_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HANDLEEXCEPTION *arg1 = (NET_DVR_HANDLEEXCEPTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HANDLEEXCEPTION_byRelAlarmOut_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HANDLEEXCEPTION_byRelAlarmOut_get" "', argument " "1"" of type '" "NET_DVR_HANDLEEXCEPTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRelAlarmOut);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_HANDLEEXCEPTION(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HANDLEEXCEPTION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_HANDLEEXCEPTION")) SWIG_fail;
  result = (NET_DVR_HANDLEEXCEPTION *)new NET_DVR_HANDLEEXCEPTION();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_HANDLEEXCEPTION(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HANDLEEXCEPTION *arg1 = (NET_DVR_HANDLEEXCEPTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_HANDLEEXCEPTION",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_HANDLEEXCEPTION" "', argument " "1"" of type '" "NET_DVR_HANDLEEXCEPTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_HANDLEEXCEPTION_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwSize_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwSize_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_sDVRName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_sDVRName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_sDVRName_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_sDVRName_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->sDVRName[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sDVRName""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_sDVRName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_sDVRName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_sDVRName_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->sDVRName);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwDVRID_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_dwDVRID_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwDVRID_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_dwDVRID_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_dwDVRID_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwDVRID = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwDVRID_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_dwDVRID_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwDVRID_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->dwDVRID);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwRecycleRecord_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_dwRecycleRecord_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwRecycleRecord_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_dwRecycleRecord_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_dwRecycleRecord_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwRecycleRecord = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwRecycleRecord_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_dwRecycleRecord_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwRecycleRecord_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->dwRecycleRecord);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_sSerialNumber_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_sSerialNumber_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_sSerialNumber_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_sSerialNumber_set" "', argument " "2"" of type '" "BYTE [48]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)48; ++ii) *(BYTE *)&arg1->sSerialNumber[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sSerialNumber""' of type '""BYTE [48]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_sSerialNumber_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_sSerialNumber_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_sSerialNumber_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->sSerialNumber);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwSoftwareVersion_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_dwSoftwareVersion_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwSoftwareVersion_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_dwSoftwareVersion_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_dwSoftwareVersion_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSoftwareVersion = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwSoftwareVersion_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_dwSoftwareVersion_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwSoftwareVersion_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->dwSoftwareVersion);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwSoftwareBuildDate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_dwSoftwareBuildDate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwSoftwareBuildDate_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_dwSoftwareBuildDate_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_dwSoftwareBuildDate_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSoftwareBuildDate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwSoftwareBuildDate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_dwSoftwareBuildDate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwSoftwareBuildDate_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->dwSoftwareBuildDate);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwDSPSoftwareVersion_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_dwDSPSoftwareVersion_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwDSPSoftwareVersion_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_dwDSPSoftwareVersion_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_dwDSPSoftwareVersion_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwDSPSoftwareVersion = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwDSPSoftwareVersion_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_dwDSPSoftwareVersion_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwDSPSoftwareVersion_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->dwDSPSoftwareVersion);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwDSPSoftwareBuildDate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_dwDSPSoftwareBuildDate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwDSPSoftwareBuildDate_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_dwDSPSoftwareBuildDate_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_dwDSPSoftwareBuildDate_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwDSPSoftwareBuildDate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwDSPSoftwareBuildDate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_dwDSPSoftwareBuildDate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwDSPSoftwareBuildDate_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->dwDSPSoftwareBuildDate);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwPanelVersion_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_dwPanelVersion_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwPanelVersion_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_dwPanelVersion_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_dwPanelVersion_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwPanelVersion = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwPanelVersion_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_dwPanelVersion_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwPanelVersion_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->dwPanelVersion);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwHardwareVersion_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_dwHardwareVersion_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwHardwareVersion_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_dwHardwareVersion_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_dwHardwareVersion_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwHardwareVersion = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_dwHardwareVersion_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_dwHardwareVersion_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_dwHardwareVersion_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->dwHardwareVersion);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byAlarmInPortNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_byAlarmInPortNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byAlarmInPortNum_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_byAlarmInPortNum_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_byAlarmInPortNum_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAlarmInPortNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byAlarmInPortNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_byAlarmInPortNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byAlarmInPortNum_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->byAlarmInPortNum);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byAlarmOutPortNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_byAlarmOutPortNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byAlarmOutPortNum_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_byAlarmOutPortNum_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_byAlarmOutPortNum_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAlarmOutPortNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byAlarmOutPortNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_byAlarmOutPortNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byAlarmOutPortNum_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->byAlarmOutPortNum);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byRS232Num_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_byRS232Num_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byRS232Num_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_byRS232Num_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_byRS232Num_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRS232Num = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byRS232Num_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_byRS232Num_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byRS232Num_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->byRS232Num);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byRS485Num_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_byRS485Num_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byRS485Num_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_byRS485Num_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_byRS485Num_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRS485Num = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byRS485Num_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_byRS485Num_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byRS485Num_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->byRS485Num);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byNetworkPortNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_byNetworkPortNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byNetworkPortNum_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_byNetworkPortNum_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_byNetworkPortNum_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byNetworkPortNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byNetworkPortNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_byNetworkPortNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byNetworkPortNum_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->byNetworkPortNum);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byDiskCtrlNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_byDiskCtrlNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byDiskCtrlNum_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_byDiskCtrlNum_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_byDiskCtrlNum_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDiskCtrlNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byDiskCtrlNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_byDiskCtrlNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byDiskCtrlNum_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->byDiskCtrlNum);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byDiskNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_byDiskNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byDiskNum_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_byDiskNum_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_byDiskNum_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDiskNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byDiskNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_byDiskNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byDiskNum_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->byDiskNum);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byDVRType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_byDVRType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byDVRType_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_byDVRType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_byDVRType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDVRType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byDVRType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_byDVRType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byDVRType_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->byDVRType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_byChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byChanNum_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_byChanNum_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_byChanNum_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_byChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byChanNum_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->byChanNum);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byStartChan_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_byStartChan_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byStartChan_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_byStartChan_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_byStartChan_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStartChan = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byStartChan_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_byStartChan_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byStartChan_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->byStartChan);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byDecordChans_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_byDecordChans_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byDecordChans_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_byDecordChans_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_byDecordChans_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDecordChans = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byDecordChans_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_byDecordChans_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byDecordChans_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->byDecordChans);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byVGANum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_byVGANum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byVGANum_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_byVGANum_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_byVGANum_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byVGANum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byVGANum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_byVGANum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byVGANum_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->byVGANum);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byUSBNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_byUSBNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byUSBNum_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_byUSBNum_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_byUSBNum_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byUSBNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byUSBNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_byUSBNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byUSBNum_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->byUSBNum);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byAuxoutNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_byAuxoutNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byAuxoutNum_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_byAuxoutNum_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_byAuxoutNum_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAuxoutNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byAuxoutNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_byAuxoutNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byAuxoutNum_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->byAuxoutNum);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byAudioNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_byAudioNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byAudioNum_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_byAudioNum_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_byAudioNum_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAudioNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byAudioNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_byAudioNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byAudioNum_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->byAudioNum);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byIPChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DEVICECFG_byIPChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byIPChanNum_set" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DEVICECFG_byIPChanNum_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DEVICECFG_byIPChanNum_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byIPChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DEVICECFG_byIPChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DEVICECFG_byIPChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DEVICECFG_byIPChanNum_get" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  result =  ((arg1)->byIPChanNum);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_DEVICECFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_DEVICECFG")) SWIG_fail;
  result = (NET_DVR_DEVICECFG *)new NET_DVR_DEVICECFG();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_DEVICECFG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_DEVICECFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DEVICECFG *arg1 = (NET_DVR_DEVICECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_DEVICECFG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DEVICECFG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_DEVICECFG" "', argument " "1"" of type '" "NET_DVR_DEVICECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DEVICECFG * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_DEVICECFG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_DEVICECFG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_IPADDR_sIpV4_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_IPADDR *arg1 = (NET_DVR_IPADDR *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IPADDR_sIpV4_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IPADDR_sIpV4_set" "', argument " "1"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_IPADDR * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IPADDR_sIpV4_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sIpV4,arg2,16*sizeof(char));
  else memset(arg1->sIpV4,0,16*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IPADDR_sIpV4_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_IPADDR *arg1 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IPADDR_sIpV4_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IPADDR_sIpV4_get" "', argument " "1"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_IPADDR * >(argp1);
  result = (char *)(char *) ((arg1)->sIpV4);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IPADDR_byIPv6_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_IPADDR *arg1 = (NET_DVR_IPADDR *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IPADDR_byIPv6_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IPADDR_byIPv6_set" "', argument " "1"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_IPADDR * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IPADDR_byIPv6_set" "', argument " "2"" of type '" "BYTE [128]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)128; ++ii) *(BYTE *)&arg1->byIPv6[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byIPv6""' of type '""BYTE [128]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IPADDR_byIPv6_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_IPADDR *arg1 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IPADDR_byIPv6_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IPADDR_byIPv6_get" "', argument " "1"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_IPADDR * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byIPv6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_IPADDR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_IPADDR")) SWIG_fail;
  result = (NET_DVR_IPADDR *)new NET_DVR_IPADDR();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_IPADDR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_IPADDR *arg1 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_IPADDR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_IPADDR, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_IPADDR" "', argument " "1"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_IPADDR * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_IPADDR_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_IPADDR, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_ADDRESS_struIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ADDRESS *arg1 = (tagNET_DVR_ADDRESS *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ADDRESS_struIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ADDRESS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ADDRESS_struIP_set" "', argument " "1"" of type '" "tagNET_DVR_ADDRESS *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ADDRESS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ADDRESS_struIP_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struIP = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ADDRESS_struIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ADDRESS *arg1 = (tagNET_DVR_ADDRESS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ADDRESS_struIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ADDRESS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ADDRESS_struIP_get" "', argument " "1"" of type '" "tagNET_DVR_ADDRESS *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ADDRESS * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struIP);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ADDRESS_wPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ADDRESS *arg1 = (tagNET_DVR_ADDRESS *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ADDRESS_wPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ADDRESS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ADDRESS_wPort_set" "', argument " "1"" of type '" "tagNET_DVR_ADDRESS *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ADDRESS * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ADDRESS_wPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ADDRESS_wPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ADDRESS_wPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ADDRESS *arg1 = (tagNET_DVR_ADDRESS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ADDRESS_wPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ADDRESS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ADDRESS_wPort_get" "', argument " "1"" of type '" "tagNET_DVR_ADDRESS *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ADDRESS * >(argp1);
  result =  ((arg1)->wPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ADDRESS_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ADDRESS *arg1 = (tagNET_DVR_ADDRESS *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ADDRESS_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ADDRESS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ADDRESS_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_ADDRESS *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ADDRESS * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ADDRESS_byRes_set" "', argument " "2"" of type '" "BYTE [2]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ADDRESS_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ADDRESS *arg1 = (tagNET_DVR_ADDRESS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ADDRESS_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ADDRESS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ADDRESS_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_ADDRESS *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ADDRESS * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_ADDRESS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ADDRESS *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_ADDRESS")) SWIG_fail;
  result = (tagNET_DVR_ADDRESS *)new tagNET_DVR_ADDRESS();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_ADDRESS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_ADDRESS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ADDRESS *arg1 = (tagNET_DVR_ADDRESS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_ADDRESS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ADDRESS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_ADDRESS" "', argument " "1"" of type '" "tagNET_DVR_ADDRESS *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ADDRESS * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_ADDRESS_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_ADDRESS, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_V30_struDVRIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_V30_struDVRIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_V30_struDVRIP_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_V30_struDVRIP_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struDVRIP = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_V30_struDVRIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_V30_struDVRIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_V30_struDVRIP_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struDVRIP);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_V30_struDVRIPMask_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_V30_struDVRIPMask_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_V30_struDVRIPMask_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_V30_struDVRIPMask_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struDVRIPMask = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_V30_struDVRIPMask_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_V30_struDVRIPMask_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_V30_struDVRIPMask_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struDVRIPMask);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_V30_dwNetInterface_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_V30_dwNetInterface_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_V30_dwNetInterface_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_V30_dwNetInterface_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ETHERNET_V30_dwNetInterface_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwNetInterface = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_V30_dwNetInterface_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_V30_dwNetInterface_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_V30_dwNetInterface_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  result =  ((arg1)->dwNetInterface);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_V30_wDVRPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_V30_wDVRPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_V30_wDVRPort_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_V30_wDVRPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ETHERNET_V30_wDVRPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wDVRPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_V30_wDVRPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_V30_wDVRPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_V30_wDVRPort_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  result =  ((arg1)->wDVRPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_V30_wMTU_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_V30_wMTU_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_V30_wMTU_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_V30_wMTU_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ETHERNET_V30_wMTU_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wMTU = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_V30_wMTU_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_V30_wMTU_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_V30_wMTU_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  result =  ((arg1)->wMTU);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_V30_byMACAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_V30_byMACAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_V30_byMACAddr_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_V30_byMACAddr_set" "', argument " "2"" of type '" "BYTE [6]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)6; ++ii) *(BYTE *)&arg1->byMACAddr[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byMACAddr""' of type '""BYTE [6]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_V30_byMACAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_V30_byMACAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_V30_byMACAddr_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byMACAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_V30_byEthernetPortNo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_V30_byEthernetPortNo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_V30_byEthernetPortNo_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_V30_byEthernetPortNo_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ETHERNET_V30_byEthernetPortNo_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEthernetPortNo = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_V30_byEthernetPortNo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_V30_byEthernetPortNo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_V30_byEthernetPortNo_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  result =  ((arg1)->byEthernetPortNo);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_V30_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_V30_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_V30_byRes_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_V30_byRes_set" "', argument " "2"" of type '" "BYTE [1]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)1; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [1]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_V30_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_V30_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_V30_byRes_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_ETHERNET_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_ETHERNET_V30")) SWIG_fail;
  result = (NET_DVR_ETHERNET_V30 *)new NET_DVR_ETHERNET_V30();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_ETHERNET_V30, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_ETHERNET_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_V30 *arg1 = (NET_DVR_ETHERNET_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_ETHERNET_V30",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_V30, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_ETHERNET_V30" "', argument " "1"" of type '" "NET_DVR_ETHERNET_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_ETHERNET_V30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_ETHERNET_V30, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_sDVRIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET *arg1 = (NET_DVR_ETHERNET *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_sDVRIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_sDVRIP_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_sDVRIP_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sDVRIP,arg2,16*sizeof(char));
  else memset(arg1->sDVRIP,0,16*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_sDVRIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET *arg1 = (NET_DVR_ETHERNET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_sDVRIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_sDVRIP_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET * >(argp1);
  result = (char *)(char *) ((arg1)->sDVRIP);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_sDVRIPMask_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET *arg1 = (NET_DVR_ETHERNET *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_sDVRIPMask_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_sDVRIPMask_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_sDVRIPMask_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sDVRIPMask,arg2,16*sizeof(char));
  else memset(arg1->sDVRIPMask,0,16*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_sDVRIPMask_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET *arg1 = (NET_DVR_ETHERNET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_sDVRIPMask_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_sDVRIPMask_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET * >(argp1);
  result = (char *)(char *) ((arg1)->sDVRIPMask);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_dwNetInterface_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET *arg1 = (NET_DVR_ETHERNET *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_dwNetInterface_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_dwNetInterface_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_dwNetInterface_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ETHERNET_dwNetInterface_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwNetInterface = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_dwNetInterface_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET *arg1 = (NET_DVR_ETHERNET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_dwNetInterface_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_dwNetInterface_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET * >(argp1);
  result =  ((arg1)->dwNetInterface);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_wDVRPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET *arg1 = (NET_DVR_ETHERNET *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_wDVRPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_wDVRPort_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_wDVRPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ETHERNET_wDVRPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wDVRPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_wDVRPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET *arg1 = (NET_DVR_ETHERNET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_wDVRPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_wDVRPort_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET * >(argp1);
  result =  ((arg1)->wDVRPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_byMACAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET *arg1 = (NET_DVR_ETHERNET *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_byMACAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_byMACAddr_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_byMACAddr_set" "', argument " "2"" of type '" "BYTE [6]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)6; ++ii) *(BYTE *)&arg1->byMACAddr[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byMACAddr""' of type '""BYTE [6]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_byMACAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET *arg1 = (NET_DVR_ETHERNET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_byMACAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_byMACAddr_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byMACAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_ETHERNET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_ETHERNET")) SWIG_fail;
  result = (NET_DVR_ETHERNET *)new NET_DVR_ETHERNET();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_ETHERNET, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_ETHERNET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET *arg1 = (NET_DVR_ETHERNET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_ETHERNET",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_ETHERNET" "', argument " "1"" of type '" "NET_DVR_ETHERNET *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_ETHERNET_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_ETHERNET, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_PPPOECFG_dwPPPOE_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPOECFG *arg1 = (NET_DVR_PPPOECFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPOECFG_dwPPPOE_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPOECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPOECFG_dwPPPOE_set" "', argument " "1"" of type '" "NET_DVR_PPPOECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPOECFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPOECFG_dwPPPOE_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PPPOECFG_dwPPPOE_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwPPPOE = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPOECFG_dwPPPOE_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPOECFG *arg1 = (NET_DVR_PPPOECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPOECFG_dwPPPOE_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPOECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPOECFG_dwPPPOE_get" "', argument " "1"" of type '" "NET_DVR_PPPOECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPOECFG * >(argp1);
  result =  ((arg1)->dwPPPOE);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPOECFG_sPPPoEUser_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPOECFG *arg1 = (NET_DVR_PPPOECFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPOECFG_sPPPoEUser_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPOECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPOECFG_sPPPoEUser_set" "', argument " "1"" of type '" "NET_DVR_PPPOECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPOECFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPOECFG_sPPPoEUser_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->sPPPoEUser[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sPPPoEUser""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPOECFG_sPPPoEUser_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPOECFG *arg1 = (NET_DVR_PPPOECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPOECFG_sPPPoEUser_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPOECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPOECFG_sPPPoEUser_get" "', argument " "1"" of type '" "NET_DVR_PPPOECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPOECFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->sPPPoEUser);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPOECFG_sPPPoEPassword_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPOECFG *arg1 = (NET_DVR_PPPOECFG *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPOECFG_sPPPoEPassword_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPOECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPOECFG_sPPPoEPassword_set" "', argument " "1"" of type '" "NET_DVR_PPPOECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPOECFG * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPOECFG_sPPPoEPassword_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sPPPoEPassword,arg2,16*sizeof(char));
  else memset(arg1->sPPPoEPassword,0,16*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPOECFG_sPPPoEPassword_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPOECFG *arg1 = (NET_DVR_PPPOECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPOECFG_sPPPoEPassword_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPOECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPOECFG_sPPPoEPassword_get" "', argument " "1"" of type '" "NET_DVR_PPPOECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPOECFG * >(argp1);
  result = (char *)(char *) ((arg1)->sPPPoEPassword);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPOECFG_struPPPoEIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPOECFG *arg1 = (NET_DVR_PPPOECFG *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPOECFG_struPPPoEIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPOECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPOECFG_struPPPoEIP_set" "', argument " "1"" of type '" "NET_DVR_PPPOECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPOECFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPOECFG_struPPPoEIP_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struPPPoEIP = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPOECFG_struPPPoEIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPOECFG *arg1 = (NET_DVR_PPPOECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPOECFG_struPPPoEIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPOECFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPOECFG_struPPPoEIP_get" "', argument " "1"" of type '" "NET_DVR_PPPOECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPOECFG * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struPPPoEIP);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_PPPOECFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPOECFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_PPPOECFG")) SWIG_fail;
  result = (NET_DVR_PPPOECFG *)new NET_DVR_PPPOECFG();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PPPOECFG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_PPPOECFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPOECFG *arg1 = (NET_DVR_PPPOECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_PPPOECFG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPOECFG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_PPPOECFG" "', argument " "1"" of type '" "NET_DVR_PPPOECFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPOECFG * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_PPPOECFG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_PPPOECFG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_dwSize_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V30_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_dwSize_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_struEtherNet_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  NET_DVR_ETHERNET_V30 *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_struEtherNet_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_struEtherNet_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_struEtherNet_set" "', argument " "2"" of type '" "NET_DVR_ETHERNET_V30 [2]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(NET_DVR_ETHERNET_V30 *)&arg1->struEtherNet[ii] = *((NET_DVR_ETHERNET_V30 *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struEtherNet""' of type '""NET_DVR_ETHERNET_V30 [2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_struEtherNet_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_ETHERNET_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_struEtherNet_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_struEtherNet_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result = (NET_DVR_ETHERNET_V30 *)(NET_DVR_ETHERNET_V30 *) ((arg1)->struEtherNet);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_struRes1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  NET_DVR_IPADDR *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_struRes1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_struRes1_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_struRes1_set" "', argument " "2"" of type '" "NET_DVR_IPADDR [2]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(NET_DVR_IPADDR *)&arg1->struRes1[ii] = *((NET_DVR_IPADDR *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struRes1""' of type '""NET_DVR_IPADDR [2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_struRes1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_struRes1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_struRes1_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result = (NET_DVR_IPADDR *)(NET_DVR_IPADDR *) ((arg1)->struRes1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_struAlarmHostIpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_struAlarmHostIpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_struAlarmHostIpAddr_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_struAlarmHostIpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struAlarmHostIpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_struAlarmHostIpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_struAlarmHostIpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_struAlarmHostIpAddr_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struAlarmHostIpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_byRes2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_byRes2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_byRes2_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_byRes2_set" "', argument " "2"" of type '" "BYTE [4]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) *(BYTE *)&arg1->byRes2[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes2""' of type '""BYTE [4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_byRes2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_byRes2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_byRes2_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_wAlarmHostIpPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_wAlarmHostIpPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_wAlarmHostIpPort_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_wAlarmHostIpPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V30_wAlarmHostIpPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wAlarmHostIpPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_wAlarmHostIpPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_wAlarmHostIpPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_wAlarmHostIpPort_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result =  ((arg1)->wAlarmHostIpPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_byUseDhcp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_byUseDhcp_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_byUseDhcp_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_byUseDhcp_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V30_byUseDhcp_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byUseDhcp = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_byUseDhcp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_byUseDhcp_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_byUseDhcp_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result =  ((arg1)->byUseDhcp);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_byIPv6Mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_byIPv6Mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_byIPv6Mode_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_byIPv6Mode_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V30_byIPv6Mode_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byIPv6Mode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_byIPv6Mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_byIPv6Mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_byIPv6Mode_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result =  ((arg1)->byIPv6Mode);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_struDnsServer1IpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_struDnsServer1IpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_struDnsServer1IpAddr_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_struDnsServer1IpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struDnsServer1IpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_struDnsServer1IpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_struDnsServer1IpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_struDnsServer1IpAddr_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struDnsServer1IpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_struDnsServer2IpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_struDnsServer2IpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_struDnsServer2IpAddr_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_struDnsServer2IpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struDnsServer2IpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_struDnsServer2IpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_struDnsServer2IpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_struDnsServer2IpAddr_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struDnsServer2IpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_byIpResolver_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_byIpResolver_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_byIpResolver_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_byIpResolver_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->byIpResolver[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byIpResolver""' of type '""BYTE [64]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_byIpResolver_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_byIpResolver_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_byIpResolver_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byIpResolver);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_wIpResolverPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_wIpResolverPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_wIpResolverPort_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_wIpResolverPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V30_wIpResolverPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wIpResolverPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_wIpResolverPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_wIpResolverPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_wIpResolverPort_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result =  ((arg1)->wIpResolverPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_wHttpPortNo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_wHttpPortNo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_wHttpPortNo_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_wHttpPortNo_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V30_wHttpPortNo_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHttpPortNo = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_wHttpPortNo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_wHttpPortNo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_wHttpPortNo_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result =  ((arg1)->wHttpPortNo);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_struMulticastIpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_struMulticastIpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_struMulticastIpAddr_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_struMulticastIpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struMulticastIpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_struMulticastIpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_struMulticastIpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_struMulticastIpAddr_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struMulticastIpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_struGatewayIpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_struGatewayIpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_struGatewayIpAddr_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_struGatewayIpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struGatewayIpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_struGatewayIpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_struGatewayIpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_struGatewayIpAddr_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struGatewayIpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_struPPPoE_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  NET_DVR_PPPOECFG *arg2 = (NET_DVR_PPPOECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_struPPPoE_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_struPPPoE_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_PPPOECFG, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_struPPPoE_set" "', argument " "2"" of type '" "NET_DVR_PPPOECFG *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_PPPOECFG * >(argp2);
  if (arg1) (arg1)->struPPPoE = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_struPPPoE_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_PPPOECFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_struPPPoE_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_struPPPoE_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result = (NET_DVR_PPPOECFG *)& ((arg1)->struPPPoE);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PPPOECFG, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_byEnablePrivateMulticastDiscovery_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_byEnablePrivateMulticastDiscovery_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_byEnablePrivateMulticastDiscovery_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_byEnablePrivateMulticastDiscovery_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V30_byEnablePrivateMulticastDiscovery_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnablePrivateMulticastDiscovery = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_byEnablePrivateMulticastDiscovery_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_byEnablePrivateMulticastDiscovery_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_byEnablePrivateMulticastDiscovery_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result =  ((arg1)->byEnablePrivateMulticastDiscovery);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_byEnableOnvifMulticastDiscovery_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_byEnableOnvifMulticastDiscovery_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_byEnableOnvifMulticastDiscovery_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_byEnableOnvifMulticastDiscovery_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V30_byEnableOnvifMulticastDiscovery_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableOnvifMulticastDiscovery = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_byEnableOnvifMulticastDiscovery_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_byEnableOnvifMulticastDiscovery_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_byEnableOnvifMulticastDiscovery_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result =  ((arg1)->byEnableOnvifMulticastDiscovery);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_byEnableDNS_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_byEnableDNS_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_byEnableDNS_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_byEnableDNS_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V30_byEnableDNS_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableDNS = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_byEnableDNS_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_byEnableDNS_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_byEnableDNS_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result =  ((arg1)->byEnableDNS);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V30_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_byRes_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V30_byRes_set" "', argument " "2"" of type '" "BYTE [61]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)61; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [61]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V30_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V30_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V30_byRes_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_NETCFG_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_NETCFG_V30")) SWIG_fail;
  result = (NET_DVR_NETCFG_V30 *)new NET_DVR_NETCFG_V30();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_NETCFG_V30, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_NETCFG_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_V30 *arg1 = (NET_DVR_NETCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_NETCFG_V30",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_V30, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_NETCFG_V30" "', argument " "1"" of type '" "NET_DVR_NETCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_V30 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_NETCFG_V30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_NETCFG_V30, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_struDVRIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_MULTI_struDVRIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_struDVRIP_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_MULTI_struDVRIP_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struDVRIP = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_struDVRIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_MULTI_struDVRIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_struDVRIP_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struDVRIP);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_struDVRIPMask_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_MULTI_struDVRIPMask_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_struDVRIPMask_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_MULTI_struDVRIPMask_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struDVRIPMask = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_struDVRIPMask_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_MULTI_struDVRIPMask_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_struDVRIPMask_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struDVRIPMask);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_dwNetInterface_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_MULTI_dwNetInterface_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_dwNetInterface_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_MULTI_dwNetInterface_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ETHERNET_MULTI_dwNetInterface_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwNetInterface = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_dwNetInterface_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_MULTI_dwNetInterface_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_dwNetInterface_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  result =  ((arg1)->dwNetInterface);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_byCardType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_MULTI_byCardType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_byCardType_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_MULTI_byCardType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ETHERNET_MULTI_byCardType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byCardType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_byCardType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_MULTI_byCardType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_byCardType_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  result =  ((arg1)->byCardType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_byEnableDNS_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_MULTI_byEnableDNS_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_byEnableDNS_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_MULTI_byEnableDNS_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ETHERNET_MULTI_byEnableDNS_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableDNS = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_byEnableDNS_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_MULTI_byEnableDNS_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_byEnableDNS_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  result =  ((arg1)->byEnableDNS);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_wMTU_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_MULTI_wMTU_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_wMTU_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_MULTI_wMTU_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ETHERNET_MULTI_wMTU_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wMTU = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_wMTU_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_MULTI_wMTU_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_wMTU_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  result =  ((arg1)->wMTU);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_byMACAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_MULTI_byMACAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_byMACAddr_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_MULTI_byMACAddr_set" "', argument " "2"" of type '" "BYTE [6]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)6; ++ii) *(BYTE *)&arg1->byMACAddr[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byMACAddr""' of type '""BYTE [6]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_byMACAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_MULTI_byMACAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_byMACAddr_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byMACAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_byEthernetPortNo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_MULTI_byEthernetPortNo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_byEthernetPortNo_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_MULTI_byEthernetPortNo_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ETHERNET_MULTI_byEthernetPortNo_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEthernetPortNo = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_byEthernetPortNo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_MULTI_byEthernetPortNo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_byEthernetPortNo_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  result =  ((arg1)->byEthernetPortNo);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_bySilkScreen_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_MULTI_bySilkScreen_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_bySilkScreen_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_MULTI_bySilkScreen_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ETHERNET_MULTI_bySilkScreen_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->bySilkScreen = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_bySilkScreen_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_MULTI_bySilkScreen_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_bySilkScreen_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  result =  ((arg1)->bySilkScreen);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_byUseDhcp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_MULTI_byUseDhcp_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_byUseDhcp_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_MULTI_byUseDhcp_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ETHERNET_MULTI_byUseDhcp_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byUseDhcp = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_byUseDhcp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_MULTI_byUseDhcp_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_byUseDhcp_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  result =  ((arg1)->byUseDhcp);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_byRes3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_MULTI_byRes3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_byRes3_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_MULTI_byRes3_set" "', argument " "2"" of type '" "BYTE [3]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)3; ++ii) *(BYTE *)&arg1->byRes3[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes3""' of type '""BYTE [3]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_byRes3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_MULTI_byRes3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_byRes3_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_struGatewayIpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_MULTI_struGatewayIpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_struGatewayIpAddr_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_MULTI_struGatewayIpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struGatewayIpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_struGatewayIpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_MULTI_struGatewayIpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_struGatewayIpAddr_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struGatewayIpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_struDnsServer1IpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_MULTI_struDnsServer1IpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_struDnsServer1IpAddr_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_MULTI_struDnsServer1IpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struDnsServer1IpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_struDnsServer1IpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_MULTI_struDnsServer1IpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_struDnsServer1IpAddr_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struDnsServer1IpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_struDnsServer2IpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ETHERNET_MULTI_struDnsServer2IpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_struDnsServer2IpAddr_set" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ETHERNET_MULTI_struDnsServer2IpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struDnsServer2IpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ETHERNET_MULTI_struDnsServer2IpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ETHERNET_MULTI_struDnsServer2IpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ETHERNET_MULTI_struDnsServer2IpAddr_get" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struDnsServer2IpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_ETHERNET_MULTI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_ETHERNET_MULTI")) SWIG_fail;
  result = (NET_DVR_ETHERNET_MULTI *)new NET_DVR_ETHERNET_MULTI();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_ETHERNET_MULTI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ETHERNET_MULTI *arg1 = (NET_DVR_ETHERNET_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_ETHERNET_MULTI",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_ETHERNET_MULTI" "', argument " "1"" of type '" "NET_DVR_ETHERNET_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_ETHERNET_MULTI_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_dwSize_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_MULTI_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_dwSize_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_byDefaultRoute_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_byDefaultRoute_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_byDefaultRoute_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_byDefaultRoute_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_MULTI_byDefaultRoute_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDefaultRoute = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_byDefaultRoute_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_byDefaultRoute_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_byDefaultRoute_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result =  ((arg1)->byDefaultRoute);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_byNetworkCardNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_byNetworkCardNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_byNetworkCardNum_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_byNetworkCardNum_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_MULTI_byNetworkCardNum_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byNetworkCardNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_byNetworkCardNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_byNetworkCardNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_byNetworkCardNum_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result =  ((arg1)->byNetworkCardNum);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_byWorkMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_byWorkMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_byWorkMode_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_byWorkMode_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_MULTI_byWorkMode_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byWorkMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_byWorkMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_byWorkMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_byWorkMode_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result =  ((arg1)->byWorkMode);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_byRes_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_byRes_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_MULTI_byRes_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRes = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_byRes_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result =  ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_struEtherNet_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  NET_DVR_ETHERNET_MULTI *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_struEtherNet_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_struEtherNet_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_struEtherNet_set" "', argument " "2"" of type '" "NET_DVR_ETHERNET_MULTI [4]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_ETHERNET_MULTI * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) *(NET_DVR_ETHERNET_MULTI *)&arg1->struEtherNet[ii] = *((NET_DVR_ETHERNET_MULTI *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struEtherNet""' of type '""NET_DVR_ETHERNET_MULTI [4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_struEtherNet_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_ETHERNET_MULTI *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_struEtherNet_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_struEtherNet_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result = (NET_DVR_ETHERNET_MULTI *)(NET_DVR_ETHERNET_MULTI *) ((arg1)->struEtherNet);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_ETHERNET_MULTI, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_struManageHost1IpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_struManageHost1IpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_struManageHost1IpAddr_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_struManageHost1IpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struManageHost1IpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_struManageHost1IpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_struManageHost1IpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_struManageHost1IpAddr_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struManageHost1IpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_struManageHost2IpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_struManageHost2IpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_struManageHost2IpAddr_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_struManageHost2IpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struManageHost2IpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_struManageHost2IpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_struManageHost2IpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_struManageHost2IpAddr_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struManageHost2IpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_struAlarmHostIpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_struAlarmHostIpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_struAlarmHostIpAddr_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_struAlarmHostIpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struAlarmHostIpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_struAlarmHostIpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_struAlarmHostIpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_struAlarmHostIpAddr_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struAlarmHostIpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_wManageHost1Port_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_wManageHost1Port_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_wManageHost1Port_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_wManageHost1Port_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_MULTI_wManageHost1Port_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wManageHost1Port = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_wManageHost1Port_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_wManageHost1Port_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_wManageHost1Port_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result =  ((arg1)->wManageHost1Port);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_wManageHost2Port_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_wManageHost2Port_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_wManageHost2Port_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_wManageHost2Port_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_MULTI_wManageHost2Port_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wManageHost2Port = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_wManageHost2Port_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_wManageHost2Port_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_wManageHost2Port_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result =  ((arg1)->wManageHost2Port);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_wAlarmHostIpPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_wAlarmHostIpPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_wAlarmHostIpPort_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_wAlarmHostIpPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_MULTI_wAlarmHostIpPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wAlarmHostIpPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_wAlarmHostIpPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_wAlarmHostIpPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_wAlarmHostIpPort_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result =  ((arg1)->wAlarmHostIpPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_byIpResolver_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_byIpResolver_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_byIpResolver_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_byIpResolver_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->byIpResolver[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byIpResolver""' of type '""BYTE [64]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_byIpResolver_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_byIpResolver_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_byIpResolver_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byIpResolver);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_wIpResolverPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_wIpResolverPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_wIpResolverPort_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_wIpResolverPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_MULTI_wIpResolverPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wIpResolverPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_wIpResolverPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_wIpResolverPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_wIpResolverPort_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result =  ((arg1)->wIpResolverPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_wDvrPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_wDvrPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_wDvrPort_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_wDvrPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_MULTI_wDvrPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wDvrPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_wDvrPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_wDvrPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_wDvrPort_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result =  ((arg1)->wDvrPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_wHttpPortNo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_wHttpPortNo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_wHttpPortNo_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_wHttpPortNo_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_MULTI_wHttpPortNo_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHttpPortNo = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_wHttpPortNo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_wHttpPortNo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_wHttpPortNo_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result =  ((arg1)->wHttpPortNo);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_wDvrPort2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_wDvrPort2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_wDvrPort2_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_wDvrPort2_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_MULTI_wDvrPort2_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wDvrPort2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_wDvrPort2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_wDvrPort2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_wDvrPort2_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result =  ((arg1)->wDvrPort2);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_byRes2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_byRes2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_byRes2_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_byRes2_set" "', argument " "2"" of type '" "BYTE [4]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) *(BYTE *)&arg1->byRes2[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes2""' of type '""BYTE [4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_byRes2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_byRes2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_byRes2_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_struMulticastIpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_struMulticastIpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_struMulticastIpAddr_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_struMulticastIpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struMulticastIpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_struMulticastIpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_struMulticastIpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_struMulticastIpAddr_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struMulticastIpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_struPPPoE_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  NET_DVR_PPPOECFG *arg2 = (NET_DVR_PPPOECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_struPPPoE_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_struPPPoE_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_PPPOECFG, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_struPPPoE_set" "', argument " "2"" of type '" "NET_DVR_PPPOECFG *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_PPPOECFG * >(argp2);
  if (arg1) (arg1)->struPPPoE = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_struPPPoE_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_PPPOECFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_struPPPoE_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_struPPPoE_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result = (NET_DVR_PPPOECFG *)& ((arg1)->struPPPoE);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PPPOECFG, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_byRes3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_MULTI_byRes3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_byRes3_set" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_MULTI_byRes3_set" "', argument " "2"" of type '" "BYTE [24]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)24; ++ii) *(BYTE *)&arg1->byRes3[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes3""' of type '""BYTE [24]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_MULTI_byRes3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_MULTI_byRes3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_MULTI_byRes3_get" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_NETCFG_MULTI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_NETCFG_MULTI")) SWIG_fail;
  result = (NET_DVR_NETCFG_MULTI *)new NET_DVR_NETCFG_MULTI();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_NETCFG_MULTI, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_NETCFG_MULTI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG_MULTI *arg1 = (NET_DVR_NETCFG_MULTI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_NETCFG_MULTI",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG_MULTI, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_NETCFG_MULTI" "', argument " "1"" of type '" "NET_DVR_NETCFG_MULTI *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG_MULTI * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_NETCFG_MULTI_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_NETCFG_MULTI, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_dwSize_set" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_dwSize_get" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_struEtherNet_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  NET_DVR_ETHERNET *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_struEtherNet_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_struEtherNet_set" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_ETHERNET, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_struEtherNet_set" "', argument " "2"" of type '" "NET_DVR_ETHERNET [2]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_ETHERNET * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(NET_DVR_ETHERNET *)&arg1->struEtherNet[ii] = *((NET_DVR_ETHERNET *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struEtherNet""' of type '""NET_DVR_ETHERNET [2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_struEtherNet_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_ETHERNET *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_struEtherNet_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_struEtherNet_get" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  result = (NET_DVR_ETHERNET *)(NET_DVR_ETHERNET *) ((arg1)->struEtherNet);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_ETHERNET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sManageHostIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_sManageHostIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sManageHostIP_set" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_sManageHostIP_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sManageHostIP,arg2,16*sizeof(char));
  else memset(arg1->sManageHostIP,0,16*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sManageHostIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_sManageHostIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sManageHostIP_get" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  result = (char *)(char *) ((arg1)->sManageHostIP);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_wManageHostPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_wManageHostPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_wManageHostPort_set" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_wManageHostPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_wManageHostPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wManageHostPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_wManageHostPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_wManageHostPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_wManageHostPort_get" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  result =  ((arg1)->wManageHostPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sIPServerIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_sIPServerIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sIPServerIP_set" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_sIPServerIP_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sIPServerIP,arg2,16*sizeof(char));
  else memset(arg1->sIPServerIP,0,16*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sIPServerIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_sIPServerIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sIPServerIP_get" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  result = (char *)(char *) ((arg1)->sIPServerIP);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sMultiCastIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_sMultiCastIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sMultiCastIP_set" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_sMultiCastIP_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sMultiCastIP,arg2,16*sizeof(char));
  else memset(arg1->sMultiCastIP,0,16*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sMultiCastIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_sMultiCastIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sMultiCastIP_get" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  result = (char *)(char *) ((arg1)->sMultiCastIP);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sGatewayIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_sGatewayIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sGatewayIP_set" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_sGatewayIP_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sGatewayIP,arg2,16*sizeof(char));
  else memset(arg1->sGatewayIP,0,16*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sGatewayIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_sGatewayIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sGatewayIP_get" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  result = (char *)(char *) ((arg1)->sGatewayIP);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sNFSIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_sNFSIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sNFSIP_set" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_sNFSIP_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sNFSIP,arg2,16*sizeof(char));
  else memset(arg1->sNFSIP,0,16*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sNFSIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_sNFSIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sNFSIP_get" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  result = (char *)(char *) ((arg1)->sNFSIP);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sNFSDirectory_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_sNFSDirectory_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sNFSDirectory_set" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_sNFSDirectory_set" "', argument " "2"" of type '" "BYTE [128]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)128; ++ii) *(BYTE *)&arg1->sNFSDirectory[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sNFSDirectory""' of type '""BYTE [128]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sNFSDirectory_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_sNFSDirectory_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sNFSDirectory_get" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->sNFSDirectory);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_dwPPPOE_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_dwPPPOE_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_dwPPPOE_set" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_dwPPPOE_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_dwPPPOE_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwPPPOE = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_dwPPPOE_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_dwPPPOE_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_dwPPPOE_get" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  result =  ((arg1)->dwPPPOE);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sPPPoEUser_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_sPPPoEUser_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sPPPoEUser_set" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_sPPPoEUser_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->sPPPoEUser[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sPPPoEUser""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sPPPoEUser_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_sPPPoEUser_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sPPPoEUser_get" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->sPPPoEUser);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sPPPoEPassword_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_sPPPoEPassword_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sPPPoEPassword_set" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_sPPPoEPassword_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sPPPoEPassword,arg2,16*sizeof(char));
  else memset(arg1->sPPPoEPassword,0,16*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sPPPoEPassword_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_sPPPoEPassword_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sPPPoEPassword_get" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  result = (char *)(char *) ((arg1)->sPPPoEPassword);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sPPPoEIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_sPPPoEIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sPPPoEIP_set" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_sPPPoEIP_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sPPPoEIP,arg2,16*sizeof(char));
  else memset(arg1->sPPPoEIP,0,16*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_sPPPoEIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_sPPPoEIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_sPPPoEIP_get" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  result = (char *)(char *) ((arg1)->sPPPoEIP);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_wHttpPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_wHttpPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_wHttpPort_set" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_wHttpPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_wHttpPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHttpPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_wHttpPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_wHttpPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_wHttpPort_get" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  result =  ((arg1)->wHttpPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_NETCFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_NETCFG")) SWIG_fail;
  result = (NET_DVR_NETCFG *)new NET_DVR_NETCFG();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_NETCFG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_NETCFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_NETCFG *arg1 = (NET_DVR_NETCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_NETCFG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_NETCFG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_NETCFG" "', argument " "1"" of type '" "NET_DVR_NETCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_NETCFG * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_NETCFG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_NETCFG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_dwSize_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V50_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_dwSize_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struEtherNet_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  NET_DVR_ETHERNET_V30 *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_struEtherNet_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struEtherNet_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_struEtherNet_set" "', argument " "2"" of type '" "NET_DVR_ETHERNET_V30 [2]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_ETHERNET_V30 * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(NET_DVR_ETHERNET_V30 *)&arg1->struEtherNet[ii] = *((NET_DVR_ETHERNET_V30 *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struEtherNet""' of type '""NET_DVR_ETHERNET_V30 [2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struEtherNet_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_ETHERNET_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_struEtherNet_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struEtherNet_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result = (NET_DVR_ETHERNET_V30 *)(NET_DVR_ETHERNET_V30 *) ((arg1)->struEtherNet);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_ETHERNET_V30, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struRes1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  NET_DVR_IPADDR *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_struRes1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struRes1_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_struRes1_set" "', argument " "2"" of type '" "NET_DVR_IPADDR [2]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(NET_DVR_IPADDR *)&arg1->struRes1[ii] = *((NET_DVR_IPADDR *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struRes1""' of type '""NET_DVR_IPADDR [2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struRes1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_struRes1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struRes1_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result = (NET_DVR_IPADDR *)(NET_DVR_IPADDR *) ((arg1)->struRes1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struAlarmHostIpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_struAlarmHostIpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struAlarmHostIpAddr_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_struAlarmHostIpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struAlarmHostIpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struAlarmHostIpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_struAlarmHostIpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struAlarmHostIpAddr_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struAlarmHostIpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_byRes2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_byRes2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_byRes2_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_byRes2_set" "', argument " "2"" of type '" "BYTE [4]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) *(BYTE *)&arg1->byRes2[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes2""' of type '""BYTE [4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_byRes2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_byRes2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_byRes2_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_wAlarmHostIpPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_wAlarmHostIpPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_wAlarmHostIpPort_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_wAlarmHostIpPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V50_wAlarmHostIpPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wAlarmHostIpPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_wAlarmHostIpPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_wAlarmHostIpPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_wAlarmHostIpPort_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result =  ((arg1)->wAlarmHostIpPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_byUseDhcp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_byUseDhcp_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_byUseDhcp_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_byUseDhcp_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V50_byUseDhcp_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byUseDhcp = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_byUseDhcp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_byUseDhcp_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_byUseDhcp_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result =  ((arg1)->byUseDhcp);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_byIPv6Mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_byIPv6Mode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_byIPv6Mode_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_byIPv6Mode_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V50_byIPv6Mode_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byIPv6Mode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_byIPv6Mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_byIPv6Mode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_byIPv6Mode_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result =  ((arg1)->byIPv6Mode);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struDnsServer1IpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_struDnsServer1IpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struDnsServer1IpAddr_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_struDnsServer1IpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struDnsServer1IpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struDnsServer1IpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_struDnsServer1IpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struDnsServer1IpAddr_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struDnsServer1IpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struDnsServer2IpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_struDnsServer2IpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struDnsServer2IpAddr_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_struDnsServer2IpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struDnsServer2IpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struDnsServer2IpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_struDnsServer2IpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struDnsServer2IpAddr_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struDnsServer2IpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_byIpResolver_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_byIpResolver_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_byIpResolver_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_byIpResolver_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->byIpResolver[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byIpResolver""' of type '""BYTE [64]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_byIpResolver_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_byIpResolver_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_byIpResolver_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byIpResolver);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_wIpResolverPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_wIpResolverPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_wIpResolverPort_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_wIpResolverPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V50_wIpResolverPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wIpResolverPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_wIpResolverPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_wIpResolverPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_wIpResolverPort_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result =  ((arg1)->wIpResolverPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_wHttpPortNo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_wHttpPortNo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_wHttpPortNo_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_wHttpPortNo_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V50_wHttpPortNo_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHttpPortNo = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_wHttpPortNo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_wHttpPortNo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_wHttpPortNo_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result =  ((arg1)->wHttpPortNo);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struMulticastIpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_struMulticastIpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struMulticastIpAddr_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_struMulticastIpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struMulticastIpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struMulticastIpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_struMulticastIpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struMulticastIpAddr_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struMulticastIpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struGatewayIpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_struGatewayIpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struGatewayIpAddr_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_struGatewayIpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struGatewayIpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struGatewayIpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_struGatewayIpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struGatewayIpAddr_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struGatewayIpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struPPPoE_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  NET_DVR_PPPOECFG *arg2 = (NET_DVR_PPPOECFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_struPPPoE_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struPPPoE_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_PPPOECFG, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_struPPPoE_set" "', argument " "2"" of type '" "NET_DVR_PPPOECFG *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_PPPOECFG * >(argp2);
  if (arg1) (arg1)->struPPPoE = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struPPPoE_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_PPPOECFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_struPPPoE_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struPPPoE_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result = (NET_DVR_PPPOECFG *)& ((arg1)->struPPPoE);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PPPOECFG, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_byEnablePrivateMulticastDiscovery_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_byEnablePrivateMulticastDiscovery_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_byEnablePrivateMulticastDiscovery_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_byEnablePrivateMulticastDiscovery_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V50_byEnablePrivateMulticastDiscovery_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnablePrivateMulticastDiscovery = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_byEnablePrivateMulticastDiscovery_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_byEnablePrivateMulticastDiscovery_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_byEnablePrivateMulticastDiscovery_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result =  ((arg1)->byEnablePrivateMulticastDiscovery);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_byEnableOnvifMulticastDiscovery_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_byEnableOnvifMulticastDiscovery_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_byEnableOnvifMulticastDiscovery_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_byEnableOnvifMulticastDiscovery_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V50_byEnableOnvifMulticastDiscovery_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableOnvifMulticastDiscovery = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_byEnableOnvifMulticastDiscovery_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_byEnableOnvifMulticastDiscovery_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_byEnableOnvifMulticastDiscovery_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result =  ((arg1)->byEnableOnvifMulticastDiscovery);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_wAlarmHost2IpPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_wAlarmHost2IpPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_wAlarmHost2IpPort_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_wAlarmHost2IpPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V50_wAlarmHost2IpPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wAlarmHost2IpPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_wAlarmHost2IpPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_wAlarmHost2IpPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_wAlarmHost2IpPort_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result =  ((arg1)->wAlarmHost2IpPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struAlarmHost2IpAddr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_struAlarmHost2IpAddr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struAlarmHost2IpAddr_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_struAlarmHost2IpAddr_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struAlarmHost2IpAddr = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_struAlarmHost2IpAddr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_struAlarmHost2IpAddr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_struAlarmHost2IpAddr_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struAlarmHost2IpAddr);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_byEnableDNS_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_byEnableDNS_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_byEnableDNS_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_byEnableDNS_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_NETCFG_V50_byEnableDNS_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableDNS = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_byEnableDNS_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_byEnableDNS_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_byEnableDNS_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result =  ((arg1)->byEnableDNS);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_NETCFG_V50_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_NETCFG_V50_byRes_set" "', argument " "2"" of type '" "BYTE [599]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)599; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [599]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_NETCFG_V50_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_NETCFG_V50_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_NETCFG_V50_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_NETCFG_V50(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_NETCFG_V50")) SWIG_fail;
  result = (tagNET_DVR_NETCFG_V50 *)new tagNET_DVR_NETCFG_V50();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_NETCFG_V50, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_NETCFG_V50(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_NETCFG_V50 *arg1 = (tagNET_DVR_NETCFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_NETCFG_V50",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_NETCFG_V50, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_NETCFG_V50" "', argument " "1"" of type '" "tagNET_DVR_NETCFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_NETCFG_V50 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_NETCFG_V50_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_NETCFG_V50, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_dwSize_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_dwSize_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byEnableAutoLogin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_byEnableAutoLogin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byEnableAutoLogin_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_byEnableAutoLogin_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_byEnableAutoLogin_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableAutoLogin = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byEnableAutoLogin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_byEnableAutoLogin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byEnableAutoLogin_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  result =  ((arg1)->byEnableAutoLogin);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byLoginStatus_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_byLoginStatus_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byLoginStatus_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_byLoginStatus_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_byLoginStatus_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byLoginStatus = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byLoginStatus_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_byLoginStatus_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byLoginStatus_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  result =  ((arg1)->byLoginStatus);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byRes1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_byRes1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byRes1_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_byRes1_set" "', argument " "2"" of type '" "BYTE [2]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(BYTE *)&arg1->byRes1[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes1""' of type '""BYTE [2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byRes1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_byRes1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byRes1_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_stuServerIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_stuServerIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_stuServerIP_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_stuServerIP_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->stuServerIP = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_stuServerIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_stuServerIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_stuServerIP_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->stuServerIP);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_wServerPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_wServerPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_wServerPort_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_wServerPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_wServerPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wServerPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_wServerPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_wServerPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_wServerPort_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  result =  ((arg1)->wServerPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byRes2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_byRes2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byRes2_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_byRes2_set" "', argument " "2"" of type '" "BYTE [2]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(BYTE *)&arg1->byRes2[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes2""' of type '""BYTE [2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byRes2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_byRes2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byRes2_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byUserName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_byUserName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byUserName_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_byUserName_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->byUserName[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byUserName""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byUserName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_byUserName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byUserName_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byUserName);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byPassWord_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_byPassWord_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byPassWord_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_byPassWord_set" "', argument " "2"" of type '" "BYTE [16]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) *(BYTE *)&arg1->byPassWord[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byPassWord""' of type '""BYTE [16]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byPassWord_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_byPassWord_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byPassWord_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byPassWord);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byLocalNo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_byLocalNo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byLocalNo_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_byLocalNo_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->byLocalNo[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byLocalNo""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byLocalNo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_byLocalNo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byLocalNo_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byLocalNo);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byDispalyName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_byDispalyName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byDispalyName_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_byDispalyName_set" "', argument " "2"" of type '" "BYTE [128]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)128; ++ii) *(BYTE *)&arg1->byDispalyName[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byDispalyName""' of type '""BYTE [128]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byDispalyName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_byDispalyName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byDispalyName_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byDispalyName);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_wLocalPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_wLocalPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_wLocalPort_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_wLocalPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_wLocalPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wLocalPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_wLocalPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_wLocalPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_wLocalPort_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  result =  ((arg1)->wLocalPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byLoginCycle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_byLoginCycle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byLoginCycle_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_byLoginCycle_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_byLoginCycle_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byLoginCycle = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byLoginCycle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_byLoginCycle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byLoginCycle_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  result =  ((arg1)->byLoginCycle);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_byType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byType_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_byType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_byType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_byType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byType_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  result =  ((arg1)->byType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byDomainName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_byDomainName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byDomainName_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_byDomainName_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->byDomainName[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byDomainName""' of type '""BYTE [64]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byDomainName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_byDomainName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byDomainName_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byDomainName);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_byRes_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [64]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_SIP_CFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_SIP_CFG")) SWIG_fail;
  result = (tagNET_DVR_SIP_CFG *)new tagNET_DVR_SIP_CFG();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_SIP_CFG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_SIP_CFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG *arg1 = (tagNET_DVR_SIP_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_SIP_CFG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_SIP_CFG" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_SIP_CFG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_SIP_CFG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_dwSize_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_V50_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_dwSize_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byEnableAutoLogin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_byEnableAutoLogin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byEnableAutoLogin_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_byEnableAutoLogin_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_V50_byEnableAutoLogin_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableAutoLogin = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byEnableAutoLogin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_byEnableAutoLogin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byEnableAutoLogin_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result =  ((arg1)->byEnableAutoLogin);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byLoginStatus_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_byLoginStatus_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byLoginStatus_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_byLoginStatus_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_V50_byLoginStatus_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byLoginStatus = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byLoginStatus_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_byLoginStatus_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byLoginStatus_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result =  ((arg1)->byLoginStatus);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byRes1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_byRes1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byRes1_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_byRes1_set" "', argument " "2"" of type '" "BYTE [2]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(BYTE *)&arg1->byRes1[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes1""' of type '""BYTE [2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byRes1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_byRes1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byRes1_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_stuServerIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_stuServerIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_stuServerIP_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_stuServerIP_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->stuServerIP = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_stuServerIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_stuServerIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_stuServerIP_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->stuServerIP);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_wServerPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_wServerPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_wServerPort_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_wServerPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_V50_wServerPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wServerPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_wServerPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_wServerPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_wServerPort_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result =  ((arg1)->wServerPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byRes2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_byRes2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byRes2_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_byRes2_set" "', argument " "2"" of type '" "BYTE [2]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(BYTE *)&arg1->byRes2[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes2""' of type '""BYTE [2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byRes2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_byRes2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byRes2_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byUserName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_byUserName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byUserName_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_byUserName_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->byUserName[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byUserName""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byUserName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_byUserName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byUserName_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byUserName);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byPassWord_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_byPassWord_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byPassWord_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_byPassWord_set" "', argument " "2"" of type '" "BYTE [16]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) *(BYTE *)&arg1->byPassWord[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byPassWord""' of type '""BYTE [16]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byPassWord_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_byPassWord_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byPassWord_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byPassWord);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byLocalNo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_byLocalNo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byLocalNo_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_byLocalNo_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->byLocalNo[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byLocalNo""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byLocalNo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_byLocalNo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byLocalNo_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byLocalNo);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byDispalyName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_byDispalyName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byDispalyName_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_byDispalyName_set" "', argument " "2"" of type '" "BYTE [128]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)128; ++ii) *(BYTE *)&arg1->byDispalyName[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byDispalyName""' of type '""BYTE [128]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byDispalyName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_byDispalyName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byDispalyName_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byDispalyName);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_wLocalPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_wLocalPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_wLocalPort_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_wLocalPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_V50_wLocalPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wLocalPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_wLocalPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_wLocalPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_wLocalPort_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result =  ((arg1)->wLocalPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byLoginCycle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_byLoginCycle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byLoginCycle_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_byLoginCycle_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_V50_byLoginCycle_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byLoginCycle = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byLoginCycle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_byLoginCycle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byLoginCycle_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result =  ((arg1)->byLoginCycle);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byRes3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_byRes3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byRes3_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_byRes3_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_V50_byRes3_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRes3 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byRes3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_byRes3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byRes3_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result =  ((arg1)->byRes3);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_bySIPServerDomain_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_bySIPServerDomain_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_bySIPServerDomain_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_bySIPServerDomain_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->bySIPServerDomain[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""bySIPServerDomain""' of type '""BYTE [64]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_bySIPServerDomain_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_bySIPServerDomain_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_bySIPServerDomain_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->bySIPServerDomain);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_stuSTUNServerIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_stuSTUNServerIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_stuSTUNServerIP_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_stuSTUNServerIP_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->stuSTUNServerIP = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_stuSTUNServerIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_stuSTUNServerIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_stuSTUNServerIP_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->stuSTUNServerIP);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_bySTUNServerDomain_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_bySTUNServerDomain_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_bySTUNServerDomain_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_bySTUNServerDomain_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->bySTUNServerDomain[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""bySTUNServerDomain""' of type '""BYTE [64]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_bySTUNServerDomain_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_bySTUNServerDomain_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_bySTUNServerDomain_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->bySTUNServerDomain);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_wSTUNServerPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_wSTUNServerPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_wSTUNServerPort_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_wSTUNServerPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_V50_wSTUNServerPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wSTUNServerPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_wSTUNServerPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_wSTUNServerPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_wSTUNServerPort_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result =  ((arg1)->wSTUNServerPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byRes4_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_byRes4_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byRes4_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_byRes4_set" "', argument " "2"" of type '" "BYTE [2]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(BYTE *)&arg1->byRes4[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes4""' of type '""BYTE [2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byRes4_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_byRes4_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byRes4_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_stuProxyServerIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_stuProxyServerIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_stuProxyServerIP_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_stuProxyServerIP_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->stuProxyServerIP = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_stuProxyServerIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_stuProxyServerIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_stuProxyServerIP_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->stuProxyServerIP);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byProxyServerDomain_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_byProxyServerDomain_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byProxyServerDomain_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_byProxyServerDomain_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->byProxyServerDomain[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byProxyServerDomain""' of type '""BYTE [64]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byProxyServerDomain_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_byProxyServerDomain_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byProxyServerDomain_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byProxyServerDomain);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_wProxyServerPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_wProxyServerPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_wProxyServerPort_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_wProxyServerPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_V50_wProxyServerPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wProxyServerPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_wProxyServerPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_wProxyServerPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_wProxyServerPort_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result =  ((arg1)->wProxyServerPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byNetWork_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_byNetWork_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byNetWork_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_byNetWork_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SIP_CFG_V50_byNetWork_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byNetWork = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byNetWork_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_byNetWork_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byNetWork_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result =  ((arg1)->byNetWork);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SIP_CFG_V50_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SIP_CFG_V50_byRes_set" "', argument " "2"" of type '" "BYTE [257]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)257; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [257]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SIP_CFG_V50_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SIP_CFG_V50_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SIP_CFG_V50_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_SIP_CFG_V50(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_SIP_CFG_V50")) SWIG_fail;
  result = (tagNET_DVR_SIP_CFG_V50 *)new tagNET_DVR_SIP_CFG_V50();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_SIP_CFG_V50(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SIP_CFG_V50 *arg1 = (tagNET_DVR_SIP_CFG_V50 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_SIP_CFG_V50",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_SIP_CFG_V50" "', argument " "1"" of type '" "tagNET_DVR_SIP_CFG_V50 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SIP_CFG_V50 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_SIP_CFG_V50_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_SIP_CFG_V50, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_DEVCFG_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_dwSize_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_DEVCFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_DEVCFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_DEVCFG_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_dwSize_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_byDefaultRing_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_DEVCFG_byDefaultRing_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byDefaultRing_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byDefaultRing_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_DEVCFG_byDefaultRing_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDefaultRing = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_byDefaultRing_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_DEVCFG_byDefaultRing_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byDefaultRing_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  result =  ((arg1)->byDefaultRing);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_byRingVolume_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_DEVCFG_byRingVolume_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byRingVolume_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byRingVolume_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_DEVCFG_byRingVolume_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRingVolume = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_byRingVolume_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_DEVCFG_byRingVolume_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byRingVolume_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  result =  ((arg1)->byRingVolume);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_byInputVolume_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_DEVCFG_byInputVolume_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byInputVolume_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byInputVolume_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_DEVCFG_byInputVolume_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byInputVolume = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_byInputVolume_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_DEVCFG_byInputVolume_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byInputVolume_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  result =  ((arg1)->byInputVolume);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_byOutputVolume_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_DEVCFG_byOutputVolume_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byOutputVolume_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byOutputVolume_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_DEVCFG_byOutputVolume_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byOutputVolume = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_byOutputVolume_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_DEVCFG_byOutputVolume_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byOutputVolume_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  result =  ((arg1)->byOutputVolume);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_wRtpPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_DEVCFG_wRtpPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_wRtpPort_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_DEVCFG_wRtpPort_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_DEVCFG_wRtpPort_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wRtpPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_wRtpPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_DEVCFG_wRtpPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_wRtpPort_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  result =  ((arg1)->wRtpPort);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_byRes1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_DEVCFG_byRes1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byRes1_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byRes1_set" "', argument " "2"" of type '" "BYTE [2]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(BYTE *)&arg1->byRes1[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes1""' of type '""BYTE [2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_byRes1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_DEVCFG_byRes1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byRes1_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_dwPreviewDelayTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_DEVCFG_dwPreviewDelayTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_dwPreviewDelayTime_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_DEVCFG_dwPreviewDelayTime_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_DEVCFG_dwPreviewDelayTime_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwPreviewDelayTime = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_dwPreviewDelayTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_DEVCFG_dwPreviewDelayTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_dwPreviewDelayTime_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  result =  ((arg1)->dwPreviewDelayTime);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_byRes2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_DEVCFG_byRes2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byRes2_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byRes2_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->byRes2[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes2""' of type '""BYTE [64]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_DEVCFG_byRes2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_DEVCFG_byRes2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_DEVCFG_byRes2_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_IP_VIEW_DEVCFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_IP_VIEW_DEVCFG")) SWIG_fail;
  result = (tagNET_DVR_IP_VIEW_DEVCFG *)new tagNET_DVR_IP_VIEW_DEVCFG();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_IP_VIEW_DEVCFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_DEVCFG *arg1 = (tagNET_DVR_IP_VIEW_DEVCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_IP_VIEW_DEVCFG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_IP_VIEW_DEVCFG" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_DEVCFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_DEVCFG * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_IP_VIEW_DEVCFG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_IP_VIEW_DEVCFG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_AUDIO_CFG_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_AUDIO_CFG *arg1 = (tagNET_DVR_IP_VIEW_AUDIO_CFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_AUDIO_CFG_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_AUDIO_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_dwSize_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_AUDIO_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_AUDIO_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_AUDIO_CFG_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_AUDIO_CFG *arg1 = (tagNET_DVR_IP_VIEW_AUDIO_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_AUDIO_CFG_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_AUDIO_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_dwSize_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_AUDIO_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_AUDIO_CFG * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_AUDIO_CFG *arg1 = (tagNET_DVR_IP_VIEW_AUDIO_CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_AUDIO_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri1_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_AUDIO_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_AUDIO_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri1_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri1_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAudioEncPri1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_AUDIO_CFG *arg1 = (tagNET_DVR_IP_VIEW_AUDIO_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_AUDIO_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri1_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_AUDIO_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_AUDIO_CFG * >(argp1);
  result =  ((arg1)->byAudioEncPri1);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_AUDIO_CFG *arg1 = (tagNET_DVR_IP_VIEW_AUDIO_CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_AUDIO_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri2_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_AUDIO_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_AUDIO_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri2_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri2_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAudioEncPri2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_AUDIO_CFG *arg1 = (tagNET_DVR_IP_VIEW_AUDIO_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_AUDIO_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri2_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_AUDIO_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_AUDIO_CFG * >(argp1);
  result =  ((arg1)->byAudioEncPri2);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_AUDIO_CFG *arg1 = (tagNET_DVR_IP_VIEW_AUDIO_CFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_AUDIO_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen1_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_AUDIO_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_AUDIO_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen1_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen1_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wAudioPacketLen1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_AUDIO_CFG *arg1 = (tagNET_DVR_IP_VIEW_AUDIO_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_AUDIO_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen1_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_AUDIO_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_AUDIO_CFG * >(argp1);
  result =  ((arg1)->wAudioPacketLen1);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_AUDIO_CFG *arg1 = (tagNET_DVR_IP_VIEW_AUDIO_CFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_AUDIO_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen2_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_AUDIO_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_AUDIO_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen2_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen2_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wAudioPacketLen2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_AUDIO_CFG *arg1 = (tagNET_DVR_IP_VIEW_AUDIO_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_AUDIO_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen2_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_AUDIO_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_AUDIO_CFG * >(argp1);
  result =  ((arg1)->wAudioPacketLen2);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_AUDIO_CFG_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_AUDIO_CFG *arg1 = (tagNET_DVR_IP_VIEW_AUDIO_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_AUDIO_CFG_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_AUDIO_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_AUDIO_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_AUDIO_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_byRes_set" "', argument " "2"" of type '" "BYTE [30]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)30; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [30]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_AUDIO_CFG_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_AUDIO_CFG *arg1 = (tagNET_DVR_IP_VIEW_AUDIO_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_AUDIO_CFG_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_AUDIO_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_AUDIO_CFG_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_AUDIO_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_AUDIO_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_IP_VIEW_AUDIO_CFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_AUDIO_CFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_IP_VIEW_AUDIO_CFG")) SWIG_fail;
  result = (tagNET_DVR_IP_VIEW_AUDIO_CFG *)new tagNET_DVR_IP_VIEW_AUDIO_CFG();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_IP_VIEW_AUDIO_CFG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_IP_VIEW_AUDIO_CFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_AUDIO_CFG *arg1 = (tagNET_DVR_IP_VIEW_AUDIO_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_IP_VIEW_AUDIO_CFG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_AUDIO_CFG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_IP_VIEW_AUDIO_CFG" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_AUDIO_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_AUDIO_CFG * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_IP_VIEW_AUDIO_CFG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_IP_VIEW_AUDIO_CFG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_CALL_CFG_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_dwSize_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_CALL_CFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_CALL_CFG_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_dwSize_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byEnableAutoResponse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_CALL_CFG_byEnableAutoResponse_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byEnableAutoResponse_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byEnableAutoResponse_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byEnableAutoResponse_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableAutoResponse = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byEnableAutoResponse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_CALL_CFG_byEnableAutoResponse_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byEnableAutoResponse_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  result =  ((arg1)->byEnableAutoResponse);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byAudoResponseTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_CALL_CFG_byAudoResponseTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byAudoResponseTime_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byAudoResponseTime_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byAudoResponseTime_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAudoResponseTime = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byAudoResponseTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_CALL_CFG_byAudoResponseTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byAudoResponseTime_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  result =  ((arg1)->byAudoResponseTime);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byRes1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_CALL_CFG_byRes1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byRes1_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byRes1_set" "', argument " "2"" of type '" "BYTE [2]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(BYTE *)&arg1->byRes1[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes1""' of type '""BYTE [2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byRes1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_CALL_CFG_byRes1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byRes1_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber1_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber1_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber1_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableAlarmNumber1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber1_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  result =  ((arg1)->byEnableAlarmNumber1);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byRes2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_CALL_CFG_byRes2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byRes2_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byRes2_set" "', argument " "2"" of type '" "BYTE [3]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)3; ++ii) *(BYTE *)&arg1->byRes2[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes2""' of type '""BYTE [3]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byRes2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_CALL_CFG_byRes2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byRes2_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber1_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber1_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->byAlarmNumber1[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byAlarmNumber1""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber1_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byAlarmNumber1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber2_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber2_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber2_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableAlarmNumber2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber2_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  result =  ((arg1)->byEnableAlarmNumber2);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byRes3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_CALL_CFG_byRes3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byRes3_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byRes3_set" "', argument " "2"" of type '" "BYTE [3]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)3; ++ii) *(BYTE *)&arg1->byRes3[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes3""' of type '""BYTE [3]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byRes3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_CALL_CFG_byRes3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byRes3_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber2_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber2_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->byAlarmNumber2[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byAlarmNumber2""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber2_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byAlarmNumber2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byRes4_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_IP_VIEW_CALL_CFG_byRes4_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byRes4_set" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byRes4_set" "', argument " "2"" of type '" "BYTE [72]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)72; ++ii) *(BYTE *)&arg1->byRes4[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes4""' of type '""BYTE [72]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_IP_VIEW_CALL_CFG_byRes4_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_IP_VIEW_CALL_CFG_byRes4_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_IP_VIEW_CALL_CFG_byRes4_get" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_IP_VIEW_CALL_CFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_IP_VIEW_CALL_CFG")) SWIG_fail;
  result = (tagNET_DVR_IP_VIEW_CALL_CFG *)new tagNET_DVR_IP_VIEW_CALL_CFG();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_IP_VIEW_CALL_CFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_IP_VIEW_CALL_CFG *arg1 = (tagNET_DVR_IP_VIEW_CALL_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_IP_VIEW_CALL_CFG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_IP_VIEW_CALL_CFG" "', argument " "1"" of type '" "tagNET_DVR_IP_VIEW_CALL_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_IP_VIEW_CALL_CFG * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_IP_VIEW_CALL_CFG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_IP_VIEW_CALL_CFG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_RECORDCHAN_dwMaxRecordChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDCHAN *arg1 = (NET_DVR_RECORDCHAN *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORDCHAN_dwMaxRecordChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDCHAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDCHAN_dwMaxRecordChanNum_set" "', argument " "1"" of type '" "NET_DVR_RECORDCHAN *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDCHAN * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORDCHAN_dwMaxRecordChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORDCHAN_dwMaxRecordChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwMaxRecordChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDCHAN_dwMaxRecordChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDCHAN *arg1 = (NET_DVR_RECORDCHAN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORDCHAN_dwMaxRecordChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDCHAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDCHAN_dwMaxRecordChanNum_get" "', argument " "1"" of type '" "NET_DVR_RECORDCHAN *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDCHAN * >(argp1);
  result =  ((arg1)->dwMaxRecordChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDCHAN_dwCurRecordChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDCHAN *arg1 = (NET_DVR_RECORDCHAN *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORDCHAN_dwCurRecordChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDCHAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDCHAN_dwCurRecordChanNum_set" "', argument " "1"" of type '" "NET_DVR_RECORDCHAN *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDCHAN * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORDCHAN_dwCurRecordChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORDCHAN_dwCurRecordChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwCurRecordChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDCHAN_dwCurRecordChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDCHAN *arg1 = (NET_DVR_RECORDCHAN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORDCHAN_dwCurRecordChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDCHAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDCHAN_dwCurRecordChanNum_get" "', argument " "1"" of type '" "NET_DVR_RECORDCHAN *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDCHAN * >(argp1);
  result =  ((arg1)->dwCurRecordChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDCHAN_dwRelRecordChan_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDCHAN *arg1 = (NET_DVR_RECORDCHAN *) 0 ;
  DWORD *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORDCHAN_dwRelRecordChan_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDCHAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDCHAN_dwRelRecordChan_set" "', argument " "1"" of type '" "NET_DVR_RECORDCHAN *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDCHAN * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DWORD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORDCHAN_dwRelRecordChan_set" "', argument " "2"" of type '" "DWORD [(32+32)]""'"); 
  } 
  arg2 = reinterpret_cast< DWORD * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)(32+32); ++ii) *(DWORD *)&arg1->dwRelRecordChan[ii] = *((DWORD *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""dwRelRecordChan""' of type '""DWORD [(32+32)]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDCHAN_dwRelRecordChan_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDCHAN *arg1 = (NET_DVR_RECORDCHAN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORDCHAN_dwRelRecordChan_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDCHAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDCHAN_dwRelRecordChan_get" "', argument " "1"" of type '" "NET_DVR_RECORDCHAN *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDCHAN * >(argp1);
  result = (DWORD *)(DWORD *) ((arg1)->dwRelRecordChan);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DWORD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDCHAN_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDCHAN *arg1 = (NET_DVR_RECORDCHAN *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORDCHAN_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDCHAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDCHAN_byRes_set" "', argument " "1"" of type '" "NET_DVR_RECORDCHAN *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDCHAN * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORDCHAN_byRes_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [64]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDCHAN_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDCHAN *arg1 = (NET_DVR_RECORDCHAN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORDCHAN_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDCHAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDCHAN_byRes_get" "', argument " "1"" of type '" "NET_DVR_RECORDCHAN *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDCHAN * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_RECORDCHAN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDCHAN *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_RECORDCHAN")) SWIG_fail;
  result = (NET_DVR_RECORDCHAN *)new NET_DVR_RECORDCHAN();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_RECORDCHAN, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_RECORDCHAN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDCHAN *arg1 = (NET_DVR_RECORDCHAN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_RECORDCHAN",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDCHAN, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_RECORDCHAN" "', argument " "1"" of type '" "NET_DVR_RECORDCHAN *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDCHAN * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_RECORDCHAN_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_RECORDCHAN, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_V30_byMotionScope_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  BYTE (*arg2)[96] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_MOTION_V30_byMotionScope_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_V30_byMotionScope_set" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_96__BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_MOTION_V30_byMotionScope_set" "', argument " "2"" of type '" "BYTE [64][96]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE (*)[96] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)96; ++jj) arg1->byMotionScope[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byMotionScope""' of type '""BYTE [64][96]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byMotionScope""' of type '""BYTE [64][96]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_V30_byMotionScope_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE (*result)[96] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_MOTION_V30_byMotionScope_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_V30_byMotionScope_get" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  result = (BYTE (*)[96])(BYTE (*)[96]) ((arg1)->byMotionScope);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_96__BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_V30_byMotionSensitive_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_MOTION_V30_byMotionSensitive_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_V30_byMotionSensitive_set" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_MOTION_V30_byMotionSensitive_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_MOTION_V30_byMotionSensitive_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byMotionSensitive = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_V30_byMotionSensitive_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_MOTION_V30_byMotionSensitive_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_V30_byMotionSensitive_get" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  result =  ((arg1)->byMotionSensitive);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_V30_byEnableHandleMotion_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_MOTION_V30_byEnableHandleMotion_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_V30_byEnableHandleMotion_set" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_MOTION_V30_byEnableHandleMotion_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_MOTION_V30_byEnableHandleMotion_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableHandleMotion = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_V30_byEnableHandleMotion_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_MOTION_V30_byEnableHandleMotion_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_V30_byEnableHandleMotion_get" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  result =  ((arg1)->byEnableHandleMotion);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_V30_byEnableDisplay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_MOTION_V30_byEnableDisplay_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_V30_byEnableDisplay_set" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_MOTION_V30_byEnableDisplay_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_MOTION_V30_byEnableDisplay_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableDisplay = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_V30_byEnableDisplay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_MOTION_V30_byEnableDisplay_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_V30_byEnableDisplay_get" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  result =  ((arg1)->byEnableDisplay);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_V30_reservedData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_MOTION_V30_reservedData_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_V30_reservedData_set" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_DVR_MOTION_V30_reservedData_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->reservedData = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_V30_reservedData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_MOTION_V30_reservedData_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_V30_reservedData_get" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  result = (char) ((arg1)->reservedData);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_V30_struMotionHandleType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  NET_DVR_HANDLEEXCEPTION_V30 *arg2 = (NET_DVR_HANDLEEXCEPTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_MOTION_V30_struMotionHandleType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_V30_struMotionHandleType_set" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_MOTION_V30_struMotionHandleType_set" "', argument " "2"" of type '" "NET_DVR_HANDLEEXCEPTION_V30 *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION_V30 * >(argp2);
  if (arg1) (arg1)->struMotionHandleType = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_V30_struMotionHandleType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_HANDLEEXCEPTION_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_MOTION_V30_struMotionHandleType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_V30_struMotionHandleType_get" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  result = (NET_DVR_HANDLEEXCEPTION_V30 *)& ((arg1)->struMotionHandleType);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION_V30, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_V30_struAlarmTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  NET_DVR_SCHEDTIME (*arg2)[8] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_MOTION_V30_struAlarmTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_V30_struAlarmTime_set" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_8__NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_MOTION_V30_struAlarmTime_set" "', argument " "2"" of type '" "NET_DVR_SCHEDTIME [7][8]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_SCHEDTIME (*)[8] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)8; ++jj) arg1->struAlarmTime[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struAlarmTime""' of type '""NET_DVR_SCHEDTIME [7][8]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struAlarmTime""' of type '""NET_DVR_SCHEDTIME [7][8]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_V30_struAlarmTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_SCHEDTIME (*result)[8] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_MOTION_V30_struAlarmTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_V30_struAlarmTime_get" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  result = (NET_DVR_SCHEDTIME (*)[8])(NET_DVR_SCHEDTIME (*)[8]) ((arg1)->struAlarmTime);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_8__NET_DVR_SCHEDTIME, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_V30_byRelRecordChan_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_MOTION_V30_byRelRecordChan_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_V30_byRelRecordChan_set" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_MOTION_V30_byRelRecordChan_set" "', argument " "2"" of type '" "BYTE [(32+32)]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)(32+32); ++ii) *(BYTE *)&arg1->byRelRecordChan[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRelRecordChan""' of type '""BYTE [(32+32)]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_V30_byRelRecordChan_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_MOTION_V30_byRelRecordChan_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_V30_byRelRecordChan_get" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRelRecordChan);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_MOTION_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_MOTION_V30")) SWIG_fail;
  result = (NET_DVR_MOTION_V30 *)new NET_DVR_MOTION_V30();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_MOTION_V30, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_MOTION_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION_V30 *arg1 = (NET_DVR_MOTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_MOTION_V30",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION_V30, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_MOTION_V30" "', argument " "1"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_MOTION_V30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_MOTION_V30, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_byMotionScope_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  BYTE (*arg2)[22] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_MOTION_byMotionScope_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_byMotionScope_set" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_22__BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_MOTION_byMotionScope_set" "', argument " "2"" of type '" "BYTE [18][22]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE (*)[22] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)18; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)22; ++jj) arg1->byMotionScope[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byMotionScope""' of type '""BYTE [18][22]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byMotionScope""' of type '""BYTE [18][22]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_byMotionScope_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE (*result)[22] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_MOTION_byMotionScope_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_byMotionScope_get" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  result = (BYTE (*)[22])(BYTE (*)[22]) ((arg1)->byMotionScope);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_22__BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_byMotionSensitive_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_MOTION_byMotionSensitive_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_byMotionSensitive_set" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_MOTION_byMotionSensitive_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_MOTION_byMotionSensitive_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byMotionSensitive = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_byMotionSensitive_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_MOTION_byMotionSensitive_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_byMotionSensitive_get" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  result =  ((arg1)->byMotionSensitive);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_byEnableHandleMotion_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_MOTION_byEnableHandleMotion_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_byEnableHandleMotion_set" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_MOTION_byEnableHandleMotion_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_MOTION_byEnableHandleMotion_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableHandleMotion = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_byEnableHandleMotion_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_MOTION_byEnableHandleMotion_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_byEnableHandleMotion_get" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  result =  ((arg1)->byEnableHandleMotion);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_byEnableDisplay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_MOTION_byEnableDisplay_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_byEnableDisplay_set" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_MOTION_byEnableDisplay_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_MOTION_byEnableDisplay_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableDisplay = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_byEnableDisplay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_MOTION_byEnableDisplay_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_byEnableDisplay_get" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  result =  ((arg1)->byEnableDisplay);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_reservedData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_MOTION_reservedData_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_reservedData_set" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_DVR_MOTION_reservedData_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->reservedData = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_reservedData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_MOTION_reservedData_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_reservedData_get" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  result = (char) ((arg1)->reservedData);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_strMotionHandleType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  NET_DVR_HANDLEEXCEPTION *arg2 = (NET_DVR_HANDLEEXCEPTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_MOTION_strMotionHandleType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_strMotionHandleType_set" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_MOTION_strMotionHandleType_set" "', argument " "2"" of type '" "NET_DVR_HANDLEEXCEPTION *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION * >(argp2);
  if (arg1) (arg1)->strMotionHandleType = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_strMotionHandleType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_HANDLEEXCEPTION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_MOTION_strMotionHandleType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_strMotionHandleType_get" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  result = (NET_DVR_HANDLEEXCEPTION *)& ((arg1)->strMotionHandleType);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_struAlarmTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  NET_DVR_SCHEDTIME (*arg2)[4] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_MOTION_struAlarmTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_struAlarmTime_set" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_4__NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_MOTION_struAlarmTime_set" "', argument " "2"" of type '" "NET_DVR_SCHEDTIME [7][4]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_SCHEDTIME (*)[4] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)4; ++jj) arg1->struAlarmTime[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struAlarmTime""' of type '""NET_DVR_SCHEDTIME [7][4]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struAlarmTime""' of type '""NET_DVR_SCHEDTIME [7][4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_struAlarmTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_SCHEDTIME (*result)[4] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_MOTION_struAlarmTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_struAlarmTime_get" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  result = (NET_DVR_SCHEDTIME (*)[4])(NET_DVR_SCHEDTIME (*)[4]) ((arg1)->struAlarmTime);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_4__NET_DVR_SCHEDTIME, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_byRelRecordChan_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_MOTION_byRelRecordChan_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_byRelRecordChan_set" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_MOTION_byRelRecordChan_set" "', argument " "2"" of type '" "BYTE [16]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) *(BYTE *)&arg1->byRelRecordChan[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRelRecordChan""' of type '""BYTE [16]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_MOTION_byRelRecordChan_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_MOTION_byRelRecordChan_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_MOTION_byRelRecordChan_get" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRelRecordChan);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_MOTION(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_MOTION")) SWIG_fail;
  result = (NET_DVR_MOTION *)new NET_DVR_MOTION();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_MOTION, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_MOTION(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_MOTION *arg1 = (NET_DVR_MOTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_MOTION",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_MOTION, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_MOTION" "', argument " "1"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_MOTION * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_MOTION_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_MOTION, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_V30_dwEnableHideAlarm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM_V30 *arg1 = (NET_DVR_HIDEALARM_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HIDEALARM_V30_dwEnableHideAlarm_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_V30_dwEnableHideAlarm_set" "', argument " "1"" of type '" "NET_DVR_HIDEALARM_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HIDEALARM_V30_dwEnableHideAlarm_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HIDEALARM_V30_dwEnableHideAlarm_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnableHideAlarm = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_V30_dwEnableHideAlarm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM_V30 *arg1 = (NET_DVR_HIDEALARM_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HIDEALARM_V30_dwEnableHideAlarm_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_V30_dwEnableHideAlarm_get" "', argument " "1"" of type '" "NET_DVR_HIDEALARM_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM_V30 * >(argp1);
  result =  ((arg1)->dwEnableHideAlarm);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftX_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM_V30 *arg1 = (NET_DVR_HIDEALARM_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftX_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftX_set" "', argument " "1"" of type '" "NET_DVR_HIDEALARM_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftX_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftX_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHideAlarmAreaTopLeftX = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftX_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM_V30 *arg1 = (NET_DVR_HIDEALARM_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftX_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftX_get" "', argument " "1"" of type '" "NET_DVR_HIDEALARM_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM_V30 * >(argp1);
  result =  ((arg1)->wHideAlarmAreaTopLeftX);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftY_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM_V30 *arg1 = (NET_DVR_HIDEALARM_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftY_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftY_set" "', argument " "1"" of type '" "NET_DVR_HIDEALARM_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftY_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftY_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHideAlarmAreaTopLeftY = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftY_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM_V30 *arg1 = (NET_DVR_HIDEALARM_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftY_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftY_get" "', argument " "1"" of type '" "NET_DVR_HIDEALARM_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM_V30 * >(argp1);
  result =  ((arg1)->wHideAlarmAreaTopLeftY);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_V30_wHideAlarmAreaWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM_V30 *arg1 = (NET_DVR_HIDEALARM_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HIDEALARM_V30_wHideAlarmAreaWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_V30_wHideAlarmAreaWidth_set" "', argument " "1"" of type '" "NET_DVR_HIDEALARM_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HIDEALARM_V30_wHideAlarmAreaWidth_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HIDEALARM_V30_wHideAlarmAreaWidth_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHideAlarmAreaWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_V30_wHideAlarmAreaWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM_V30 *arg1 = (NET_DVR_HIDEALARM_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HIDEALARM_V30_wHideAlarmAreaWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_V30_wHideAlarmAreaWidth_get" "', argument " "1"" of type '" "NET_DVR_HIDEALARM_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM_V30 * >(argp1);
  result =  ((arg1)->wHideAlarmAreaWidth);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_V30_wHideAlarmAreaHeight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM_V30 *arg1 = (NET_DVR_HIDEALARM_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HIDEALARM_V30_wHideAlarmAreaHeight_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_V30_wHideAlarmAreaHeight_set" "', argument " "1"" of type '" "NET_DVR_HIDEALARM_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HIDEALARM_V30_wHideAlarmAreaHeight_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HIDEALARM_V30_wHideAlarmAreaHeight_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHideAlarmAreaHeight = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_V30_wHideAlarmAreaHeight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM_V30 *arg1 = (NET_DVR_HIDEALARM_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HIDEALARM_V30_wHideAlarmAreaHeight_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_V30_wHideAlarmAreaHeight_get" "', argument " "1"" of type '" "NET_DVR_HIDEALARM_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM_V30 * >(argp1);
  result =  ((arg1)->wHideAlarmAreaHeight);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_V30_strHideAlarmHandleType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM_V30 *arg1 = (NET_DVR_HIDEALARM_V30 *) 0 ;
  NET_DVR_HANDLEEXCEPTION_V30 *arg2 = (NET_DVR_HANDLEEXCEPTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HIDEALARM_V30_strHideAlarmHandleType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_V30_strHideAlarmHandleType_set" "', argument " "1"" of type '" "NET_DVR_HIDEALARM_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HIDEALARM_V30_strHideAlarmHandleType_set" "', argument " "2"" of type '" "NET_DVR_HANDLEEXCEPTION_V30 *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION_V30 * >(argp2);
  if (arg1) (arg1)->strHideAlarmHandleType = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_V30_strHideAlarmHandleType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM_V30 *arg1 = (NET_DVR_HIDEALARM_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_HANDLEEXCEPTION_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HIDEALARM_V30_strHideAlarmHandleType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_V30_strHideAlarmHandleType_get" "', argument " "1"" of type '" "NET_DVR_HIDEALARM_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM_V30 * >(argp1);
  result = (NET_DVR_HANDLEEXCEPTION_V30 *)& ((arg1)->strHideAlarmHandleType);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION_V30, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_V30_struAlarmTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM_V30 *arg1 = (NET_DVR_HIDEALARM_V30 *) 0 ;
  NET_DVR_SCHEDTIME (*arg2)[8] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HIDEALARM_V30_struAlarmTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_V30_struAlarmTime_set" "', argument " "1"" of type '" "NET_DVR_HIDEALARM_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_8__NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HIDEALARM_V30_struAlarmTime_set" "', argument " "2"" of type '" "NET_DVR_SCHEDTIME [7][8]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_SCHEDTIME (*)[8] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)8; ++jj) arg1->struAlarmTime[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struAlarmTime""' of type '""NET_DVR_SCHEDTIME [7][8]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struAlarmTime""' of type '""NET_DVR_SCHEDTIME [7][8]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_V30_struAlarmTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM_V30 *arg1 = (NET_DVR_HIDEALARM_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_SCHEDTIME (*result)[8] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HIDEALARM_V30_struAlarmTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_V30_struAlarmTime_get" "', argument " "1"" of type '" "NET_DVR_HIDEALARM_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM_V30 * >(argp1);
  result = (NET_DVR_SCHEDTIME (*)[8])(NET_DVR_SCHEDTIME (*)[8]) ((arg1)->struAlarmTime);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_8__NET_DVR_SCHEDTIME, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_HIDEALARM_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_HIDEALARM_V30")) SWIG_fail;
  result = (NET_DVR_HIDEALARM_V30 *)new NET_DVR_HIDEALARM_V30();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_HIDEALARM_V30, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_HIDEALARM_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM_V30 *arg1 = (NET_DVR_HIDEALARM_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_HIDEALARM_V30",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM_V30, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_HIDEALARM_V30" "', argument " "1"" of type '" "NET_DVR_HIDEALARM_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM_V30 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_HIDEALARM_V30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_HIDEALARM_V30, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_dwEnableHideAlarm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM *arg1 = (NET_DVR_HIDEALARM *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HIDEALARM_dwEnableHideAlarm_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_dwEnableHideAlarm_set" "', argument " "1"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HIDEALARM_dwEnableHideAlarm_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HIDEALARM_dwEnableHideAlarm_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnableHideAlarm = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_dwEnableHideAlarm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM *arg1 = (NET_DVR_HIDEALARM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HIDEALARM_dwEnableHideAlarm_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_dwEnableHideAlarm_get" "', argument " "1"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp1);
  result =  ((arg1)->dwEnableHideAlarm);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftX_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM *arg1 = (NET_DVR_HIDEALARM *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftX_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftX_set" "', argument " "1"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftX_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftX_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHideAlarmAreaTopLeftX = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftX_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM *arg1 = (NET_DVR_HIDEALARM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftX_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftX_get" "', argument " "1"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp1);
  result =  ((arg1)->wHideAlarmAreaTopLeftX);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftY_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM *arg1 = (NET_DVR_HIDEALARM *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftY_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftY_set" "', argument " "1"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftY_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftY_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHideAlarmAreaTopLeftY = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftY_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM *arg1 = (NET_DVR_HIDEALARM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftY_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftY_get" "', argument " "1"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp1);
  result =  ((arg1)->wHideAlarmAreaTopLeftY);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_wHideAlarmAreaWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM *arg1 = (NET_DVR_HIDEALARM *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HIDEALARM_wHideAlarmAreaWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_wHideAlarmAreaWidth_set" "', argument " "1"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HIDEALARM_wHideAlarmAreaWidth_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HIDEALARM_wHideAlarmAreaWidth_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHideAlarmAreaWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_wHideAlarmAreaWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM *arg1 = (NET_DVR_HIDEALARM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HIDEALARM_wHideAlarmAreaWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_wHideAlarmAreaWidth_get" "', argument " "1"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp1);
  result =  ((arg1)->wHideAlarmAreaWidth);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_wHideAlarmAreaHeight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM *arg1 = (NET_DVR_HIDEALARM *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HIDEALARM_wHideAlarmAreaHeight_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_wHideAlarmAreaHeight_set" "', argument " "1"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HIDEALARM_wHideAlarmAreaHeight_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_HIDEALARM_wHideAlarmAreaHeight_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHideAlarmAreaHeight = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_wHideAlarmAreaHeight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM *arg1 = (NET_DVR_HIDEALARM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HIDEALARM_wHideAlarmAreaHeight_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_wHideAlarmAreaHeight_get" "', argument " "1"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp1);
  result =  ((arg1)->wHideAlarmAreaHeight);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_strHideAlarmHandleType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM *arg1 = (NET_DVR_HIDEALARM *) 0 ;
  NET_DVR_HANDLEEXCEPTION *arg2 = (NET_DVR_HANDLEEXCEPTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HIDEALARM_strHideAlarmHandleType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_strHideAlarmHandleType_set" "', argument " "1"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HIDEALARM_strHideAlarmHandleType_set" "', argument " "2"" of type '" "NET_DVR_HANDLEEXCEPTION *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION * >(argp2);
  if (arg1) (arg1)->strHideAlarmHandleType = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_strHideAlarmHandleType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM *arg1 = (NET_DVR_HIDEALARM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_HANDLEEXCEPTION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HIDEALARM_strHideAlarmHandleType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_strHideAlarmHandleType_get" "', argument " "1"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp1);
  result = (NET_DVR_HANDLEEXCEPTION *)& ((arg1)->strHideAlarmHandleType);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_struAlarmTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM *arg1 = (NET_DVR_HIDEALARM *) 0 ;
  NET_DVR_SCHEDTIME (*arg2)[4] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_HIDEALARM_struAlarmTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_struAlarmTime_set" "', argument " "1"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_4__NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_HIDEALARM_struAlarmTime_set" "', argument " "2"" of type '" "NET_DVR_SCHEDTIME [7][4]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_SCHEDTIME (*)[4] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)4; ++jj) arg1->struAlarmTime[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struAlarmTime""' of type '""NET_DVR_SCHEDTIME [7][4]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struAlarmTime""' of type '""NET_DVR_SCHEDTIME [7][4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_HIDEALARM_struAlarmTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM *arg1 = (NET_DVR_HIDEALARM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_SCHEDTIME (*result)[4] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_HIDEALARM_struAlarmTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_HIDEALARM_struAlarmTime_get" "', argument " "1"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp1);
  result = (NET_DVR_SCHEDTIME (*)[4])(NET_DVR_SCHEDTIME (*)[4]) ((arg1)->struAlarmTime);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_4__NET_DVR_SCHEDTIME, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_HIDEALARM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_HIDEALARM")) SWIG_fail;
  result = (NET_DVR_HIDEALARM *)new NET_DVR_HIDEALARM();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_HIDEALARM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_HIDEALARM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_HIDEALARM *arg1 = (NET_DVR_HIDEALARM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_HIDEALARM",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_HIDEALARM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_HIDEALARM" "', argument " "1"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_HIDEALARM_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_HIDEALARM, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_VILOST_V30_byEnableHandleVILost_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_VILOST_V30 *arg1 = (NET_DVR_VILOST_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_VILOST_V30_byEnableHandleVILost_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_VILOST_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_VILOST_V30_byEnableHandleVILost_set" "', argument " "1"" of type '" "NET_DVR_VILOST_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_VILOST_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_VILOST_V30_byEnableHandleVILost_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_VILOST_V30_byEnableHandleVILost_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableHandleVILost = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_VILOST_V30_byEnableHandleVILost_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_VILOST_V30 *arg1 = (NET_DVR_VILOST_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_VILOST_V30_byEnableHandleVILost_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_VILOST_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_VILOST_V30_byEnableHandleVILost_get" "', argument " "1"" of type '" "NET_DVR_VILOST_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_VILOST_V30 * >(argp1);
  result =  ((arg1)->byEnableHandleVILost);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_VILOST_V30_strVILostHandleType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_VILOST_V30 *arg1 = (NET_DVR_VILOST_V30 *) 0 ;
  NET_DVR_HANDLEEXCEPTION_V30 *arg2 = (NET_DVR_HANDLEEXCEPTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_VILOST_V30_strVILostHandleType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_VILOST_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_VILOST_V30_strVILostHandleType_set" "', argument " "1"" of type '" "NET_DVR_VILOST_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_VILOST_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_VILOST_V30_strVILostHandleType_set" "', argument " "2"" of type '" "NET_DVR_HANDLEEXCEPTION_V30 *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION_V30 * >(argp2);
  if (arg1) (arg1)->strVILostHandleType = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_VILOST_V30_strVILostHandleType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_VILOST_V30 *arg1 = (NET_DVR_VILOST_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_HANDLEEXCEPTION_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_VILOST_V30_strVILostHandleType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_VILOST_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_VILOST_V30_strVILostHandleType_get" "', argument " "1"" of type '" "NET_DVR_VILOST_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_VILOST_V30 * >(argp1);
  result = (NET_DVR_HANDLEEXCEPTION_V30 *)& ((arg1)->strVILostHandleType);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION_V30, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_VILOST_V30_struAlarmTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_VILOST_V30 *arg1 = (NET_DVR_VILOST_V30 *) 0 ;
  NET_DVR_SCHEDTIME (*arg2)[8] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_VILOST_V30_struAlarmTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_VILOST_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_VILOST_V30_struAlarmTime_set" "', argument " "1"" of type '" "NET_DVR_VILOST_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_VILOST_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_8__NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_VILOST_V30_struAlarmTime_set" "', argument " "2"" of type '" "NET_DVR_SCHEDTIME [7][8]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_SCHEDTIME (*)[8] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)8; ++jj) arg1->struAlarmTime[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struAlarmTime""' of type '""NET_DVR_SCHEDTIME [7][8]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struAlarmTime""' of type '""NET_DVR_SCHEDTIME [7][8]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_VILOST_V30_struAlarmTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_VILOST_V30 *arg1 = (NET_DVR_VILOST_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_SCHEDTIME (*result)[8] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_VILOST_V30_struAlarmTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_VILOST_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_VILOST_V30_struAlarmTime_get" "', argument " "1"" of type '" "NET_DVR_VILOST_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_VILOST_V30 * >(argp1);
  result = (NET_DVR_SCHEDTIME (*)[8])(NET_DVR_SCHEDTIME (*)[8]) ((arg1)->struAlarmTime);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_8__NET_DVR_SCHEDTIME, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_VILOST_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_VILOST_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_VILOST_V30")) SWIG_fail;
  result = (NET_DVR_VILOST_V30 *)new NET_DVR_VILOST_V30();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_VILOST_V30, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_VILOST_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_VILOST_V30 *arg1 = (NET_DVR_VILOST_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_VILOST_V30",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_VILOST_V30, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_VILOST_V30" "', argument " "1"" of type '" "NET_DVR_VILOST_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_VILOST_V30 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_VILOST_V30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_VILOST_V30, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_VILOST_byEnableHandleVILost_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_VILOST *arg1 = (NET_DVR_VILOST *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_VILOST_byEnableHandleVILost_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_VILOST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_VILOST_byEnableHandleVILost_set" "', argument " "1"" of type '" "NET_DVR_VILOST *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_VILOST * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_VILOST_byEnableHandleVILost_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_VILOST_byEnableHandleVILost_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableHandleVILost = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_VILOST_byEnableHandleVILost_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_VILOST *arg1 = (NET_DVR_VILOST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_VILOST_byEnableHandleVILost_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_VILOST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_VILOST_byEnableHandleVILost_get" "', argument " "1"" of type '" "NET_DVR_VILOST *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_VILOST * >(argp1);
  result =  ((arg1)->byEnableHandleVILost);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_VILOST_strVILostHandleType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_VILOST *arg1 = (NET_DVR_VILOST *) 0 ;
  NET_DVR_HANDLEEXCEPTION *arg2 = (NET_DVR_HANDLEEXCEPTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_VILOST_strVILostHandleType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_VILOST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_VILOST_strVILostHandleType_set" "', argument " "1"" of type '" "NET_DVR_VILOST *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_VILOST * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_VILOST_strVILostHandleType_set" "', argument " "2"" of type '" "NET_DVR_HANDLEEXCEPTION *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION * >(argp2);
  if (arg1) (arg1)->strVILostHandleType = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_VILOST_strVILostHandleType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_VILOST *arg1 = (NET_DVR_VILOST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_HANDLEEXCEPTION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_VILOST_strVILostHandleType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_VILOST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_VILOST_strVILostHandleType_get" "', argument " "1"" of type '" "NET_DVR_VILOST *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_VILOST * >(argp1);
  result = (NET_DVR_HANDLEEXCEPTION *)& ((arg1)->strVILostHandleType);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_VILOST_struAlarmTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_VILOST *arg1 = (NET_DVR_VILOST *) 0 ;
  NET_DVR_SCHEDTIME (*arg2)[4] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_VILOST_struAlarmTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_VILOST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_VILOST_struAlarmTime_set" "', argument " "1"" of type '" "NET_DVR_VILOST *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_VILOST * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_4__NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_VILOST_struAlarmTime_set" "', argument " "2"" of type '" "NET_DVR_SCHEDTIME [7][4]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_SCHEDTIME (*)[4] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)4; ++jj) arg1->struAlarmTime[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struAlarmTime""' of type '""NET_DVR_SCHEDTIME [7][4]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struAlarmTime""' of type '""NET_DVR_SCHEDTIME [7][4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_VILOST_struAlarmTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_VILOST *arg1 = (NET_DVR_VILOST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_SCHEDTIME (*result)[4] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_VILOST_struAlarmTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_VILOST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_VILOST_struAlarmTime_get" "', argument " "1"" of type '" "NET_DVR_VILOST *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_VILOST * >(argp1);
  result = (NET_DVR_SCHEDTIME (*)[4])(NET_DVR_SCHEDTIME (*)[4]) ((arg1)->struAlarmTime);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_4__NET_DVR_SCHEDTIME, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_VILOST(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_VILOST *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_VILOST")) SWIG_fail;
  result = (NET_DVR_VILOST *)new NET_DVR_VILOST();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_VILOST, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_VILOST(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_VILOST *arg1 = (NET_DVR_VILOST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_VILOST",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_VILOST, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_VILOST" "', argument " "1"" of type '" "NET_DVR_VILOST *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_VILOST * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_VILOST_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_VILOST, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_SHELTER_wHideAreaTopLeftX_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SHELTER *arg1 = (NET_DVR_SHELTER *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SHELTER_wHideAreaTopLeftX_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SHELTER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SHELTER_wHideAreaTopLeftX_set" "', argument " "1"" of type '" "NET_DVR_SHELTER *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SHELTER * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SHELTER_wHideAreaTopLeftX_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SHELTER_wHideAreaTopLeftX_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHideAreaTopLeftX = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SHELTER_wHideAreaTopLeftX_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SHELTER *arg1 = (NET_DVR_SHELTER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SHELTER_wHideAreaTopLeftX_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SHELTER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SHELTER_wHideAreaTopLeftX_get" "', argument " "1"" of type '" "NET_DVR_SHELTER *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SHELTER * >(argp1);
  result =  ((arg1)->wHideAreaTopLeftX);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SHELTER_wHideAreaTopLeftY_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SHELTER *arg1 = (NET_DVR_SHELTER *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SHELTER_wHideAreaTopLeftY_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SHELTER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SHELTER_wHideAreaTopLeftY_set" "', argument " "1"" of type '" "NET_DVR_SHELTER *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SHELTER * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SHELTER_wHideAreaTopLeftY_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SHELTER_wHideAreaTopLeftY_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHideAreaTopLeftY = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SHELTER_wHideAreaTopLeftY_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SHELTER *arg1 = (NET_DVR_SHELTER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SHELTER_wHideAreaTopLeftY_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SHELTER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SHELTER_wHideAreaTopLeftY_get" "', argument " "1"" of type '" "NET_DVR_SHELTER *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SHELTER * >(argp1);
  result =  ((arg1)->wHideAreaTopLeftY);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SHELTER_wHideAreaWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SHELTER *arg1 = (NET_DVR_SHELTER *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SHELTER_wHideAreaWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SHELTER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SHELTER_wHideAreaWidth_set" "', argument " "1"" of type '" "NET_DVR_SHELTER *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SHELTER * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SHELTER_wHideAreaWidth_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SHELTER_wHideAreaWidth_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHideAreaWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SHELTER_wHideAreaWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SHELTER *arg1 = (NET_DVR_SHELTER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SHELTER_wHideAreaWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SHELTER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SHELTER_wHideAreaWidth_get" "', argument " "1"" of type '" "NET_DVR_SHELTER *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SHELTER * >(argp1);
  result =  ((arg1)->wHideAreaWidth);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SHELTER_wHideAreaHeight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SHELTER *arg1 = (NET_DVR_SHELTER *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SHELTER_wHideAreaHeight_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SHELTER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SHELTER_wHideAreaHeight_set" "', argument " "1"" of type '" "NET_DVR_SHELTER *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SHELTER * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SHELTER_wHideAreaHeight_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SHELTER_wHideAreaHeight_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHideAreaHeight = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SHELTER_wHideAreaHeight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SHELTER *arg1 = (NET_DVR_SHELTER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SHELTER_wHideAreaHeight_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SHELTER, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SHELTER_wHideAreaHeight_get" "', argument " "1"" of type '" "NET_DVR_SHELTER *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SHELTER * >(argp1);
  result =  ((arg1)->wHideAreaHeight);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_SHELTER(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SHELTER *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_SHELTER")) SWIG_fail;
  result = (NET_DVR_SHELTER *)new NET_DVR_SHELTER();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_SHELTER, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_SHELTER(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SHELTER *arg1 = (NET_DVR_SHELTER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_SHELTER",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SHELTER, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_SHELTER" "', argument " "1"" of type '" "NET_DVR_SHELTER *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SHELTER * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_SHELTER_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_SHELTER, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_COLOR_byBrightness_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COLOR *arg1 = (NET_DVR_COLOR *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COLOR_byBrightness_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COLOR_byBrightness_set" "', argument " "1"" of type '" "NET_DVR_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COLOR * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COLOR_byBrightness_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COLOR_byBrightness_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byBrightness = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COLOR_byBrightness_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COLOR *arg1 = (NET_DVR_COLOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COLOR_byBrightness_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COLOR_byBrightness_get" "', argument " "1"" of type '" "NET_DVR_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COLOR * >(argp1);
  result =  ((arg1)->byBrightness);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COLOR_byContrast_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COLOR *arg1 = (NET_DVR_COLOR *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COLOR_byContrast_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COLOR_byContrast_set" "', argument " "1"" of type '" "NET_DVR_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COLOR * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COLOR_byContrast_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COLOR_byContrast_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byContrast = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COLOR_byContrast_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COLOR *arg1 = (NET_DVR_COLOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COLOR_byContrast_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COLOR_byContrast_get" "', argument " "1"" of type '" "NET_DVR_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COLOR * >(argp1);
  result =  ((arg1)->byContrast);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COLOR_bySaturation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COLOR *arg1 = (NET_DVR_COLOR *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COLOR_bySaturation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COLOR_bySaturation_set" "', argument " "1"" of type '" "NET_DVR_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COLOR * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COLOR_bySaturation_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COLOR_bySaturation_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->bySaturation = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COLOR_bySaturation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COLOR *arg1 = (NET_DVR_COLOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COLOR_bySaturation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COLOR_bySaturation_get" "', argument " "1"" of type '" "NET_DVR_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COLOR * >(argp1);
  result =  ((arg1)->bySaturation);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COLOR_byHue_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COLOR *arg1 = (NET_DVR_COLOR *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COLOR_byHue_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COLOR_byHue_set" "', argument " "1"" of type '" "NET_DVR_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COLOR * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COLOR_byHue_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COLOR_byHue_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byHue = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COLOR_byHue_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COLOR *arg1 = (NET_DVR_COLOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COLOR_byHue_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COLOR_byHue_get" "', argument " "1"" of type '" "NET_DVR_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COLOR * >(argp1);
  result =  ((arg1)->byHue);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_COLOR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COLOR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_COLOR")) SWIG_fail;
  result = (NET_DVR_COLOR *)new NET_DVR_COLOR();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_COLOR, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_COLOR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COLOR *arg1 = (NET_DVR_COLOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_COLOR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COLOR, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_COLOR" "', argument " "1"" of type '" "NET_DVR_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COLOR * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_COLOR_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_COLOR, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_RGB_COLOR_byRed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RGB_COLOR *arg1 = (NET_DVR_RGB_COLOR *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RGB_COLOR_byRed_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RGB_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RGB_COLOR_byRed_set" "', argument " "1"" of type '" "NET_DVR_RGB_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RGB_COLOR * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RGB_COLOR_byRed_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RGB_COLOR_byRed_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRed = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RGB_COLOR_byRed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RGB_COLOR *arg1 = (NET_DVR_RGB_COLOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RGB_COLOR_byRed_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RGB_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RGB_COLOR_byRed_get" "', argument " "1"" of type '" "NET_DVR_RGB_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RGB_COLOR * >(argp1);
  result =  ((arg1)->byRed);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RGB_COLOR_byGreen_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RGB_COLOR *arg1 = (NET_DVR_RGB_COLOR *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RGB_COLOR_byGreen_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RGB_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RGB_COLOR_byGreen_set" "', argument " "1"" of type '" "NET_DVR_RGB_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RGB_COLOR * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RGB_COLOR_byGreen_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RGB_COLOR_byGreen_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byGreen = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RGB_COLOR_byGreen_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RGB_COLOR *arg1 = (NET_DVR_RGB_COLOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RGB_COLOR_byGreen_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RGB_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RGB_COLOR_byGreen_get" "', argument " "1"" of type '" "NET_DVR_RGB_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RGB_COLOR * >(argp1);
  result =  ((arg1)->byGreen);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RGB_COLOR_byBlue_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RGB_COLOR *arg1 = (NET_DVR_RGB_COLOR *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RGB_COLOR_byBlue_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RGB_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RGB_COLOR_byBlue_set" "', argument " "1"" of type '" "NET_DVR_RGB_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RGB_COLOR * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RGB_COLOR_byBlue_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RGB_COLOR_byBlue_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byBlue = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RGB_COLOR_byBlue_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RGB_COLOR *arg1 = (NET_DVR_RGB_COLOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RGB_COLOR_byBlue_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RGB_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RGB_COLOR_byBlue_get" "', argument " "1"" of type '" "NET_DVR_RGB_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RGB_COLOR * >(argp1);
  result =  ((arg1)->byBlue);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RGB_COLOR_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RGB_COLOR *arg1 = (NET_DVR_RGB_COLOR *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RGB_COLOR_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RGB_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RGB_COLOR_byRes_set" "', argument " "1"" of type '" "NET_DVR_RGB_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RGB_COLOR * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RGB_COLOR_byRes_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RGB_COLOR_byRes_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRes = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RGB_COLOR_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RGB_COLOR *arg1 = (NET_DVR_RGB_COLOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RGB_COLOR_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RGB_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RGB_COLOR_byRes_get" "', argument " "1"" of type '" "NET_DVR_RGB_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RGB_COLOR * >(argp1);
  result =  ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_RGB_COLOR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RGB_COLOR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_RGB_COLOR")) SWIG_fail;
  result = (NET_DVR_RGB_COLOR *)new NET_DVR_RGB_COLOR();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_RGB_COLOR, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_RGB_COLOR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RGB_COLOR *arg1 = (NET_DVR_RGB_COLOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_RGB_COLOR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RGB_COLOR, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_RGB_COLOR" "', argument " "1"" of type '" "NET_DVR_RGB_COLOR *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RGB_COLOR * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_RGB_COLOR_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_RGB_COLOR, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_VCA_POINT_fX_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_VCA_POINT *arg1 = (tagNET_VCA_POINT *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_VCA_POINT_fX_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_VCA_POINT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_VCA_POINT_fX_set" "', argument " "1"" of type '" "tagNET_VCA_POINT *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_VCA_POINT * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_VCA_POINT_fX_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->fX = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_VCA_POINT_fX_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_VCA_POINT *arg1 = (tagNET_VCA_POINT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_VCA_POINT_fX_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_VCA_POINT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_VCA_POINT_fX_get" "', argument " "1"" of type '" "tagNET_VCA_POINT *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_VCA_POINT * >(argp1);
  result = (float) ((arg1)->fX);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_VCA_POINT_fY_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_VCA_POINT *arg1 = (tagNET_VCA_POINT *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_VCA_POINT_fY_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_VCA_POINT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_VCA_POINT_fY_set" "', argument " "1"" of type '" "tagNET_VCA_POINT *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_VCA_POINT * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_VCA_POINT_fY_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->fY = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_VCA_POINT_fY_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_VCA_POINT *arg1 = (tagNET_VCA_POINT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_VCA_POINT_fY_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_VCA_POINT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_VCA_POINT_fY_get" "', argument " "1"" of type '" "tagNET_VCA_POINT *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_VCA_POINT * >(argp1);
  result = (float) ((arg1)->fY);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_VCA_POINT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_VCA_POINT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_VCA_POINT")) SWIG_fail;
  result = (tagNET_VCA_POINT *)new tagNET_VCA_POINT();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_VCA_POINT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_VCA_POINT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_VCA_POINT *arg1 = (tagNET_VCA_POINT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_VCA_POINT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_VCA_POINT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_VCA_POINT" "', argument " "1"" of type '" "tagNET_VCA_POINT *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_VCA_POINT * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_VCA_POINT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_VCA_POINT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_dwSize_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_dwSize_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_sChanName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_sChanName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_sChanName_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_sChanName_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->sChanName[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sChanName""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_sChanName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_sChanName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_sChanName_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->sChanName);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_dwVideoFormat_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_dwVideoFormat_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_dwVideoFormat_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_dwVideoFormat_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_dwVideoFormat_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwVideoFormat = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_dwVideoFormat_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_dwVideoFormat_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_dwVideoFormat_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->dwVideoFormat);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byReservedData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_byReservedData_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byReservedData_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_byReservedData_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->byReservedData[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byReservedData""' of type '""BYTE [64]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byReservedData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_byReservedData_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byReservedData_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byReservedData);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_dwShowChanName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_dwShowChanName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_dwShowChanName_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_dwShowChanName_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_dwShowChanName_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwShowChanName = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_dwShowChanName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_dwShowChanName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_dwShowChanName_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->dwShowChanName);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_wShowNameTopLeftX_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_wShowNameTopLeftX_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_wShowNameTopLeftX_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_wShowNameTopLeftX_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_wShowNameTopLeftX_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wShowNameTopLeftX = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_wShowNameTopLeftX_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_wShowNameTopLeftX_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_wShowNameTopLeftX_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->wShowNameTopLeftX);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_wShowNameTopLeftY_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_wShowNameTopLeftY_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_wShowNameTopLeftY_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_wShowNameTopLeftY_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_wShowNameTopLeftY_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wShowNameTopLeftY = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_wShowNameTopLeftY_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_wShowNameTopLeftY_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_wShowNameTopLeftY_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->wShowNameTopLeftY);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_struVILost_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  NET_DVR_VILOST_V30 *arg2 = (NET_DVR_VILOST_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_struVILost_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_struVILost_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_VILOST_V30, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_struVILost_set" "', argument " "2"" of type '" "NET_DVR_VILOST_V30 *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_VILOST_V30 * >(argp2);
  if (arg1) (arg1)->struVILost = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_struVILost_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_VILOST_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_struVILost_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_struVILost_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result = (NET_DVR_VILOST_V30 *)& ((arg1)->struVILost);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_VILOST_V30, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_struRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  NET_DVR_VILOST_V30 *arg2 = (NET_DVR_VILOST_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_struRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_struRes_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_VILOST_V30, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_struRes_set" "', argument " "2"" of type '" "NET_DVR_VILOST_V30 *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_VILOST_V30 * >(argp2);
  if (arg1) (arg1)->struRes = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_struRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_VILOST_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_struRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_struRes_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result = (NET_DVR_VILOST_V30 *)& ((arg1)->struRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_VILOST_V30, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_struMotion_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  NET_DVR_MOTION_V30 *arg2 = (NET_DVR_MOTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_struMotion_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_struMotion_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_struMotion_set" "', argument " "2"" of type '" "NET_DVR_MOTION_V30 *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_MOTION_V30 * >(argp2);
  if (arg1) (arg1)->struMotion = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_struMotion_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_MOTION_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_struMotion_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_struMotion_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result = (NET_DVR_MOTION_V30 *)& ((arg1)->struMotion);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_MOTION_V30, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_struHideAlarm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  NET_DVR_HIDEALARM_V30 *arg2 = (NET_DVR_HIDEALARM_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_struHideAlarm_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_struHideAlarm_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_HIDEALARM_V30, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_struHideAlarm_set" "', argument " "2"" of type '" "NET_DVR_HIDEALARM_V30 *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_HIDEALARM_V30 * >(argp2);
  if (arg1) (arg1)->struHideAlarm = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_struHideAlarm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_HIDEALARM_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_struHideAlarm_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_struHideAlarm_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result = (NET_DVR_HIDEALARM_V30 *)& ((arg1)->struHideAlarm);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_HIDEALARM_V30, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_dwEnableHide_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_dwEnableHide_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_dwEnableHide_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_dwEnableHide_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_dwEnableHide_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnableHide = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_dwEnableHide_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_dwEnableHide_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_dwEnableHide_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->dwEnableHide);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_struShelter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  NET_DVR_SHELTER *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_struShelter_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_struShelter_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_SHELTER, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_struShelter_set" "', argument " "2"" of type '" "NET_DVR_SHELTER [4]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_SHELTER * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) *(NET_DVR_SHELTER *)&arg1->struShelter[ii] = *((NET_DVR_SHELTER *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struShelter""' of type '""NET_DVR_SHELTER [4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_struShelter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_SHELTER *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_struShelter_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_struShelter_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result = (NET_DVR_SHELTER *)(NET_DVR_SHELTER *) ((arg1)->struShelter);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_SHELTER, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_dwShowOsd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_dwShowOsd_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_dwShowOsd_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_dwShowOsd_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_dwShowOsd_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwShowOsd = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_dwShowOsd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_dwShowOsd_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_dwShowOsd_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->dwShowOsd);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_wOSDTopLeftX_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_wOSDTopLeftX_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_wOSDTopLeftX_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_wOSDTopLeftX_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_wOSDTopLeftX_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wOSDTopLeftX = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_wOSDTopLeftX_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_wOSDTopLeftX_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_wOSDTopLeftX_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->wOSDTopLeftX);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_wOSDTopLeftY_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_wOSDTopLeftY_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_wOSDTopLeftY_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_wOSDTopLeftY_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_wOSDTopLeftY_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wOSDTopLeftY = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_wOSDTopLeftY_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_wOSDTopLeftY_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_wOSDTopLeftY_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->wOSDTopLeftY);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byOSDType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_byOSDType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byOSDType_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_byOSDType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_byOSDType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byOSDType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byOSDType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_byOSDType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byOSDType_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->byOSDType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byDispWeek_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_byDispWeek_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byDispWeek_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_byDispWeek_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_byDispWeek_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDispWeek = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byDispWeek_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_byDispWeek_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byDispWeek_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->byDispWeek);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byOSDAttrib_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_byOSDAttrib_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byOSDAttrib_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_byOSDAttrib_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_byOSDAttrib_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byOSDAttrib = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byOSDAttrib_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_byOSDAttrib_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byOSDAttrib_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->byOSDAttrib);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byHourOSDType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_byHourOSDType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byHourOSDType_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_byHourOSDType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_byHourOSDType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byHourOSDType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byHourOSDType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_byHourOSDType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byHourOSDType_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->byHourOSDType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byFontSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_byFontSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byFontSize_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_byFontSize_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_byFontSize_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byFontSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byFontSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_byFontSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byFontSize_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->byFontSize);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byOSDColorType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_byOSDColorType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byOSDColorType_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_byOSDColorType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_byOSDColorType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byOSDColorType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byOSDColorType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_byOSDColorType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byOSDColorType_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->byOSDColorType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byAlignment_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_byAlignment_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byAlignment_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_byAlignment_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_byAlignment_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAlignment = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byAlignment_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_byAlignment_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byAlignment_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->byAlignment);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byOSDMilliSecondEnable_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_byOSDMilliSecondEnable_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byOSDMilliSecondEnable_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_byOSDMilliSecondEnable_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_byOSDMilliSecondEnable_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byOSDMilliSecondEnable = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byOSDMilliSecondEnable_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_byOSDMilliSecondEnable_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byOSDMilliSecondEnable_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->byOSDMilliSecondEnable);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_struOsdColor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  NET_DVR_RGB_COLOR *arg2 = (NET_DVR_RGB_COLOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_struOsdColor_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_struOsdColor_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_RGB_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_struOsdColor_set" "', argument " "2"" of type '" "NET_DVR_RGB_COLOR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_RGB_COLOR * >(argp2);
  if (arg1) (arg1)->struOsdColor = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_struOsdColor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_RGB_COLOR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_struOsdColor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_struOsdColor_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result = (NET_DVR_RGB_COLOR *)& ((arg1)->struOsdColor);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_RGB_COLOR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_dwBoundary_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_dwBoundary_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_dwBoundary_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_dwBoundary_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_dwBoundary_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwBoundary = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_dwBoundary_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_dwBoundary_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_dwBoundary_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->dwBoundary);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_struOsdBkColor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  NET_DVR_RGB_COLOR *arg2 = (NET_DVR_RGB_COLOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_struOsdBkColor_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_struOsdBkColor_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_RGB_COLOR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_struOsdBkColor_set" "', argument " "2"" of type '" "NET_DVR_RGB_COLOR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_RGB_COLOR * >(argp2);
  if (arg1) (arg1)->struOsdBkColor = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_struOsdBkColor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_RGB_COLOR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_struOsdBkColor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_struOsdBkColor_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result = (NET_DVR_RGB_COLOR *)& ((arg1)->struOsdBkColor);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_RGB_COLOR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byOSDBkColorMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_byOSDBkColorMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byOSDBkColorMode_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_byOSDBkColorMode_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_byOSDBkColorMode_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byOSDBkColorMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byOSDBkColorMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_byOSDBkColorMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byOSDBkColorMode_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->byOSDBkColorMode);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byUpDownBoundary_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_byUpDownBoundary_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byUpDownBoundary_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_byUpDownBoundary_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_byUpDownBoundary_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byUpDownBoundary = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byUpDownBoundary_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_byUpDownBoundary_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byUpDownBoundary_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->byUpDownBoundary);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byLeftRightBoundary_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_byLeftRightBoundary_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byLeftRightBoundary_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_byLeftRightBoundary_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_byLeftRightBoundary_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byLeftRightBoundary = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byLeftRightBoundary_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_byLeftRightBoundary_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byLeftRightBoundary_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->byLeftRightBoundary);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byAngleEnabled_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_byAngleEnabled_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byAngleEnabled_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_byAngleEnabled_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_byAngleEnabled_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAngleEnabled = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byAngleEnabled_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_byAngleEnabled_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byAngleEnabled_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->byAngleEnabled);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_wTiltAngleTopLeftX_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_wTiltAngleTopLeftX_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_wTiltAngleTopLeftX_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_wTiltAngleTopLeftX_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_wTiltAngleTopLeftX_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wTiltAngleTopLeftX = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_wTiltAngleTopLeftX_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_wTiltAngleTopLeftX_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_wTiltAngleTopLeftX_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->wTiltAngleTopLeftX);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_wTiltAngleTopLeftY_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_wTiltAngleTopLeftY_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_wTiltAngleTopLeftY_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_wTiltAngleTopLeftY_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_V30_wTiltAngleTopLeftY_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wTiltAngleTopLeftY = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_wTiltAngleTopLeftY_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_wTiltAngleTopLeftY_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_wTiltAngleTopLeftY_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result =  ((arg1)->wTiltAngleTopLeftY);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_V30_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byRes_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_V30_byRes_set" "', argument " "2"" of type '" "BYTE [40]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)40; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [40]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_V30_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_V30_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_V30_byRes_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_PICCFG_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_PICCFG_V30")) SWIG_fail;
  result = (NET_DVR_PICCFG_V30 *)new NET_DVR_PICCFG_V30();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PICCFG_V30, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_PICCFG_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_V30 *arg1 = (NET_DVR_PICCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_PICCFG_V30",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_V30, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_PICCFG_V30" "', argument " "1"" of type '" "NET_DVR_PICCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_V30 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_PICCFG_V30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_PICCFG_V30, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_dwSize_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_dwSize_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_sChanName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_sChanName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_sChanName_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_sChanName_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->sChanName[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sChanName""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_sChanName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_sChanName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_sChanName_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->sChanName);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_dwVideoFormat_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_dwVideoFormat_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_dwVideoFormat_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_dwVideoFormat_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_dwVideoFormat_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwVideoFormat = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_dwVideoFormat_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_dwVideoFormat_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_dwVideoFormat_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->dwVideoFormat);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_byBrightness_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_byBrightness_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_byBrightness_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_byBrightness_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_byBrightness_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byBrightness = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_byBrightness_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_byBrightness_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_byBrightness_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->byBrightness);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_byContrast_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_byContrast_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_byContrast_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_byContrast_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_byContrast_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byContrast = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_byContrast_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_byContrast_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_byContrast_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->byContrast);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_bySaturation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_bySaturation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_bySaturation_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_bySaturation_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_bySaturation_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->bySaturation = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_bySaturation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_bySaturation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_bySaturation_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->bySaturation);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_byHue_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_byHue_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_byHue_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_byHue_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_byHue_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byHue = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_byHue_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_byHue_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_byHue_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->byHue);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_dwShowChanName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_dwShowChanName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_dwShowChanName_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_dwShowChanName_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_dwShowChanName_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwShowChanName = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_dwShowChanName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_dwShowChanName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_dwShowChanName_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->dwShowChanName);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_wShowNameTopLeftX_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_wShowNameTopLeftX_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_wShowNameTopLeftX_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_wShowNameTopLeftX_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_wShowNameTopLeftX_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wShowNameTopLeftX = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_wShowNameTopLeftX_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_wShowNameTopLeftX_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_wShowNameTopLeftX_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->wShowNameTopLeftX);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_wShowNameTopLeftY_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_wShowNameTopLeftY_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_wShowNameTopLeftY_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_wShowNameTopLeftY_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_wShowNameTopLeftY_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wShowNameTopLeftY = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_wShowNameTopLeftY_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_wShowNameTopLeftY_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_wShowNameTopLeftY_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->wShowNameTopLeftY);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_struVILost_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  NET_DVR_VILOST *arg2 = (NET_DVR_VILOST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_struVILost_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_struVILost_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_VILOST, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_struVILost_set" "', argument " "2"" of type '" "NET_DVR_VILOST *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_VILOST * >(argp2);
  if (arg1) (arg1)->struVILost = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_struVILost_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_VILOST *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_struVILost_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_struVILost_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result = (NET_DVR_VILOST *)& ((arg1)->struVILost);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_VILOST, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_struMotion_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  NET_DVR_MOTION *arg2 = (NET_DVR_MOTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_struMotion_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_struMotion_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_struMotion_set" "', argument " "2"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_MOTION * >(argp2);
  if (arg1) (arg1)->struMotion = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_struMotion_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_MOTION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_struMotion_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_struMotion_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result = (NET_DVR_MOTION *)& ((arg1)->struMotion);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_struHideAlarm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  NET_DVR_HIDEALARM *arg2 = (NET_DVR_HIDEALARM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_struHideAlarm_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_struHideAlarm_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_struHideAlarm_set" "', argument " "2"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp2);
  if (arg1) (arg1)->struHideAlarm = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_struHideAlarm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_HIDEALARM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_struHideAlarm_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_struHideAlarm_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result = (NET_DVR_HIDEALARM *)& ((arg1)->struHideAlarm);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_dwEnableHide_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_dwEnableHide_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_dwEnableHide_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_dwEnableHide_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_dwEnableHide_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnableHide = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_dwEnableHide_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_dwEnableHide_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_dwEnableHide_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->dwEnableHide);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_struShelter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  NET_DVR_SHELTER *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_struShelter_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_struShelter_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_SHELTER, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_struShelter_set" "', argument " "2"" of type '" "NET_DVR_SHELTER [4]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_SHELTER * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) *(NET_DVR_SHELTER *)&arg1->struShelter[ii] = *((NET_DVR_SHELTER *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struShelter""' of type '""NET_DVR_SHELTER [4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_struShelter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_SHELTER *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_struShelter_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_struShelter_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result = (NET_DVR_SHELTER *)(NET_DVR_SHELTER *) ((arg1)->struShelter);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_SHELTER, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_dwShowOsd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_dwShowOsd_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_dwShowOsd_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_dwShowOsd_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_dwShowOsd_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwShowOsd = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_dwShowOsd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_dwShowOsd_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_dwShowOsd_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->dwShowOsd);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_wOSDTopLeftX_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_wOSDTopLeftX_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_wOSDTopLeftX_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_wOSDTopLeftX_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_wOSDTopLeftX_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wOSDTopLeftX = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_wOSDTopLeftX_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_wOSDTopLeftX_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_wOSDTopLeftX_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->wOSDTopLeftX);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_wOSDTopLeftY_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_wOSDTopLeftY_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_wOSDTopLeftY_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_wOSDTopLeftY_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_wOSDTopLeftY_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wOSDTopLeftY = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_wOSDTopLeftY_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_wOSDTopLeftY_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_wOSDTopLeftY_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->wOSDTopLeftY);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_byOSDType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_byOSDType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_byOSDType_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_byOSDType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_byOSDType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byOSDType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_byOSDType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_byOSDType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_byOSDType_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->byOSDType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_byDispWeek_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_byDispWeek_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_byDispWeek_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_byDispWeek_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_byDispWeek_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDispWeek = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_byDispWeek_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_byDispWeek_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_byDispWeek_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->byDispWeek);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_byOSDAttrib_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_byOSDAttrib_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_byOSDAttrib_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_byOSDAttrib_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_byOSDAttrib_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byOSDAttrib = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_byOSDAttrib_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_byOSDAttrib_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_byOSDAttrib_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->byOSDAttrib);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_byHourOsdType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_EX_byHourOsdType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_byHourOsdType_set" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_EX_byHourOsdType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_EX_byHourOsdType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byHourOsdType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_EX_byHourOsdType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_EX_byHourOsdType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_EX_byHourOsdType_get" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  result =  ((arg1)->byHourOsdType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_PICCFG_EX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_PICCFG_EX")) SWIG_fail;
  result = (NET_DVR_PICCFG_EX *)new NET_DVR_PICCFG_EX();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PICCFG_EX, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_PICCFG_EX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG_EX *arg1 = (NET_DVR_PICCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_PICCFG_EX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG_EX, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_PICCFG_EX" "', argument " "1"" of type '" "NET_DVR_PICCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG_EX * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_PICCFG_EX_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_PICCFG_EX, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_dwSize_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_dwSize_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_sChanName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_sChanName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_sChanName_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_sChanName_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->sChanName[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sChanName""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_sChanName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_sChanName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_sChanName_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->sChanName);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_dwVideoFormat_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_dwVideoFormat_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_dwVideoFormat_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_dwVideoFormat_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_dwVideoFormat_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwVideoFormat = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_dwVideoFormat_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_dwVideoFormat_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_dwVideoFormat_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->dwVideoFormat);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_byBrightness_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_byBrightness_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_byBrightness_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_byBrightness_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_byBrightness_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byBrightness = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_byBrightness_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_byBrightness_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_byBrightness_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->byBrightness);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_byContrast_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_byContrast_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_byContrast_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_byContrast_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_byContrast_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byContrast = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_byContrast_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_byContrast_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_byContrast_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->byContrast);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_bySaturation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_bySaturation_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_bySaturation_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_bySaturation_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_bySaturation_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->bySaturation = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_bySaturation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_bySaturation_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_bySaturation_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->bySaturation);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_byHue_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_byHue_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_byHue_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_byHue_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_byHue_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byHue = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_byHue_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_byHue_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_byHue_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->byHue);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_dwShowChanName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_dwShowChanName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_dwShowChanName_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_dwShowChanName_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_dwShowChanName_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwShowChanName = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_dwShowChanName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_dwShowChanName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_dwShowChanName_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->dwShowChanName);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_wShowNameTopLeftX_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_wShowNameTopLeftX_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_wShowNameTopLeftX_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_wShowNameTopLeftX_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_wShowNameTopLeftX_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wShowNameTopLeftX = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_wShowNameTopLeftX_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_wShowNameTopLeftX_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_wShowNameTopLeftX_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->wShowNameTopLeftX);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_wShowNameTopLeftY_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_wShowNameTopLeftY_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_wShowNameTopLeftY_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_wShowNameTopLeftY_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_wShowNameTopLeftY_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wShowNameTopLeftY = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_wShowNameTopLeftY_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_wShowNameTopLeftY_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_wShowNameTopLeftY_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->wShowNameTopLeftY);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_struVILost_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  NET_DVR_VILOST *arg2 = (NET_DVR_VILOST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_struVILost_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_struVILost_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_VILOST, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_struVILost_set" "', argument " "2"" of type '" "NET_DVR_VILOST *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_VILOST * >(argp2);
  if (arg1) (arg1)->struVILost = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_struVILost_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_VILOST *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_struVILost_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_struVILost_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result = (NET_DVR_VILOST *)& ((arg1)->struVILost);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_VILOST, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_struMotion_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  NET_DVR_MOTION *arg2 = (NET_DVR_MOTION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_struMotion_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_struMotion_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_struMotion_set" "', argument " "2"" of type '" "NET_DVR_MOTION *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_MOTION * >(argp2);
  if (arg1) (arg1)->struMotion = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_struMotion_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_MOTION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_struMotion_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_struMotion_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result = (NET_DVR_MOTION *)& ((arg1)->struMotion);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_MOTION, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_struHideAlarm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  NET_DVR_HIDEALARM *arg2 = (NET_DVR_HIDEALARM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_struHideAlarm_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_struHideAlarm_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_struHideAlarm_set" "', argument " "2"" of type '" "NET_DVR_HIDEALARM *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_HIDEALARM * >(argp2);
  if (arg1) (arg1)->struHideAlarm = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_struHideAlarm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_HIDEALARM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_struHideAlarm_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_struHideAlarm_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result = (NET_DVR_HIDEALARM *)& ((arg1)->struHideAlarm);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_HIDEALARM, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_dwEnableHide_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_dwEnableHide_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_dwEnableHide_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_dwEnableHide_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_dwEnableHide_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnableHide = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_dwEnableHide_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_dwEnableHide_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_dwEnableHide_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->dwEnableHide);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_wHideAreaTopLeftX_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_wHideAreaTopLeftX_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_wHideAreaTopLeftX_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_wHideAreaTopLeftX_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_wHideAreaTopLeftX_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHideAreaTopLeftX = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_wHideAreaTopLeftX_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_wHideAreaTopLeftX_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_wHideAreaTopLeftX_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->wHideAreaTopLeftX);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_wHideAreaTopLeftY_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_wHideAreaTopLeftY_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_wHideAreaTopLeftY_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_wHideAreaTopLeftY_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_wHideAreaTopLeftY_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHideAreaTopLeftY = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_wHideAreaTopLeftY_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_wHideAreaTopLeftY_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_wHideAreaTopLeftY_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->wHideAreaTopLeftY);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_wHideAreaWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_wHideAreaWidth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_wHideAreaWidth_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_wHideAreaWidth_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_wHideAreaWidth_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHideAreaWidth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_wHideAreaWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_wHideAreaWidth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_wHideAreaWidth_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->wHideAreaWidth);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_wHideAreaHeight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_wHideAreaHeight_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_wHideAreaHeight_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_wHideAreaHeight_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_wHideAreaHeight_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wHideAreaHeight = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_wHideAreaHeight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_wHideAreaHeight_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_wHideAreaHeight_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->wHideAreaHeight);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_dwShowOsd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_dwShowOsd_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_dwShowOsd_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_dwShowOsd_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_dwShowOsd_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwShowOsd = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_dwShowOsd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_dwShowOsd_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_dwShowOsd_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->dwShowOsd);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_wOSDTopLeftX_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_wOSDTopLeftX_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_wOSDTopLeftX_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_wOSDTopLeftX_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_wOSDTopLeftX_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wOSDTopLeftX = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_wOSDTopLeftX_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_wOSDTopLeftX_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_wOSDTopLeftX_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->wOSDTopLeftX);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_wOSDTopLeftY_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_wOSDTopLeftY_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_wOSDTopLeftY_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_wOSDTopLeftY_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_wOSDTopLeftY_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wOSDTopLeftY = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_wOSDTopLeftY_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_wOSDTopLeftY_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_wOSDTopLeftY_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->wOSDTopLeftY);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_byOSDType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_byOSDType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_byOSDType_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_byOSDType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_byOSDType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byOSDType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_byOSDType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_byOSDType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_byOSDType_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->byOSDType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_byDispWeek_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_byDispWeek_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_byDispWeek_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_byDispWeek_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_byDispWeek_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDispWeek = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_byDispWeek_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_byDispWeek_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_byDispWeek_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->byDispWeek);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_byOSDAttrib_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_byOSDAttrib_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_byOSDAttrib_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PICCFG_byOSDAttrib_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PICCFG_byOSDAttrib_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byOSDAttrib = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_byOSDAttrib_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_byOSDAttrib_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_byOSDAttrib_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result =  ((arg1)->byOSDAttrib);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_reservedData2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PICCFG_reservedData2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_reservedData2_set" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_DVR_PICCFG_reservedData2_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->reservedData2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PICCFG_reservedData2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PICCFG_reservedData2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PICCFG_reservedData2_get" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  result = (char) ((arg1)->reservedData2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_PICCFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_PICCFG")) SWIG_fail;
  result = (NET_DVR_PICCFG *)new NET_DVR_PICCFG();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PICCFG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_PICCFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PICCFG *arg1 = (NET_DVR_PICCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_PICCFG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PICCFG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_PICCFG" "', argument " "1"" of type '" "NET_DVR_PICCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PICCFG * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_PICCFG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_PICCFG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byStreamType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_byStreamType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byStreamType_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byStreamType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_byStreamType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStreamType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byStreamType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_byStreamType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byStreamType_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->byStreamType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byResolution_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_byResolution_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byResolution_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byResolution_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_byResolution_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byResolution = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byResolution_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_byResolution_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byResolution_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->byResolution);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byBitrateType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_byBitrateType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byBitrateType_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byBitrateType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_byBitrateType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byBitrateType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byBitrateType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_byBitrateType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byBitrateType_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->byBitrateType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byPicQuality_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_byPicQuality_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byPicQuality_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byPicQuality_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_byPicQuality_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byPicQuality = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byPicQuality_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_byPicQuality_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byPicQuality_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->byPicQuality);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_dwVideoBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_dwVideoBitrate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_dwVideoBitrate_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_dwVideoBitrate_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_dwVideoBitrate_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwVideoBitrate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_dwVideoBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_dwVideoBitrate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_dwVideoBitrate_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->dwVideoBitrate);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_dwVideoFrameRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_dwVideoFrameRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_dwVideoFrameRate_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_dwVideoFrameRate_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_dwVideoFrameRate_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwVideoFrameRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_dwVideoFrameRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_dwVideoFrameRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_dwVideoFrameRate_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->dwVideoFrameRate);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_wIntervalFrameI_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_wIntervalFrameI_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_wIntervalFrameI_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_wIntervalFrameI_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_wIntervalFrameI_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wIntervalFrameI = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_wIntervalFrameI_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_wIntervalFrameI_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_wIntervalFrameI_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->wIntervalFrameI);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byIntervalBPFrame_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_byIntervalBPFrame_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byIntervalBPFrame_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byIntervalBPFrame_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_byIntervalBPFrame_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byIntervalBPFrame = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byIntervalBPFrame_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_byIntervalBPFrame_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byIntervalBPFrame_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->byIntervalBPFrame);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byres1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_byres1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byres1_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byres1_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_byres1_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byres1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byres1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_byres1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byres1_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->byres1);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byVideoEncType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_byVideoEncType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byVideoEncType_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byVideoEncType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_byVideoEncType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byVideoEncType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byVideoEncType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_byVideoEncType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byVideoEncType_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->byVideoEncType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byAudioEncType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_byAudioEncType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byAudioEncType_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byAudioEncType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_byAudioEncType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAudioEncType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byAudioEncType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_byAudioEncType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byAudioEncType_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->byAudioEncType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byVideoEncComplexity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_byVideoEncComplexity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byVideoEncComplexity_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byVideoEncComplexity_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_byVideoEncComplexity_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byVideoEncComplexity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byVideoEncComplexity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_byVideoEncComplexity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byVideoEncComplexity_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->byVideoEncComplexity);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byEnableSvc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_byEnableSvc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byEnableSvc_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byEnableSvc_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_byEnableSvc_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEnableSvc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byEnableSvc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_byEnableSvc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byEnableSvc_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->byEnableSvc);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byFormatType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_byFormatType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byFormatType_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byFormatType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_byFormatType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byFormatType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byFormatType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_byFormatType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byFormatType_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->byFormatType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byAudioBitRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_byAudioBitRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byAudioBitRate_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byAudioBitRate_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_byAudioBitRate_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAudioBitRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byAudioBitRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_byAudioBitRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byAudioBitRate_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->byAudioBitRate);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byStreamSmooth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_byStreamSmooth_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byStreamSmooth_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byStreamSmooth_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_byStreamSmooth_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStreamSmooth = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byStreamSmooth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_byStreamSmooth_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byStreamSmooth_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->byStreamSmooth);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byAudioSamplingRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_byAudioSamplingRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byAudioSamplingRate_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byAudioSamplingRate_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_byAudioSamplingRate_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAudioSamplingRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byAudioSamplingRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_byAudioSamplingRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byAudioSamplingRate_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->byAudioSamplingRate);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_bySmartCodec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_bySmartCodec_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_bySmartCodec_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_bySmartCodec_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_bySmartCodec_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->bySmartCodec = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_bySmartCodec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_bySmartCodec_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_bySmartCodec_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->bySmartCodec);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byDepthMapEnable_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_byDepthMapEnable_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byDepthMapEnable_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byDepthMapEnable_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_byDepthMapEnable_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDepthMapEnable = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_byDepthMapEnable_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_byDepthMapEnable_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_byDepthMapEnable_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->byDepthMapEnable);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_wAverageVideoBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_V30_wAverageVideoBitrate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_wAverageVideoBitrate_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_V30_wAverageVideoBitrate_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_V30_wAverageVideoBitrate_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wAverageVideoBitrate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_V30_wAverageVideoBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_V30_wAverageVideoBitrate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_V30_wAverageVideoBitrate_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  result =  ((arg1)->wAverageVideoBitrate);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_COMPRESSION_INFO_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_COMPRESSION_INFO_V30")) SWIG_fail;
  result = (NET_DVR_COMPRESSION_INFO_V30 *)new NET_DVR_COMPRESSION_INFO_V30();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_COMPRESSION_INFO_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_V30 *arg1 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_COMPRESSION_INFO_V30",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_COMPRESSION_INFO_V30" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_COMPRESSION_INFO_V30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_V30_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_V30 *arg1 = (NET_DVR_COMPRESSIONCFG_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSIONCFG_V30_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_V30_dwSize_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSIONCFG_V30_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSIONCFG_V30_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_V30_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_V30 *arg1 = (NET_DVR_COMPRESSIONCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSIONCFG_V30_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_V30_dwSize_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_V30 * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_V30_struNormHighRecordPara_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_V30 *arg1 = (NET_DVR_COMPRESSIONCFG_V30 *) 0 ;
  NET_DVR_COMPRESSION_INFO_V30 *arg2 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSIONCFG_V30_struNormHighRecordPara_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_V30_struNormHighRecordPara_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSIONCFG_V30_struNormHighRecordPara_set" "', argument " "2"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp2);
  if (arg1) (arg1)->struNormHighRecordPara = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_V30_struNormHighRecordPara_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_V30 *arg1 = (NET_DVR_COMPRESSIONCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_COMPRESSION_INFO_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSIONCFG_V30_struNormHighRecordPara_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_V30_struNormHighRecordPara_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_V30 * >(argp1);
  result = (NET_DVR_COMPRESSION_INFO_V30 *)& ((arg1)->struNormHighRecordPara);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_V30_struRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_V30 *arg1 = (NET_DVR_COMPRESSIONCFG_V30 *) 0 ;
  NET_DVR_COMPRESSION_INFO_V30 *arg2 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSIONCFG_V30_struRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_V30_struRes_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSIONCFG_V30_struRes_set" "', argument " "2"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp2);
  if (arg1) (arg1)->struRes = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_V30_struRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_V30 *arg1 = (NET_DVR_COMPRESSIONCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_COMPRESSION_INFO_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSIONCFG_V30_struRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_V30_struRes_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_V30 * >(argp1);
  result = (NET_DVR_COMPRESSION_INFO_V30 *)& ((arg1)->struRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_V30_struEventRecordPara_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_V30 *arg1 = (NET_DVR_COMPRESSIONCFG_V30 *) 0 ;
  NET_DVR_COMPRESSION_INFO_V30 *arg2 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSIONCFG_V30_struEventRecordPara_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_V30_struEventRecordPara_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSIONCFG_V30_struEventRecordPara_set" "', argument " "2"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp2);
  if (arg1) (arg1)->struEventRecordPara = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_V30_struEventRecordPara_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_V30 *arg1 = (NET_DVR_COMPRESSIONCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_COMPRESSION_INFO_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSIONCFG_V30_struEventRecordPara_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_V30_struEventRecordPara_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_V30 * >(argp1);
  result = (NET_DVR_COMPRESSION_INFO_V30 *)& ((arg1)->struEventRecordPara);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_V30_struNetPara_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_V30 *arg1 = (NET_DVR_COMPRESSIONCFG_V30 *) 0 ;
  NET_DVR_COMPRESSION_INFO_V30 *arg2 = (NET_DVR_COMPRESSION_INFO_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSIONCFG_V30_struNetPara_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_V30_struNetPara_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSIONCFG_V30_struNetPara_set" "', argument " "2"" of type '" "NET_DVR_COMPRESSION_INFO_V30 *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_V30 * >(argp2);
  if (arg1) (arg1)->struNetPara = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_V30_struNetPara_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_V30 *arg1 = (NET_DVR_COMPRESSIONCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_COMPRESSION_INFO_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSIONCFG_V30_struNetPara_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_V30_struNetPara_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_V30 * >(argp1);
  result = (NET_DVR_COMPRESSION_INFO_V30 *)& ((arg1)->struNetPara);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_V30, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_COMPRESSIONCFG_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_COMPRESSIONCFG_V30")) SWIG_fail;
  result = (NET_DVR_COMPRESSIONCFG_V30 *)new NET_DVR_COMPRESSIONCFG_V30();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_V30, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_COMPRESSIONCFG_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_V30 *arg1 = (NET_DVR_COMPRESSIONCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_COMPRESSIONCFG_V30",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_V30, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_COMPRESSIONCFG_V30" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_V30 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_COMPRESSIONCFG_V30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_V30, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_byStreamType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO *arg1 = (NET_DVR_COMPRESSION_INFO *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_byStreamType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_byStreamType_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_byStreamType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_byStreamType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStreamType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_byStreamType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO *arg1 = (NET_DVR_COMPRESSION_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_byStreamType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_byStreamType_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO * >(argp1);
  result =  ((arg1)->byStreamType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_byResolution_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO *arg1 = (NET_DVR_COMPRESSION_INFO *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_byResolution_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_byResolution_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_byResolution_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_byResolution_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byResolution = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_byResolution_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO *arg1 = (NET_DVR_COMPRESSION_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_byResolution_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_byResolution_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO * >(argp1);
  result =  ((arg1)->byResolution);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_byBitrateType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO *arg1 = (NET_DVR_COMPRESSION_INFO *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_byBitrateType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_byBitrateType_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_byBitrateType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_byBitrateType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byBitrateType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_byBitrateType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO *arg1 = (NET_DVR_COMPRESSION_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_byBitrateType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_byBitrateType_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO * >(argp1);
  result =  ((arg1)->byBitrateType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_byPicQuality_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO *arg1 = (NET_DVR_COMPRESSION_INFO *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_byPicQuality_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_byPicQuality_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_byPicQuality_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_byPicQuality_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byPicQuality = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_byPicQuality_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO *arg1 = (NET_DVR_COMPRESSION_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_byPicQuality_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_byPicQuality_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO * >(argp1);
  result =  ((arg1)->byPicQuality);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_dwVideoBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO *arg1 = (NET_DVR_COMPRESSION_INFO *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_dwVideoBitrate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_dwVideoBitrate_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_dwVideoBitrate_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_dwVideoBitrate_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwVideoBitrate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_dwVideoBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO *arg1 = (NET_DVR_COMPRESSION_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_dwVideoBitrate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_dwVideoBitrate_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO * >(argp1);
  result =  ((arg1)->dwVideoBitrate);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_dwVideoFrameRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO *arg1 = (NET_DVR_COMPRESSION_INFO *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_dwVideoFrameRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_dwVideoFrameRate_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_dwVideoFrameRate_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_dwVideoFrameRate_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwVideoFrameRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_dwVideoFrameRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO *arg1 = (NET_DVR_COMPRESSION_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_dwVideoFrameRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_dwVideoFrameRate_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO * >(argp1);
  result =  ((arg1)->dwVideoFrameRate);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_COMPRESSION_INFO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_COMPRESSION_INFO")) SWIG_fail;
  result = (NET_DVR_COMPRESSION_INFO *)new NET_DVR_COMPRESSION_INFO();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_COMPRESSION_INFO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO *arg1 = (NET_DVR_COMPRESSION_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_COMPRESSION_INFO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_COMPRESSION_INFO" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_COMPRESSION_INFO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG *arg1 = (NET_DVR_COMPRESSIONCFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSIONCFG_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_dwSize_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSIONCFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSIONCFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG *arg1 = (NET_DVR_COMPRESSIONCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSIONCFG_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_dwSize_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_struRecordPara_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG *arg1 = (NET_DVR_COMPRESSIONCFG *) 0 ;
  NET_DVR_COMPRESSION_INFO *arg2 = (NET_DVR_COMPRESSION_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSIONCFG_struRecordPara_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_struRecordPara_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSIONCFG_struRecordPara_set" "', argument " "2"" of type '" "NET_DVR_COMPRESSION_INFO *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_COMPRESSION_INFO * >(argp2);
  if (arg1) (arg1)->struRecordPara = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_struRecordPara_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG *arg1 = (NET_DVR_COMPRESSIONCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_COMPRESSION_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSIONCFG_struRecordPara_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_struRecordPara_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG * >(argp1);
  result = (NET_DVR_COMPRESSION_INFO *)& ((arg1)->struRecordPara);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_struNetPara_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG *arg1 = (NET_DVR_COMPRESSIONCFG *) 0 ;
  NET_DVR_COMPRESSION_INFO *arg2 = (NET_DVR_COMPRESSION_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSIONCFG_struNetPara_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_struNetPara_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSIONCFG_struNetPara_set" "', argument " "2"" of type '" "NET_DVR_COMPRESSION_INFO *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_COMPRESSION_INFO * >(argp2);
  if (arg1) (arg1)->struNetPara = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_struNetPara_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG *arg1 = (NET_DVR_COMPRESSIONCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_COMPRESSION_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSIONCFG_struNetPara_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_struNetPara_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG * >(argp1);
  result = (NET_DVR_COMPRESSION_INFO *)& ((arg1)->struNetPara);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_COMPRESSION_INFO, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_COMPRESSIONCFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_COMPRESSIONCFG")) SWIG_fail;
  result = (NET_DVR_COMPRESSIONCFG *)new NET_DVR_COMPRESSIONCFG();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_COMPRESSIONCFG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_COMPRESSIONCFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG *arg1 = (NET_DVR_COMPRESSIONCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_COMPRESSIONCFG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_COMPRESSIONCFG" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_COMPRESSIONCFG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_COMPRESSIONCFG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_byStreamType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_EX_byStreamType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byStreamType_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byStreamType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_EX_byStreamType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStreamType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_byStreamType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_EX_byStreamType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byStreamType_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  result =  ((arg1)->byStreamType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_byResolution_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_EX_byResolution_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byResolution_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byResolution_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_EX_byResolution_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byResolution = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_byResolution_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_EX_byResolution_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byResolution_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  result =  ((arg1)->byResolution);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_byBitrateType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_EX_byBitrateType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byBitrateType_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byBitrateType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_EX_byBitrateType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byBitrateType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_byBitrateType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_EX_byBitrateType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byBitrateType_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  result =  ((arg1)->byBitrateType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_byPicQuality_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_EX_byPicQuality_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byPicQuality_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byPicQuality_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_EX_byPicQuality_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byPicQuality = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_byPicQuality_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_EX_byPicQuality_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byPicQuality_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  result =  ((arg1)->byPicQuality);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_dwVideoBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_EX_dwVideoBitrate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_dwVideoBitrate_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_EX_dwVideoBitrate_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_EX_dwVideoBitrate_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwVideoBitrate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_dwVideoBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_EX_dwVideoBitrate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_dwVideoBitrate_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  result =  ((arg1)->dwVideoBitrate);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_dwVideoFrameRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_EX_dwVideoFrameRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_dwVideoFrameRate_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_EX_dwVideoFrameRate_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_EX_dwVideoFrameRate_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwVideoFrameRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_dwVideoFrameRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_EX_dwVideoFrameRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_dwVideoFrameRate_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  result =  ((arg1)->dwVideoFrameRate);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_wIntervalFrameI_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_EX_wIntervalFrameI_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_wIntervalFrameI_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_EX_wIntervalFrameI_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_EX_wIntervalFrameI_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wIntervalFrameI = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_wIntervalFrameI_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_EX_wIntervalFrameI_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_wIntervalFrameI_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  result =  ((arg1)->wIntervalFrameI);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_byIntervalBPFrame_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_EX_byIntervalBPFrame_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byIntervalBPFrame_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byIntervalBPFrame_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_EX_byIntervalBPFrame_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byIntervalBPFrame = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_byIntervalBPFrame_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_EX_byIntervalBPFrame_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byIntervalBPFrame_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  result =  ((arg1)->byIntervalBPFrame);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSION_INFO_EX_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byRes_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byRes_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSION_INFO_EX_byRes_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRes = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSION_INFO_EX_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSION_INFO_EX_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSION_INFO_EX_byRes_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  result =  ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_COMPRESSION_INFO_EX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_COMPRESSION_INFO_EX")) SWIG_fail;
  result = (NET_DVR_COMPRESSION_INFO_EX *)new NET_DVR_COMPRESSION_INFO_EX();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_COMPRESSION_INFO_EX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSION_INFO_EX *arg1 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_COMPRESSION_INFO_EX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_COMPRESSION_INFO_EX" "', argument " "1"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_COMPRESSION_INFO_EX_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_EX_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_EX *arg1 = (NET_DVR_COMPRESSIONCFG_EX *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSIONCFG_EX_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_EX_dwSize_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_EX * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSIONCFG_EX_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_COMPRESSIONCFG_EX_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_EX_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_EX *arg1 = (NET_DVR_COMPRESSIONCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSIONCFG_EX_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_EX_dwSize_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_EX * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_EX_struRecordPara_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_EX *arg1 = (NET_DVR_COMPRESSIONCFG_EX *) 0 ;
  NET_DVR_COMPRESSION_INFO_EX *arg2 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSIONCFG_EX_struRecordPara_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_EX_struRecordPara_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_EX * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSIONCFG_EX_struRecordPara_set" "', argument " "2"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp2);
  if (arg1) (arg1)->struRecordPara = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_EX_struRecordPara_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_EX *arg1 = (NET_DVR_COMPRESSIONCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_COMPRESSION_INFO_EX *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSIONCFG_EX_struRecordPara_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_EX_struRecordPara_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_EX * >(argp1);
  result = (NET_DVR_COMPRESSION_INFO_EX *)& ((arg1)->struRecordPara);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_EX_struNetPara_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_EX *arg1 = (NET_DVR_COMPRESSIONCFG_EX *) 0 ;
  NET_DVR_COMPRESSION_INFO_EX *arg2 = (NET_DVR_COMPRESSION_INFO_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_COMPRESSIONCFG_EX_struNetPara_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_EX_struNetPara_set" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_EX * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_COMPRESSIONCFG_EX_struNetPara_set" "', argument " "2"" of type '" "NET_DVR_COMPRESSION_INFO_EX *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_COMPRESSION_INFO_EX * >(argp2);
  if (arg1) (arg1)->struNetPara = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_COMPRESSIONCFG_EX_struNetPara_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_EX *arg1 = (NET_DVR_COMPRESSIONCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_COMPRESSION_INFO_EX *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_COMPRESSIONCFG_EX_struNetPara_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_COMPRESSIONCFG_EX_struNetPara_get" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_EX * >(argp1);
  result = (NET_DVR_COMPRESSION_INFO_EX *)& ((arg1)->struNetPara);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_COMPRESSION_INFO_EX, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_COMPRESSIONCFG_EX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_EX *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_COMPRESSIONCFG_EX")) SWIG_fail;
  result = (NET_DVR_COMPRESSIONCFG_EX *)new NET_DVR_COMPRESSIONCFG_EX();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_EX, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_COMPRESSIONCFG_EX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_COMPRESSIONCFG_EX *arg1 = (NET_DVR_COMPRESSIONCFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_COMPRESSIONCFG_EX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_EX, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_COMPRESSIONCFG_EX" "', argument " "1"" of type '" "NET_DVR_COMPRESSIONCFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_COMPRESSIONCFG_EX * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_COMPRESSIONCFG_EX_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_COMPRESSIONCFG_EX, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_RECORDSCHED_struRecordTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDSCHED *arg1 = (NET_DVR_RECORDSCHED *) 0 ;
  NET_DVR_SCHEDTIME *arg2 = (NET_DVR_SCHEDTIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORDSCHED_struRecordTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDSCHED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDSCHED_struRecordTime_set" "', argument " "1"" of type '" "NET_DVR_RECORDSCHED *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDSCHED * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORDSCHED_struRecordTime_set" "', argument " "2"" of type '" "NET_DVR_SCHEDTIME *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_SCHEDTIME * >(argp2);
  if (arg1) (arg1)->struRecordTime = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDSCHED_struRecordTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDSCHED *arg1 = (NET_DVR_RECORDSCHED *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_SCHEDTIME *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORDSCHED_struRecordTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDSCHED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDSCHED_struRecordTime_get" "', argument " "1"" of type '" "NET_DVR_RECORDSCHED *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDSCHED * >(argp1);
  result = (NET_DVR_SCHEDTIME *)& ((arg1)->struRecordTime);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_SCHEDTIME, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDSCHED_byRecordType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDSCHED *arg1 = (NET_DVR_RECORDSCHED *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORDSCHED_byRecordType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDSCHED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDSCHED_byRecordType_set" "', argument " "1"" of type '" "NET_DVR_RECORDSCHED *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDSCHED * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORDSCHED_byRecordType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORDSCHED_byRecordType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRecordType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDSCHED_byRecordType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDSCHED *arg1 = (NET_DVR_RECORDSCHED *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORDSCHED_byRecordType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDSCHED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDSCHED_byRecordType_get" "', argument " "1"" of type '" "NET_DVR_RECORDSCHED *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDSCHED * >(argp1);
  result =  ((arg1)->byRecordType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDSCHED_reservedData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDSCHED *arg1 = (NET_DVR_RECORDSCHED *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[3] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORDSCHED_reservedData_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDSCHED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDSCHED_reservedData_set" "', argument " "1"" of type '" "NET_DVR_RECORDSCHED *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDSCHED * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 3);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORDSCHED_reservedData_set" "', argument " "2"" of type '" "char [3]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->reservedData,arg2,3*sizeof(char));
  else memset(arg1->reservedData,0,3*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDSCHED_reservedData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDSCHED *arg1 = (NET_DVR_RECORDSCHED *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORDSCHED_reservedData_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDSCHED, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDSCHED_reservedData_get" "', argument " "1"" of type '" "NET_DVR_RECORDSCHED *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDSCHED * >(argp1);
  result = (char *)(char *) ((arg1)->reservedData);
  {
    size_t size = SWIG_strnlen(result, 3);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_RECORDSCHED(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDSCHED *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_RECORDSCHED")) SWIG_fail;
  result = (NET_DVR_RECORDSCHED *)new NET_DVR_RECORDSCHED();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_RECORDSCHED, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_RECORDSCHED(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDSCHED *arg1 = (NET_DVR_RECORDSCHED *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_RECORDSCHED",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDSCHED, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_RECORDSCHED" "', argument " "1"" of type '" "NET_DVR_RECORDSCHED *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDSCHED * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_RECORDSCHED_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_RECORDSCHED, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_RECORDDAY_wAllDayRecord_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDDAY *arg1 = (NET_DVR_RECORDDAY *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORDDAY_wAllDayRecord_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDDAY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDDAY_wAllDayRecord_set" "', argument " "1"" of type '" "NET_DVR_RECORDDAY *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDDAY * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORDDAY_wAllDayRecord_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORDDAY_wAllDayRecord_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wAllDayRecord = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDDAY_wAllDayRecord_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDDAY *arg1 = (NET_DVR_RECORDDAY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORDDAY_wAllDayRecord_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDDAY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDDAY_wAllDayRecord_get" "', argument " "1"" of type '" "NET_DVR_RECORDDAY *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDDAY * >(argp1);
  result =  ((arg1)->wAllDayRecord);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDDAY_byRecordType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDDAY *arg1 = (NET_DVR_RECORDDAY *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORDDAY_byRecordType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDDAY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDDAY_byRecordType_set" "', argument " "1"" of type '" "NET_DVR_RECORDDAY *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDDAY * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORDDAY_byRecordType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORDDAY_byRecordType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRecordType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDDAY_byRecordType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDDAY *arg1 = (NET_DVR_RECORDDAY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORDDAY_byRecordType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDDAY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDDAY_byRecordType_get" "', argument " "1"" of type '" "NET_DVR_RECORDDAY *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDDAY * >(argp1);
  result =  ((arg1)->byRecordType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDDAY_reservedData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDDAY *arg1 = (NET_DVR_RECORDDAY *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORDDAY_reservedData_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDDAY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDDAY_reservedData_set" "', argument " "1"" of type '" "NET_DVR_RECORDDAY *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDDAY * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_DVR_RECORDDAY_reservedData_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->reservedData = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDDAY_reservedData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDDAY *arg1 = (NET_DVR_RECORDDAY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORDDAY_reservedData_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDDAY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDDAY_reservedData_get" "', argument " "1"" of type '" "NET_DVR_RECORDDAY *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDDAY * >(argp1);
  result = (char) ((arg1)->reservedData);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_RECORDDAY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDDAY *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_RECORDDAY")) SWIG_fail;
  result = (NET_DVR_RECORDDAY *)new NET_DVR_RECORDDAY();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_RECORDDAY, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_RECORDDAY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDDAY *arg1 = (NET_DVR_RECORDDAY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_RECORDDAY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDDAY, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_RECORDDAY" "', argument " "1"" of type '" "NET_DVR_RECORDDAY *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDDAY * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_RECORDDAY_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_RECORDDAY, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_dwSize_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V30_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_dwSize_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_dwRecord_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_dwRecord_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_dwRecord_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_dwRecord_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V30_dwRecord_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwRecord = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_dwRecord_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_dwRecord_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_dwRecord_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result =  ((arg1)->dwRecord);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_struRecAllDay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  NET_DVR_RECORDDAY *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_struRecAllDay_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_struRecAllDay_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_RECORDDAY, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_struRecAllDay_set" "', argument " "2"" of type '" "NET_DVR_RECORDDAY [7]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_RECORDDAY * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) *(NET_DVR_RECORDDAY *)&arg1->struRecAllDay[ii] = *((NET_DVR_RECORDDAY *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struRecAllDay""' of type '""NET_DVR_RECORDDAY [7]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_struRecAllDay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_RECORDDAY *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_struRecAllDay_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_struRecAllDay_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result = (NET_DVR_RECORDDAY *)(NET_DVR_RECORDDAY *) ((arg1)->struRecAllDay);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_RECORDDAY, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_struRecordSched_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  NET_DVR_RECORDSCHED (*arg2)[8] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_struRecordSched_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_struRecordSched_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_8__NET_DVR_RECORDSCHED, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_struRecordSched_set" "', argument " "2"" of type '" "NET_DVR_RECORDSCHED [7][8]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_RECORDSCHED (*)[8] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)8; ++jj) arg1->struRecordSched[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struRecordSched""' of type '""NET_DVR_RECORDSCHED [7][8]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struRecordSched""' of type '""NET_DVR_RECORDSCHED [7][8]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_struRecordSched_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_RECORDSCHED (*result)[8] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_struRecordSched_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_struRecordSched_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result = (NET_DVR_RECORDSCHED (*)[8])(NET_DVR_RECORDSCHED (*)[8]) ((arg1)->struRecordSched);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_8__NET_DVR_RECORDSCHED, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_dwRecordTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_dwRecordTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_dwRecordTime_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_dwRecordTime_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V30_dwRecordTime_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwRecordTime = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_dwRecordTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_dwRecordTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_dwRecordTime_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result =  ((arg1)->dwRecordTime);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_dwPreRecordTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_dwPreRecordTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_dwPreRecordTime_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_dwPreRecordTime_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V30_dwPreRecordTime_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwPreRecordTime = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_dwPreRecordTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_dwPreRecordTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_dwPreRecordTime_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result =  ((arg1)->dwPreRecordTime);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_dwRecorderDuration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_dwRecorderDuration_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_dwRecorderDuration_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_dwRecorderDuration_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V30_dwRecorderDuration_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwRecorderDuration = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_dwRecorderDuration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_dwRecorderDuration_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_dwRecorderDuration_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result =  ((arg1)->dwRecorderDuration);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byRedundancyRec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_byRedundancyRec_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byRedundancyRec_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_byRedundancyRec_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V30_byRedundancyRec_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRedundancyRec = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byRedundancyRec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_byRedundancyRec_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byRedundancyRec_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result =  ((arg1)->byRedundancyRec);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byAudioRec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_byAudioRec_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byAudioRec_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_byAudioRec_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V30_byAudioRec_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAudioRec = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byAudioRec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_byAudioRec_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byAudioRec_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result =  ((arg1)->byAudioRec);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byStreamType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_byStreamType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byStreamType_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_byStreamType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V30_byStreamType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStreamType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byStreamType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_byStreamType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byStreamType_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result =  ((arg1)->byStreamType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byPassbackRecord_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_byPassbackRecord_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byPassbackRecord_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_byPassbackRecord_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V30_byPassbackRecord_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byPassbackRecord = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byPassbackRecord_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_byPassbackRecord_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byPassbackRecord_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result =  ((arg1)->byPassbackRecord);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_wLockDuration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_wLockDuration_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_wLockDuration_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_wLockDuration_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V30_wLockDuration_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wLockDuration = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_wLockDuration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_wLockDuration_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_wLockDuration_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result =  ((arg1)->wLockDuration);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byRecordBackup_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_byRecordBackup_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byRecordBackup_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_byRecordBackup_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V30_byRecordBackup_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRecordBackup = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byRecordBackup_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_byRecordBackup_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byRecordBackup_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result =  ((arg1)->byRecordBackup);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_bySVCLevel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_bySVCLevel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_bySVCLevel_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_bySVCLevel_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V30_bySVCLevel_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->bySVCLevel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_bySVCLevel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_bySVCLevel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_bySVCLevel_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result =  ((arg1)->bySVCLevel);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byRecordManage_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_byRecordManage_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byRecordManage_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_byRecordManage_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V30_byRecordManage_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRecordManage = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byRecordManage_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_byRecordManage_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byRecordManage_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result =  ((arg1)->byRecordManage);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byExtraSaveAudio_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_byExtraSaveAudio_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byExtraSaveAudio_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_byExtraSaveAudio_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V30_byExtraSaveAudio_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byExtraSaveAudio = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byExtraSaveAudio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_byExtraSaveAudio_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byExtraSaveAudio_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result =  ((arg1)->byExtraSaveAudio);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byIntelligentRecord_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_byIntelligentRecord_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byIntelligentRecord_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_byIntelligentRecord_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V30_byIntelligentRecord_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byIntelligentRecord = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byIntelligentRecord_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_byIntelligentRecord_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byIntelligentRecord_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result =  ((arg1)->byIntelligentRecord);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byReserve_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V30_byReserve_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byReserve_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V30_byReserve_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V30_byReserve_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byReserve = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V30_byReserve_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V30_byReserve_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V30_byReserve_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  result =  ((arg1)->byReserve);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_RECORD_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_RECORD_V30")) SWIG_fail;
  result = (NET_DVR_RECORD_V30 *)new NET_DVR_RECORD_V30();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_RECORD_V30, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_RECORD_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V30 *arg1 = (NET_DVR_RECORD_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_RECORD_V30",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V30, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_RECORD_V30" "', argument " "1"" of type '" "NET_DVR_RECORD_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V30 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_RECORD_V30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_RECORD_V30, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_RECORDSCHED_V40_struRecordTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDSCHED_V40 *arg1 = (NET_DVR_RECORDSCHED_V40 *) 0 ;
  NET_DVR_SCHEDTIME *arg2 = (NET_DVR_SCHEDTIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORDSCHED_V40_struRecordTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDSCHED_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDSCHED_V40_struRecordTime_set" "', argument " "1"" of type '" "NET_DVR_RECORDSCHED_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDSCHED_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORDSCHED_V40_struRecordTime_set" "', argument " "2"" of type '" "NET_DVR_SCHEDTIME *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_SCHEDTIME * >(argp2);
  if (arg1) (arg1)->struRecordTime = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDSCHED_V40_struRecordTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDSCHED_V40 *arg1 = (NET_DVR_RECORDSCHED_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_SCHEDTIME *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORDSCHED_V40_struRecordTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDSCHED_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDSCHED_V40_struRecordTime_get" "', argument " "1"" of type '" "NET_DVR_RECORDSCHED_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDSCHED_V40 * >(argp1);
  result = (NET_DVR_SCHEDTIME *)& ((arg1)->struRecordTime);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_SCHEDTIME, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDSCHED_V40_byRecordType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDSCHED_V40 *arg1 = (NET_DVR_RECORDSCHED_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORDSCHED_V40_byRecordType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDSCHED_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDSCHED_V40_byRecordType_set" "', argument " "1"" of type '" "NET_DVR_RECORDSCHED_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDSCHED_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORDSCHED_V40_byRecordType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORDSCHED_V40_byRecordType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRecordType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDSCHED_V40_byRecordType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDSCHED_V40 *arg1 = (NET_DVR_RECORDSCHED_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORDSCHED_V40_byRecordType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDSCHED_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDSCHED_V40_byRecordType_get" "', argument " "1"" of type '" "NET_DVR_RECORDSCHED_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDSCHED_V40 * >(argp1);
  result =  ((arg1)->byRecordType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDSCHED_V40_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDSCHED_V40 *arg1 = (NET_DVR_RECORDSCHED_V40 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORDSCHED_V40_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDSCHED_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDSCHED_V40_byRes_set" "', argument " "1"" of type '" "NET_DVR_RECORDSCHED_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDSCHED_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORDSCHED_V40_byRes_set" "', argument " "2"" of type '" "BYTE [31]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)31; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [31]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDSCHED_V40_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDSCHED_V40 *arg1 = (NET_DVR_RECORDSCHED_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORDSCHED_V40_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDSCHED_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDSCHED_V40_byRes_get" "', argument " "1"" of type '" "NET_DVR_RECORDSCHED_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDSCHED_V40 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_RECORDSCHED_V40(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDSCHED_V40 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_RECORDSCHED_V40")) SWIG_fail;
  result = (NET_DVR_RECORDSCHED_V40 *)new NET_DVR_RECORDSCHED_V40();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_RECORDSCHED_V40, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_RECORDSCHED_V40(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDSCHED_V40 *arg1 = (NET_DVR_RECORDSCHED_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_RECORDSCHED_V40",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDSCHED_V40, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_RECORDSCHED_V40" "', argument " "1"" of type '" "NET_DVR_RECORDSCHED_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDSCHED_V40 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_RECORDSCHED_V40_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_RECORDSCHED_V40, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_RECORDDAY_V40_byAllDayRecord_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDDAY_V40 *arg1 = (NET_DVR_RECORDDAY_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORDDAY_V40_byAllDayRecord_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDDAY_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDDAY_V40_byAllDayRecord_set" "', argument " "1"" of type '" "NET_DVR_RECORDDAY_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDDAY_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORDDAY_V40_byAllDayRecord_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORDDAY_V40_byAllDayRecord_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAllDayRecord = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDDAY_V40_byAllDayRecord_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDDAY_V40 *arg1 = (NET_DVR_RECORDDAY_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORDDAY_V40_byAllDayRecord_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDDAY_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDDAY_V40_byAllDayRecord_get" "', argument " "1"" of type '" "NET_DVR_RECORDDAY_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDDAY_V40 * >(argp1);
  result =  ((arg1)->byAllDayRecord);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDDAY_V40_byRecordType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDDAY_V40 *arg1 = (NET_DVR_RECORDDAY_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORDDAY_V40_byRecordType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDDAY_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDDAY_V40_byRecordType_set" "', argument " "1"" of type '" "NET_DVR_RECORDDAY_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDDAY_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORDDAY_V40_byRecordType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORDDAY_V40_byRecordType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRecordType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDDAY_V40_byRecordType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDDAY_V40 *arg1 = (NET_DVR_RECORDDAY_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORDDAY_V40_byRecordType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDDAY_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDDAY_V40_byRecordType_get" "', argument " "1"" of type '" "NET_DVR_RECORDDAY_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDDAY_V40 * >(argp1);
  result =  ((arg1)->byRecordType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDDAY_V40_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDDAY_V40 *arg1 = (NET_DVR_RECORDDAY_V40 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORDDAY_V40_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDDAY_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDDAY_V40_byRes_set" "', argument " "1"" of type '" "NET_DVR_RECORDDAY_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDDAY_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORDDAY_V40_byRes_set" "', argument " "2"" of type '" "BYTE [62]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)62; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [62]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORDDAY_V40_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDDAY_V40 *arg1 = (NET_DVR_RECORDDAY_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORDDAY_V40_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDDAY_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORDDAY_V40_byRes_get" "', argument " "1"" of type '" "NET_DVR_RECORDDAY_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDDAY_V40 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_RECORDDAY_V40(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDDAY_V40 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_RECORDDAY_V40")) SWIG_fail;
  result = (NET_DVR_RECORDDAY_V40 *)new NET_DVR_RECORDDAY_V40();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_RECORDDAY_V40, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_RECORDDAY_V40(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORDDAY_V40 *arg1 = (NET_DVR_RECORDDAY_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_RECORDDAY_V40",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORDDAY_V40, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_RECORDDAY_V40" "', argument " "1"" of type '" "NET_DVR_RECORDDAY_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORDDAY_V40 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_RECORDDAY_V40_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_RECORDDAY_V40, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_dwSize_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V40_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_dwSize_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_dwRecord_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_dwRecord_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_dwRecord_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_dwRecord_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V40_dwRecord_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwRecord = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_dwRecord_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_dwRecord_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_dwRecord_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result =  ((arg1)->dwRecord);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_struRecAllDay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  NET_DVR_RECORDDAY_V40 *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_struRecAllDay_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_struRecAllDay_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_RECORDDAY_V40, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_struRecAllDay_set" "', argument " "2"" of type '" "NET_DVR_RECORDDAY_V40 [7]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_RECORDDAY_V40 * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) *(NET_DVR_RECORDDAY_V40 *)&arg1->struRecAllDay[ii] = *((NET_DVR_RECORDDAY_V40 *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struRecAllDay""' of type '""NET_DVR_RECORDDAY_V40 [7]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_struRecAllDay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_RECORDDAY_V40 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_struRecAllDay_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_struRecAllDay_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result = (NET_DVR_RECORDDAY_V40 *)(NET_DVR_RECORDDAY_V40 *) ((arg1)->struRecAllDay);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_RECORDDAY_V40, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_struRecordSched_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  NET_DVR_RECORDSCHED_V40 (*arg2)[8] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_struRecordSched_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_struRecordSched_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_8__NET_DVR_RECORDSCHED_V40, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_struRecordSched_set" "', argument " "2"" of type '" "NET_DVR_RECORDSCHED_V40 [7][8]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_RECORDSCHED_V40 (*)[8] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)8; ++jj) arg1->struRecordSched[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struRecordSched""' of type '""NET_DVR_RECORDSCHED_V40 [7][8]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struRecordSched""' of type '""NET_DVR_RECORDSCHED_V40 [7][8]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_struRecordSched_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_RECORDSCHED_V40 (*result)[8] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_struRecordSched_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_struRecordSched_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result = (NET_DVR_RECORDSCHED_V40 (*)[8])(NET_DVR_RECORDSCHED_V40 (*)[8]) ((arg1)->struRecordSched);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_8__NET_DVR_RECORDSCHED_V40, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_dwRecordTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_dwRecordTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_dwRecordTime_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_dwRecordTime_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V40_dwRecordTime_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwRecordTime = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_dwRecordTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_dwRecordTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_dwRecordTime_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result =  ((arg1)->dwRecordTime);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_dwPreRecordTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_dwPreRecordTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_dwPreRecordTime_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_dwPreRecordTime_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V40_dwPreRecordTime_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwPreRecordTime = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_dwPreRecordTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_dwPreRecordTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_dwPreRecordTime_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result =  ((arg1)->dwPreRecordTime);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_dwRecorderDuration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_dwRecorderDuration_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_dwRecorderDuration_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_dwRecorderDuration_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V40_dwRecorderDuration_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwRecorderDuration = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_dwRecorderDuration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_dwRecorderDuration_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_dwRecorderDuration_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result =  ((arg1)->dwRecorderDuration);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byRedundancyRec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_byRedundancyRec_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byRedundancyRec_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_byRedundancyRec_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V40_byRedundancyRec_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRedundancyRec = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byRedundancyRec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_byRedundancyRec_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byRedundancyRec_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result =  ((arg1)->byRedundancyRec);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byAudioRec_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_byAudioRec_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byAudioRec_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_byAudioRec_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V40_byAudioRec_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAudioRec = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byAudioRec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_byAudioRec_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byAudioRec_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result =  ((arg1)->byAudioRec);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byStreamType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_byStreamType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byStreamType_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_byStreamType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V40_byStreamType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStreamType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byStreamType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_byStreamType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byStreamType_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result =  ((arg1)->byStreamType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byPassbackRecord_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_byPassbackRecord_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byPassbackRecord_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_byPassbackRecord_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V40_byPassbackRecord_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byPassbackRecord = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byPassbackRecord_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_byPassbackRecord_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byPassbackRecord_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result =  ((arg1)->byPassbackRecord);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_wLockDuration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_wLockDuration_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_wLockDuration_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_wLockDuration_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V40_wLockDuration_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wLockDuration = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_wLockDuration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_wLockDuration_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_wLockDuration_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result =  ((arg1)->wLockDuration);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byRecordBackup_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_byRecordBackup_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byRecordBackup_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_byRecordBackup_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V40_byRecordBackup_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRecordBackup = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byRecordBackup_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_byRecordBackup_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byRecordBackup_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result =  ((arg1)->byRecordBackup);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_bySVCLevel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_bySVCLevel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_bySVCLevel_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_bySVCLevel_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V40_bySVCLevel_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->bySVCLevel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_bySVCLevel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_bySVCLevel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_bySVCLevel_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result =  ((arg1)->bySVCLevel);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byRecordManage_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_byRecordManage_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byRecordManage_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_byRecordManage_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V40_byRecordManage_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRecordManage = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byRecordManage_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_byRecordManage_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byRecordManage_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result =  ((arg1)->byRecordManage);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byExtraSaveAudio_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_byExtraSaveAudio_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byExtraSaveAudio_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_byExtraSaveAudio_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V40_byExtraSaveAudio_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byExtraSaveAudio = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byExtraSaveAudio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_byExtraSaveAudio_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byExtraSaveAudio_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result =  ((arg1)->byExtraSaveAudio);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byIntelligentRecord_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_byIntelligentRecord_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byIntelligentRecord_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_byIntelligentRecord_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_V40_byIntelligentRecord_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byIntelligentRecord = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byIntelligentRecord_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_byIntelligentRecord_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byIntelligentRecord_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result =  ((arg1)->byIntelligentRecord);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_V40_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byRes_set" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_V40_byRes_set" "', argument " "2"" of type '" "BYTE [125]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)125; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [125]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_V40_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_V40_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_V40_byRes_get" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_RECORD_V40(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_RECORD_V40")) SWIG_fail;
  result = (NET_DVR_RECORD_V40 *)new NET_DVR_RECORD_V40();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_RECORD_V40, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_RECORD_V40(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD_V40 *arg1 = (NET_DVR_RECORD_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_RECORD_V40",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD_V40, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_RECORD_V40" "', argument " "1"" of type '" "NET_DVR_RECORD_V40 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD_V40 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_RECORD_V40_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_RECORD_V40, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD *arg1 = (NET_DVR_RECORD *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_dwSize_set" "', argument " "1"" of type '" "NET_DVR_RECORD *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD *arg1 = (NET_DVR_RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_dwSize_get" "', argument " "1"" of type '" "NET_DVR_RECORD *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_dwRecord_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD *arg1 = (NET_DVR_RECORD *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_dwRecord_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_dwRecord_set" "', argument " "1"" of type '" "NET_DVR_RECORD *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_dwRecord_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_dwRecord_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwRecord = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_dwRecord_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD *arg1 = (NET_DVR_RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_dwRecord_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_dwRecord_get" "', argument " "1"" of type '" "NET_DVR_RECORD *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD * >(argp1);
  result =  ((arg1)->dwRecord);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_struRecAllDay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD *arg1 = (NET_DVR_RECORD *) 0 ;
  NET_DVR_RECORDDAY *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_struRecAllDay_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_struRecAllDay_set" "', argument " "1"" of type '" "NET_DVR_RECORD *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_RECORDDAY, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_struRecAllDay_set" "', argument " "2"" of type '" "NET_DVR_RECORDDAY [7]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_RECORDDAY * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) *(NET_DVR_RECORDDAY *)&arg1->struRecAllDay[ii] = *((NET_DVR_RECORDDAY *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struRecAllDay""' of type '""NET_DVR_RECORDDAY [7]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_struRecAllDay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD *arg1 = (NET_DVR_RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_RECORDDAY *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_struRecAllDay_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_struRecAllDay_get" "', argument " "1"" of type '" "NET_DVR_RECORD *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD * >(argp1);
  result = (NET_DVR_RECORDDAY *)(NET_DVR_RECORDDAY *) ((arg1)->struRecAllDay);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_RECORDDAY, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_struRecordSched_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD *arg1 = (NET_DVR_RECORD *) 0 ;
  NET_DVR_RECORDSCHED (*arg2)[4] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_struRecordSched_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_struRecordSched_set" "', argument " "1"" of type '" "NET_DVR_RECORD *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_4__NET_DVR_RECORDSCHED, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_struRecordSched_set" "', argument " "2"" of type '" "NET_DVR_RECORDSCHED [7][4]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_RECORDSCHED (*)[4] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)4; ++jj) arg1->struRecordSched[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struRecordSched""' of type '""NET_DVR_RECORDSCHED [7][4]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struRecordSched""' of type '""NET_DVR_RECORDSCHED [7][4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_struRecordSched_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD *arg1 = (NET_DVR_RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_RECORDSCHED (*result)[4] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_struRecordSched_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_struRecordSched_get" "', argument " "1"" of type '" "NET_DVR_RECORD *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD * >(argp1);
  result = (NET_DVR_RECORDSCHED (*)[4])(NET_DVR_RECORDSCHED (*)[4]) ((arg1)->struRecordSched);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_4__NET_DVR_RECORDSCHED, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_dwRecordTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD *arg1 = (NET_DVR_RECORD *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_dwRecordTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_dwRecordTime_set" "', argument " "1"" of type '" "NET_DVR_RECORD *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_dwRecordTime_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_dwRecordTime_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwRecordTime = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_dwRecordTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD *arg1 = (NET_DVR_RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_dwRecordTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_dwRecordTime_get" "', argument " "1"" of type '" "NET_DVR_RECORD *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD * >(argp1);
  result =  ((arg1)->dwRecordTime);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_dwPreRecordTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD *arg1 = (NET_DVR_RECORD *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RECORD_dwPreRecordTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_dwPreRecordTime_set" "', argument " "1"" of type '" "NET_DVR_RECORD *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RECORD_dwPreRecordTime_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RECORD_dwPreRecordTime_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwPreRecordTime = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RECORD_dwPreRecordTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD *arg1 = (NET_DVR_RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RECORD_dwPreRecordTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RECORD_dwPreRecordTime_get" "', argument " "1"" of type '" "NET_DVR_RECORD *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD * >(argp1);
  result =  ((arg1)->dwPreRecordTime);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_RECORD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_RECORD")) SWIG_fail;
  result = (NET_DVR_RECORD *)new NET_DVR_RECORD();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_RECORD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_RECORD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RECORD *arg1 = (NET_DVR_RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_RECORD",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RECORD, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_RECORD" "', argument " "1"" of type '" "NET_DVR_RECORD *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RECORD * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_RECORD_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_RECORD, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_PROTOCOL_dwType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZ_PROTOCOL *arg1 = (NET_DVR_PTZ_PROTOCOL *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_PROTOCOL_dwType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZ_PROTOCOL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_PROTOCOL_dwType_set" "', argument " "1"" of type '" "NET_DVR_PTZ_PROTOCOL *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZ_PROTOCOL * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_PROTOCOL_dwType_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZ_PROTOCOL_dwType_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_PROTOCOL_dwType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZ_PROTOCOL *arg1 = (NET_DVR_PTZ_PROTOCOL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_PROTOCOL_dwType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZ_PROTOCOL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_PROTOCOL_dwType_get" "', argument " "1"" of type '" "NET_DVR_PTZ_PROTOCOL *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZ_PROTOCOL * >(argp1);
  result =  ((arg1)->dwType);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_PROTOCOL_byDescribe_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZ_PROTOCOL *arg1 = (NET_DVR_PTZ_PROTOCOL *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_PROTOCOL_byDescribe_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZ_PROTOCOL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_PROTOCOL_byDescribe_set" "', argument " "1"" of type '" "NET_DVR_PTZ_PROTOCOL *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZ_PROTOCOL * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_PROTOCOL_byDescribe_set" "', argument " "2"" of type '" "BYTE [16]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) *(BYTE *)&arg1->byDescribe[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byDescribe""' of type '""BYTE [16]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_PROTOCOL_byDescribe_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZ_PROTOCOL *arg1 = (NET_DVR_PTZ_PROTOCOL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_PROTOCOL_byDescribe_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZ_PROTOCOL, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_PROTOCOL_byDescribe_get" "', argument " "1"" of type '" "NET_DVR_PTZ_PROTOCOL *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZ_PROTOCOL * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byDescribe);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_PTZ_PROTOCOL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZ_PROTOCOL *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_PTZ_PROTOCOL")) SWIG_fail;
  result = (NET_DVR_PTZ_PROTOCOL *)new NET_DVR_PTZ_PROTOCOL();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PTZ_PROTOCOL, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_PTZ_PROTOCOL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZ_PROTOCOL *arg1 = (NET_DVR_PTZ_PROTOCOL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_PTZ_PROTOCOL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZ_PROTOCOL, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_PTZ_PROTOCOL" "', argument " "1"" of type '" "NET_DVR_PTZ_PROTOCOL *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZ_PROTOCOL * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_PTZ_PROTOCOL_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_PTZ_PROTOCOL, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_PTZCFG_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZCFG *arg1 = (NET_DVR_PTZCFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZCFG_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZCFG_dwSize_set" "', argument " "1"" of type '" "NET_DVR_PTZCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZCFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZCFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZCFG_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZCFG *arg1 = (NET_DVR_PTZCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZCFG_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZCFG_dwSize_get" "', argument " "1"" of type '" "NET_DVR_PTZCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZCFG * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZCFG_struPtz_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZCFG *arg1 = (NET_DVR_PTZCFG *) 0 ;
  NET_DVR_PTZ_PROTOCOL *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZCFG_struPtz_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZCFG_struPtz_set" "', argument " "1"" of type '" "NET_DVR_PTZCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_PTZ_PROTOCOL, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZCFG_struPtz_set" "', argument " "2"" of type '" "NET_DVR_PTZ_PROTOCOL [200]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_PTZ_PROTOCOL * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)200; ++ii) *(NET_DVR_PTZ_PROTOCOL *)&arg1->struPtz[ii] = *((NET_DVR_PTZ_PROTOCOL *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struPtz""' of type '""NET_DVR_PTZ_PROTOCOL [200]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZCFG_struPtz_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZCFG *arg1 = (NET_DVR_PTZCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_PTZ_PROTOCOL *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZCFG_struPtz_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZCFG_struPtz_get" "', argument " "1"" of type '" "NET_DVR_PTZCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZCFG * >(argp1);
  result = (NET_DVR_PTZ_PROTOCOL *)(NET_DVR_PTZ_PROTOCOL *) ((arg1)->struPtz);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PTZ_PROTOCOL, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZCFG_dwPtzNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZCFG *arg1 = (NET_DVR_PTZCFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZCFG_dwPtzNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZCFG_dwPtzNum_set" "', argument " "1"" of type '" "NET_DVR_PTZCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZCFG_dwPtzNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZCFG_dwPtzNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwPtzNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZCFG_dwPtzNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZCFG *arg1 = (NET_DVR_PTZCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZCFG_dwPtzNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZCFG_dwPtzNum_get" "', argument " "1"" of type '" "NET_DVR_PTZCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZCFG * >(argp1);
  result =  ((arg1)->dwPtzNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZCFG_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZCFG *arg1 = (NET_DVR_PTZCFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZCFG_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZCFG_byRes_set" "', argument " "1"" of type '" "NET_DVR_PTZCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZCFG_byRes_set" "', argument " "2"" of type '" "BYTE [8]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)8; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [8]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZCFG_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZCFG *arg1 = (NET_DVR_PTZCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZCFG_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZCFG_byRes_get" "', argument " "1"" of type '" "NET_DVR_PTZCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZCFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_PTZCFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZCFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_PTZCFG")) SWIG_fail;
  result = (NET_DVR_PTZCFG *)new NET_DVR_PTZCFG();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PTZCFG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_PTZCFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZCFG *arg1 = (NET_DVR_PTZCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_PTZCFG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZCFG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_PTZCFG" "', argument " "1"" of type '" "NET_DVR_PTZCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZCFG * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_PTZCFG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_PTZCFG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_SERIALSTART_V40_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SERIALSTART_V40 *arg1 = (tagNET_DVR_SERIALSTART_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SERIALSTART_V40_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SERIALSTART_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SERIALSTART_V40_dwSize_set" "', argument " "1"" of type '" "tagNET_DVR_SERIALSTART_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SERIALSTART_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SERIALSTART_V40_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SERIALSTART_V40_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SERIALSTART_V40_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SERIALSTART_V40 *arg1 = (tagNET_DVR_SERIALSTART_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SERIALSTART_V40_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SERIALSTART_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SERIALSTART_V40_dwSize_get" "', argument " "1"" of type '" "tagNET_DVR_SERIALSTART_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SERIALSTART_V40 * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SERIALSTART_V40_dwSerialType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SERIALSTART_V40 *arg1 = (tagNET_DVR_SERIALSTART_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SERIALSTART_V40_dwSerialType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SERIALSTART_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SERIALSTART_V40_dwSerialType_set" "', argument " "1"" of type '" "tagNET_DVR_SERIALSTART_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SERIALSTART_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SERIALSTART_V40_dwSerialType_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SERIALSTART_V40_dwSerialType_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSerialType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SERIALSTART_V40_dwSerialType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SERIALSTART_V40 *arg1 = (tagNET_DVR_SERIALSTART_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SERIALSTART_V40_dwSerialType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SERIALSTART_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SERIALSTART_V40_dwSerialType_get" "', argument " "1"" of type '" "tagNET_DVR_SERIALSTART_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SERIALSTART_V40 * >(argp1);
  result =  ((arg1)->dwSerialType);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SERIALSTART_V40_bySerialNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SERIALSTART_V40 *arg1 = (tagNET_DVR_SERIALSTART_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SERIALSTART_V40_bySerialNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SERIALSTART_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SERIALSTART_V40_bySerialNum_set" "', argument " "1"" of type '" "tagNET_DVR_SERIALSTART_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SERIALSTART_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SERIALSTART_V40_bySerialNum_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SERIALSTART_V40_bySerialNum_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->bySerialNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SERIALSTART_V40_bySerialNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SERIALSTART_V40 *arg1 = (tagNET_DVR_SERIALSTART_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SERIALSTART_V40_bySerialNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SERIALSTART_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SERIALSTART_V40_bySerialNum_get" "', argument " "1"" of type '" "tagNET_DVR_SERIALSTART_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SERIALSTART_V40 * >(argp1);
  result =  ((arg1)->bySerialNum);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SERIALSTART_V40_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SERIALSTART_V40 *arg1 = (tagNET_DVR_SERIALSTART_V40 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SERIALSTART_V40_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SERIALSTART_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SERIALSTART_V40_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_SERIALSTART_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SERIALSTART_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SERIALSTART_V40_byRes_set" "', argument " "2"" of type '" "BYTE [255]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)255; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [255]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SERIALSTART_V40_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SERIALSTART_V40 *arg1 = (tagNET_DVR_SERIALSTART_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SERIALSTART_V40_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SERIALSTART_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SERIALSTART_V40_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_SERIALSTART_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SERIALSTART_V40 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_SERIALSTART_V40(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SERIALSTART_V40 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_SERIALSTART_V40")) SWIG_fail;
  result = (tagNET_DVR_SERIALSTART_V40 *)new tagNET_DVR_SERIALSTART_V40();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_SERIALSTART_V40, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_SERIALSTART_V40(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_SERIALSTART_V40 *arg1 = (tagNET_DVR_SERIALSTART_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_SERIALSTART_V40",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_SERIALSTART_V40, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_SERIALSTART_V40" "', argument " "1"" of type '" "tagNET_DVR_SERIALSTART_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_SERIALSTART_V40 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_SERIALSTART_V40_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_SERIALSTART_V40, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V40_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_dwSize_set" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V40_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V40_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V40_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_dwSize_get" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_dwBaudRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V40_dwBaudRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_dwBaudRate_set" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V40_dwBaudRate_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V40_dwBaudRate_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwBaudRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_dwBaudRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V40_dwBaudRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_dwBaudRate_get" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  result =  ((arg1)->dwBaudRate);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_byDataBit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V40_byDataBit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_byDataBit_set" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V40_byDataBit_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V40_byDataBit_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDataBit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_byDataBit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V40_byDataBit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_byDataBit_get" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  result =  ((arg1)->byDataBit);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_byStopBit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V40_byStopBit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_byStopBit_set" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V40_byStopBit_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V40_byStopBit_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStopBit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_byStopBit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V40_byStopBit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_byStopBit_get" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  result =  ((arg1)->byStopBit);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_byParity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V40_byParity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_byParity_set" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V40_byParity_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V40_byParity_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byParity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_byParity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V40_byParity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_byParity_get" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  result =  ((arg1)->byParity);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_byFlowcontrol_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V40_byFlowcontrol_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_byFlowcontrol_set" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V40_byFlowcontrol_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V40_byFlowcontrol_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byFlowcontrol = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_byFlowcontrol_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V40_byFlowcontrol_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_byFlowcontrol_get" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  result =  ((arg1)->byFlowcontrol);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_wDecoderType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V40_wDecoderType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_wDecoderType_set" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V40_wDecoderType_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V40_wDecoderType_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wDecoderType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_wDecoderType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V40_wDecoderType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_wDecoderType_get" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  result =  ((arg1)->wDecoderType);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_wDecoderAddress_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V40_wDecoderAddress_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_wDecoderAddress_set" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V40_wDecoderAddress_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V40_wDecoderAddress_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wDecoderAddress = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_wDecoderAddress_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V40_wDecoderAddress_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_wDecoderAddress_get" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  result =  ((arg1)->wDecoderAddress);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_bySetPreset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V40_bySetPreset_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_bySetPreset_set" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V40_bySetPreset_set" "', argument " "2"" of type '" "BYTE [256]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)256; ++ii) *(BYTE *)&arg1->bySetPreset[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""bySetPreset""' of type '""BYTE [256]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_bySetPreset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V40_bySetPreset_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_bySetPreset_get" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->bySetPreset);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_bySetCruise_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V40_bySetCruise_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_bySetCruise_set" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V40_bySetCruise_set" "', argument " "2"" of type '" "BYTE [256]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)256; ++ii) *(BYTE *)&arg1->bySetCruise[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""bySetCruise""' of type '""BYTE [256]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_bySetCruise_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V40_bySetCruise_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_bySetCruise_get" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->bySetCruise);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_bySetTrack_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V40_bySetTrack_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_bySetTrack_set" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V40_bySetTrack_set" "', argument " "2"" of type '" "BYTE [256]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)256; ++ii) *(BYTE *)&arg1->bySetTrack[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""bySetTrack""' of type '""BYTE [256]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_bySetTrack_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V40_bySetTrack_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_bySetTrack_get" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->bySetTrack);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_bySerialNO_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V40_bySerialNO_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_bySerialNO_set" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V40_bySerialNO_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V40_bySerialNO_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->bySerialNO = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_bySerialNO_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V40_bySerialNO_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_bySerialNO_get" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  result =  ((arg1)->bySerialNO);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_byWorkMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V40_byWorkMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_byWorkMode_set" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V40_byWorkMode_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V40_byWorkMode_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byWorkMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_byWorkMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V40_byWorkMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_byWorkMode_get" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  result =  ((arg1)->byWorkMode);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V40_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V40_byRes_set" "', argument " "2"" of type '" "BYTE [254]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)254; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [254]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V40_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V40_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V40_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_DECODERCFG_V40(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_DECODERCFG_V40")) SWIG_fail;
  result = (tagNET_DVR_DECODERCFG_V40 *)new tagNET_DVR_DECODERCFG_V40();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_DECODERCFG_V40(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_DECODERCFG_V40 *arg1 = (tagNET_DVR_DECODERCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_DECODERCFG_V40",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_DECODERCFG_V40" "', argument " "1"" of type '" "tagNET_DVR_DECODERCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_DECODERCFG_V40 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_DECODERCFG_V40_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_DECODERCFG_V40, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMaxTemperature_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *arg1 = (tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMaxTemperature_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMaxTemperature_set" "', argument " "1"" of type '" "tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMaxTemperature_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->fMaxTemperature = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMaxTemperature_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *arg1 = (tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMaxTemperature_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMaxTemperature_get" "', argument " "1"" of type '" "tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO * >(argp1);
  result = (float) ((arg1)->fMaxTemperature);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMinTemperature_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *arg1 = (tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMinTemperature_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMinTemperature_set" "', argument " "1"" of type '" "tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMinTemperature_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->fMinTemperature = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMinTemperature_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *arg1 = (tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMinTemperature_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMinTemperature_get" "', argument " "1"" of type '" "tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO * >(argp1);
  result = (float) ((arg1)->fMinTemperature);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fAverageTemperature_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *arg1 = (tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fAverageTemperature_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fAverageTemperature_set" "', argument " "1"" of type '" "tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fAverageTemperature_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->fAverageTemperature = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fAverageTemperature_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *arg1 = (tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fAverageTemperature_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fAverageTemperature_get" "', argument " "1"" of type '" "tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO * >(argp1);
  result = (float) ((arg1)->fAverageTemperature);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struHighestPoint_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *arg1 = (tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *) 0 ;
  NET_VCA_POINT *arg2 = (NET_VCA_POINT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struHighestPoint_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struHighestPoint_set" "', argument " "1"" of type '" "tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_tagNET_VCA_POINT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struHighestPoint_set" "', argument " "2"" of type '" "NET_VCA_POINT *""'"); 
  }
  arg2 = reinterpret_cast< NET_VCA_POINT * >(argp2);
  if (arg1) (arg1)->struHighestPoint = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struHighestPoint_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *arg1 = (tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_VCA_POINT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struHighestPoint_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struHighestPoint_get" "', argument " "1"" of type '" "tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO * >(argp1);
  result = (NET_VCA_POINT *)& ((arg1)->struHighestPoint);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_VCA_POINT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struLowestPoint_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *arg1 = (tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *) 0 ;
  NET_VCA_POINT *arg2 = (NET_VCA_POINT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struLowestPoint_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struLowestPoint_set" "', argument " "1"" of type '" "tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_tagNET_VCA_POINT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struLowestPoint_set" "', argument " "2"" of type '" "NET_VCA_POINT *""'"); 
  }
  arg2 = reinterpret_cast< NET_VCA_POINT * >(argp2);
  if (arg1) (arg1)->struLowestPoint = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struLowestPoint_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *arg1 = (tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_VCA_POINT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struLowestPoint_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struLowestPoint_get" "', argument " "1"" of type '" "tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO * >(argp1);
  result = (NET_VCA_POINT *)& ((arg1)->struLowestPoint);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_VCA_POINT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byIsFreezedata_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *arg1 = (tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byIsFreezedata_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byIsFreezedata_set" "', argument " "1"" of type '" "tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byIsFreezedata_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byIsFreezedata_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byIsFreezedata = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byIsFreezedata_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *arg1 = (tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byIsFreezedata_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byIsFreezedata_get" "', argument " "1"" of type '" "tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO * >(argp1);
  result =  ((arg1)->byIsFreezedata);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *arg1 = (tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byRes_set" "', argument " "2"" of type '" "BYTE [15]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)15; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [15]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *arg1 = (tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO")) SWIG_fail;
  result = (tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *)new tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *arg1 = (tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO" "', argument " "1"" of type '" "tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V30_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_dwSize_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V30_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V30_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V30_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_dwSize_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_dwBaudRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V30_dwBaudRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_dwBaudRate_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V30_dwBaudRate_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V30_dwBaudRate_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwBaudRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_dwBaudRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V30_dwBaudRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_dwBaudRate_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  result =  ((arg1)->dwBaudRate);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_byDataBit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V30_byDataBit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_byDataBit_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V30_byDataBit_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V30_byDataBit_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDataBit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_byDataBit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V30_byDataBit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_byDataBit_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  result =  ((arg1)->byDataBit);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_byStopBit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V30_byStopBit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_byStopBit_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V30_byStopBit_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V30_byStopBit_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStopBit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_byStopBit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V30_byStopBit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_byStopBit_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  result =  ((arg1)->byStopBit);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_byParity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V30_byParity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_byParity_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V30_byParity_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V30_byParity_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byParity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_byParity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V30_byParity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_byParity_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  result =  ((arg1)->byParity);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_byFlowcontrol_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V30_byFlowcontrol_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_byFlowcontrol_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V30_byFlowcontrol_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V30_byFlowcontrol_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byFlowcontrol = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_byFlowcontrol_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V30_byFlowcontrol_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_byFlowcontrol_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  result =  ((arg1)->byFlowcontrol);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_wDecoderType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V30_wDecoderType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_wDecoderType_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V30_wDecoderType_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V30_wDecoderType_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wDecoderType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_wDecoderType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V30_wDecoderType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_wDecoderType_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  result =  ((arg1)->wDecoderType);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_wDecoderAddress_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V30_wDecoderAddress_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_wDecoderAddress_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V30_wDecoderAddress_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_V30_wDecoderAddress_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wDecoderAddress = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_wDecoderAddress_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V30_wDecoderAddress_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_wDecoderAddress_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  result =  ((arg1)->wDecoderAddress);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_bySetPreset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V30_bySetPreset_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_bySetPreset_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V30_bySetPreset_set" "', argument " "2"" of type '" "BYTE [256]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)256; ++ii) *(BYTE *)&arg1->bySetPreset[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""bySetPreset""' of type '""BYTE [256]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_bySetPreset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V30_bySetPreset_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_bySetPreset_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->bySetPreset);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_bySetCruise_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V30_bySetCruise_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_bySetCruise_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V30_bySetCruise_set" "', argument " "2"" of type '" "BYTE [256]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)256; ++ii) *(BYTE *)&arg1->bySetCruise[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""bySetCruise""' of type '""BYTE [256]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_bySetCruise_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V30_bySetCruise_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_bySetCruise_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->bySetCruise);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_bySetTrack_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_V30_bySetTrack_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_bySetTrack_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_V30_bySetTrack_set" "', argument " "2"" of type '" "BYTE [256]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)256; ++ii) *(BYTE *)&arg1->bySetTrack[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""bySetTrack""' of type '""BYTE [256]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_V30_bySetTrack_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_V30_bySetTrack_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_V30_bySetTrack_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->bySetTrack);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_DECODERCFG_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_DECODERCFG_V30")) SWIG_fail;
  result = (NET_DVR_DECODERCFG_V30 *)new NET_DVR_DECODERCFG_V30();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_DECODERCFG_V30, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_DECODERCFG_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG_V30 *arg1 = (NET_DVR_DECODERCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_DECODERCFG_V30",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG_V30, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_DECODERCFG_V30" "', argument " "1"" of type '" "NET_DVR_DECODERCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG_V30 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_DECODERCFG_V30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_DECODERCFG_V30, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_dwSize_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_dwSize_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_dwBaudRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_dwBaudRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_dwBaudRate_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_dwBaudRate_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_dwBaudRate_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwBaudRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_dwBaudRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_dwBaudRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_dwBaudRate_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  result =  ((arg1)->dwBaudRate);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_byDataBit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_byDataBit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_byDataBit_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_byDataBit_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_byDataBit_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDataBit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_byDataBit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_byDataBit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_byDataBit_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  result =  ((arg1)->byDataBit);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_byStopBit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_byStopBit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_byStopBit_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_byStopBit_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_byStopBit_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStopBit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_byStopBit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_byStopBit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_byStopBit_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  result =  ((arg1)->byStopBit);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_byParity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_byParity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_byParity_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_byParity_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_byParity_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byParity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_byParity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_byParity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_byParity_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  result =  ((arg1)->byParity);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_byFlowcontrol_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_byFlowcontrol_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_byFlowcontrol_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_byFlowcontrol_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_byFlowcontrol_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byFlowcontrol = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_byFlowcontrol_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_byFlowcontrol_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_byFlowcontrol_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  result =  ((arg1)->byFlowcontrol);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_wDecoderType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_wDecoderType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_wDecoderType_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_wDecoderType_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_wDecoderType_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wDecoderType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_wDecoderType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_wDecoderType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_wDecoderType_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  result =  ((arg1)->wDecoderType);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_wDecoderAddress_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_wDecoderAddress_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_wDecoderAddress_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_wDecoderAddress_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_DECODERCFG_wDecoderAddress_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->wDecoderAddress = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_wDecoderAddress_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_wDecoderAddress_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_wDecoderAddress_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  result =  ((arg1)->wDecoderAddress);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_bySetPreset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_bySetPreset_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_bySetPreset_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_bySetPreset_set" "', argument " "2"" of type '" "BYTE [128]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)128; ++ii) *(BYTE *)&arg1->bySetPreset[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""bySetPreset""' of type '""BYTE [128]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_bySetPreset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_bySetPreset_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_bySetPreset_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->bySetPreset);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_bySetCruise_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_bySetCruise_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_bySetCruise_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_bySetCruise_set" "', argument " "2"" of type '" "BYTE [128]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)128; ++ii) *(BYTE *)&arg1->bySetCruise[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""bySetCruise""' of type '""BYTE [128]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_bySetCruise_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_bySetCruise_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_bySetCruise_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->bySetCruise);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_bySetTrack_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_DECODERCFG_bySetTrack_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_bySetTrack_set" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_DECODERCFG_bySetTrack_set" "', argument " "2"" of type '" "BYTE [128]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)128; ++ii) *(BYTE *)&arg1->bySetTrack[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""bySetTrack""' of type '""BYTE [128]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_DECODERCFG_bySetTrack_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_DECODERCFG_bySetTrack_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_DECODERCFG_bySetTrack_get" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->bySetTrack);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_DECODERCFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_DECODERCFG")) SWIG_fail;
  result = (NET_DVR_DECODERCFG *)new NET_DVR_DECODERCFG();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_DECODERCFG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_DECODERCFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_DECODERCFG *arg1 = (NET_DVR_DECODERCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_DECODERCFG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_DECODERCFG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_DECODERCFG" "', argument " "1"" of type '" "NET_DVR_DECODERCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_DECODERCFG * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_DECODERCFG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_DECODERCFG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_struRemoteIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_V30_struRemoteIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_struRemoteIP_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_V30_struRemoteIP_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struRemoteIP = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_struRemoteIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_V30_struRemoteIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_struRemoteIP_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struRemoteIP);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_struLocalIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  NET_DVR_IPADDR *arg2 = (NET_DVR_IPADDR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_V30_struLocalIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_struLocalIP_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_V30_struLocalIP_set" "', argument " "2"" of type '" "NET_DVR_IPADDR *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_IPADDR * >(argp2);
  if (arg1) (arg1)->struLocalIP = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_struLocalIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_IPADDR *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_V30_struLocalIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_struLocalIP_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  result = (NET_DVR_IPADDR *)& ((arg1)->struLocalIP);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_IPADDR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_sLocalIPMask_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_V30_sLocalIPMask_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_sLocalIPMask_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_V30_sLocalIPMask_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sLocalIPMask,arg2,16*sizeof(char));
  else memset(arg1->sLocalIPMask,0,16*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_sLocalIPMask_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_V30_sLocalIPMask_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_sLocalIPMask_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  result = (char *)(char *) ((arg1)->sLocalIPMask);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_sUsername_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_V30_sUsername_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_sUsername_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_V30_sUsername_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->sUsername[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sUsername""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_sUsername_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_V30_sUsername_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_sUsername_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->sUsername);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_sPassword_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_V30_sPassword_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_sPassword_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_V30_sPassword_set" "', argument " "2"" of type '" "BYTE [16]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) *(BYTE *)&arg1->sPassword[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sPassword""' of type '""BYTE [16]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_sPassword_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_V30_sPassword_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_sPassword_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->sPassword);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_byPPPMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_V30_byPPPMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_byPPPMode_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_V30_byPPPMode_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PPPCFG_V30_byPPPMode_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byPPPMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_byPPPMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_V30_byPPPMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_byPPPMode_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  result =  ((arg1)->byPPPMode);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_byRedial_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_V30_byRedial_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_byRedial_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_V30_byRedial_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PPPCFG_V30_byRedial_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRedial = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_byRedial_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_V30_byRedial_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_byRedial_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  result =  ((arg1)->byRedial);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_byRedialMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_V30_byRedialMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_byRedialMode_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_V30_byRedialMode_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PPPCFG_V30_byRedialMode_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRedialMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_byRedialMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_V30_byRedialMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_byRedialMode_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  result =  ((arg1)->byRedialMode);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_byDataEncrypt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_V30_byDataEncrypt_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_byDataEncrypt_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_V30_byDataEncrypt_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PPPCFG_V30_byDataEncrypt_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDataEncrypt = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_byDataEncrypt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_V30_byDataEncrypt_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_byDataEncrypt_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  result =  ((arg1)->byDataEncrypt);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_dwMTU_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_V30_dwMTU_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_dwMTU_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_V30_dwMTU_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PPPCFG_V30_dwMTU_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwMTU = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_dwMTU_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_V30_dwMTU_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_dwMTU_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  result =  ((arg1)->dwMTU);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_sTelephoneNumber_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_V30_sTelephoneNumber_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_sTelephoneNumber_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_V30_sTelephoneNumber_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sTelephoneNumber,arg2,32*sizeof(char));
  else memset(arg1->sTelephoneNumber,0,32*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_V30_sTelephoneNumber_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_V30_sTelephoneNumber_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_V30_sTelephoneNumber_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  result = (char *)(char *) ((arg1)->sTelephoneNumber);
  {
    size_t size = SWIG_strnlen(result, 32);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_PPPCFG_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_PPPCFG_V30")) SWIG_fail;
  result = (NET_DVR_PPPCFG_V30 *)new NET_DVR_PPPCFG_V30();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PPPCFG_V30, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_PPPCFG_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG_V30 *arg1 = (NET_DVR_PPPCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_PPPCFG_V30",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG_V30, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_PPPCFG_V30" "', argument " "1"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_PPPCFG_V30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_PPPCFG_V30, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_sRemoteIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_sRemoteIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_sRemoteIP_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_sRemoteIP_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sRemoteIP,arg2,16*sizeof(char));
  else memset(arg1->sRemoteIP,0,16*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_sRemoteIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_sRemoteIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_sRemoteIP_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  result = (char *)(char *) ((arg1)->sRemoteIP);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_sLocalIP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_sLocalIP_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_sLocalIP_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_sLocalIP_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sLocalIP,arg2,16*sizeof(char));
  else memset(arg1->sLocalIP,0,16*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_sLocalIP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_sLocalIP_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_sLocalIP_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  result = (char *)(char *) ((arg1)->sLocalIP);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_sLocalIPMask_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_sLocalIPMask_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_sLocalIPMask_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_sLocalIPMask_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sLocalIPMask,arg2,16*sizeof(char));
  else memset(arg1->sLocalIPMask,0,16*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_sLocalIPMask_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_sLocalIPMask_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_sLocalIPMask_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  result = (char *)(char *) ((arg1)->sLocalIPMask);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_sUsername_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_sUsername_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_sUsername_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_sUsername_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->sUsername[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sUsername""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_sUsername_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_sUsername_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_sUsername_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->sUsername);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_sPassword_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_sPassword_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_sPassword_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_sPassword_set" "', argument " "2"" of type '" "BYTE [16]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) *(BYTE *)&arg1->sPassword[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sPassword""' of type '""BYTE [16]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_sPassword_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_sPassword_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_sPassword_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->sPassword);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_byPPPMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_byPPPMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_byPPPMode_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_byPPPMode_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PPPCFG_byPPPMode_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byPPPMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_byPPPMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_byPPPMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_byPPPMode_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  result =  ((arg1)->byPPPMode);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_byRedial_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_byRedial_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_byRedial_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_byRedial_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PPPCFG_byRedial_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRedial = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_byRedial_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_byRedial_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_byRedial_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  result =  ((arg1)->byRedial);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_byRedialMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_byRedialMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_byRedialMode_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_byRedialMode_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PPPCFG_byRedialMode_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byRedialMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_byRedialMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_byRedialMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_byRedialMode_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  result =  ((arg1)->byRedialMode);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_byDataEncrypt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_byDataEncrypt_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_byDataEncrypt_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_byDataEncrypt_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PPPCFG_byDataEncrypt_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDataEncrypt = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_byDataEncrypt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_byDataEncrypt_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_byDataEncrypt_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  result =  ((arg1)->byDataEncrypt);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_dwMTU_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_dwMTU_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_dwMTU_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_dwMTU_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PPPCFG_dwMTU_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwMTU = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_dwMTU_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_dwMTU_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_dwMTU_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  result =  ((arg1)->dwMTU);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_sTelephoneNumber_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PPPCFG_sTelephoneNumber_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_sTelephoneNumber_set" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PPPCFG_sTelephoneNumber_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->sTelephoneNumber,arg2,32*sizeof(char));
  else memset(arg1->sTelephoneNumber,0,32*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PPPCFG_sTelephoneNumber_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PPPCFG_sTelephoneNumber_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PPPCFG_sTelephoneNumber_get" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  result = (char *)(char *) ((arg1)->sTelephoneNumber);
  {
    size_t size = SWIG_strnlen(result, 32);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_PPPCFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_PPPCFG")) SWIG_fail;
  result = (NET_DVR_PPPCFG *)new NET_DVR_PPPCFG();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PPPCFG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_PPPCFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PPPCFG *arg1 = (NET_DVR_PPPCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_PPPCFG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PPPCFG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_PPPCFG" "', argument " "1"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PPPCFG * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_PPPCFG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_PPPCFG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_SINGLE_RS232_dwBaudRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SINGLE_RS232 *arg1 = (NET_DVR_SINGLE_RS232 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SINGLE_RS232_dwBaudRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SINGLE_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SINGLE_RS232_dwBaudRate_set" "', argument " "1"" of type '" "NET_DVR_SINGLE_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SINGLE_RS232 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SINGLE_RS232_dwBaudRate_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SINGLE_RS232_dwBaudRate_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwBaudRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SINGLE_RS232_dwBaudRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SINGLE_RS232 *arg1 = (NET_DVR_SINGLE_RS232 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SINGLE_RS232_dwBaudRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SINGLE_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SINGLE_RS232_dwBaudRate_get" "', argument " "1"" of type '" "NET_DVR_SINGLE_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SINGLE_RS232 * >(argp1);
  result =  ((arg1)->dwBaudRate);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SINGLE_RS232_byDataBit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SINGLE_RS232 *arg1 = (NET_DVR_SINGLE_RS232 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SINGLE_RS232_byDataBit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SINGLE_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SINGLE_RS232_byDataBit_set" "', argument " "1"" of type '" "NET_DVR_SINGLE_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SINGLE_RS232 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SINGLE_RS232_byDataBit_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SINGLE_RS232_byDataBit_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDataBit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SINGLE_RS232_byDataBit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SINGLE_RS232 *arg1 = (NET_DVR_SINGLE_RS232 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SINGLE_RS232_byDataBit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SINGLE_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SINGLE_RS232_byDataBit_get" "', argument " "1"" of type '" "NET_DVR_SINGLE_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SINGLE_RS232 * >(argp1);
  result =  ((arg1)->byDataBit);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SINGLE_RS232_byStopBit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SINGLE_RS232 *arg1 = (NET_DVR_SINGLE_RS232 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SINGLE_RS232_byStopBit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SINGLE_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SINGLE_RS232_byStopBit_set" "', argument " "1"" of type '" "NET_DVR_SINGLE_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SINGLE_RS232 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SINGLE_RS232_byStopBit_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SINGLE_RS232_byStopBit_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStopBit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SINGLE_RS232_byStopBit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SINGLE_RS232 *arg1 = (NET_DVR_SINGLE_RS232 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SINGLE_RS232_byStopBit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SINGLE_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SINGLE_RS232_byStopBit_get" "', argument " "1"" of type '" "NET_DVR_SINGLE_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SINGLE_RS232 * >(argp1);
  result =  ((arg1)->byStopBit);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SINGLE_RS232_byParity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SINGLE_RS232 *arg1 = (NET_DVR_SINGLE_RS232 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SINGLE_RS232_byParity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SINGLE_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SINGLE_RS232_byParity_set" "', argument " "1"" of type '" "NET_DVR_SINGLE_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SINGLE_RS232 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SINGLE_RS232_byParity_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SINGLE_RS232_byParity_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byParity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SINGLE_RS232_byParity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SINGLE_RS232 *arg1 = (NET_DVR_SINGLE_RS232 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SINGLE_RS232_byParity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SINGLE_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SINGLE_RS232_byParity_get" "', argument " "1"" of type '" "NET_DVR_SINGLE_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SINGLE_RS232 * >(argp1);
  result =  ((arg1)->byParity);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SINGLE_RS232_byFlowcontrol_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SINGLE_RS232 *arg1 = (NET_DVR_SINGLE_RS232 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SINGLE_RS232_byFlowcontrol_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SINGLE_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SINGLE_RS232_byFlowcontrol_set" "', argument " "1"" of type '" "NET_DVR_SINGLE_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SINGLE_RS232 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SINGLE_RS232_byFlowcontrol_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SINGLE_RS232_byFlowcontrol_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byFlowcontrol = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SINGLE_RS232_byFlowcontrol_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SINGLE_RS232 *arg1 = (NET_DVR_SINGLE_RS232 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SINGLE_RS232_byFlowcontrol_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SINGLE_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SINGLE_RS232_byFlowcontrol_get" "', argument " "1"" of type '" "NET_DVR_SINGLE_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SINGLE_RS232 * >(argp1);
  result =  ((arg1)->byFlowcontrol);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SINGLE_RS232_dwWorkMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SINGLE_RS232 *arg1 = (NET_DVR_SINGLE_RS232 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_SINGLE_RS232_dwWorkMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SINGLE_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SINGLE_RS232_dwWorkMode_set" "', argument " "1"" of type '" "NET_DVR_SINGLE_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SINGLE_RS232 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_SINGLE_RS232_dwWorkMode_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_SINGLE_RS232_dwWorkMode_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwWorkMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_SINGLE_RS232_dwWorkMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SINGLE_RS232 *arg1 = (NET_DVR_SINGLE_RS232 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_SINGLE_RS232_dwWorkMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SINGLE_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_SINGLE_RS232_dwWorkMode_get" "', argument " "1"" of type '" "NET_DVR_SINGLE_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SINGLE_RS232 * >(argp1);
  result =  ((arg1)->dwWorkMode);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_SINGLE_RS232(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SINGLE_RS232 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_SINGLE_RS232")) SWIG_fail;
  result = (NET_DVR_SINGLE_RS232 *)new NET_DVR_SINGLE_RS232();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_SINGLE_RS232, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_SINGLE_RS232(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_SINGLE_RS232 *arg1 = (NET_DVR_SINGLE_RS232 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_SINGLE_RS232",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_SINGLE_RS232, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_SINGLE_RS232" "', argument " "1"" of type '" "NET_DVR_SINGLE_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_SINGLE_RS232 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_SINGLE_RS232_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_SINGLE_RS232, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_USB_RS232_dwBaudRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_USB_RS232 *arg1 = (tagNET_DVR_USB_RS232 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_USB_RS232_dwBaudRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_USB_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_USB_RS232_dwBaudRate_set" "', argument " "1"" of type '" "tagNET_DVR_USB_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_USB_RS232 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_USB_RS232_dwBaudRate_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_USB_RS232_dwBaudRate_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwBaudRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_USB_RS232_dwBaudRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_USB_RS232 *arg1 = (tagNET_DVR_USB_RS232 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_USB_RS232_dwBaudRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_USB_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_USB_RS232_dwBaudRate_get" "', argument " "1"" of type '" "tagNET_DVR_USB_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_USB_RS232 * >(argp1);
  result =  ((arg1)->dwBaudRate);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_USB_RS232_byDataBit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_USB_RS232 *arg1 = (tagNET_DVR_USB_RS232 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_USB_RS232_byDataBit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_USB_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_USB_RS232_byDataBit_set" "', argument " "1"" of type '" "tagNET_DVR_USB_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_USB_RS232 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_USB_RS232_byDataBit_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_USB_RS232_byDataBit_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDataBit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_USB_RS232_byDataBit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_USB_RS232 *arg1 = (tagNET_DVR_USB_RS232 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_USB_RS232_byDataBit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_USB_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_USB_RS232_byDataBit_get" "', argument " "1"" of type '" "tagNET_DVR_USB_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_USB_RS232 * >(argp1);
  result =  ((arg1)->byDataBit);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_USB_RS232_byStopBit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_USB_RS232 *arg1 = (tagNET_DVR_USB_RS232 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_USB_RS232_byStopBit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_USB_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_USB_RS232_byStopBit_set" "', argument " "1"" of type '" "tagNET_DVR_USB_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_USB_RS232 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_USB_RS232_byStopBit_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_USB_RS232_byStopBit_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStopBit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_USB_RS232_byStopBit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_USB_RS232 *arg1 = (tagNET_DVR_USB_RS232 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_USB_RS232_byStopBit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_USB_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_USB_RS232_byStopBit_get" "', argument " "1"" of type '" "tagNET_DVR_USB_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_USB_RS232 * >(argp1);
  result =  ((arg1)->byStopBit);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_USB_RS232_byParity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_USB_RS232 *arg1 = (tagNET_DVR_USB_RS232 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_USB_RS232_byParity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_USB_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_USB_RS232_byParity_set" "', argument " "1"" of type '" "tagNET_DVR_USB_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_USB_RS232 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_USB_RS232_byParity_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_USB_RS232_byParity_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byParity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_USB_RS232_byParity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_USB_RS232 *arg1 = (tagNET_DVR_USB_RS232 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_USB_RS232_byParity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_USB_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_USB_RS232_byParity_get" "', argument " "1"" of type '" "tagNET_DVR_USB_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_USB_RS232 * >(argp1);
  result =  ((arg1)->byParity);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_USB_RS232_byFlowcontrol_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_USB_RS232 *arg1 = (tagNET_DVR_USB_RS232 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_USB_RS232_byFlowcontrol_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_USB_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_USB_RS232_byFlowcontrol_set" "', argument " "1"" of type '" "tagNET_DVR_USB_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_USB_RS232 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_USB_RS232_byFlowcontrol_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_USB_RS232_byFlowcontrol_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byFlowcontrol = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_USB_RS232_byFlowcontrol_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_USB_RS232 *arg1 = (tagNET_DVR_USB_RS232 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_USB_RS232_byFlowcontrol_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_USB_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_USB_RS232_byFlowcontrol_get" "', argument " "1"" of type '" "tagNET_DVR_USB_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_USB_RS232 * >(argp1);
  result =  ((arg1)->byFlowcontrol);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_USB_RS232_byVirtualSerialPort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_USB_RS232 *arg1 = (tagNET_DVR_USB_RS232 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_USB_RS232_byVirtualSerialPort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_USB_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_USB_RS232_byVirtualSerialPort_set" "', argument " "1"" of type '" "tagNET_DVR_USB_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_USB_RS232 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_USB_RS232_byVirtualSerialPort_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_USB_RS232_byVirtualSerialPort_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byVirtualSerialPort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_USB_RS232_byVirtualSerialPort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_USB_RS232 *arg1 = (tagNET_DVR_USB_RS232 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_USB_RS232_byVirtualSerialPort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_USB_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_USB_RS232_byVirtualSerialPort_get" "', argument " "1"" of type '" "tagNET_DVR_USB_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_USB_RS232 * >(argp1);
  result =  ((arg1)->byVirtualSerialPort);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_USB_RS232_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_USB_RS232 *arg1 = (tagNET_DVR_USB_RS232 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_USB_RS232_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_USB_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_USB_RS232_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_USB_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_USB_RS232 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_USB_RS232_byRes_set" "', argument " "2"" of type '" "BYTE [3]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)3; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [3]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_USB_RS232_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_USB_RS232 *arg1 = (tagNET_DVR_USB_RS232 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_USB_RS232_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_USB_RS232, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_USB_RS232_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_USB_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_USB_RS232 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_USB_RS232(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_USB_RS232 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_USB_RS232")) SWIG_fail;
  result = (tagNET_DVR_USB_RS232 *)new tagNET_DVR_USB_RS232();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_USB_RS232, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_USB_RS232(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_USB_RS232 *arg1 = (tagNET_DVR_USB_RS232 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_USB_RS232",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_USB_RS232, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_USB_RS232" "', argument " "1"" of type '" "tagNET_DVR_USB_RS232 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_USB_RS232 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_USB_RS232_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_USB_RS232, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_V30_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG_V30 *arg1 = (NET_DVR_RS232CFG_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RS232CFG_V30_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_V30_dwSize_set" "', argument " "1"" of type '" "NET_DVR_RS232CFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RS232CFG_V30_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RS232CFG_V30_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_V30_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG_V30 *arg1 = (NET_DVR_RS232CFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RS232CFG_V30_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_V30_dwSize_get" "', argument " "1"" of type '" "NET_DVR_RS232CFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG_V30 * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_V30_struRs232_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG_V30 *arg1 = (NET_DVR_RS232CFG_V30 *) 0 ;
  NET_DVR_SINGLE_RS232 *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RS232CFG_V30_struRs232_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_V30_struRs232_set" "', argument " "1"" of type '" "NET_DVR_RS232CFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_SINGLE_RS232, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RS232CFG_V30_struRs232_set" "', argument " "2"" of type '" "NET_DVR_SINGLE_RS232 [8]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_SINGLE_RS232 * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)8; ++ii) *(NET_DVR_SINGLE_RS232 *)&arg1->struRs232[ii] = *((NET_DVR_SINGLE_RS232 *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struRs232""' of type '""NET_DVR_SINGLE_RS232 [8]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_V30_struRs232_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG_V30 *arg1 = (NET_DVR_RS232CFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_SINGLE_RS232 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RS232CFG_V30_struRs232_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_V30_struRs232_get" "', argument " "1"" of type '" "NET_DVR_RS232CFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG_V30 * >(argp1);
  result = (NET_DVR_SINGLE_RS232 *)(NET_DVR_SINGLE_RS232 *) ((arg1)->struRs232);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_SINGLE_RS232, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_V30_struPPPConfig_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG_V30 *arg1 = (NET_DVR_RS232CFG_V30 *) 0 ;
  NET_DVR_PPPCFG_V30 *arg2 = (NET_DVR_PPPCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RS232CFG_V30_struPPPConfig_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_V30_struPPPConfig_set" "', argument " "1"" of type '" "NET_DVR_RS232CFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RS232CFG_V30_struPPPConfig_set" "', argument " "2"" of type '" "NET_DVR_PPPCFG_V30 *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_PPPCFG_V30 * >(argp2);
  if (arg1) (arg1)->struPPPConfig = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_V30_struPPPConfig_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG_V30 *arg1 = (NET_DVR_RS232CFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_PPPCFG_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RS232CFG_V30_struPPPConfig_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_V30_struPPPConfig_get" "', argument " "1"" of type '" "NET_DVR_RS232CFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG_V30 * >(argp1);
  result = (NET_DVR_PPPCFG_V30 *)& ((arg1)->struPPPConfig);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PPPCFG_V30, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_RS232CFG_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_RS232CFG_V30")) SWIG_fail;
  result = (NET_DVR_RS232CFG_V30 *)new NET_DVR_RS232CFG_V30();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_RS232CFG_V30, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_RS232CFG_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG_V30 *arg1 = (NET_DVR_RS232CFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_RS232CFG_V30",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG_V30, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_RS232CFG_V30" "', argument " "1"" of type '" "NET_DVR_RS232CFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG_V30 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_RS232CFG_V30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_RS232CFG_V30, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RS232CFG_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_dwSize_set" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RS232CFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RS232CFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RS232CFG_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_dwSize_get" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_dwBaudRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RS232CFG_dwBaudRate_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_dwBaudRate_set" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RS232CFG_dwBaudRate_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RS232CFG_dwBaudRate_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwBaudRate = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_dwBaudRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RS232CFG_dwBaudRate_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_dwBaudRate_get" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  result =  ((arg1)->dwBaudRate);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_byDataBit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RS232CFG_byDataBit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_byDataBit_set" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RS232CFG_byDataBit_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RS232CFG_byDataBit_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byDataBit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_byDataBit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RS232CFG_byDataBit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_byDataBit_get" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  result =  ((arg1)->byDataBit);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_byStopBit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RS232CFG_byStopBit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_byStopBit_set" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RS232CFG_byStopBit_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RS232CFG_byStopBit_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byStopBit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_byStopBit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RS232CFG_byStopBit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_byStopBit_get" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  result =  ((arg1)->byStopBit);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_byParity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RS232CFG_byParity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_byParity_set" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RS232CFG_byParity_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RS232CFG_byParity_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byParity = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_byParity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RS232CFG_byParity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_byParity_get" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  result =  ((arg1)->byParity);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_byFlowcontrol_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RS232CFG_byFlowcontrol_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_byFlowcontrol_set" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RS232CFG_byFlowcontrol_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RS232CFG_byFlowcontrol_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byFlowcontrol = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_byFlowcontrol_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RS232CFG_byFlowcontrol_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_byFlowcontrol_get" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  result =  ((arg1)->byFlowcontrol);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_dwWorkMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RS232CFG_dwWorkMode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_dwWorkMode_set" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RS232CFG_dwWorkMode_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_RS232CFG_dwWorkMode_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwWorkMode = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_dwWorkMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RS232CFG_dwWorkMode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_dwWorkMode_get" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  result =  ((arg1)->dwWorkMode);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_struPPPConfig_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  NET_DVR_PPPCFG *arg2 = (NET_DVR_PPPCFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_RS232CFG_struPPPConfig_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_struPPPConfig_set" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_RS232CFG_struPPPConfig_set" "', argument " "2"" of type '" "NET_DVR_PPPCFG *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_PPPCFG * >(argp2);
  if (arg1) (arg1)->struPPPConfig = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_RS232CFG_struPPPConfig_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_PPPCFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_RS232CFG_struPPPConfig_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_RS232CFG_struPPPConfig_get" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  result = (NET_DVR_PPPCFG *)& ((arg1)->struPPPConfig);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PPPCFG, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_RS232CFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_RS232CFG")) SWIG_fail;
  result = (NET_DVR_RS232CFG *)new NET_DVR_RS232CFG();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_RS232CFG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_RS232CFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_RS232CFG *arg1 = (NET_DVR_RS232CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_RS232CFG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_RS232CFG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_RS232CFG" "', argument " "1"" of type '" "NET_DVR_RS232CFG *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_RS232CFG * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_RS232CFG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_RS232CFG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_PRESETCHAN_INFO_dwEnablePresetChan_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PRESETCHAN_INFO *arg1 = (NET_DVR_PRESETCHAN_INFO *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PRESETCHAN_INFO_dwEnablePresetChan_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PRESETCHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PRESETCHAN_INFO_dwEnablePresetChan_set" "', argument " "1"" of type '" "NET_DVR_PRESETCHAN_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PRESETCHAN_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PRESETCHAN_INFO_dwEnablePresetChan_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PRESETCHAN_INFO_dwEnablePresetChan_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnablePresetChan = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PRESETCHAN_INFO_dwEnablePresetChan_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PRESETCHAN_INFO *arg1 = (NET_DVR_PRESETCHAN_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PRESETCHAN_INFO_dwEnablePresetChan_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PRESETCHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PRESETCHAN_INFO_dwEnablePresetChan_get" "', argument " "1"" of type '" "NET_DVR_PRESETCHAN_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PRESETCHAN_INFO * >(argp1);
  result =  ((arg1)->dwEnablePresetChan);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PRESETCHAN_INFO_dwPresetPointNo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PRESETCHAN_INFO *arg1 = (NET_DVR_PRESETCHAN_INFO *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PRESETCHAN_INFO_dwPresetPointNo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PRESETCHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PRESETCHAN_INFO_dwPresetPointNo_set" "', argument " "1"" of type '" "NET_DVR_PRESETCHAN_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PRESETCHAN_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PRESETCHAN_INFO_dwPresetPointNo_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PRESETCHAN_INFO_dwPresetPointNo_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwPresetPointNo = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PRESETCHAN_INFO_dwPresetPointNo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PRESETCHAN_INFO *arg1 = (NET_DVR_PRESETCHAN_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PRESETCHAN_INFO_dwPresetPointNo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PRESETCHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PRESETCHAN_INFO_dwPresetPointNo_get" "', argument " "1"" of type '" "NET_DVR_PRESETCHAN_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PRESETCHAN_INFO * >(argp1);
  result =  ((arg1)->dwPresetPointNo);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_PRESETCHAN_INFO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PRESETCHAN_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_PRESETCHAN_INFO")) SWIG_fail;
  result = (NET_DVR_PRESETCHAN_INFO *)new NET_DVR_PRESETCHAN_INFO();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PRESETCHAN_INFO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_PRESETCHAN_INFO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PRESETCHAN_INFO *arg1 = (NET_DVR_PRESETCHAN_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_PRESETCHAN_INFO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PRESETCHAN_INFO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_PRESETCHAN_INFO" "', argument " "1"" of type '" "NET_DVR_PRESETCHAN_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PRESETCHAN_INFO * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_PRESETCHAN_INFO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_PRESETCHAN_INFO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_CRUISECHAN_INFO_dwEnableCruiseChan_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_CRUISECHAN_INFO *arg1 = (NET_DVR_CRUISECHAN_INFO *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_CRUISECHAN_INFO_dwEnableCruiseChan_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_CRUISECHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_CRUISECHAN_INFO_dwEnableCruiseChan_set" "', argument " "1"" of type '" "NET_DVR_CRUISECHAN_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_CRUISECHAN_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_CRUISECHAN_INFO_dwEnableCruiseChan_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_CRUISECHAN_INFO_dwEnableCruiseChan_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnableCruiseChan = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_CRUISECHAN_INFO_dwEnableCruiseChan_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_CRUISECHAN_INFO *arg1 = (NET_DVR_CRUISECHAN_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_CRUISECHAN_INFO_dwEnableCruiseChan_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_CRUISECHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_CRUISECHAN_INFO_dwEnableCruiseChan_get" "', argument " "1"" of type '" "NET_DVR_CRUISECHAN_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_CRUISECHAN_INFO * >(argp1);
  result =  ((arg1)->dwEnableCruiseChan);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_CRUISECHAN_INFO_dwCruiseNo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_CRUISECHAN_INFO *arg1 = (NET_DVR_CRUISECHAN_INFO *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_CRUISECHAN_INFO_dwCruiseNo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_CRUISECHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_CRUISECHAN_INFO_dwCruiseNo_set" "', argument " "1"" of type '" "NET_DVR_CRUISECHAN_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_CRUISECHAN_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_CRUISECHAN_INFO_dwCruiseNo_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_CRUISECHAN_INFO_dwCruiseNo_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwCruiseNo = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_CRUISECHAN_INFO_dwCruiseNo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_CRUISECHAN_INFO *arg1 = (NET_DVR_CRUISECHAN_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_CRUISECHAN_INFO_dwCruiseNo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_CRUISECHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_CRUISECHAN_INFO_dwCruiseNo_get" "', argument " "1"" of type '" "NET_DVR_CRUISECHAN_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_CRUISECHAN_INFO * >(argp1);
  result =  ((arg1)->dwCruiseNo);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_CRUISECHAN_INFO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_CRUISECHAN_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_CRUISECHAN_INFO")) SWIG_fail;
  result = (NET_DVR_CRUISECHAN_INFO *)new NET_DVR_CRUISECHAN_INFO();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_CRUISECHAN_INFO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_CRUISECHAN_INFO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_CRUISECHAN_INFO *arg1 = (NET_DVR_CRUISECHAN_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_CRUISECHAN_INFO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_CRUISECHAN_INFO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_CRUISECHAN_INFO" "', argument " "1"" of type '" "NET_DVR_CRUISECHAN_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_CRUISECHAN_INFO * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_CRUISECHAN_INFO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_CRUISECHAN_INFO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_PTZTRACKCHAN_INFO_dwEnablePtzTrackChan_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZTRACKCHAN_INFO *arg1 = (NET_DVR_PTZTRACKCHAN_INFO *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZTRACKCHAN_INFO_dwEnablePtzTrackChan_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZTRACKCHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZTRACKCHAN_INFO_dwEnablePtzTrackChan_set" "', argument " "1"" of type '" "NET_DVR_PTZTRACKCHAN_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZTRACKCHAN_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZTRACKCHAN_INFO_dwEnablePtzTrackChan_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZTRACKCHAN_INFO_dwEnablePtzTrackChan_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnablePtzTrackChan = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZTRACKCHAN_INFO_dwEnablePtzTrackChan_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZTRACKCHAN_INFO *arg1 = (NET_DVR_PTZTRACKCHAN_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZTRACKCHAN_INFO_dwEnablePtzTrackChan_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZTRACKCHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZTRACKCHAN_INFO_dwEnablePtzTrackChan_get" "', argument " "1"" of type '" "NET_DVR_PTZTRACKCHAN_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZTRACKCHAN_INFO * >(argp1);
  result =  ((arg1)->dwEnablePtzTrackChan);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZTRACKCHAN_INFO_dwPtzTrackNo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZTRACKCHAN_INFO *arg1 = (NET_DVR_PTZTRACKCHAN_INFO *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZTRACKCHAN_INFO_dwPtzTrackNo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZTRACKCHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZTRACKCHAN_INFO_dwPtzTrackNo_set" "', argument " "1"" of type '" "NET_DVR_PTZTRACKCHAN_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZTRACKCHAN_INFO * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZTRACKCHAN_INFO_dwPtzTrackNo_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZTRACKCHAN_INFO_dwPtzTrackNo_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwPtzTrackNo = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZTRACKCHAN_INFO_dwPtzTrackNo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZTRACKCHAN_INFO *arg1 = (NET_DVR_PTZTRACKCHAN_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZTRACKCHAN_INFO_dwPtzTrackNo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZTRACKCHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZTRACKCHAN_INFO_dwPtzTrackNo_get" "', argument " "1"" of type '" "NET_DVR_PTZTRACKCHAN_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZTRACKCHAN_INFO * >(argp1);
  result =  ((arg1)->dwPtzTrackNo);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_PTZTRACKCHAN_INFO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZTRACKCHAN_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_PTZTRACKCHAN_INFO")) SWIG_fail;
  result = (NET_DVR_PTZTRACKCHAN_INFO *)new NET_DVR_PTZTRACKCHAN_INFO();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PTZTRACKCHAN_INFO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_PTZTRACKCHAN_INFO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_PTZTRACKCHAN_INFO *arg1 = (NET_DVR_PTZTRACKCHAN_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_PTZTRACKCHAN_INFO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_PTZTRACKCHAN_INFO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_PTZTRACKCHAN_INFO" "', argument " "1"" of type '" "NET_DVR_PTZTRACKCHAN_INFO *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_PTZTRACKCHAN_INFO * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_PTZTRACKCHAN_INFO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_PTZTRACKCHAN_INFO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_COND_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_COND *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_COND *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_COND_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_dwSize_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_COND * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_COND_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_COND *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_COND_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_dwSize_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_COND * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_COND_byEventType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_COND *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_COND *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_COND_byEventType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_byEventType_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_COND * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_byEventType_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_byEventType_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEventType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_COND_byEventType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_COND *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_COND_byEventType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_byEventType_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_COND * >(argp1);
  result =  ((arg1)->byEventType);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_COND_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_COND *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_COND *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_COND_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_COND * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_byRes_set" "', argument " "2"" of type '" "BYTE [2]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [2]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_COND_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_COND *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_COND_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_COND * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_COND_dwChannel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_COND *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_COND *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_COND_dwChannel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_dwChannel_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_COND * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_dwChannel_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_dwChannel_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwChannel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_COND_dwChannel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_COND *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_COND_dwChannel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_dwChannel_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_COND * >(argp1);
  result =  ((arg1)->dwChannel);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_COND_byRes1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_COND *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_COND *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_COND_byRes1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_byRes1_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_COND * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_byRes1_set" "', argument " "2"" of type '" "BYTE [128]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)128; ++ii) *(BYTE *)&arg1->byRes1[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes1""' of type '""BYTE [128]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_COND_byRes1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_COND *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_COND_byRes1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_COND, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_COND_byRes1_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_COND * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_PTZ_NOTIFICATION_COND(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_COND *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_PTZ_NOTIFICATION_COND")) SWIG_fail;
  result = (tagNET_DVR_PTZ_NOTIFICATION_COND *)new tagNET_DVR_PTZ_NOTIFICATION_COND();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_COND, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_PTZ_NOTIFICATION_COND(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_COND *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_COND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_PTZ_NOTIFICATION_COND",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_COND, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_PTZ_NOTIFICATION_COND" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_COND *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_COND * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_PTZ_NOTIFICATION_COND_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_COND, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_CFG_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_CFG_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_dwSize_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_CFG_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_CFG_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_dwSize_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePresetChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePresetChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePresetChanNum_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePresetChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePresetChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnablePresetChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePresetChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePresetChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePresetChanNum_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  result =  ((arg1)->dwEnablePresetChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_CFG_struPresetChanInfo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  NET_DVR_PRESETCHAN_INFO *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_CFG_struPresetChanInfo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_struPresetChanInfo_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_PRESETCHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_struPresetChanInfo_set" "', argument " "2"" of type '" "NET_DVR_PRESETCHAN_INFO [512]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_PRESETCHAN_INFO * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)512; ++ii) *(NET_DVR_PRESETCHAN_INFO *)&arg1->struPresetChanInfo[ii] = *((NET_DVR_PRESETCHAN_INFO *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struPresetChanInfo""' of type '""NET_DVR_PRESETCHAN_INFO [512]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_CFG_struPresetChanInfo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_PRESETCHAN_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_CFG_struPresetChanInfo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_struPresetChanInfo_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  result = (NET_DVR_PRESETCHAN_INFO *)(NET_DVR_PRESETCHAN_INFO *) ((arg1)->struPresetChanInfo);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PRESETCHAN_INFO, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_CFG_dwEnableCruiseChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_CFG_dwEnableCruiseChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_dwEnableCruiseChanNum_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_dwEnableCruiseChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_dwEnableCruiseChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnableCruiseChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_CFG_dwEnableCruiseChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_CFG_dwEnableCruiseChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_dwEnableCruiseChanNum_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  result =  ((arg1)->dwEnableCruiseChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_CFG_struCruiseChanInfo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  NET_DVR_CRUISECHAN_INFO *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_CFG_struCruiseChanInfo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_struCruiseChanInfo_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_CRUISECHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_struCruiseChanInfo_set" "', argument " "2"" of type '" "NET_DVR_CRUISECHAN_INFO [512]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_CRUISECHAN_INFO * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)512; ++ii) *(NET_DVR_CRUISECHAN_INFO *)&arg1->struCruiseChanInfo[ii] = *((NET_DVR_CRUISECHAN_INFO *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struCruiseChanInfo""' of type '""NET_DVR_CRUISECHAN_INFO [512]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_CFG_struCruiseChanInfo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_CRUISECHAN_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_CFG_struCruiseChanInfo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_struCruiseChanInfo_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  result = (NET_DVR_CRUISECHAN_INFO *)(NET_DVR_CRUISECHAN_INFO *) ((arg1)->struCruiseChanInfo);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_CRUISECHAN_INFO, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePtzTrackChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePtzTrackChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePtzTrackChanNum_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePtzTrackChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePtzTrackChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnablePtzTrackChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePtzTrackChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePtzTrackChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePtzTrackChanNum_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  result =  ((arg1)->dwEnablePtzTrackChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_CFG_struPtzTrackInfo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  NET_DVR_PTZTRACKCHAN_INFO *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_CFG_struPtzTrackInfo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_struPtzTrackInfo_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_PTZTRACKCHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_struPtzTrackInfo_set" "', argument " "2"" of type '" "NET_DVR_PTZTRACKCHAN_INFO [512]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_PTZTRACKCHAN_INFO * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)512; ++ii) *(NET_DVR_PTZTRACKCHAN_INFO *)&arg1->struPtzTrackInfo[ii] = *((NET_DVR_PTZTRACKCHAN_INFO *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struPtzTrackInfo""' of type '""NET_DVR_PTZTRACKCHAN_INFO [512]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_CFG_struPtzTrackInfo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_PTZTRACKCHAN_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_CFG_struPtzTrackInfo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_struPtzTrackInfo_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  result = (NET_DVR_PTZTRACKCHAN_INFO *)(NET_DVR_PTZTRACKCHAN_INFO *) ((arg1)->struPtzTrackInfo);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PTZTRACKCHAN_INFO, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_CFG_byRes1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_CFG_byRes1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_byRes1_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_byRes1_set" "', argument " "2"" of type '" "BYTE [1024]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)1024; ++ii) *(BYTE *)&arg1->byRes1[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes1""' of type '""BYTE [1024]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_CFG_byRes1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_CFG_byRes1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_CFG_byRes1_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_PTZ_NOTIFICATION_CFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_PTZ_NOTIFICATION_CFG")) SWIG_fail;
  result = (tagNET_DVR_PTZ_NOTIFICATION_CFG *)new tagNET_DVR_PTZ_NOTIFICATION_CFG();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_PTZ_NOTIFICATION_CFG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION_CFG *arg1 = (tagNET_DVR_PTZ_NOTIFICATION_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_PTZ_NOTIFICATION_CFG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_PTZ_NOTIFICATION_CFG" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION_CFG *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION_CFG * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_PTZ_NOTIFICATION_CFG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION_CFG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_dwSize_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZ_NOTIFICATION_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_dwSize_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_byEventType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_byEventType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_byEventType_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_WORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_byEventType_set" "', argument " "2"" of type '" "WORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZ_NOTIFICATION_byEventType_set" "', argument " "2"" of type '" "WORD""'");
    } else {
      WORD * temp = reinterpret_cast< WORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byEventType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_byEventType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_byEventType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_byEventType_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  result =  ((arg1)->byEventType);
  resultobj = SWIG_NewPointerObj((new WORD(static_cast< const WORD& >(result))), SWIGTYPE_p_WORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_byRes_set" "', argument " "2"" of type '" "BYTE [62]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)62; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [62]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_dwEnablePresetChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_dwEnablePresetChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_dwEnablePresetChanNum_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_dwEnablePresetChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZ_NOTIFICATION_dwEnablePresetChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnablePresetChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_dwEnablePresetChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_dwEnablePresetChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_dwEnablePresetChanNum_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  result =  ((arg1)->dwEnablePresetChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_struPresetChanInfo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  NET_DVR_PRESETCHAN_INFO *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_struPresetChanInfo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_struPresetChanInfo_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_PRESETCHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_struPresetChanInfo_set" "', argument " "2"" of type '" "NET_DVR_PRESETCHAN_INFO [512]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_PRESETCHAN_INFO * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)512; ++ii) *(NET_DVR_PRESETCHAN_INFO *)&arg1->struPresetChanInfo[ii] = *((NET_DVR_PRESETCHAN_INFO *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struPresetChanInfo""' of type '""NET_DVR_PRESETCHAN_INFO [512]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_struPresetChanInfo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_PRESETCHAN_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_struPresetChanInfo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_struPresetChanInfo_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  result = (NET_DVR_PRESETCHAN_INFO *)(NET_DVR_PRESETCHAN_INFO *) ((arg1)->struPresetChanInfo);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PRESETCHAN_INFO, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_dwEnableCruiseChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_dwEnableCruiseChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_dwEnableCruiseChanNum_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_dwEnableCruiseChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZ_NOTIFICATION_dwEnableCruiseChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnableCruiseChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_dwEnableCruiseChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_dwEnableCruiseChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_dwEnableCruiseChanNum_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  result =  ((arg1)->dwEnableCruiseChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_struCruiseChanInfo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  NET_DVR_CRUISECHAN_INFO *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_struCruiseChanInfo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_struCruiseChanInfo_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_CRUISECHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_struCruiseChanInfo_set" "', argument " "2"" of type '" "NET_DVR_CRUISECHAN_INFO [512]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_CRUISECHAN_INFO * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)512; ++ii) *(NET_DVR_CRUISECHAN_INFO *)&arg1->struCruiseChanInfo[ii] = *((NET_DVR_CRUISECHAN_INFO *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struCruiseChanInfo""' of type '""NET_DVR_CRUISECHAN_INFO [512]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_struCruiseChanInfo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_CRUISECHAN_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_struCruiseChanInfo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_struCruiseChanInfo_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  result = (NET_DVR_CRUISECHAN_INFO *)(NET_DVR_CRUISECHAN_INFO *) ((arg1)->struCruiseChanInfo);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_CRUISECHAN_INFO, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_dwEnablePtzTrackChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_dwEnablePtzTrackChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_dwEnablePtzTrackChanNum_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_dwEnablePtzTrackChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_PTZ_NOTIFICATION_dwEnablePtzTrackChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnablePtzTrackChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_dwEnablePtzTrackChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_dwEnablePtzTrackChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_dwEnablePtzTrackChanNum_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  result =  ((arg1)->dwEnablePtzTrackChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_struPtzTrackInfo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  NET_DVR_PTZTRACKCHAN_INFO *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_struPtzTrackInfo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_struPtzTrackInfo_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_PTZTRACKCHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_struPtzTrackInfo_set" "', argument " "2"" of type '" "NET_DVR_PTZTRACKCHAN_INFO [512]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_PTZTRACKCHAN_INFO * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)512; ++ii) *(NET_DVR_PTZTRACKCHAN_INFO *)&arg1->struPtzTrackInfo[ii] = *((NET_DVR_PTZTRACKCHAN_INFO *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struPtzTrackInfo""' of type '""NET_DVR_PTZTRACKCHAN_INFO [512]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_struPtzTrackInfo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_PTZTRACKCHAN_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_struPtzTrackInfo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_struPtzTrackInfo_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  result = (NET_DVR_PTZTRACKCHAN_INFO *)(NET_DVR_PTZTRACKCHAN_INFO *) ((arg1)->struPtzTrackInfo);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PTZTRACKCHAN_INFO, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_byRes1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_PTZ_NOTIFICATION_byRes1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_byRes1_set" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_PTZ_NOTIFICATION_byRes1_set" "', argument " "2"" of type '" "BYTE [1024]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)1024; ++ii) *(BYTE *)&arg1->byRes1[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes1""' of type '""BYTE [1024]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_PTZ_NOTIFICATION_byRes1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_PTZ_NOTIFICATION_byRes1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_PTZ_NOTIFICATION_byRes1_get" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_PTZ_NOTIFICATION(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_PTZ_NOTIFICATION")) SWIG_fail;
  result = (tagNET_DVR_PTZ_NOTIFICATION *)new tagNET_DVR_PTZ_NOTIFICATION();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_PTZ_NOTIFICATION(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_PTZ_NOTIFICATION *arg1 = (tagNET_DVR_PTZ_NOTIFICATION *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_PTZ_NOTIFICATION",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_PTZ_NOTIFICATION" "', argument " "1"" of type '" "tagNET_DVR_PTZ_NOTIFICATION *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_PTZ_NOTIFICATION * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_PTZ_NOTIFICATION_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_PTZ_NOTIFICATION, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwSize_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V40_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwSize_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_sAlarmInName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_sAlarmInName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_sAlarmInName_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_sAlarmInName_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->sAlarmInName[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sAlarmInName""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_sAlarmInName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_sAlarmInName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_sAlarmInName_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->sAlarmInName);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_byAlarmType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_byAlarmType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_byAlarmType_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_byAlarmType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V40_byAlarmType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAlarmType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_byAlarmType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_byAlarmType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_byAlarmType_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result =  ((arg1)->byAlarmType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_byAlarmInHandle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_byAlarmInHandle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_byAlarmInHandle_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_byAlarmInHandle_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V40_byAlarmInHandle_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAlarmInHandle = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_byAlarmInHandle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_byAlarmInHandle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_byAlarmInHandle_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result =  ((arg1)->byAlarmInHandle);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_byChannel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_byChannel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_byChannel_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_byChannel_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V40_byChannel_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byChannel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_byChannel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_byChannel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_byChannel_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result =  ((arg1)->byChannel);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_byInputType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_byInputType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_byInputType_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_byInputType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V40_byInputType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byInputType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_byInputType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_byInputType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_byInputType_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result =  ((arg1)->byInputType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwHandleType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_dwHandleType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwHandleType_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_dwHandleType_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V40_dwHandleType_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwHandleType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwHandleType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_dwHandleType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwHandleType_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result =  ((arg1)->dwHandleType);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwMaxRelAlarmOutChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_dwMaxRelAlarmOutChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwMaxRelAlarmOutChanNum_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_dwMaxRelAlarmOutChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V40_dwMaxRelAlarmOutChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwMaxRelAlarmOutChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwMaxRelAlarmOutChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_dwMaxRelAlarmOutChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwMaxRelAlarmOutChanNum_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result =  ((arg1)->dwMaxRelAlarmOutChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwRelAlarmOutChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_dwRelAlarmOutChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwRelAlarmOutChanNum_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_dwRelAlarmOutChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V40_dwRelAlarmOutChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwRelAlarmOutChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwRelAlarmOutChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_dwRelAlarmOutChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwRelAlarmOutChanNum_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result =  ((arg1)->dwRelAlarmOutChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwRelAlarmOut_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  DWORD *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_dwRelAlarmOut_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwRelAlarmOut_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DWORD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_dwRelAlarmOut_set" "', argument " "2"" of type '" "DWORD [(4096+32)]""'"); 
  } 
  arg2 = reinterpret_cast< DWORD * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)(4096+32); ++ii) *(DWORD *)&arg1->dwRelAlarmOut[ii] = *((DWORD *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""dwRelAlarmOut""' of type '""DWORD [(4096+32)]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwRelAlarmOut_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_dwRelAlarmOut_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwRelAlarmOut_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result = (DWORD *)(DWORD *) ((arg1)->dwRelAlarmOut);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DWORD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_struAlarmTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  NET_DVR_SCHEDTIME (*arg2)[8] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_struAlarmTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_struAlarmTime_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_8__NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_struAlarmTime_set" "', argument " "2"" of type '" "NET_DVR_SCHEDTIME [7][8]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_SCHEDTIME (*)[8] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)8; ++jj) arg1->struAlarmTime[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struAlarmTime""' of type '""NET_DVR_SCHEDTIME [7][8]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struAlarmTime""' of type '""NET_DVR_SCHEDTIME [7][8]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_struAlarmTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_SCHEDTIME (*result)[8] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_struAlarmTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_struAlarmTime_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result = (NET_DVR_SCHEDTIME (*)[8])(NET_DVR_SCHEDTIME (*)[8]) ((arg1)->struAlarmTime);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_8__NET_DVR_SCHEDTIME, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwMaxRecordChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_dwMaxRecordChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwMaxRecordChanNum_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_dwMaxRecordChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V40_dwMaxRecordChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwMaxRecordChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwMaxRecordChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_dwMaxRecordChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwMaxRecordChanNum_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result =  ((arg1)->dwMaxRecordChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwCurRecordChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_dwCurRecordChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwCurRecordChanNum_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_dwCurRecordChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V40_dwCurRecordChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwCurRecordChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwCurRecordChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_dwCurRecordChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwCurRecordChanNum_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result =  ((arg1)->dwCurRecordChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwRelRecordChan_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  DWORD *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_dwRelRecordChan_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwRelRecordChan_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DWORD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_dwRelRecordChan_set" "', argument " "2"" of type '" "DWORD [512]""'"); 
  } 
  arg2 = reinterpret_cast< DWORD * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)512; ++ii) *(DWORD *)&arg1->dwRelRecordChan[ii] = *((DWORD *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""dwRelRecordChan""' of type '""DWORD [512]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwRelRecordChan_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_dwRelRecordChan_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwRelRecordChan_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result = (DWORD *)(DWORD *) ((arg1)->dwRelRecordChan);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DWORD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwMaxEnablePtzCtrlNun_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_dwMaxEnablePtzCtrlNun_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwMaxEnablePtzCtrlNun_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_dwMaxEnablePtzCtrlNun_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V40_dwMaxEnablePtzCtrlNun_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwMaxEnablePtzCtrlNun = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwMaxEnablePtzCtrlNun_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_dwMaxEnablePtzCtrlNun_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwMaxEnablePtzCtrlNun_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result =  ((arg1)->dwMaxEnablePtzCtrlNun);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwEnablePresetChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_dwEnablePresetChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwEnablePresetChanNum_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_dwEnablePresetChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V40_dwEnablePresetChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnablePresetChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwEnablePresetChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_dwEnablePresetChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwEnablePresetChanNum_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result =  ((arg1)->dwEnablePresetChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_struPresetChanInfo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  NET_DVR_PRESETCHAN_INFO *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_struPresetChanInfo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_struPresetChanInfo_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_PRESETCHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_struPresetChanInfo_set" "', argument " "2"" of type '" "NET_DVR_PRESETCHAN_INFO [512]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_PRESETCHAN_INFO * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)512; ++ii) *(NET_DVR_PRESETCHAN_INFO *)&arg1->struPresetChanInfo[ii] = *((NET_DVR_PRESETCHAN_INFO *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struPresetChanInfo""' of type '""NET_DVR_PRESETCHAN_INFO [512]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_struPresetChanInfo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_PRESETCHAN_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_struPresetChanInfo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_struPresetChanInfo_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result = (NET_DVR_PRESETCHAN_INFO *)(NET_DVR_PRESETCHAN_INFO *) ((arg1)->struPresetChanInfo);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PRESETCHAN_INFO, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_byPresetDurationTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_byPresetDurationTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_byPresetDurationTime_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_byPresetDurationTime_set" "', argument " "2"" of type '" "BYTE [512]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)512; ++ii) *(BYTE *)&arg1->byPresetDurationTime[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byPresetDurationTime""' of type '""BYTE [512]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_byPresetDurationTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_byPresetDurationTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_byPresetDurationTime_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byPresetDurationTime);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_byRes2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_byRes2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_byRes2_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_byRes2_set" "', argument " "2"" of type '" "BYTE [4]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) *(BYTE *)&arg1->byRes2[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes2""' of type '""BYTE [4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_byRes2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_byRes2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_byRes2_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwEnableCruiseChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_dwEnableCruiseChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwEnableCruiseChanNum_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_dwEnableCruiseChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V40_dwEnableCruiseChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnableCruiseChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwEnableCruiseChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_dwEnableCruiseChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwEnableCruiseChanNum_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result =  ((arg1)->dwEnableCruiseChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_struCruiseChanInfo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  NET_DVR_CRUISECHAN_INFO *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_struCruiseChanInfo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_struCruiseChanInfo_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_CRUISECHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_struCruiseChanInfo_set" "', argument " "2"" of type '" "NET_DVR_CRUISECHAN_INFO [512]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_CRUISECHAN_INFO * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)512; ++ii) *(NET_DVR_CRUISECHAN_INFO *)&arg1->struCruiseChanInfo[ii] = *((NET_DVR_CRUISECHAN_INFO *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struCruiseChanInfo""' of type '""NET_DVR_CRUISECHAN_INFO [512]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_struCruiseChanInfo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_CRUISECHAN_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_struCruiseChanInfo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_struCruiseChanInfo_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result = (NET_DVR_CRUISECHAN_INFO *)(NET_DVR_CRUISECHAN_INFO *) ((arg1)->struCruiseChanInfo);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_CRUISECHAN_INFO, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwEnablePtzTrackChanNum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_dwEnablePtzTrackChanNum_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwEnablePtzTrackChanNum_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_dwEnablePtzTrackChanNum_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V40_dwEnablePtzTrackChanNum_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwEnablePtzTrackChanNum = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_dwEnablePtzTrackChanNum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_dwEnablePtzTrackChanNum_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_dwEnablePtzTrackChanNum_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result =  ((arg1)->dwEnablePtzTrackChanNum);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_struPtzTrackInfo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  NET_DVR_PTZTRACKCHAN_INFO *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_struPtzTrackInfo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_struPtzTrackInfo_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_PTZTRACKCHAN_INFO, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_struPtzTrackInfo_set" "', argument " "2"" of type '" "NET_DVR_PTZTRACKCHAN_INFO [512]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_PTZTRACKCHAN_INFO * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)512; ++ii) *(NET_DVR_PTZTRACKCHAN_INFO *)&arg1->struPtzTrackInfo[ii] = *((NET_DVR_PTZTRACKCHAN_INFO *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struPtzTrackInfo""' of type '""NET_DVR_PTZTRACKCHAN_INFO [512]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_struPtzTrackInfo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_PTZTRACKCHAN_INFO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_struPtzTrackInfo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_struPtzTrackInfo_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result = (NET_DVR_PTZTRACKCHAN_INFO *)(NET_DVR_PTZTRACKCHAN_INFO *) ((arg1)->struPtzTrackInfo);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_PTZTRACKCHAN_INFO, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_wEventType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  WORD *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_wEventType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_wEventType_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_WORD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_wEventType_set" "', argument " "2"" of type '" "WORD [64]""'"); 
  } 
  arg2 = reinterpret_cast< WORD * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(WORD *)&arg1->wEventType[ii] = *((WORD *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""wEventType""' of type '""WORD [64]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_wEventType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WORD *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_wEventType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_wEventType_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result = (WORD *)(WORD *) ((arg1)->wEventType);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_WORD, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_byRes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V40_byRes_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_byRes_set" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V40_byRes_set" "', argument " "2"" of type '" "BYTE [128]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)128; ++ii) *(BYTE *)&arg1->byRes[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes""' of type '""BYTE [128]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V40_byRes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V40_byRes_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V40_byRes_get" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_ALARMINCFG_V40(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_ALARMINCFG_V40")) SWIG_fail;
  result = (tagNET_DVR_ALARMINCFG_V40 *)new tagNET_DVR_ALARMINCFG_V40();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_ALARMINCFG_V40(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  tagNET_DVR_ALARMINCFG_V40 *arg1 = (tagNET_DVR_ALARMINCFG_V40 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_ALARMINCFG_V40",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_ALARMINCFG_V40" "', argument " "1"" of type '" "tagNET_DVR_ALARMINCFG_V40 *""'"); 
  }
  arg1 = reinterpret_cast< tagNET_DVR_ALARMINCFG_V40 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_ALARMINCFG_V40_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_tagNET_DVR_ALARMINCFG_V40, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_dwSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_dwSize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_dwSize_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DWORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_dwSize_set" "', argument " "2"" of type '" "DWORD""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V30_dwSize_set" "', argument " "2"" of type '" "DWORD""'");
    } else {
      DWORD * temp = reinterpret_cast< DWORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dwSize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_dwSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DWORD result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_dwSize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_dwSize_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result =  ((arg1)->dwSize);
  resultobj = SWIG_NewPointerObj((new DWORD(static_cast< const DWORD& >(result))), SWIGTYPE_p_DWORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_sAlarmInName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_sAlarmInName_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_sAlarmInName_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_sAlarmInName_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->sAlarmInName[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sAlarmInName""' of type '""BYTE [32]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_sAlarmInName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_sAlarmInName_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_sAlarmInName_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->sAlarmInName);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byAlarmType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_byAlarmType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byAlarmType_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_byAlarmType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V30_byAlarmType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAlarmType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byAlarmType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_byAlarmType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byAlarmType_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result =  ((arg1)->byAlarmType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byAlarmInHandle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_byAlarmInHandle_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byAlarmInHandle_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_byAlarmInHandle_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V30_byAlarmInHandle_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byAlarmInHandle = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byAlarmInHandle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_byAlarmInHandle_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byAlarmInHandle_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result =  ((arg1)->byAlarmInHandle);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byChannel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_byChannel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byChannel_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_byChannel_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V30_byChannel_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byChannel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byChannel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_byChannel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byChannel_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result =  ((arg1)->byChannel);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byInputType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_byInputType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byInputType_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_BYTE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_byInputType_set" "', argument " "2"" of type '" "BYTE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NET_DVR_ALARMINCFG_V30_byInputType_set" "', argument " "2"" of type '" "BYTE""'");
    } else {
      BYTE * temp = reinterpret_cast< BYTE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->byInputType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byInputType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_byInputType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byInputType_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result =  ((arg1)->byInputType);
  resultobj = SWIG_NewPointerObj((new BYTE(static_cast< const BYTE& >(result))), SWIGTYPE_p_BYTE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_struAlarmHandleType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  NET_DVR_HANDLEEXCEPTION_V30 *arg2 = (NET_DVR_HANDLEEXCEPTION_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_struAlarmHandleType_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_struAlarmHandleType_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION_V30, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_struAlarmHandleType_set" "', argument " "2"" of type '" "NET_DVR_HANDLEEXCEPTION_V30 *""'"); 
  }
  arg2 = reinterpret_cast< NET_DVR_HANDLEEXCEPTION_V30 * >(argp2);
  if (arg1) (arg1)->struAlarmHandleType = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_struAlarmHandleType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_HANDLEEXCEPTION_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_struAlarmHandleType_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_struAlarmHandleType_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result = (NET_DVR_HANDLEEXCEPTION_V30 *)& ((arg1)->struAlarmHandleType);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_HANDLEEXCEPTION_V30, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_struAlarmTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  NET_DVR_SCHEDTIME (*arg2)[8] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_struAlarmTime_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_struAlarmTime_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_a_8__NET_DVR_SCHEDTIME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_struAlarmTime_set" "', argument " "2"" of type '" "NET_DVR_SCHEDTIME [7][8]""'"); 
  } 
  arg2 = reinterpret_cast< NET_DVR_SCHEDTIME (*)[8] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)8; ++jj) arg1->struAlarmTime[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struAlarmTime""' of type '""NET_DVR_SCHEDTIME [7][8]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""struAlarmTime""' of type '""NET_DVR_SCHEDTIME [7][8]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_struAlarmTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NET_DVR_SCHEDTIME (*result)[8] = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_struAlarmTime_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_struAlarmTime_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result = (NET_DVR_SCHEDTIME (*)[8])(NET_DVR_SCHEDTIME (*)[8]) ((arg1)->struAlarmTime);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_8__NET_DVR_SCHEDTIME, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byRelRecordChan_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_byRelRecordChan_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byRelRecordChan_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_byRelRecordChan_set" "', argument " "2"" of type '" "BYTE [(32+32)]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)(32+32); ++ii) *(BYTE *)&arg1->byRelRecordChan[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRelRecordChan""' of type '""BYTE [(32+32)]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byRelRecordChan_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_byRelRecordChan_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byRelRecordChan_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRelRecordChan);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byEnablePreset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_byEnablePreset_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byEnablePreset_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_byEnablePreset_set" "', argument " "2"" of type '" "BYTE [(32+32)]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)(32+32); ++ii) *(BYTE *)&arg1->byEnablePreset[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byEnablePreset""' of type '""BYTE [(32+32)]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byEnablePreset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_byEnablePreset_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byEnablePreset_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byEnablePreset);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byPresetNo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_byPresetNo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byPresetNo_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_byPresetNo_set" "', argument " "2"" of type '" "BYTE [(32+32)]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)(32+32); ++ii) *(BYTE *)&arg1->byPresetNo[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byPresetNo""' of type '""BYTE [(32+32)]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byPresetNo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_byPresetNo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byPresetNo_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byPresetNo);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byRes2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_byRes2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byRes2_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_byRes2_set" "', argument " "2"" of type '" "BYTE [192]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)192; ++ii) *(BYTE *)&arg1->byRes2[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes2""' of type '""BYTE [192]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byRes2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_byRes2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byRes2_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byEnableCruise_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_byEnableCruise_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byEnableCruise_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_byEnableCruise_set" "', argument " "2"" of type '" "BYTE [(32+32)]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)(32+32); ++ii) *(BYTE *)&arg1->byEnableCruise[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byEnableCruise""' of type '""BYTE [(32+32)]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byEnableCruise_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_byEnableCruise_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byEnableCruise_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byEnableCruise);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byCruiseNo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_byCruiseNo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byCruiseNo_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_byCruiseNo_set" "', argument " "2"" of type '" "BYTE [(32+32)]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)(32+32); ++ii) *(BYTE *)&arg1->byCruiseNo[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byCruiseNo""' of type '""BYTE [(32+32)]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byCruiseNo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_byCruiseNo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byCruiseNo_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byCruiseNo);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byEnablePtzTrack_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_byEnablePtzTrack_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byEnablePtzTrack_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_byEnablePtzTrack_set" "', argument " "2"" of type '" "BYTE [(32+32)]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)(32+32); ++ii) *(BYTE *)&arg1->byEnablePtzTrack[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byEnablePtzTrack""' of type '""BYTE [(32+32)]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byEnablePtzTrack_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_byEnablePtzTrack_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byEnablePtzTrack_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byEnablePtzTrack);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byPTZTrack_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_byPTZTrack_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byPTZTrack_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_byPTZTrack_set" "', argument " "2"" of type '" "BYTE [(32+32)]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)(32+32); ++ii) *(BYTE *)&arg1->byPTZTrack[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byPTZTrack""' of type '""BYTE [(32+32)]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byPTZTrack_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_byPTZTrack_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byPTZTrack_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byPTZTrack);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byRes3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  BYTE *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NET_DVR_ALARMINCFG_V30_byRes3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byRes3_set" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_BYTE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NET_DVR_ALARMINCFG_V30_byRes3_set" "', argument " "2"" of type '" "BYTE [16]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) *(BYTE *)&arg1->byRes3[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""byRes3""' of type '""BYTE [16]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NET_DVR_ALARMINCFG_V30_byRes3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BYTE *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NET_DVR_ALARMINCFG_V30_byRes3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NET_DVR_ALARMINCFG_V30_byRes3_get" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  result = (BYTE *)(BYTE *) ((arg1)->byRes3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BYTE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NET_DVR_ALARMINCFG_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NET_DVR_ALARMINCFG_V30")) SWIG_fail;
  result = (NET_DVR_ALARMINCFG_V30 *)new NET_DVR_ALARMINCFG_V30();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NET_DVR_ALARMINCFG_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NET_DVR_ALARMINCFG_V30",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NET_DVR_ALARMINCFG_V30" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NET_DVR_ALARMINCFG_V30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_test_NET_DVR_ALARMINCFG_V30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NET_DVR_ALARMINCFG_V30 *arg1 = (NET_DVR_ALARMINCFG_V30 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:test_NET_DVR_ALARMINCFG_V30",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NET_DVR_ALARMINCFG_V30, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test_NET_DVR_ALARMINCFG_V30" "', argument " "1"" of type '" "NET_DVR_ALARMINCFG_V30 *""'"); 
  }
  arg1 = reinterpret_cast< NET_DVR_ALARMINCFG_V30 * >(argp1);
  test_NET_DVR_ALARMINCFG_V30(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"PLAYRECT_x_set", _wrap_PLAYRECT_x_set, METH_VARARGS, (char *)"PLAYRECT_x_set(PLAYRECT self, int x)"},
	 { (char *)"PLAYRECT_x_get", _wrap_PLAYRECT_x_get, METH_VARARGS, (char *)"PLAYRECT_x_get(PLAYRECT self) -> int"},
	 { (char *)"PLAYRECT_y_set", _wrap_PLAYRECT_y_set, METH_VARARGS, (char *)"PLAYRECT_y_set(PLAYRECT self, int y)"},
	 { (char *)"PLAYRECT_y_get", _wrap_PLAYRECT_y_get, METH_VARARGS, (char *)"PLAYRECT_y_get(PLAYRECT self) -> int"},
	 { (char *)"PLAYRECT_uWidth_set", _wrap_PLAYRECT_uWidth_set, METH_VARARGS, (char *)"PLAYRECT_uWidth_set(PLAYRECT self, int uWidth)"},
	 { (char *)"PLAYRECT_uWidth_get", _wrap_PLAYRECT_uWidth_get, METH_VARARGS, (char *)"PLAYRECT_uWidth_get(PLAYRECT self) -> int"},
	 { (char *)"PLAYRECT_uHeight_set", _wrap_PLAYRECT_uHeight_set, METH_VARARGS, (char *)"PLAYRECT_uHeight_set(PLAYRECT self, int uHeight)"},
	 { (char *)"PLAYRECT_uHeight_get", _wrap_PLAYRECT_uHeight_get, METH_VARARGS, (char *)"PLAYRECT_uHeight_get(PLAYRECT self) -> int"},
	 { (char *)"new_PLAYRECT", _wrap_new_PLAYRECT, METH_VARARGS, (char *)"new_PLAYRECT() -> PLAYRECT"},
	 { (char *)"delete_PLAYRECT", _wrap_delete_PLAYRECT, METH_VARARGS, (char *)"delete_PLAYRECT(PLAYRECT self)"},
	 { (char *)"PLAYRECT_swigregister", PLAYRECT_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_TIME_dwYear_set", _wrap_NET_DVR_TIME_dwYear_set, METH_VARARGS, (char *)"NET_DVR_TIME_dwYear_set(NET_DVR_TIME self, DWORD dwYear)"},
	 { (char *)"NET_DVR_TIME_dwYear_get", _wrap_NET_DVR_TIME_dwYear_get, METH_VARARGS, (char *)"NET_DVR_TIME_dwYear_get(NET_DVR_TIME self) -> DWORD"},
	 { (char *)"NET_DVR_TIME_dwMonth_set", _wrap_NET_DVR_TIME_dwMonth_set, METH_VARARGS, (char *)"NET_DVR_TIME_dwMonth_set(NET_DVR_TIME self, DWORD dwMonth)"},
	 { (char *)"NET_DVR_TIME_dwMonth_get", _wrap_NET_DVR_TIME_dwMonth_get, METH_VARARGS, (char *)"NET_DVR_TIME_dwMonth_get(NET_DVR_TIME self) -> DWORD"},
	 { (char *)"NET_DVR_TIME_dwDay_set", _wrap_NET_DVR_TIME_dwDay_set, METH_VARARGS, (char *)"NET_DVR_TIME_dwDay_set(NET_DVR_TIME self, DWORD dwDay)"},
	 { (char *)"NET_DVR_TIME_dwDay_get", _wrap_NET_DVR_TIME_dwDay_get, METH_VARARGS, (char *)"NET_DVR_TIME_dwDay_get(NET_DVR_TIME self) -> DWORD"},
	 { (char *)"NET_DVR_TIME_dwHour_set", _wrap_NET_DVR_TIME_dwHour_set, METH_VARARGS, (char *)"NET_DVR_TIME_dwHour_set(NET_DVR_TIME self, DWORD dwHour)"},
	 { (char *)"NET_DVR_TIME_dwHour_get", _wrap_NET_DVR_TIME_dwHour_get, METH_VARARGS, (char *)"NET_DVR_TIME_dwHour_get(NET_DVR_TIME self) -> DWORD"},
	 { (char *)"NET_DVR_TIME_dwMinute_set", _wrap_NET_DVR_TIME_dwMinute_set, METH_VARARGS, (char *)"NET_DVR_TIME_dwMinute_set(NET_DVR_TIME self, DWORD dwMinute)"},
	 { (char *)"NET_DVR_TIME_dwMinute_get", _wrap_NET_DVR_TIME_dwMinute_get, METH_VARARGS, (char *)"NET_DVR_TIME_dwMinute_get(NET_DVR_TIME self) -> DWORD"},
	 { (char *)"NET_DVR_TIME_dwSecond_set", _wrap_NET_DVR_TIME_dwSecond_set, METH_VARARGS, (char *)"NET_DVR_TIME_dwSecond_set(NET_DVR_TIME self, DWORD dwSecond)"},
	 { (char *)"NET_DVR_TIME_dwSecond_get", _wrap_NET_DVR_TIME_dwSecond_get, METH_VARARGS, (char *)"NET_DVR_TIME_dwSecond_get(NET_DVR_TIME self) -> DWORD"},
	 { (char *)"new_NET_DVR_TIME", _wrap_new_NET_DVR_TIME, METH_VARARGS, (char *)"new_NET_DVR_TIME() -> NET_DVR_TIME"},
	 { (char *)"delete_NET_DVR_TIME", _wrap_delete_NET_DVR_TIME, METH_VARARGS, (char *)"delete_NET_DVR_TIME(NET_DVR_TIME self)"},
	 { (char *)"NET_DVR_TIME_swigregister", NET_DVR_TIME_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_TIME_V30_wYear_set", _wrap_NET_DVR_TIME_V30_wYear_set, METH_VARARGS, (char *)"NET_DVR_TIME_V30_wYear_set(NET_DVR_TIME_V30 self, WORD wYear)"},
	 { (char *)"NET_DVR_TIME_V30_wYear_get", _wrap_NET_DVR_TIME_V30_wYear_get, METH_VARARGS, (char *)"NET_DVR_TIME_V30_wYear_get(NET_DVR_TIME_V30 self) -> WORD"},
	 { (char *)"NET_DVR_TIME_V30_byMonth_set", _wrap_NET_DVR_TIME_V30_byMonth_set, METH_VARARGS, (char *)"NET_DVR_TIME_V30_byMonth_set(NET_DVR_TIME_V30 self, BYTE byMonth)"},
	 { (char *)"NET_DVR_TIME_V30_byMonth_get", _wrap_NET_DVR_TIME_V30_byMonth_get, METH_VARARGS, (char *)"NET_DVR_TIME_V30_byMonth_get(NET_DVR_TIME_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_V30_byDay_set", _wrap_NET_DVR_TIME_V30_byDay_set, METH_VARARGS, (char *)"NET_DVR_TIME_V30_byDay_set(NET_DVR_TIME_V30 self, BYTE byDay)"},
	 { (char *)"NET_DVR_TIME_V30_byDay_get", _wrap_NET_DVR_TIME_V30_byDay_get, METH_VARARGS, (char *)"NET_DVR_TIME_V30_byDay_get(NET_DVR_TIME_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_V30_byHour_set", _wrap_NET_DVR_TIME_V30_byHour_set, METH_VARARGS, (char *)"NET_DVR_TIME_V30_byHour_set(NET_DVR_TIME_V30 self, BYTE byHour)"},
	 { (char *)"NET_DVR_TIME_V30_byHour_get", _wrap_NET_DVR_TIME_V30_byHour_get, METH_VARARGS, (char *)"NET_DVR_TIME_V30_byHour_get(NET_DVR_TIME_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_V30_byMinute_set", _wrap_NET_DVR_TIME_V30_byMinute_set, METH_VARARGS, (char *)"NET_DVR_TIME_V30_byMinute_set(NET_DVR_TIME_V30 self, BYTE byMinute)"},
	 { (char *)"NET_DVR_TIME_V30_byMinute_get", _wrap_NET_DVR_TIME_V30_byMinute_get, METH_VARARGS, (char *)"NET_DVR_TIME_V30_byMinute_get(NET_DVR_TIME_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_V30_bySecond_set", _wrap_NET_DVR_TIME_V30_bySecond_set, METH_VARARGS, (char *)"NET_DVR_TIME_V30_bySecond_set(NET_DVR_TIME_V30 self, BYTE bySecond)"},
	 { (char *)"NET_DVR_TIME_V30_bySecond_get", _wrap_NET_DVR_TIME_V30_bySecond_get, METH_VARARGS, (char *)"NET_DVR_TIME_V30_bySecond_get(NET_DVR_TIME_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_V30_byISO8601_set", _wrap_NET_DVR_TIME_V30_byISO8601_set, METH_VARARGS, (char *)"NET_DVR_TIME_V30_byISO8601_set(NET_DVR_TIME_V30 self, BYTE byISO8601)"},
	 { (char *)"NET_DVR_TIME_V30_byISO8601_get", _wrap_NET_DVR_TIME_V30_byISO8601_get, METH_VARARGS, (char *)"NET_DVR_TIME_V30_byISO8601_get(NET_DVR_TIME_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_V30_wMilliSec_set", _wrap_NET_DVR_TIME_V30_wMilliSec_set, METH_VARARGS, (char *)"NET_DVR_TIME_V30_wMilliSec_set(NET_DVR_TIME_V30 self, WORD wMilliSec)"},
	 { (char *)"NET_DVR_TIME_V30_wMilliSec_get", _wrap_NET_DVR_TIME_V30_wMilliSec_get, METH_VARARGS, (char *)"NET_DVR_TIME_V30_wMilliSec_get(NET_DVR_TIME_V30 self) -> WORD"},
	 { (char *)"NET_DVR_TIME_V30_cTimeDifferenceH_set", _wrap_NET_DVR_TIME_V30_cTimeDifferenceH_set, METH_VARARGS, (char *)"NET_DVR_TIME_V30_cTimeDifferenceH_set(NET_DVR_TIME_V30 self, char cTimeDifferenceH)"},
	 { (char *)"NET_DVR_TIME_V30_cTimeDifferenceH_get", _wrap_NET_DVR_TIME_V30_cTimeDifferenceH_get, METH_VARARGS, (char *)"NET_DVR_TIME_V30_cTimeDifferenceH_get(NET_DVR_TIME_V30 self) -> char"},
	 { (char *)"NET_DVR_TIME_V30_cTimeDifferenceM_set", _wrap_NET_DVR_TIME_V30_cTimeDifferenceM_set, METH_VARARGS, (char *)"NET_DVR_TIME_V30_cTimeDifferenceM_set(NET_DVR_TIME_V30 self, char cTimeDifferenceM)"},
	 { (char *)"NET_DVR_TIME_V30_cTimeDifferenceM_get", _wrap_NET_DVR_TIME_V30_cTimeDifferenceM_get, METH_VARARGS, (char *)"NET_DVR_TIME_V30_cTimeDifferenceM_get(NET_DVR_TIME_V30 self) -> char"},
	 { (char *)"new_NET_DVR_TIME_V30", _wrap_new_NET_DVR_TIME_V30, METH_VARARGS, (char *)"new_NET_DVR_TIME_V30() -> NET_DVR_TIME_V30"},
	 { (char *)"delete_NET_DVR_TIME_V30", _wrap_delete_NET_DVR_TIME_V30, METH_VARARGS, (char *)"delete_NET_DVR_TIME_V30(NET_DVR_TIME_V30 self)"},
	 { (char *)"NET_DVR_TIME_V30_swigregister", NET_DVR_TIME_V30_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_TIME_SEARCH_wYear_set", _wrap_NET_DVR_TIME_SEARCH_wYear_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_wYear_set(NET_DVR_TIME_SEARCH self, WORD wYear)"},
	 { (char *)"NET_DVR_TIME_SEARCH_wYear_get", _wrap_NET_DVR_TIME_SEARCH_wYear_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_wYear_get(NET_DVR_TIME_SEARCH self) -> WORD"},
	 { (char *)"NET_DVR_TIME_SEARCH_byMonth_set", _wrap_NET_DVR_TIME_SEARCH_byMonth_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_byMonth_set(NET_DVR_TIME_SEARCH self, BYTE byMonth)"},
	 { (char *)"NET_DVR_TIME_SEARCH_byMonth_get", _wrap_NET_DVR_TIME_SEARCH_byMonth_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_byMonth_get(NET_DVR_TIME_SEARCH self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_SEARCH_byDay_set", _wrap_NET_DVR_TIME_SEARCH_byDay_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_byDay_set(NET_DVR_TIME_SEARCH self, BYTE byDay)"},
	 { (char *)"NET_DVR_TIME_SEARCH_byDay_get", _wrap_NET_DVR_TIME_SEARCH_byDay_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_byDay_get(NET_DVR_TIME_SEARCH self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_SEARCH_byHour_set", _wrap_NET_DVR_TIME_SEARCH_byHour_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_byHour_set(NET_DVR_TIME_SEARCH self, BYTE byHour)"},
	 { (char *)"NET_DVR_TIME_SEARCH_byHour_get", _wrap_NET_DVR_TIME_SEARCH_byHour_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_byHour_get(NET_DVR_TIME_SEARCH self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_SEARCH_byMinute_set", _wrap_NET_DVR_TIME_SEARCH_byMinute_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_byMinute_set(NET_DVR_TIME_SEARCH self, BYTE byMinute)"},
	 { (char *)"NET_DVR_TIME_SEARCH_byMinute_get", _wrap_NET_DVR_TIME_SEARCH_byMinute_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_byMinute_get(NET_DVR_TIME_SEARCH self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_SEARCH_bySecond_set", _wrap_NET_DVR_TIME_SEARCH_bySecond_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_bySecond_set(NET_DVR_TIME_SEARCH self, BYTE bySecond)"},
	 { (char *)"NET_DVR_TIME_SEARCH_bySecond_get", _wrap_NET_DVR_TIME_SEARCH_bySecond_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_bySecond_get(NET_DVR_TIME_SEARCH self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_SEARCH_cTimeDifferenceH_set", _wrap_NET_DVR_TIME_SEARCH_cTimeDifferenceH_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_cTimeDifferenceH_set(NET_DVR_TIME_SEARCH self, char cTimeDifferenceH)"},
	 { (char *)"NET_DVR_TIME_SEARCH_cTimeDifferenceH_get", _wrap_NET_DVR_TIME_SEARCH_cTimeDifferenceH_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_cTimeDifferenceH_get(NET_DVR_TIME_SEARCH self) -> char"},
	 { (char *)"NET_DVR_TIME_SEARCH_cTimeDifferenceM_set", _wrap_NET_DVR_TIME_SEARCH_cTimeDifferenceM_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_cTimeDifferenceM_set(NET_DVR_TIME_SEARCH self, char cTimeDifferenceM)"},
	 { (char *)"NET_DVR_TIME_SEARCH_cTimeDifferenceM_get", _wrap_NET_DVR_TIME_SEARCH_cTimeDifferenceM_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_cTimeDifferenceM_get(NET_DVR_TIME_SEARCH self) -> char"},
	 { (char *)"NET_DVR_TIME_SEARCH_byLocalOrUTC_set", _wrap_NET_DVR_TIME_SEARCH_byLocalOrUTC_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_byLocalOrUTC_set(NET_DVR_TIME_SEARCH self, BYTE byLocalOrUTC)"},
	 { (char *)"NET_DVR_TIME_SEARCH_byLocalOrUTC_get", _wrap_NET_DVR_TIME_SEARCH_byLocalOrUTC_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_byLocalOrUTC_get(NET_DVR_TIME_SEARCH self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_SEARCH_wMillisecond_set", _wrap_NET_DVR_TIME_SEARCH_wMillisecond_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_wMillisecond_set(NET_DVR_TIME_SEARCH self, WORD wMillisecond)"},
	 { (char *)"NET_DVR_TIME_SEARCH_wMillisecond_get", _wrap_NET_DVR_TIME_SEARCH_wMillisecond_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_wMillisecond_get(NET_DVR_TIME_SEARCH self) -> WORD"},
	 { (char *)"new_NET_DVR_TIME_SEARCH", _wrap_new_NET_DVR_TIME_SEARCH, METH_VARARGS, (char *)"new_NET_DVR_TIME_SEARCH() -> NET_DVR_TIME_SEARCH"},
	 { (char *)"delete_NET_DVR_TIME_SEARCH", _wrap_delete_NET_DVR_TIME_SEARCH, METH_VARARGS, (char *)"delete_NET_DVR_TIME_SEARCH(NET_DVR_TIME_SEARCH self)"},
	 { (char *)"NET_DVR_TIME_SEARCH_swigregister", NET_DVR_TIME_SEARCH_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_wYear_set", _wrap_NET_DVR_TIME_SEARCH_COND_wYear_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_wYear_set(NET_DVR_TIME_SEARCH_COND self, WORD wYear)"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_wYear_get", _wrap_NET_DVR_TIME_SEARCH_COND_wYear_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_wYear_get(NET_DVR_TIME_SEARCH_COND self) -> WORD"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_byMonth_set", _wrap_NET_DVR_TIME_SEARCH_COND_byMonth_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_byMonth_set(NET_DVR_TIME_SEARCH_COND self, BYTE byMonth)"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_byMonth_get", _wrap_NET_DVR_TIME_SEARCH_COND_byMonth_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_byMonth_get(NET_DVR_TIME_SEARCH_COND self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_byDay_set", _wrap_NET_DVR_TIME_SEARCH_COND_byDay_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_byDay_set(NET_DVR_TIME_SEARCH_COND self, BYTE byDay)"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_byDay_get", _wrap_NET_DVR_TIME_SEARCH_COND_byDay_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_byDay_get(NET_DVR_TIME_SEARCH_COND self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_byHour_set", _wrap_NET_DVR_TIME_SEARCH_COND_byHour_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_byHour_set(NET_DVR_TIME_SEARCH_COND self, BYTE byHour)"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_byHour_get", _wrap_NET_DVR_TIME_SEARCH_COND_byHour_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_byHour_get(NET_DVR_TIME_SEARCH_COND self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_byMinute_set", _wrap_NET_DVR_TIME_SEARCH_COND_byMinute_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_byMinute_set(NET_DVR_TIME_SEARCH_COND self, BYTE byMinute)"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_byMinute_get", _wrap_NET_DVR_TIME_SEARCH_COND_byMinute_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_byMinute_get(NET_DVR_TIME_SEARCH_COND self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_bySecond_set", _wrap_NET_DVR_TIME_SEARCH_COND_bySecond_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_bySecond_set(NET_DVR_TIME_SEARCH_COND self, BYTE bySecond)"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_bySecond_get", _wrap_NET_DVR_TIME_SEARCH_COND_bySecond_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_bySecond_get(NET_DVR_TIME_SEARCH_COND self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_byLocalOrUTC_set", _wrap_NET_DVR_TIME_SEARCH_COND_byLocalOrUTC_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_byLocalOrUTC_set(NET_DVR_TIME_SEARCH_COND self, BYTE byLocalOrUTC)"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_byLocalOrUTC_get", _wrap_NET_DVR_TIME_SEARCH_COND_byLocalOrUTC_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_byLocalOrUTC_get(NET_DVR_TIME_SEARCH_COND self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_wMillisecond_set", _wrap_NET_DVR_TIME_SEARCH_COND_wMillisecond_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_wMillisecond_set(NET_DVR_TIME_SEARCH_COND self, WORD wMillisecond)"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_wMillisecond_get", _wrap_NET_DVR_TIME_SEARCH_COND_wMillisecond_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_wMillisecond_get(NET_DVR_TIME_SEARCH_COND self) -> WORD"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_cTimeDifferenceH_set", _wrap_NET_DVR_TIME_SEARCH_COND_cTimeDifferenceH_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_cTimeDifferenceH_set(NET_DVR_TIME_SEARCH_COND self, char cTimeDifferenceH)"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_cTimeDifferenceH_get", _wrap_NET_DVR_TIME_SEARCH_COND_cTimeDifferenceH_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_cTimeDifferenceH_get(NET_DVR_TIME_SEARCH_COND self) -> char"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_cTimeDifferenceM_set", _wrap_NET_DVR_TIME_SEARCH_COND_cTimeDifferenceM_set, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_cTimeDifferenceM_set(NET_DVR_TIME_SEARCH_COND self, char cTimeDifferenceM)"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_cTimeDifferenceM_get", _wrap_NET_DVR_TIME_SEARCH_COND_cTimeDifferenceM_get, METH_VARARGS, (char *)"NET_DVR_TIME_SEARCH_COND_cTimeDifferenceM_get(NET_DVR_TIME_SEARCH_COND self) -> char"},
	 { (char *)"new_NET_DVR_TIME_SEARCH_COND", _wrap_new_NET_DVR_TIME_SEARCH_COND, METH_VARARGS, (char *)"new_NET_DVR_TIME_SEARCH_COND() -> NET_DVR_TIME_SEARCH_COND"},
	 { (char *)"delete_NET_DVR_TIME_SEARCH_COND", _wrap_delete_NET_DVR_TIME_SEARCH_COND, METH_VARARGS, (char *)"delete_NET_DVR_TIME_SEARCH_COND(NET_DVR_TIME_SEARCH_COND self)"},
	 { (char *)"NET_DVR_TIME_SEARCH_COND_swigregister", NET_DVR_TIME_SEARCH_COND_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_TIME_V50_wYear_set", _wrap_NET_DVR_TIME_V50_wYear_set, METH_VARARGS, (char *)"NET_DVR_TIME_V50_wYear_set(NET_DVR_TIME_V50 self, WORD wYear)"},
	 { (char *)"NET_DVR_TIME_V50_wYear_get", _wrap_NET_DVR_TIME_V50_wYear_get, METH_VARARGS, (char *)"NET_DVR_TIME_V50_wYear_get(NET_DVR_TIME_V50 self) -> WORD"},
	 { (char *)"NET_DVR_TIME_V50_byMonth_set", _wrap_NET_DVR_TIME_V50_byMonth_set, METH_VARARGS, (char *)"NET_DVR_TIME_V50_byMonth_set(NET_DVR_TIME_V50 self, BYTE byMonth)"},
	 { (char *)"NET_DVR_TIME_V50_byMonth_get", _wrap_NET_DVR_TIME_V50_byMonth_get, METH_VARARGS, (char *)"NET_DVR_TIME_V50_byMonth_get(NET_DVR_TIME_V50 self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_V50_byDay_set", _wrap_NET_DVR_TIME_V50_byDay_set, METH_VARARGS, (char *)"NET_DVR_TIME_V50_byDay_set(NET_DVR_TIME_V50 self, BYTE byDay)"},
	 { (char *)"NET_DVR_TIME_V50_byDay_get", _wrap_NET_DVR_TIME_V50_byDay_get, METH_VARARGS, (char *)"NET_DVR_TIME_V50_byDay_get(NET_DVR_TIME_V50 self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_V50_byHour_set", _wrap_NET_DVR_TIME_V50_byHour_set, METH_VARARGS, (char *)"NET_DVR_TIME_V50_byHour_set(NET_DVR_TIME_V50 self, BYTE byHour)"},
	 { (char *)"NET_DVR_TIME_V50_byHour_get", _wrap_NET_DVR_TIME_V50_byHour_get, METH_VARARGS, (char *)"NET_DVR_TIME_V50_byHour_get(NET_DVR_TIME_V50 self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_V50_byMinute_set", _wrap_NET_DVR_TIME_V50_byMinute_set, METH_VARARGS, (char *)"NET_DVR_TIME_V50_byMinute_set(NET_DVR_TIME_V50 self, BYTE byMinute)"},
	 { (char *)"NET_DVR_TIME_V50_byMinute_get", _wrap_NET_DVR_TIME_V50_byMinute_get, METH_VARARGS, (char *)"NET_DVR_TIME_V50_byMinute_get(NET_DVR_TIME_V50 self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_V50_bySecond_set", _wrap_NET_DVR_TIME_V50_bySecond_set, METH_VARARGS, (char *)"NET_DVR_TIME_V50_bySecond_set(NET_DVR_TIME_V50 self, BYTE bySecond)"},
	 { (char *)"NET_DVR_TIME_V50_bySecond_get", _wrap_NET_DVR_TIME_V50_bySecond_get, METH_VARARGS, (char *)"NET_DVR_TIME_V50_bySecond_get(NET_DVR_TIME_V50 self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_V50_byISO8601_set", _wrap_NET_DVR_TIME_V50_byISO8601_set, METH_VARARGS, (char *)"NET_DVR_TIME_V50_byISO8601_set(NET_DVR_TIME_V50 self, BYTE byISO8601)"},
	 { (char *)"NET_DVR_TIME_V50_byISO8601_get", _wrap_NET_DVR_TIME_V50_byISO8601_get, METH_VARARGS, (char *)"NET_DVR_TIME_V50_byISO8601_get(NET_DVR_TIME_V50 self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_V50_wMillisecond_set", _wrap_NET_DVR_TIME_V50_wMillisecond_set, METH_VARARGS, (char *)"NET_DVR_TIME_V50_wMillisecond_set(NET_DVR_TIME_V50 self, WORD wMillisecond)"},
	 { (char *)"NET_DVR_TIME_V50_wMillisecond_get", _wrap_NET_DVR_TIME_V50_wMillisecond_get, METH_VARARGS, (char *)"NET_DVR_TIME_V50_wMillisecond_get(NET_DVR_TIME_V50 self) -> WORD"},
	 { (char *)"NET_DVR_TIME_V50_cTimeDifferenceH_set", _wrap_NET_DVR_TIME_V50_cTimeDifferenceH_set, METH_VARARGS, (char *)"NET_DVR_TIME_V50_cTimeDifferenceH_set(NET_DVR_TIME_V50 self, char cTimeDifferenceH)"},
	 { (char *)"NET_DVR_TIME_V50_cTimeDifferenceH_get", _wrap_NET_DVR_TIME_V50_cTimeDifferenceH_get, METH_VARARGS, (char *)"NET_DVR_TIME_V50_cTimeDifferenceH_get(NET_DVR_TIME_V50 self) -> char"},
	 { (char *)"NET_DVR_TIME_V50_cTimeDifferenceM_set", _wrap_NET_DVR_TIME_V50_cTimeDifferenceM_set, METH_VARARGS, (char *)"NET_DVR_TIME_V50_cTimeDifferenceM_set(NET_DVR_TIME_V50 self, char cTimeDifferenceM)"},
	 { (char *)"NET_DVR_TIME_V50_cTimeDifferenceM_get", _wrap_NET_DVR_TIME_V50_cTimeDifferenceM_get, METH_VARARGS, (char *)"NET_DVR_TIME_V50_cTimeDifferenceM_get(NET_DVR_TIME_V50 self) -> char"},
	 { (char *)"new_NET_DVR_TIME_V50", _wrap_new_NET_DVR_TIME_V50, METH_VARARGS, (char *)"new_NET_DVR_TIME_V50() -> NET_DVR_TIME_V50"},
	 { (char *)"delete_NET_DVR_TIME_V50", _wrap_delete_NET_DVR_TIME_V50, METH_VARARGS, (char *)"delete_NET_DVR_TIME_V50(NET_DVR_TIME_V50 self)"},
	 { (char *)"NET_DVR_TIME_V50_swigregister", NET_DVR_TIME_V50_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_CALIBRATE_TIME_dwSize_set", _wrap_NET_DVR_CALIBRATE_TIME_dwSize_set, METH_VARARGS, (char *)"NET_DVR_CALIBRATE_TIME_dwSize_set(NET_DVR_CALIBRATE_TIME self, DWORD dwSize)"},
	 { (char *)"NET_DVR_CALIBRATE_TIME_dwSize_get", _wrap_NET_DVR_CALIBRATE_TIME_dwSize_get, METH_VARARGS, (char *)"NET_DVR_CALIBRATE_TIME_dwSize_get(NET_DVR_CALIBRATE_TIME self) -> DWORD"},
	 { (char *)"NET_DVR_CALIBRATE_TIME_struTime_set", _wrap_NET_DVR_CALIBRATE_TIME_struTime_set, METH_VARARGS, (char *)"NET_DVR_CALIBRATE_TIME_struTime_set(NET_DVR_CALIBRATE_TIME self, NET_DVR_TIME struTime)"},
	 { (char *)"NET_DVR_CALIBRATE_TIME_struTime_get", _wrap_NET_DVR_CALIBRATE_TIME_struTime_get, METH_VARARGS, (char *)"NET_DVR_CALIBRATE_TIME_struTime_get(NET_DVR_CALIBRATE_TIME self) -> NET_DVR_TIME"},
	 { (char *)"NET_DVR_CALIBRATE_TIME_wMilliSec_set", _wrap_NET_DVR_CALIBRATE_TIME_wMilliSec_set, METH_VARARGS, (char *)"NET_DVR_CALIBRATE_TIME_wMilliSec_set(NET_DVR_CALIBRATE_TIME self, WORD wMilliSec)"},
	 { (char *)"NET_DVR_CALIBRATE_TIME_wMilliSec_get", _wrap_NET_DVR_CALIBRATE_TIME_wMilliSec_get, METH_VARARGS, (char *)"NET_DVR_CALIBRATE_TIME_wMilliSec_get(NET_DVR_CALIBRATE_TIME self) -> WORD"},
	 { (char *)"NET_DVR_CALIBRATE_TIME_byRes_set", _wrap_NET_DVR_CALIBRATE_TIME_byRes_set, METH_VARARGS, (char *)"NET_DVR_CALIBRATE_TIME_byRes_set(NET_DVR_CALIBRATE_TIME self, BYTE [14] byRes)"},
	 { (char *)"NET_DVR_CALIBRATE_TIME_byRes_get", _wrap_NET_DVR_CALIBRATE_TIME_byRes_get, METH_VARARGS, (char *)"NET_DVR_CALIBRATE_TIME_byRes_get(NET_DVR_CALIBRATE_TIME self) -> BYTE [14]"},
	 { (char *)"new_NET_DVR_CALIBRATE_TIME", _wrap_new_NET_DVR_CALIBRATE_TIME, METH_VARARGS, (char *)"new_NET_DVR_CALIBRATE_TIME() -> NET_DVR_CALIBRATE_TIME"},
	 { (char *)"delete_NET_DVR_CALIBRATE_TIME", _wrap_delete_NET_DVR_CALIBRATE_TIME, METH_VARARGS, (char *)"delete_NET_DVR_CALIBRATE_TIME(NET_DVR_CALIBRATE_TIME self)"},
	 { (char *)"NET_DVR_CALIBRATE_TIME_swigregister", NET_DVR_CALIBRATE_TIME_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_TIMESIGN_CFG_dwSize_set", _wrap_NET_DVR_TIMESIGN_CFG_dwSize_set, METH_VARARGS, (char *)"NET_DVR_TIMESIGN_CFG_dwSize_set(NET_DVR_TIMESIGN_CFG self, DWORD dwSize)"},
	 { (char *)"NET_DVR_TIMESIGN_CFG_dwSize_get", _wrap_NET_DVR_TIMESIGN_CFG_dwSize_get, METH_VARARGS, (char *)"NET_DVR_TIMESIGN_CFG_dwSize_get(NET_DVR_TIMESIGN_CFG self) -> DWORD"},
	 { (char *)"NET_DVR_TIMESIGN_CFG_byCustomSetTimeSign_set", _wrap_NET_DVR_TIMESIGN_CFG_byCustomSetTimeSign_set, METH_VARARGS, (char *)"NET_DVR_TIMESIGN_CFG_byCustomSetTimeSign_set(NET_DVR_TIMESIGN_CFG self, BYTE [32] byCustomSetTimeSign)"},
	 { (char *)"NET_DVR_TIMESIGN_CFG_byCustomSetTimeSign_get", _wrap_NET_DVR_TIMESIGN_CFG_byCustomSetTimeSign_get, METH_VARARGS, (char *)"NET_DVR_TIMESIGN_CFG_byCustomSetTimeSign_get(NET_DVR_TIMESIGN_CFG self) -> BYTE [32]"},
	 { (char *)"NET_DVR_TIMESIGN_CFG_byRes_set", _wrap_NET_DVR_TIMESIGN_CFG_byRes_set, METH_VARARGS, (char *)"NET_DVR_TIMESIGN_CFG_byRes_set(NET_DVR_TIMESIGN_CFG self, BYTE [96] byRes)"},
	 { (char *)"NET_DVR_TIMESIGN_CFG_byRes_get", _wrap_NET_DVR_TIMESIGN_CFG_byRes_get, METH_VARARGS, (char *)"NET_DVR_TIMESIGN_CFG_byRes_get(NET_DVR_TIMESIGN_CFG self) -> BYTE [96]"},
	 { (char *)"new_NET_DVR_TIMESIGN_CFG", _wrap_new_NET_DVR_TIMESIGN_CFG, METH_VARARGS, (char *)"new_NET_DVR_TIMESIGN_CFG() -> NET_DVR_TIMESIGN_CFG"},
	 { (char *)"delete_NET_DVR_TIMESIGN_CFG", _wrap_delete_NET_DVR_TIMESIGN_CFG, METH_VARARGS, (char *)"delete_NET_DVR_TIMESIGN_CFG(NET_DVR_TIMESIGN_CFG self)"},
	 { (char *)"NET_DVR_TIMESIGN_CFG_swigregister", NET_DVR_TIMESIGN_CFG_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_TIME_EX_wYear_set", _wrap_NET_DVR_TIME_EX_wYear_set, METH_VARARGS, (char *)"NET_DVR_TIME_EX_wYear_set(NET_DVR_TIME_EX self, WORD wYear)"},
	 { (char *)"NET_DVR_TIME_EX_wYear_get", _wrap_NET_DVR_TIME_EX_wYear_get, METH_VARARGS, (char *)"NET_DVR_TIME_EX_wYear_get(NET_DVR_TIME_EX self) -> WORD"},
	 { (char *)"NET_DVR_TIME_EX_byMonth_set", _wrap_NET_DVR_TIME_EX_byMonth_set, METH_VARARGS, (char *)"NET_DVR_TIME_EX_byMonth_set(NET_DVR_TIME_EX self, BYTE byMonth)"},
	 { (char *)"NET_DVR_TIME_EX_byMonth_get", _wrap_NET_DVR_TIME_EX_byMonth_get, METH_VARARGS, (char *)"NET_DVR_TIME_EX_byMonth_get(NET_DVR_TIME_EX self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_EX_byDay_set", _wrap_NET_DVR_TIME_EX_byDay_set, METH_VARARGS, (char *)"NET_DVR_TIME_EX_byDay_set(NET_DVR_TIME_EX self, BYTE byDay)"},
	 { (char *)"NET_DVR_TIME_EX_byDay_get", _wrap_NET_DVR_TIME_EX_byDay_get, METH_VARARGS, (char *)"NET_DVR_TIME_EX_byDay_get(NET_DVR_TIME_EX self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_EX_byHour_set", _wrap_NET_DVR_TIME_EX_byHour_set, METH_VARARGS, (char *)"NET_DVR_TIME_EX_byHour_set(NET_DVR_TIME_EX self, BYTE byHour)"},
	 { (char *)"NET_DVR_TIME_EX_byHour_get", _wrap_NET_DVR_TIME_EX_byHour_get, METH_VARARGS, (char *)"NET_DVR_TIME_EX_byHour_get(NET_DVR_TIME_EX self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_EX_byMinute_set", _wrap_NET_DVR_TIME_EX_byMinute_set, METH_VARARGS, (char *)"NET_DVR_TIME_EX_byMinute_set(NET_DVR_TIME_EX self, BYTE byMinute)"},
	 { (char *)"NET_DVR_TIME_EX_byMinute_get", _wrap_NET_DVR_TIME_EX_byMinute_get, METH_VARARGS, (char *)"NET_DVR_TIME_EX_byMinute_get(NET_DVR_TIME_EX self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_EX_bySecond_set", _wrap_NET_DVR_TIME_EX_bySecond_set, METH_VARARGS, (char *)"NET_DVR_TIME_EX_bySecond_set(NET_DVR_TIME_EX self, BYTE bySecond)"},
	 { (char *)"NET_DVR_TIME_EX_bySecond_get", _wrap_NET_DVR_TIME_EX_bySecond_get, METH_VARARGS, (char *)"NET_DVR_TIME_EX_bySecond_get(NET_DVR_TIME_EX self) -> BYTE"},
	 { (char *)"NET_DVR_TIME_EX_byRes_set", _wrap_NET_DVR_TIME_EX_byRes_set, METH_VARARGS, (char *)"NET_DVR_TIME_EX_byRes_set(NET_DVR_TIME_EX self, BYTE byRes)"},
	 { (char *)"NET_DVR_TIME_EX_byRes_get", _wrap_NET_DVR_TIME_EX_byRes_get, METH_VARARGS, (char *)"NET_DVR_TIME_EX_byRes_get(NET_DVR_TIME_EX self) -> BYTE"},
	 { (char *)"new_NET_DVR_TIME_EX", _wrap_new_NET_DVR_TIME_EX, METH_VARARGS, (char *)"new_NET_DVR_TIME_EX() -> NET_DVR_TIME_EX"},
	 { (char *)"delete_NET_DVR_TIME_EX", _wrap_delete_NET_DVR_TIME_EX, METH_VARARGS, (char *)"delete_NET_DVR_TIME_EX(NET_DVR_TIME_EX self)"},
	 { (char *)"NET_DVR_TIME_EX_swigregister", NET_DVR_TIME_EX_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_SCHEDTIME_byStartHour_set", _wrap_NET_DVR_SCHEDTIME_byStartHour_set, METH_VARARGS, (char *)"NET_DVR_SCHEDTIME_byStartHour_set(NET_DVR_SCHEDTIME self, BYTE byStartHour)"},
	 { (char *)"NET_DVR_SCHEDTIME_byStartHour_get", _wrap_NET_DVR_SCHEDTIME_byStartHour_get, METH_VARARGS, (char *)"NET_DVR_SCHEDTIME_byStartHour_get(NET_DVR_SCHEDTIME self) -> BYTE"},
	 { (char *)"NET_DVR_SCHEDTIME_byStartMin_set", _wrap_NET_DVR_SCHEDTIME_byStartMin_set, METH_VARARGS, (char *)"NET_DVR_SCHEDTIME_byStartMin_set(NET_DVR_SCHEDTIME self, BYTE byStartMin)"},
	 { (char *)"NET_DVR_SCHEDTIME_byStartMin_get", _wrap_NET_DVR_SCHEDTIME_byStartMin_get, METH_VARARGS, (char *)"NET_DVR_SCHEDTIME_byStartMin_get(NET_DVR_SCHEDTIME self) -> BYTE"},
	 { (char *)"NET_DVR_SCHEDTIME_byStopHour_set", _wrap_NET_DVR_SCHEDTIME_byStopHour_set, METH_VARARGS, (char *)"NET_DVR_SCHEDTIME_byStopHour_set(NET_DVR_SCHEDTIME self, BYTE byStopHour)"},
	 { (char *)"NET_DVR_SCHEDTIME_byStopHour_get", _wrap_NET_DVR_SCHEDTIME_byStopHour_get, METH_VARARGS, (char *)"NET_DVR_SCHEDTIME_byStopHour_get(NET_DVR_SCHEDTIME self) -> BYTE"},
	 { (char *)"NET_DVR_SCHEDTIME_byStopMin_set", _wrap_NET_DVR_SCHEDTIME_byStopMin_set, METH_VARARGS, (char *)"NET_DVR_SCHEDTIME_byStopMin_set(NET_DVR_SCHEDTIME self, BYTE byStopMin)"},
	 { (char *)"NET_DVR_SCHEDTIME_byStopMin_get", _wrap_NET_DVR_SCHEDTIME_byStopMin_get, METH_VARARGS, (char *)"NET_DVR_SCHEDTIME_byStopMin_get(NET_DVR_SCHEDTIME self) -> BYTE"},
	 { (char *)"new_NET_DVR_SCHEDTIME", _wrap_new_NET_DVR_SCHEDTIME, METH_VARARGS, (char *)"new_NET_DVR_SCHEDTIME() -> NET_DVR_SCHEDTIME"},
	 { (char *)"delete_NET_DVR_SCHEDTIME", _wrap_delete_NET_DVR_SCHEDTIME, METH_VARARGS, (char *)"delete_NET_DVR_SCHEDTIME(NET_DVR_SCHEDTIME self)"},
	 { (char *)"NET_DVR_SCHEDTIME_swigregister", NET_DVR_SCHEDTIME_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_STRUCTHEAD_wLength_set", _wrap_NET_DVR_STRUCTHEAD_wLength_set, METH_VARARGS, (char *)"NET_DVR_STRUCTHEAD_wLength_set(NET_DVR_STRUCTHEAD self, WORD wLength)"},
	 { (char *)"NET_DVR_STRUCTHEAD_wLength_get", _wrap_NET_DVR_STRUCTHEAD_wLength_get, METH_VARARGS, (char *)"NET_DVR_STRUCTHEAD_wLength_get(NET_DVR_STRUCTHEAD self) -> WORD"},
	 { (char *)"NET_DVR_STRUCTHEAD_byVersion_set", _wrap_NET_DVR_STRUCTHEAD_byVersion_set, METH_VARARGS, (char *)"NET_DVR_STRUCTHEAD_byVersion_set(NET_DVR_STRUCTHEAD self, BYTE byVersion)"},
	 { (char *)"NET_DVR_STRUCTHEAD_byVersion_get", _wrap_NET_DVR_STRUCTHEAD_byVersion_get, METH_VARARGS, (char *)"NET_DVR_STRUCTHEAD_byVersion_get(NET_DVR_STRUCTHEAD self) -> BYTE"},
	 { (char *)"NET_DVR_STRUCTHEAD_byRes_set", _wrap_NET_DVR_STRUCTHEAD_byRes_set, METH_VARARGS, (char *)"NET_DVR_STRUCTHEAD_byRes_set(NET_DVR_STRUCTHEAD self, BYTE byRes)"},
	 { (char *)"NET_DVR_STRUCTHEAD_byRes_get", _wrap_NET_DVR_STRUCTHEAD_byRes_get, METH_VARARGS, (char *)"NET_DVR_STRUCTHEAD_byRes_get(NET_DVR_STRUCTHEAD self) -> BYTE"},
	 { (char *)"new_NET_DVR_STRUCTHEAD", _wrap_new_NET_DVR_STRUCTHEAD, METH_VARARGS, (char *)"new_NET_DVR_STRUCTHEAD() -> NET_DVR_STRUCTHEAD"},
	 { (char *)"delete_NET_DVR_STRUCTHEAD", _wrap_delete_NET_DVR_STRUCTHEAD, METH_VARARGS, (char *)"delete_NET_DVR_STRUCTHEAD(NET_DVR_STRUCTHEAD self)"},
	 { (char *)"NET_DVR_STRUCTHEAD_swigregister", NET_DVR_STRUCTHEAD_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V41_dwHandleType_set", _wrap_NET_DVR_HANDLEEXCEPTION_V41_dwHandleType_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V41_dwHandleType_set(NET_DVR_HANDLEEXCEPTION_V41 self, DWORD dwHandleType)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V41_dwHandleType_get", _wrap_NET_DVR_HANDLEEXCEPTION_V41_dwHandleType_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V41_dwHandleType_get(NET_DVR_HANDLEEXCEPTION_V41 self) -> DWORD"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V41_dwMaxRelAlarmOutChanNum_set", _wrap_NET_DVR_HANDLEEXCEPTION_V41_dwMaxRelAlarmOutChanNum_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V41_dwMaxRelAlarmOutChanNum_set(NET_DVR_HANDLEEXCEPTION_V41 self, DWORD dwMaxRelAlarmOutChanNum)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V41_dwMaxRelAlarmOutChanNum_get", _wrap_NET_DVR_HANDLEEXCEPTION_V41_dwMaxRelAlarmOutChanNum_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V41_dwMaxRelAlarmOutChanNum_get(NET_DVR_HANDLEEXCEPTION_V41 self) -> DWORD"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V41_dwRelAlarmOut_set", _wrap_NET_DVR_HANDLEEXCEPTION_V41_dwRelAlarmOut_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V41_dwRelAlarmOut_set(NET_DVR_HANDLEEXCEPTION_V41 self, DWORD [(4096+32)] dwRelAlarmOut)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V41_dwRelAlarmOut_get", _wrap_NET_DVR_HANDLEEXCEPTION_V41_dwRelAlarmOut_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V41_dwRelAlarmOut_get(NET_DVR_HANDLEEXCEPTION_V41 self) -> DWORD [(4096+32)]"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V41_byRes_set", _wrap_NET_DVR_HANDLEEXCEPTION_V41_byRes_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V41_byRes_set(NET_DVR_HANDLEEXCEPTION_V41 self, BYTE [64] byRes)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V41_byRes_get", _wrap_NET_DVR_HANDLEEXCEPTION_V41_byRes_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V41_byRes_get(NET_DVR_HANDLEEXCEPTION_V41 self) -> BYTE [64]"},
	 { (char *)"new_NET_DVR_HANDLEEXCEPTION_V41", _wrap_new_NET_DVR_HANDLEEXCEPTION_V41, METH_VARARGS, (char *)"new_NET_DVR_HANDLEEXCEPTION_V41() -> NET_DVR_HANDLEEXCEPTION_V41"},
	 { (char *)"delete_NET_DVR_HANDLEEXCEPTION_V41", _wrap_delete_NET_DVR_HANDLEEXCEPTION_V41, METH_VARARGS, (char *)"delete_NET_DVR_HANDLEEXCEPTION_V41(NET_DVR_HANDLEEXCEPTION_V41 self)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V41_swigregister", NET_DVR_HANDLEEXCEPTION_V41_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_dwHandleType_set", _wrap_NET_DVR_HANDLEEXCEPTION_V40_dwHandleType_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_dwHandleType_set(NET_DVR_HANDLEEXCEPTION_V40 self, DWORD dwHandleType)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_dwHandleType_get", _wrap_NET_DVR_HANDLEEXCEPTION_V40_dwHandleType_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_dwHandleType_get(NET_DVR_HANDLEEXCEPTION_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_dwMaxRelAlarmOutChanNum_set", _wrap_NET_DVR_HANDLEEXCEPTION_V40_dwMaxRelAlarmOutChanNum_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_dwMaxRelAlarmOutChanNum_set(NET_DVR_HANDLEEXCEPTION_V40 self, DWORD dwMaxRelAlarmOutChanNum)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_dwMaxRelAlarmOutChanNum_get", _wrap_NET_DVR_HANDLEEXCEPTION_V40_dwMaxRelAlarmOutChanNum_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_dwMaxRelAlarmOutChanNum_get(NET_DVR_HANDLEEXCEPTION_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOutChanNum_set", _wrap_NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOutChanNum_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOutChanNum_set(NET_DVR_HANDLEEXCEPTION_V40 self, DWORD dwRelAlarmOutChanNum)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOutChanNum_get", _wrap_NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOutChanNum_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOutChanNum_get(NET_DVR_HANDLEEXCEPTION_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOut_set", _wrap_NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOut_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOut_set(NET_DVR_HANDLEEXCEPTION_V40 self, DWORD [(32+32)] dwRelAlarmOut)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOut_get", _wrap_NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOut_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_dwRelAlarmOut_get(NET_DVR_HANDLEEXCEPTION_V40 self) -> DWORD [(32+32)]"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_byWhiteLightDurationTime_set", _wrap_NET_DVR_HANDLEEXCEPTION_V40_byWhiteLightDurationTime_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_byWhiteLightDurationTime_set(NET_DVR_HANDLEEXCEPTION_V40 self, BYTE byWhiteLightDurationTime)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_byWhiteLightDurationTime_get", _wrap_NET_DVR_HANDLEEXCEPTION_V40_byWhiteLightDurationTime_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_byWhiteLightDurationTime_get(NET_DVR_HANDLEEXCEPTION_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_byBrightness_set", _wrap_NET_DVR_HANDLEEXCEPTION_V40_byBrightness_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_byBrightness_set(NET_DVR_HANDLEEXCEPTION_V40 self, BYTE byBrightness)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_byBrightness_get", _wrap_NET_DVR_HANDLEEXCEPTION_V40_byBrightness_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_byBrightness_get(NET_DVR_HANDLEEXCEPTION_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_byAudioType_set", _wrap_NET_DVR_HANDLEEXCEPTION_V40_byAudioType_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_byAudioType_set(NET_DVR_HANDLEEXCEPTION_V40 self, BYTE byAudioType)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_byAudioType_get", _wrap_NET_DVR_HANDLEEXCEPTION_V40_byAudioType_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_byAudioType_get(NET_DVR_HANDLEEXCEPTION_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_byTimes_set", _wrap_NET_DVR_HANDLEEXCEPTION_V40_byTimes_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_byTimes_set(NET_DVR_HANDLEEXCEPTION_V40 self, BYTE byTimes)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_byTimes_get", _wrap_NET_DVR_HANDLEEXCEPTION_V40_byTimes_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_byTimes_get(NET_DVR_HANDLEEXCEPTION_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_byRes_set", _wrap_NET_DVR_HANDLEEXCEPTION_V40_byRes_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_byRes_set(NET_DVR_HANDLEEXCEPTION_V40 self, BYTE [60] byRes)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_byRes_get", _wrap_NET_DVR_HANDLEEXCEPTION_V40_byRes_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V40_byRes_get(NET_DVR_HANDLEEXCEPTION_V40 self) -> BYTE [60]"},
	 { (char *)"new_NET_DVR_HANDLEEXCEPTION_V40", _wrap_new_NET_DVR_HANDLEEXCEPTION_V40, METH_VARARGS, (char *)"new_NET_DVR_HANDLEEXCEPTION_V40() -> NET_DVR_HANDLEEXCEPTION_V40"},
	 { (char *)"delete_NET_DVR_HANDLEEXCEPTION_V40", _wrap_delete_NET_DVR_HANDLEEXCEPTION_V40, METH_VARARGS, (char *)"delete_NET_DVR_HANDLEEXCEPTION_V40(NET_DVR_HANDLEEXCEPTION_V40 self)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V40_swigregister", NET_DVR_HANDLEEXCEPTION_V40_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V30_dwHandleType_set", _wrap_NET_DVR_HANDLEEXCEPTION_V30_dwHandleType_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V30_dwHandleType_set(NET_DVR_HANDLEEXCEPTION_V30 self, DWORD dwHandleType)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V30_dwHandleType_get", _wrap_NET_DVR_HANDLEEXCEPTION_V30_dwHandleType_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V30_dwHandleType_get(NET_DVR_HANDLEEXCEPTION_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V30_byRelAlarmOut_set", _wrap_NET_DVR_HANDLEEXCEPTION_V30_byRelAlarmOut_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V30_byRelAlarmOut_set(NET_DVR_HANDLEEXCEPTION_V30 self, BYTE [(32+64)] byRelAlarmOut)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V30_byRelAlarmOut_get", _wrap_NET_DVR_HANDLEEXCEPTION_V30_byRelAlarmOut_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_V30_byRelAlarmOut_get(NET_DVR_HANDLEEXCEPTION_V30 self) -> BYTE [(32+64)]"},
	 { (char *)"new_NET_DVR_HANDLEEXCEPTION_V30", _wrap_new_NET_DVR_HANDLEEXCEPTION_V30, METH_VARARGS, (char *)"new_NET_DVR_HANDLEEXCEPTION_V30() -> NET_DVR_HANDLEEXCEPTION_V30"},
	 { (char *)"delete_NET_DVR_HANDLEEXCEPTION_V30", _wrap_delete_NET_DVR_HANDLEEXCEPTION_V30, METH_VARARGS, (char *)"delete_NET_DVR_HANDLEEXCEPTION_V30(NET_DVR_HANDLEEXCEPTION_V30 self)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_V30_swigregister", NET_DVR_HANDLEEXCEPTION_V30_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_dwHandleType_set", _wrap_NET_DVR_HANDLEEXCEPTION_dwHandleType_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_dwHandleType_set(NET_DVR_HANDLEEXCEPTION self, DWORD dwHandleType)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_dwHandleType_get", _wrap_NET_DVR_HANDLEEXCEPTION_dwHandleType_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_dwHandleType_get(NET_DVR_HANDLEEXCEPTION self) -> DWORD"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_byRelAlarmOut_set", _wrap_NET_DVR_HANDLEEXCEPTION_byRelAlarmOut_set, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_byRelAlarmOut_set(NET_DVR_HANDLEEXCEPTION self, BYTE [4] byRelAlarmOut)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_byRelAlarmOut_get", _wrap_NET_DVR_HANDLEEXCEPTION_byRelAlarmOut_get, METH_VARARGS, (char *)"NET_DVR_HANDLEEXCEPTION_byRelAlarmOut_get(NET_DVR_HANDLEEXCEPTION self) -> BYTE [4]"},
	 { (char *)"new_NET_DVR_HANDLEEXCEPTION", _wrap_new_NET_DVR_HANDLEEXCEPTION, METH_VARARGS, (char *)"new_NET_DVR_HANDLEEXCEPTION() -> NET_DVR_HANDLEEXCEPTION"},
	 { (char *)"delete_NET_DVR_HANDLEEXCEPTION", _wrap_delete_NET_DVR_HANDLEEXCEPTION, METH_VARARGS, (char *)"delete_NET_DVR_HANDLEEXCEPTION(NET_DVR_HANDLEEXCEPTION self)"},
	 { (char *)"NET_DVR_HANDLEEXCEPTION_swigregister", NET_DVR_HANDLEEXCEPTION_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_DEVICECFG_dwSize_set", _wrap_NET_DVR_DEVICECFG_dwSize_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwSize_set(NET_DVR_DEVICECFG self, DWORD dwSize)"},
	 { (char *)"NET_DVR_DEVICECFG_dwSize_get", _wrap_NET_DVR_DEVICECFG_dwSize_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwSize_get(NET_DVR_DEVICECFG self) -> DWORD"},
	 { (char *)"NET_DVR_DEVICECFG_sDVRName_set", _wrap_NET_DVR_DEVICECFG_sDVRName_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_sDVRName_set(NET_DVR_DEVICECFG self, BYTE [32] sDVRName)"},
	 { (char *)"NET_DVR_DEVICECFG_sDVRName_get", _wrap_NET_DVR_DEVICECFG_sDVRName_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_sDVRName_get(NET_DVR_DEVICECFG self) -> BYTE [32]"},
	 { (char *)"NET_DVR_DEVICECFG_dwDVRID_set", _wrap_NET_DVR_DEVICECFG_dwDVRID_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwDVRID_set(NET_DVR_DEVICECFG self, DWORD dwDVRID)"},
	 { (char *)"NET_DVR_DEVICECFG_dwDVRID_get", _wrap_NET_DVR_DEVICECFG_dwDVRID_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwDVRID_get(NET_DVR_DEVICECFG self) -> DWORD"},
	 { (char *)"NET_DVR_DEVICECFG_dwRecycleRecord_set", _wrap_NET_DVR_DEVICECFG_dwRecycleRecord_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwRecycleRecord_set(NET_DVR_DEVICECFG self, DWORD dwRecycleRecord)"},
	 { (char *)"NET_DVR_DEVICECFG_dwRecycleRecord_get", _wrap_NET_DVR_DEVICECFG_dwRecycleRecord_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwRecycleRecord_get(NET_DVR_DEVICECFG self) -> DWORD"},
	 { (char *)"NET_DVR_DEVICECFG_sSerialNumber_set", _wrap_NET_DVR_DEVICECFG_sSerialNumber_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_sSerialNumber_set(NET_DVR_DEVICECFG self, BYTE [48] sSerialNumber)"},
	 { (char *)"NET_DVR_DEVICECFG_sSerialNumber_get", _wrap_NET_DVR_DEVICECFG_sSerialNumber_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_sSerialNumber_get(NET_DVR_DEVICECFG self) -> BYTE [48]"},
	 { (char *)"NET_DVR_DEVICECFG_dwSoftwareVersion_set", _wrap_NET_DVR_DEVICECFG_dwSoftwareVersion_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwSoftwareVersion_set(NET_DVR_DEVICECFG self, DWORD dwSoftwareVersion)"},
	 { (char *)"NET_DVR_DEVICECFG_dwSoftwareVersion_get", _wrap_NET_DVR_DEVICECFG_dwSoftwareVersion_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwSoftwareVersion_get(NET_DVR_DEVICECFG self) -> DWORD"},
	 { (char *)"NET_DVR_DEVICECFG_dwSoftwareBuildDate_set", _wrap_NET_DVR_DEVICECFG_dwSoftwareBuildDate_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwSoftwareBuildDate_set(NET_DVR_DEVICECFG self, DWORD dwSoftwareBuildDate)"},
	 { (char *)"NET_DVR_DEVICECFG_dwSoftwareBuildDate_get", _wrap_NET_DVR_DEVICECFG_dwSoftwareBuildDate_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwSoftwareBuildDate_get(NET_DVR_DEVICECFG self) -> DWORD"},
	 { (char *)"NET_DVR_DEVICECFG_dwDSPSoftwareVersion_set", _wrap_NET_DVR_DEVICECFG_dwDSPSoftwareVersion_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwDSPSoftwareVersion_set(NET_DVR_DEVICECFG self, DWORD dwDSPSoftwareVersion)"},
	 { (char *)"NET_DVR_DEVICECFG_dwDSPSoftwareVersion_get", _wrap_NET_DVR_DEVICECFG_dwDSPSoftwareVersion_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwDSPSoftwareVersion_get(NET_DVR_DEVICECFG self) -> DWORD"},
	 { (char *)"NET_DVR_DEVICECFG_dwDSPSoftwareBuildDate_set", _wrap_NET_DVR_DEVICECFG_dwDSPSoftwareBuildDate_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwDSPSoftwareBuildDate_set(NET_DVR_DEVICECFG self, DWORD dwDSPSoftwareBuildDate)"},
	 { (char *)"NET_DVR_DEVICECFG_dwDSPSoftwareBuildDate_get", _wrap_NET_DVR_DEVICECFG_dwDSPSoftwareBuildDate_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwDSPSoftwareBuildDate_get(NET_DVR_DEVICECFG self) -> DWORD"},
	 { (char *)"NET_DVR_DEVICECFG_dwPanelVersion_set", _wrap_NET_DVR_DEVICECFG_dwPanelVersion_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwPanelVersion_set(NET_DVR_DEVICECFG self, DWORD dwPanelVersion)"},
	 { (char *)"NET_DVR_DEVICECFG_dwPanelVersion_get", _wrap_NET_DVR_DEVICECFG_dwPanelVersion_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwPanelVersion_get(NET_DVR_DEVICECFG self) -> DWORD"},
	 { (char *)"NET_DVR_DEVICECFG_dwHardwareVersion_set", _wrap_NET_DVR_DEVICECFG_dwHardwareVersion_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwHardwareVersion_set(NET_DVR_DEVICECFG self, DWORD dwHardwareVersion)"},
	 { (char *)"NET_DVR_DEVICECFG_dwHardwareVersion_get", _wrap_NET_DVR_DEVICECFG_dwHardwareVersion_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_dwHardwareVersion_get(NET_DVR_DEVICECFG self) -> DWORD"},
	 { (char *)"NET_DVR_DEVICECFG_byAlarmInPortNum_set", _wrap_NET_DVR_DEVICECFG_byAlarmInPortNum_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byAlarmInPortNum_set(NET_DVR_DEVICECFG self, BYTE byAlarmInPortNum)"},
	 { (char *)"NET_DVR_DEVICECFG_byAlarmInPortNum_get", _wrap_NET_DVR_DEVICECFG_byAlarmInPortNum_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byAlarmInPortNum_get(NET_DVR_DEVICECFG self) -> BYTE"},
	 { (char *)"NET_DVR_DEVICECFG_byAlarmOutPortNum_set", _wrap_NET_DVR_DEVICECFG_byAlarmOutPortNum_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byAlarmOutPortNum_set(NET_DVR_DEVICECFG self, BYTE byAlarmOutPortNum)"},
	 { (char *)"NET_DVR_DEVICECFG_byAlarmOutPortNum_get", _wrap_NET_DVR_DEVICECFG_byAlarmOutPortNum_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byAlarmOutPortNum_get(NET_DVR_DEVICECFG self) -> BYTE"},
	 { (char *)"NET_DVR_DEVICECFG_byRS232Num_set", _wrap_NET_DVR_DEVICECFG_byRS232Num_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byRS232Num_set(NET_DVR_DEVICECFG self, BYTE byRS232Num)"},
	 { (char *)"NET_DVR_DEVICECFG_byRS232Num_get", _wrap_NET_DVR_DEVICECFG_byRS232Num_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byRS232Num_get(NET_DVR_DEVICECFG self) -> BYTE"},
	 { (char *)"NET_DVR_DEVICECFG_byRS485Num_set", _wrap_NET_DVR_DEVICECFG_byRS485Num_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byRS485Num_set(NET_DVR_DEVICECFG self, BYTE byRS485Num)"},
	 { (char *)"NET_DVR_DEVICECFG_byRS485Num_get", _wrap_NET_DVR_DEVICECFG_byRS485Num_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byRS485Num_get(NET_DVR_DEVICECFG self) -> BYTE"},
	 { (char *)"NET_DVR_DEVICECFG_byNetworkPortNum_set", _wrap_NET_DVR_DEVICECFG_byNetworkPortNum_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byNetworkPortNum_set(NET_DVR_DEVICECFG self, BYTE byNetworkPortNum)"},
	 { (char *)"NET_DVR_DEVICECFG_byNetworkPortNum_get", _wrap_NET_DVR_DEVICECFG_byNetworkPortNum_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byNetworkPortNum_get(NET_DVR_DEVICECFG self) -> BYTE"},
	 { (char *)"NET_DVR_DEVICECFG_byDiskCtrlNum_set", _wrap_NET_DVR_DEVICECFG_byDiskCtrlNum_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byDiskCtrlNum_set(NET_DVR_DEVICECFG self, BYTE byDiskCtrlNum)"},
	 { (char *)"NET_DVR_DEVICECFG_byDiskCtrlNum_get", _wrap_NET_DVR_DEVICECFG_byDiskCtrlNum_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byDiskCtrlNum_get(NET_DVR_DEVICECFG self) -> BYTE"},
	 { (char *)"NET_DVR_DEVICECFG_byDiskNum_set", _wrap_NET_DVR_DEVICECFG_byDiskNum_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byDiskNum_set(NET_DVR_DEVICECFG self, BYTE byDiskNum)"},
	 { (char *)"NET_DVR_DEVICECFG_byDiskNum_get", _wrap_NET_DVR_DEVICECFG_byDiskNum_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byDiskNum_get(NET_DVR_DEVICECFG self) -> BYTE"},
	 { (char *)"NET_DVR_DEVICECFG_byDVRType_set", _wrap_NET_DVR_DEVICECFG_byDVRType_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byDVRType_set(NET_DVR_DEVICECFG self, BYTE byDVRType)"},
	 { (char *)"NET_DVR_DEVICECFG_byDVRType_get", _wrap_NET_DVR_DEVICECFG_byDVRType_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byDVRType_get(NET_DVR_DEVICECFG self) -> BYTE"},
	 { (char *)"NET_DVR_DEVICECFG_byChanNum_set", _wrap_NET_DVR_DEVICECFG_byChanNum_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byChanNum_set(NET_DVR_DEVICECFG self, BYTE byChanNum)"},
	 { (char *)"NET_DVR_DEVICECFG_byChanNum_get", _wrap_NET_DVR_DEVICECFG_byChanNum_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byChanNum_get(NET_DVR_DEVICECFG self) -> BYTE"},
	 { (char *)"NET_DVR_DEVICECFG_byStartChan_set", _wrap_NET_DVR_DEVICECFG_byStartChan_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byStartChan_set(NET_DVR_DEVICECFG self, BYTE byStartChan)"},
	 { (char *)"NET_DVR_DEVICECFG_byStartChan_get", _wrap_NET_DVR_DEVICECFG_byStartChan_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byStartChan_get(NET_DVR_DEVICECFG self) -> BYTE"},
	 { (char *)"NET_DVR_DEVICECFG_byDecordChans_set", _wrap_NET_DVR_DEVICECFG_byDecordChans_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byDecordChans_set(NET_DVR_DEVICECFG self, BYTE byDecordChans)"},
	 { (char *)"NET_DVR_DEVICECFG_byDecordChans_get", _wrap_NET_DVR_DEVICECFG_byDecordChans_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byDecordChans_get(NET_DVR_DEVICECFG self) -> BYTE"},
	 { (char *)"NET_DVR_DEVICECFG_byVGANum_set", _wrap_NET_DVR_DEVICECFG_byVGANum_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byVGANum_set(NET_DVR_DEVICECFG self, BYTE byVGANum)"},
	 { (char *)"NET_DVR_DEVICECFG_byVGANum_get", _wrap_NET_DVR_DEVICECFG_byVGANum_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byVGANum_get(NET_DVR_DEVICECFG self) -> BYTE"},
	 { (char *)"NET_DVR_DEVICECFG_byUSBNum_set", _wrap_NET_DVR_DEVICECFG_byUSBNum_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byUSBNum_set(NET_DVR_DEVICECFG self, BYTE byUSBNum)"},
	 { (char *)"NET_DVR_DEVICECFG_byUSBNum_get", _wrap_NET_DVR_DEVICECFG_byUSBNum_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byUSBNum_get(NET_DVR_DEVICECFG self) -> BYTE"},
	 { (char *)"NET_DVR_DEVICECFG_byAuxoutNum_set", _wrap_NET_DVR_DEVICECFG_byAuxoutNum_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byAuxoutNum_set(NET_DVR_DEVICECFG self, BYTE byAuxoutNum)"},
	 { (char *)"NET_DVR_DEVICECFG_byAuxoutNum_get", _wrap_NET_DVR_DEVICECFG_byAuxoutNum_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byAuxoutNum_get(NET_DVR_DEVICECFG self) -> BYTE"},
	 { (char *)"NET_DVR_DEVICECFG_byAudioNum_set", _wrap_NET_DVR_DEVICECFG_byAudioNum_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byAudioNum_set(NET_DVR_DEVICECFG self, BYTE byAudioNum)"},
	 { (char *)"NET_DVR_DEVICECFG_byAudioNum_get", _wrap_NET_DVR_DEVICECFG_byAudioNum_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byAudioNum_get(NET_DVR_DEVICECFG self) -> BYTE"},
	 { (char *)"NET_DVR_DEVICECFG_byIPChanNum_set", _wrap_NET_DVR_DEVICECFG_byIPChanNum_set, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byIPChanNum_set(NET_DVR_DEVICECFG self, BYTE byIPChanNum)"},
	 { (char *)"NET_DVR_DEVICECFG_byIPChanNum_get", _wrap_NET_DVR_DEVICECFG_byIPChanNum_get, METH_VARARGS, (char *)"NET_DVR_DEVICECFG_byIPChanNum_get(NET_DVR_DEVICECFG self) -> BYTE"},
	 { (char *)"new_NET_DVR_DEVICECFG", _wrap_new_NET_DVR_DEVICECFG, METH_VARARGS, (char *)"new_NET_DVR_DEVICECFG() -> NET_DVR_DEVICECFG"},
	 { (char *)"delete_NET_DVR_DEVICECFG", _wrap_delete_NET_DVR_DEVICECFG, METH_VARARGS, (char *)"delete_NET_DVR_DEVICECFG(NET_DVR_DEVICECFG self)"},
	 { (char *)"NET_DVR_DEVICECFG_swigregister", NET_DVR_DEVICECFG_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_IPADDR_sIpV4_set", _wrap_NET_DVR_IPADDR_sIpV4_set, METH_VARARGS, (char *)"NET_DVR_IPADDR_sIpV4_set(NET_DVR_IPADDR self, char [16] sIpV4)"},
	 { (char *)"NET_DVR_IPADDR_sIpV4_get", _wrap_NET_DVR_IPADDR_sIpV4_get, METH_VARARGS, (char *)"NET_DVR_IPADDR_sIpV4_get(NET_DVR_IPADDR self) -> char [16]"},
	 { (char *)"NET_DVR_IPADDR_byIPv6_set", _wrap_NET_DVR_IPADDR_byIPv6_set, METH_VARARGS, (char *)"NET_DVR_IPADDR_byIPv6_set(NET_DVR_IPADDR self, BYTE [128] byIPv6)"},
	 { (char *)"NET_DVR_IPADDR_byIPv6_get", _wrap_NET_DVR_IPADDR_byIPv6_get, METH_VARARGS, (char *)"NET_DVR_IPADDR_byIPv6_get(NET_DVR_IPADDR self) -> BYTE [128]"},
	 { (char *)"new_NET_DVR_IPADDR", _wrap_new_NET_DVR_IPADDR, METH_VARARGS, (char *)"new_NET_DVR_IPADDR() -> NET_DVR_IPADDR"},
	 { (char *)"delete_NET_DVR_IPADDR", _wrap_delete_NET_DVR_IPADDR, METH_VARARGS, (char *)"delete_NET_DVR_IPADDR(NET_DVR_IPADDR self)"},
	 { (char *)"NET_DVR_IPADDR_swigregister", NET_DVR_IPADDR_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_ADDRESS_struIP_set", _wrap_NET_DVR_ADDRESS_struIP_set, METH_VARARGS, (char *)"NET_DVR_ADDRESS_struIP_set(NET_DVR_ADDRESS self, NET_DVR_IPADDR struIP)"},
	 { (char *)"NET_DVR_ADDRESS_struIP_get", _wrap_NET_DVR_ADDRESS_struIP_get, METH_VARARGS, (char *)"NET_DVR_ADDRESS_struIP_get(NET_DVR_ADDRESS self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_ADDRESS_wPort_set", _wrap_NET_DVR_ADDRESS_wPort_set, METH_VARARGS, (char *)"NET_DVR_ADDRESS_wPort_set(NET_DVR_ADDRESS self, WORD wPort)"},
	 { (char *)"NET_DVR_ADDRESS_wPort_get", _wrap_NET_DVR_ADDRESS_wPort_get, METH_VARARGS, (char *)"NET_DVR_ADDRESS_wPort_get(NET_DVR_ADDRESS self) -> WORD"},
	 { (char *)"NET_DVR_ADDRESS_byRes_set", _wrap_NET_DVR_ADDRESS_byRes_set, METH_VARARGS, (char *)"NET_DVR_ADDRESS_byRes_set(NET_DVR_ADDRESS self, BYTE [2] byRes)"},
	 { (char *)"NET_DVR_ADDRESS_byRes_get", _wrap_NET_DVR_ADDRESS_byRes_get, METH_VARARGS, (char *)"NET_DVR_ADDRESS_byRes_get(NET_DVR_ADDRESS self) -> BYTE [2]"},
	 { (char *)"new_NET_DVR_ADDRESS", _wrap_new_NET_DVR_ADDRESS, METH_VARARGS, (char *)"new_NET_DVR_ADDRESS() -> NET_DVR_ADDRESS"},
	 { (char *)"delete_NET_DVR_ADDRESS", _wrap_delete_NET_DVR_ADDRESS, METH_VARARGS, (char *)"delete_NET_DVR_ADDRESS(NET_DVR_ADDRESS self)"},
	 { (char *)"NET_DVR_ADDRESS_swigregister", NET_DVR_ADDRESS_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_ETHERNET_V30_struDVRIP_set", _wrap_NET_DVR_ETHERNET_V30_struDVRIP_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_V30_struDVRIP_set(NET_DVR_ETHERNET_V30 self, NET_DVR_IPADDR struDVRIP)"},
	 { (char *)"NET_DVR_ETHERNET_V30_struDVRIP_get", _wrap_NET_DVR_ETHERNET_V30_struDVRIP_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_V30_struDVRIP_get(NET_DVR_ETHERNET_V30 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_ETHERNET_V30_struDVRIPMask_set", _wrap_NET_DVR_ETHERNET_V30_struDVRIPMask_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_V30_struDVRIPMask_set(NET_DVR_ETHERNET_V30 self, NET_DVR_IPADDR struDVRIPMask)"},
	 { (char *)"NET_DVR_ETHERNET_V30_struDVRIPMask_get", _wrap_NET_DVR_ETHERNET_V30_struDVRIPMask_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_V30_struDVRIPMask_get(NET_DVR_ETHERNET_V30 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_ETHERNET_V30_dwNetInterface_set", _wrap_NET_DVR_ETHERNET_V30_dwNetInterface_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_V30_dwNetInterface_set(NET_DVR_ETHERNET_V30 self, DWORD dwNetInterface)"},
	 { (char *)"NET_DVR_ETHERNET_V30_dwNetInterface_get", _wrap_NET_DVR_ETHERNET_V30_dwNetInterface_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_V30_dwNetInterface_get(NET_DVR_ETHERNET_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_ETHERNET_V30_wDVRPort_set", _wrap_NET_DVR_ETHERNET_V30_wDVRPort_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_V30_wDVRPort_set(NET_DVR_ETHERNET_V30 self, WORD wDVRPort)"},
	 { (char *)"NET_DVR_ETHERNET_V30_wDVRPort_get", _wrap_NET_DVR_ETHERNET_V30_wDVRPort_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_V30_wDVRPort_get(NET_DVR_ETHERNET_V30 self) -> WORD"},
	 { (char *)"NET_DVR_ETHERNET_V30_wMTU_set", _wrap_NET_DVR_ETHERNET_V30_wMTU_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_V30_wMTU_set(NET_DVR_ETHERNET_V30 self, WORD wMTU)"},
	 { (char *)"NET_DVR_ETHERNET_V30_wMTU_get", _wrap_NET_DVR_ETHERNET_V30_wMTU_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_V30_wMTU_get(NET_DVR_ETHERNET_V30 self) -> WORD"},
	 { (char *)"NET_DVR_ETHERNET_V30_byMACAddr_set", _wrap_NET_DVR_ETHERNET_V30_byMACAddr_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_V30_byMACAddr_set(NET_DVR_ETHERNET_V30 self, BYTE [6] byMACAddr)"},
	 { (char *)"NET_DVR_ETHERNET_V30_byMACAddr_get", _wrap_NET_DVR_ETHERNET_V30_byMACAddr_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_V30_byMACAddr_get(NET_DVR_ETHERNET_V30 self) -> BYTE [6]"},
	 { (char *)"NET_DVR_ETHERNET_V30_byEthernetPortNo_set", _wrap_NET_DVR_ETHERNET_V30_byEthernetPortNo_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_V30_byEthernetPortNo_set(NET_DVR_ETHERNET_V30 self, BYTE byEthernetPortNo)"},
	 { (char *)"NET_DVR_ETHERNET_V30_byEthernetPortNo_get", _wrap_NET_DVR_ETHERNET_V30_byEthernetPortNo_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_V30_byEthernetPortNo_get(NET_DVR_ETHERNET_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_ETHERNET_V30_byRes_set", _wrap_NET_DVR_ETHERNET_V30_byRes_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_V30_byRes_set(NET_DVR_ETHERNET_V30 self, BYTE [1] byRes)"},
	 { (char *)"NET_DVR_ETHERNET_V30_byRes_get", _wrap_NET_DVR_ETHERNET_V30_byRes_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_V30_byRes_get(NET_DVR_ETHERNET_V30 self) -> BYTE [1]"},
	 { (char *)"new_NET_DVR_ETHERNET_V30", _wrap_new_NET_DVR_ETHERNET_V30, METH_VARARGS, (char *)"new_NET_DVR_ETHERNET_V30() -> NET_DVR_ETHERNET_V30"},
	 { (char *)"delete_NET_DVR_ETHERNET_V30", _wrap_delete_NET_DVR_ETHERNET_V30, METH_VARARGS, (char *)"delete_NET_DVR_ETHERNET_V30(NET_DVR_ETHERNET_V30 self)"},
	 { (char *)"NET_DVR_ETHERNET_V30_swigregister", NET_DVR_ETHERNET_V30_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_ETHERNET_sDVRIP_set", _wrap_NET_DVR_ETHERNET_sDVRIP_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_sDVRIP_set(NET_DVR_ETHERNET self, char [16] sDVRIP)"},
	 { (char *)"NET_DVR_ETHERNET_sDVRIP_get", _wrap_NET_DVR_ETHERNET_sDVRIP_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_sDVRIP_get(NET_DVR_ETHERNET self) -> char [16]"},
	 { (char *)"NET_DVR_ETHERNET_sDVRIPMask_set", _wrap_NET_DVR_ETHERNET_sDVRIPMask_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_sDVRIPMask_set(NET_DVR_ETHERNET self, char [16] sDVRIPMask)"},
	 { (char *)"NET_DVR_ETHERNET_sDVRIPMask_get", _wrap_NET_DVR_ETHERNET_sDVRIPMask_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_sDVRIPMask_get(NET_DVR_ETHERNET self) -> char [16]"},
	 { (char *)"NET_DVR_ETHERNET_dwNetInterface_set", _wrap_NET_DVR_ETHERNET_dwNetInterface_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_dwNetInterface_set(NET_DVR_ETHERNET self, DWORD dwNetInterface)"},
	 { (char *)"NET_DVR_ETHERNET_dwNetInterface_get", _wrap_NET_DVR_ETHERNET_dwNetInterface_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_dwNetInterface_get(NET_DVR_ETHERNET self) -> DWORD"},
	 { (char *)"NET_DVR_ETHERNET_wDVRPort_set", _wrap_NET_DVR_ETHERNET_wDVRPort_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_wDVRPort_set(NET_DVR_ETHERNET self, WORD wDVRPort)"},
	 { (char *)"NET_DVR_ETHERNET_wDVRPort_get", _wrap_NET_DVR_ETHERNET_wDVRPort_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_wDVRPort_get(NET_DVR_ETHERNET self) -> WORD"},
	 { (char *)"NET_DVR_ETHERNET_byMACAddr_set", _wrap_NET_DVR_ETHERNET_byMACAddr_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_byMACAddr_set(NET_DVR_ETHERNET self, BYTE [6] byMACAddr)"},
	 { (char *)"NET_DVR_ETHERNET_byMACAddr_get", _wrap_NET_DVR_ETHERNET_byMACAddr_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_byMACAddr_get(NET_DVR_ETHERNET self) -> BYTE [6]"},
	 { (char *)"new_NET_DVR_ETHERNET", _wrap_new_NET_DVR_ETHERNET, METH_VARARGS, (char *)"new_NET_DVR_ETHERNET() -> NET_DVR_ETHERNET"},
	 { (char *)"delete_NET_DVR_ETHERNET", _wrap_delete_NET_DVR_ETHERNET, METH_VARARGS, (char *)"delete_NET_DVR_ETHERNET(NET_DVR_ETHERNET self)"},
	 { (char *)"NET_DVR_ETHERNET_swigregister", NET_DVR_ETHERNET_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_PPPOECFG_dwPPPOE_set", _wrap_NET_DVR_PPPOECFG_dwPPPOE_set, METH_VARARGS, (char *)"NET_DVR_PPPOECFG_dwPPPOE_set(NET_DVR_PPPOECFG self, DWORD dwPPPOE)"},
	 { (char *)"NET_DVR_PPPOECFG_dwPPPOE_get", _wrap_NET_DVR_PPPOECFG_dwPPPOE_get, METH_VARARGS, (char *)"NET_DVR_PPPOECFG_dwPPPOE_get(NET_DVR_PPPOECFG self) -> DWORD"},
	 { (char *)"NET_DVR_PPPOECFG_sPPPoEUser_set", _wrap_NET_DVR_PPPOECFG_sPPPoEUser_set, METH_VARARGS, (char *)"NET_DVR_PPPOECFG_sPPPoEUser_set(NET_DVR_PPPOECFG self, BYTE [32] sPPPoEUser)"},
	 { (char *)"NET_DVR_PPPOECFG_sPPPoEUser_get", _wrap_NET_DVR_PPPOECFG_sPPPoEUser_get, METH_VARARGS, (char *)"NET_DVR_PPPOECFG_sPPPoEUser_get(NET_DVR_PPPOECFG self) -> BYTE [32]"},
	 { (char *)"NET_DVR_PPPOECFG_sPPPoEPassword_set", _wrap_NET_DVR_PPPOECFG_sPPPoEPassword_set, METH_VARARGS, (char *)"NET_DVR_PPPOECFG_sPPPoEPassword_set(NET_DVR_PPPOECFG self, char [16] sPPPoEPassword)"},
	 { (char *)"NET_DVR_PPPOECFG_sPPPoEPassword_get", _wrap_NET_DVR_PPPOECFG_sPPPoEPassword_get, METH_VARARGS, (char *)"NET_DVR_PPPOECFG_sPPPoEPassword_get(NET_DVR_PPPOECFG self) -> char [16]"},
	 { (char *)"NET_DVR_PPPOECFG_struPPPoEIP_set", _wrap_NET_DVR_PPPOECFG_struPPPoEIP_set, METH_VARARGS, (char *)"NET_DVR_PPPOECFG_struPPPoEIP_set(NET_DVR_PPPOECFG self, NET_DVR_IPADDR struPPPoEIP)"},
	 { (char *)"NET_DVR_PPPOECFG_struPPPoEIP_get", _wrap_NET_DVR_PPPOECFG_struPPPoEIP_get, METH_VARARGS, (char *)"NET_DVR_PPPOECFG_struPPPoEIP_get(NET_DVR_PPPOECFG self) -> NET_DVR_IPADDR"},
	 { (char *)"new_NET_DVR_PPPOECFG", _wrap_new_NET_DVR_PPPOECFG, METH_VARARGS, (char *)"new_NET_DVR_PPPOECFG() -> NET_DVR_PPPOECFG"},
	 { (char *)"delete_NET_DVR_PPPOECFG", _wrap_delete_NET_DVR_PPPOECFG, METH_VARARGS, (char *)"delete_NET_DVR_PPPOECFG(NET_DVR_PPPOECFG self)"},
	 { (char *)"NET_DVR_PPPOECFG_swigregister", NET_DVR_PPPOECFG_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_NETCFG_V30_dwSize_set", _wrap_NET_DVR_NETCFG_V30_dwSize_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_dwSize_set(NET_DVR_NETCFG_V30 self, DWORD dwSize)"},
	 { (char *)"NET_DVR_NETCFG_V30_dwSize_get", _wrap_NET_DVR_NETCFG_V30_dwSize_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_dwSize_get(NET_DVR_NETCFG_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_NETCFG_V30_struEtherNet_set", _wrap_NET_DVR_NETCFG_V30_struEtherNet_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_struEtherNet_set(NET_DVR_NETCFG_V30 self, NET_DVR_ETHERNET_V30 struEtherNet)"},
	 { (char *)"NET_DVR_NETCFG_V30_struEtherNet_get", _wrap_NET_DVR_NETCFG_V30_struEtherNet_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_struEtherNet_get(NET_DVR_NETCFG_V30 self) -> NET_DVR_ETHERNET_V30"},
	 { (char *)"NET_DVR_NETCFG_V30_struRes1_set", _wrap_NET_DVR_NETCFG_V30_struRes1_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_struRes1_set(NET_DVR_NETCFG_V30 self, NET_DVR_IPADDR struRes1)"},
	 { (char *)"NET_DVR_NETCFG_V30_struRes1_get", _wrap_NET_DVR_NETCFG_V30_struRes1_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_struRes1_get(NET_DVR_NETCFG_V30 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_V30_struAlarmHostIpAddr_set", _wrap_NET_DVR_NETCFG_V30_struAlarmHostIpAddr_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_struAlarmHostIpAddr_set(NET_DVR_NETCFG_V30 self, NET_DVR_IPADDR struAlarmHostIpAddr)"},
	 { (char *)"NET_DVR_NETCFG_V30_struAlarmHostIpAddr_get", _wrap_NET_DVR_NETCFG_V30_struAlarmHostIpAddr_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_struAlarmHostIpAddr_get(NET_DVR_NETCFG_V30 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_V30_byRes2_set", _wrap_NET_DVR_NETCFG_V30_byRes2_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_byRes2_set(NET_DVR_NETCFG_V30 self, BYTE [4] byRes2)"},
	 { (char *)"NET_DVR_NETCFG_V30_byRes2_get", _wrap_NET_DVR_NETCFG_V30_byRes2_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_byRes2_get(NET_DVR_NETCFG_V30 self) -> BYTE [4]"},
	 { (char *)"NET_DVR_NETCFG_V30_wAlarmHostIpPort_set", _wrap_NET_DVR_NETCFG_V30_wAlarmHostIpPort_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_wAlarmHostIpPort_set(NET_DVR_NETCFG_V30 self, WORD wAlarmHostIpPort)"},
	 { (char *)"NET_DVR_NETCFG_V30_wAlarmHostIpPort_get", _wrap_NET_DVR_NETCFG_V30_wAlarmHostIpPort_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_wAlarmHostIpPort_get(NET_DVR_NETCFG_V30 self) -> WORD"},
	 { (char *)"NET_DVR_NETCFG_V30_byUseDhcp_set", _wrap_NET_DVR_NETCFG_V30_byUseDhcp_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_byUseDhcp_set(NET_DVR_NETCFG_V30 self, BYTE byUseDhcp)"},
	 { (char *)"NET_DVR_NETCFG_V30_byUseDhcp_get", _wrap_NET_DVR_NETCFG_V30_byUseDhcp_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_byUseDhcp_get(NET_DVR_NETCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_NETCFG_V30_byIPv6Mode_set", _wrap_NET_DVR_NETCFG_V30_byIPv6Mode_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_byIPv6Mode_set(NET_DVR_NETCFG_V30 self, BYTE byIPv6Mode)"},
	 { (char *)"NET_DVR_NETCFG_V30_byIPv6Mode_get", _wrap_NET_DVR_NETCFG_V30_byIPv6Mode_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_byIPv6Mode_get(NET_DVR_NETCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_NETCFG_V30_struDnsServer1IpAddr_set", _wrap_NET_DVR_NETCFG_V30_struDnsServer1IpAddr_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_struDnsServer1IpAddr_set(NET_DVR_NETCFG_V30 self, NET_DVR_IPADDR struDnsServer1IpAddr)"},
	 { (char *)"NET_DVR_NETCFG_V30_struDnsServer1IpAddr_get", _wrap_NET_DVR_NETCFG_V30_struDnsServer1IpAddr_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_struDnsServer1IpAddr_get(NET_DVR_NETCFG_V30 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_V30_struDnsServer2IpAddr_set", _wrap_NET_DVR_NETCFG_V30_struDnsServer2IpAddr_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_struDnsServer2IpAddr_set(NET_DVR_NETCFG_V30 self, NET_DVR_IPADDR struDnsServer2IpAddr)"},
	 { (char *)"NET_DVR_NETCFG_V30_struDnsServer2IpAddr_get", _wrap_NET_DVR_NETCFG_V30_struDnsServer2IpAddr_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_struDnsServer2IpAddr_get(NET_DVR_NETCFG_V30 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_V30_byIpResolver_set", _wrap_NET_DVR_NETCFG_V30_byIpResolver_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_byIpResolver_set(NET_DVR_NETCFG_V30 self, BYTE [64] byIpResolver)"},
	 { (char *)"NET_DVR_NETCFG_V30_byIpResolver_get", _wrap_NET_DVR_NETCFG_V30_byIpResolver_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_byIpResolver_get(NET_DVR_NETCFG_V30 self) -> BYTE [64]"},
	 { (char *)"NET_DVR_NETCFG_V30_wIpResolverPort_set", _wrap_NET_DVR_NETCFG_V30_wIpResolverPort_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_wIpResolverPort_set(NET_DVR_NETCFG_V30 self, WORD wIpResolverPort)"},
	 { (char *)"NET_DVR_NETCFG_V30_wIpResolverPort_get", _wrap_NET_DVR_NETCFG_V30_wIpResolverPort_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_wIpResolverPort_get(NET_DVR_NETCFG_V30 self) -> WORD"},
	 { (char *)"NET_DVR_NETCFG_V30_wHttpPortNo_set", _wrap_NET_DVR_NETCFG_V30_wHttpPortNo_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_wHttpPortNo_set(NET_DVR_NETCFG_V30 self, WORD wHttpPortNo)"},
	 { (char *)"NET_DVR_NETCFG_V30_wHttpPortNo_get", _wrap_NET_DVR_NETCFG_V30_wHttpPortNo_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_wHttpPortNo_get(NET_DVR_NETCFG_V30 self) -> WORD"},
	 { (char *)"NET_DVR_NETCFG_V30_struMulticastIpAddr_set", _wrap_NET_DVR_NETCFG_V30_struMulticastIpAddr_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_struMulticastIpAddr_set(NET_DVR_NETCFG_V30 self, NET_DVR_IPADDR struMulticastIpAddr)"},
	 { (char *)"NET_DVR_NETCFG_V30_struMulticastIpAddr_get", _wrap_NET_DVR_NETCFG_V30_struMulticastIpAddr_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_struMulticastIpAddr_get(NET_DVR_NETCFG_V30 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_V30_struGatewayIpAddr_set", _wrap_NET_DVR_NETCFG_V30_struGatewayIpAddr_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_struGatewayIpAddr_set(NET_DVR_NETCFG_V30 self, NET_DVR_IPADDR struGatewayIpAddr)"},
	 { (char *)"NET_DVR_NETCFG_V30_struGatewayIpAddr_get", _wrap_NET_DVR_NETCFG_V30_struGatewayIpAddr_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_struGatewayIpAddr_get(NET_DVR_NETCFG_V30 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_V30_struPPPoE_set", _wrap_NET_DVR_NETCFG_V30_struPPPoE_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_struPPPoE_set(NET_DVR_NETCFG_V30 self, NET_DVR_PPPOECFG struPPPoE)"},
	 { (char *)"NET_DVR_NETCFG_V30_struPPPoE_get", _wrap_NET_DVR_NETCFG_V30_struPPPoE_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_struPPPoE_get(NET_DVR_NETCFG_V30 self) -> NET_DVR_PPPOECFG"},
	 { (char *)"NET_DVR_NETCFG_V30_byEnablePrivateMulticastDiscovery_set", _wrap_NET_DVR_NETCFG_V30_byEnablePrivateMulticastDiscovery_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_byEnablePrivateMulticastDiscovery_set(NET_DVR_NETCFG_V30 self, BYTE byEnablePrivateMulticastDiscovery)"},
	 { (char *)"NET_DVR_NETCFG_V30_byEnablePrivateMulticastDiscovery_get", _wrap_NET_DVR_NETCFG_V30_byEnablePrivateMulticastDiscovery_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_byEnablePrivateMulticastDiscovery_get(NET_DVR_NETCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_NETCFG_V30_byEnableOnvifMulticastDiscovery_set", _wrap_NET_DVR_NETCFG_V30_byEnableOnvifMulticastDiscovery_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_byEnableOnvifMulticastDiscovery_set(NET_DVR_NETCFG_V30 self, BYTE byEnableOnvifMulticastDiscovery)"},
	 { (char *)"NET_DVR_NETCFG_V30_byEnableOnvifMulticastDiscovery_get", _wrap_NET_DVR_NETCFG_V30_byEnableOnvifMulticastDiscovery_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_byEnableOnvifMulticastDiscovery_get(NET_DVR_NETCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_NETCFG_V30_byEnableDNS_set", _wrap_NET_DVR_NETCFG_V30_byEnableDNS_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_byEnableDNS_set(NET_DVR_NETCFG_V30 self, BYTE byEnableDNS)"},
	 { (char *)"NET_DVR_NETCFG_V30_byEnableDNS_get", _wrap_NET_DVR_NETCFG_V30_byEnableDNS_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_byEnableDNS_get(NET_DVR_NETCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_NETCFG_V30_byRes_set", _wrap_NET_DVR_NETCFG_V30_byRes_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_byRes_set(NET_DVR_NETCFG_V30 self, BYTE [61] byRes)"},
	 { (char *)"NET_DVR_NETCFG_V30_byRes_get", _wrap_NET_DVR_NETCFG_V30_byRes_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V30_byRes_get(NET_DVR_NETCFG_V30 self) -> BYTE [61]"},
	 { (char *)"new_NET_DVR_NETCFG_V30", _wrap_new_NET_DVR_NETCFG_V30, METH_VARARGS, (char *)"new_NET_DVR_NETCFG_V30() -> NET_DVR_NETCFG_V30"},
	 { (char *)"delete_NET_DVR_NETCFG_V30", _wrap_delete_NET_DVR_NETCFG_V30, METH_VARARGS, (char *)"delete_NET_DVR_NETCFG_V30(NET_DVR_NETCFG_V30 self)"},
	 { (char *)"NET_DVR_NETCFG_V30_swigregister", NET_DVR_NETCFG_V30_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_ETHERNET_MULTI_struDVRIP_set", _wrap_NET_DVR_ETHERNET_MULTI_struDVRIP_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_struDVRIP_set(NET_DVR_ETHERNET_MULTI self, NET_DVR_IPADDR struDVRIP)"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_struDVRIP_get", _wrap_NET_DVR_ETHERNET_MULTI_struDVRIP_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_struDVRIP_get(NET_DVR_ETHERNET_MULTI self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_struDVRIPMask_set", _wrap_NET_DVR_ETHERNET_MULTI_struDVRIPMask_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_struDVRIPMask_set(NET_DVR_ETHERNET_MULTI self, NET_DVR_IPADDR struDVRIPMask)"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_struDVRIPMask_get", _wrap_NET_DVR_ETHERNET_MULTI_struDVRIPMask_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_struDVRIPMask_get(NET_DVR_ETHERNET_MULTI self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_dwNetInterface_set", _wrap_NET_DVR_ETHERNET_MULTI_dwNetInterface_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_dwNetInterface_set(NET_DVR_ETHERNET_MULTI self, DWORD dwNetInterface)"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_dwNetInterface_get", _wrap_NET_DVR_ETHERNET_MULTI_dwNetInterface_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_dwNetInterface_get(NET_DVR_ETHERNET_MULTI self) -> DWORD"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_byCardType_set", _wrap_NET_DVR_ETHERNET_MULTI_byCardType_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_byCardType_set(NET_DVR_ETHERNET_MULTI self, BYTE byCardType)"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_byCardType_get", _wrap_NET_DVR_ETHERNET_MULTI_byCardType_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_byCardType_get(NET_DVR_ETHERNET_MULTI self) -> BYTE"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_byEnableDNS_set", _wrap_NET_DVR_ETHERNET_MULTI_byEnableDNS_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_byEnableDNS_set(NET_DVR_ETHERNET_MULTI self, BYTE byEnableDNS)"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_byEnableDNS_get", _wrap_NET_DVR_ETHERNET_MULTI_byEnableDNS_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_byEnableDNS_get(NET_DVR_ETHERNET_MULTI self) -> BYTE"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_wMTU_set", _wrap_NET_DVR_ETHERNET_MULTI_wMTU_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_wMTU_set(NET_DVR_ETHERNET_MULTI self, WORD wMTU)"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_wMTU_get", _wrap_NET_DVR_ETHERNET_MULTI_wMTU_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_wMTU_get(NET_DVR_ETHERNET_MULTI self) -> WORD"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_byMACAddr_set", _wrap_NET_DVR_ETHERNET_MULTI_byMACAddr_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_byMACAddr_set(NET_DVR_ETHERNET_MULTI self, BYTE [6] byMACAddr)"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_byMACAddr_get", _wrap_NET_DVR_ETHERNET_MULTI_byMACAddr_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_byMACAddr_get(NET_DVR_ETHERNET_MULTI self) -> BYTE [6]"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_byEthernetPortNo_set", _wrap_NET_DVR_ETHERNET_MULTI_byEthernetPortNo_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_byEthernetPortNo_set(NET_DVR_ETHERNET_MULTI self, BYTE byEthernetPortNo)"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_byEthernetPortNo_get", _wrap_NET_DVR_ETHERNET_MULTI_byEthernetPortNo_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_byEthernetPortNo_get(NET_DVR_ETHERNET_MULTI self) -> BYTE"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_bySilkScreen_set", _wrap_NET_DVR_ETHERNET_MULTI_bySilkScreen_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_bySilkScreen_set(NET_DVR_ETHERNET_MULTI self, BYTE bySilkScreen)"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_bySilkScreen_get", _wrap_NET_DVR_ETHERNET_MULTI_bySilkScreen_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_bySilkScreen_get(NET_DVR_ETHERNET_MULTI self) -> BYTE"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_byUseDhcp_set", _wrap_NET_DVR_ETHERNET_MULTI_byUseDhcp_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_byUseDhcp_set(NET_DVR_ETHERNET_MULTI self, BYTE byUseDhcp)"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_byUseDhcp_get", _wrap_NET_DVR_ETHERNET_MULTI_byUseDhcp_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_byUseDhcp_get(NET_DVR_ETHERNET_MULTI self) -> BYTE"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_byRes3_set", _wrap_NET_DVR_ETHERNET_MULTI_byRes3_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_byRes3_set(NET_DVR_ETHERNET_MULTI self, BYTE [3] byRes3)"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_byRes3_get", _wrap_NET_DVR_ETHERNET_MULTI_byRes3_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_byRes3_get(NET_DVR_ETHERNET_MULTI self) -> BYTE [3]"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_struGatewayIpAddr_set", _wrap_NET_DVR_ETHERNET_MULTI_struGatewayIpAddr_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_struGatewayIpAddr_set(NET_DVR_ETHERNET_MULTI self, NET_DVR_IPADDR struGatewayIpAddr)"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_struGatewayIpAddr_get", _wrap_NET_DVR_ETHERNET_MULTI_struGatewayIpAddr_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_struGatewayIpAddr_get(NET_DVR_ETHERNET_MULTI self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_struDnsServer1IpAddr_set", _wrap_NET_DVR_ETHERNET_MULTI_struDnsServer1IpAddr_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_struDnsServer1IpAddr_set(NET_DVR_ETHERNET_MULTI self, NET_DVR_IPADDR struDnsServer1IpAddr)"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_struDnsServer1IpAddr_get", _wrap_NET_DVR_ETHERNET_MULTI_struDnsServer1IpAddr_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_struDnsServer1IpAddr_get(NET_DVR_ETHERNET_MULTI self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_struDnsServer2IpAddr_set", _wrap_NET_DVR_ETHERNET_MULTI_struDnsServer2IpAddr_set, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_struDnsServer2IpAddr_set(NET_DVR_ETHERNET_MULTI self, NET_DVR_IPADDR struDnsServer2IpAddr)"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_struDnsServer2IpAddr_get", _wrap_NET_DVR_ETHERNET_MULTI_struDnsServer2IpAddr_get, METH_VARARGS, (char *)"NET_DVR_ETHERNET_MULTI_struDnsServer2IpAddr_get(NET_DVR_ETHERNET_MULTI self) -> NET_DVR_IPADDR"},
	 { (char *)"new_NET_DVR_ETHERNET_MULTI", _wrap_new_NET_DVR_ETHERNET_MULTI, METH_VARARGS, (char *)"new_NET_DVR_ETHERNET_MULTI() -> NET_DVR_ETHERNET_MULTI"},
	 { (char *)"delete_NET_DVR_ETHERNET_MULTI", _wrap_delete_NET_DVR_ETHERNET_MULTI, METH_VARARGS, (char *)"delete_NET_DVR_ETHERNET_MULTI(NET_DVR_ETHERNET_MULTI self)"},
	 { (char *)"NET_DVR_ETHERNET_MULTI_swigregister", NET_DVR_ETHERNET_MULTI_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_NETCFG_MULTI_dwSize_set", _wrap_NET_DVR_NETCFG_MULTI_dwSize_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_dwSize_set(NET_DVR_NETCFG_MULTI self, DWORD dwSize)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_dwSize_get", _wrap_NET_DVR_NETCFG_MULTI_dwSize_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_dwSize_get(NET_DVR_NETCFG_MULTI self) -> DWORD"},
	 { (char *)"NET_DVR_NETCFG_MULTI_byDefaultRoute_set", _wrap_NET_DVR_NETCFG_MULTI_byDefaultRoute_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_byDefaultRoute_set(NET_DVR_NETCFG_MULTI self, BYTE byDefaultRoute)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_byDefaultRoute_get", _wrap_NET_DVR_NETCFG_MULTI_byDefaultRoute_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_byDefaultRoute_get(NET_DVR_NETCFG_MULTI self) -> BYTE"},
	 { (char *)"NET_DVR_NETCFG_MULTI_byNetworkCardNum_set", _wrap_NET_DVR_NETCFG_MULTI_byNetworkCardNum_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_byNetworkCardNum_set(NET_DVR_NETCFG_MULTI self, BYTE byNetworkCardNum)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_byNetworkCardNum_get", _wrap_NET_DVR_NETCFG_MULTI_byNetworkCardNum_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_byNetworkCardNum_get(NET_DVR_NETCFG_MULTI self) -> BYTE"},
	 { (char *)"NET_DVR_NETCFG_MULTI_byWorkMode_set", _wrap_NET_DVR_NETCFG_MULTI_byWorkMode_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_byWorkMode_set(NET_DVR_NETCFG_MULTI self, BYTE byWorkMode)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_byWorkMode_get", _wrap_NET_DVR_NETCFG_MULTI_byWorkMode_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_byWorkMode_get(NET_DVR_NETCFG_MULTI self) -> BYTE"},
	 { (char *)"NET_DVR_NETCFG_MULTI_byRes_set", _wrap_NET_DVR_NETCFG_MULTI_byRes_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_byRes_set(NET_DVR_NETCFG_MULTI self, BYTE byRes)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_byRes_get", _wrap_NET_DVR_NETCFG_MULTI_byRes_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_byRes_get(NET_DVR_NETCFG_MULTI self) -> BYTE"},
	 { (char *)"NET_DVR_NETCFG_MULTI_struEtherNet_set", _wrap_NET_DVR_NETCFG_MULTI_struEtherNet_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_struEtherNet_set(NET_DVR_NETCFG_MULTI self, NET_DVR_ETHERNET_MULTI struEtherNet)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_struEtherNet_get", _wrap_NET_DVR_NETCFG_MULTI_struEtherNet_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_struEtherNet_get(NET_DVR_NETCFG_MULTI self) -> NET_DVR_ETHERNET_MULTI"},
	 { (char *)"NET_DVR_NETCFG_MULTI_struManageHost1IpAddr_set", _wrap_NET_DVR_NETCFG_MULTI_struManageHost1IpAddr_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_struManageHost1IpAddr_set(NET_DVR_NETCFG_MULTI self, NET_DVR_IPADDR struManageHost1IpAddr)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_struManageHost1IpAddr_get", _wrap_NET_DVR_NETCFG_MULTI_struManageHost1IpAddr_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_struManageHost1IpAddr_get(NET_DVR_NETCFG_MULTI self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_MULTI_struManageHost2IpAddr_set", _wrap_NET_DVR_NETCFG_MULTI_struManageHost2IpAddr_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_struManageHost2IpAddr_set(NET_DVR_NETCFG_MULTI self, NET_DVR_IPADDR struManageHost2IpAddr)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_struManageHost2IpAddr_get", _wrap_NET_DVR_NETCFG_MULTI_struManageHost2IpAddr_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_struManageHost2IpAddr_get(NET_DVR_NETCFG_MULTI self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_MULTI_struAlarmHostIpAddr_set", _wrap_NET_DVR_NETCFG_MULTI_struAlarmHostIpAddr_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_struAlarmHostIpAddr_set(NET_DVR_NETCFG_MULTI self, NET_DVR_IPADDR struAlarmHostIpAddr)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_struAlarmHostIpAddr_get", _wrap_NET_DVR_NETCFG_MULTI_struAlarmHostIpAddr_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_struAlarmHostIpAddr_get(NET_DVR_NETCFG_MULTI self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_MULTI_wManageHost1Port_set", _wrap_NET_DVR_NETCFG_MULTI_wManageHost1Port_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_wManageHost1Port_set(NET_DVR_NETCFG_MULTI self, WORD wManageHost1Port)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_wManageHost1Port_get", _wrap_NET_DVR_NETCFG_MULTI_wManageHost1Port_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_wManageHost1Port_get(NET_DVR_NETCFG_MULTI self) -> WORD"},
	 { (char *)"NET_DVR_NETCFG_MULTI_wManageHost2Port_set", _wrap_NET_DVR_NETCFG_MULTI_wManageHost2Port_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_wManageHost2Port_set(NET_DVR_NETCFG_MULTI self, WORD wManageHost2Port)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_wManageHost2Port_get", _wrap_NET_DVR_NETCFG_MULTI_wManageHost2Port_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_wManageHost2Port_get(NET_DVR_NETCFG_MULTI self) -> WORD"},
	 { (char *)"NET_DVR_NETCFG_MULTI_wAlarmHostIpPort_set", _wrap_NET_DVR_NETCFG_MULTI_wAlarmHostIpPort_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_wAlarmHostIpPort_set(NET_DVR_NETCFG_MULTI self, WORD wAlarmHostIpPort)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_wAlarmHostIpPort_get", _wrap_NET_DVR_NETCFG_MULTI_wAlarmHostIpPort_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_wAlarmHostIpPort_get(NET_DVR_NETCFG_MULTI self) -> WORD"},
	 { (char *)"NET_DVR_NETCFG_MULTI_byIpResolver_set", _wrap_NET_DVR_NETCFG_MULTI_byIpResolver_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_byIpResolver_set(NET_DVR_NETCFG_MULTI self, BYTE [64] byIpResolver)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_byIpResolver_get", _wrap_NET_DVR_NETCFG_MULTI_byIpResolver_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_byIpResolver_get(NET_DVR_NETCFG_MULTI self) -> BYTE [64]"},
	 { (char *)"NET_DVR_NETCFG_MULTI_wIpResolverPort_set", _wrap_NET_DVR_NETCFG_MULTI_wIpResolverPort_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_wIpResolverPort_set(NET_DVR_NETCFG_MULTI self, WORD wIpResolverPort)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_wIpResolverPort_get", _wrap_NET_DVR_NETCFG_MULTI_wIpResolverPort_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_wIpResolverPort_get(NET_DVR_NETCFG_MULTI self) -> WORD"},
	 { (char *)"NET_DVR_NETCFG_MULTI_wDvrPort_set", _wrap_NET_DVR_NETCFG_MULTI_wDvrPort_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_wDvrPort_set(NET_DVR_NETCFG_MULTI self, WORD wDvrPort)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_wDvrPort_get", _wrap_NET_DVR_NETCFG_MULTI_wDvrPort_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_wDvrPort_get(NET_DVR_NETCFG_MULTI self) -> WORD"},
	 { (char *)"NET_DVR_NETCFG_MULTI_wHttpPortNo_set", _wrap_NET_DVR_NETCFG_MULTI_wHttpPortNo_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_wHttpPortNo_set(NET_DVR_NETCFG_MULTI self, WORD wHttpPortNo)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_wHttpPortNo_get", _wrap_NET_DVR_NETCFG_MULTI_wHttpPortNo_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_wHttpPortNo_get(NET_DVR_NETCFG_MULTI self) -> WORD"},
	 { (char *)"NET_DVR_NETCFG_MULTI_wDvrPort2_set", _wrap_NET_DVR_NETCFG_MULTI_wDvrPort2_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_wDvrPort2_set(NET_DVR_NETCFG_MULTI self, WORD wDvrPort2)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_wDvrPort2_get", _wrap_NET_DVR_NETCFG_MULTI_wDvrPort2_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_wDvrPort2_get(NET_DVR_NETCFG_MULTI self) -> WORD"},
	 { (char *)"NET_DVR_NETCFG_MULTI_byRes2_set", _wrap_NET_DVR_NETCFG_MULTI_byRes2_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_byRes2_set(NET_DVR_NETCFG_MULTI self, BYTE [4] byRes2)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_byRes2_get", _wrap_NET_DVR_NETCFG_MULTI_byRes2_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_byRes2_get(NET_DVR_NETCFG_MULTI self) -> BYTE [4]"},
	 { (char *)"NET_DVR_NETCFG_MULTI_struMulticastIpAddr_set", _wrap_NET_DVR_NETCFG_MULTI_struMulticastIpAddr_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_struMulticastIpAddr_set(NET_DVR_NETCFG_MULTI self, NET_DVR_IPADDR struMulticastIpAddr)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_struMulticastIpAddr_get", _wrap_NET_DVR_NETCFG_MULTI_struMulticastIpAddr_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_struMulticastIpAddr_get(NET_DVR_NETCFG_MULTI self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_MULTI_struPPPoE_set", _wrap_NET_DVR_NETCFG_MULTI_struPPPoE_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_struPPPoE_set(NET_DVR_NETCFG_MULTI self, NET_DVR_PPPOECFG struPPPoE)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_struPPPoE_get", _wrap_NET_DVR_NETCFG_MULTI_struPPPoE_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_struPPPoE_get(NET_DVR_NETCFG_MULTI self) -> NET_DVR_PPPOECFG"},
	 { (char *)"NET_DVR_NETCFG_MULTI_byRes3_set", _wrap_NET_DVR_NETCFG_MULTI_byRes3_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_byRes3_set(NET_DVR_NETCFG_MULTI self, BYTE [24] byRes3)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_byRes3_get", _wrap_NET_DVR_NETCFG_MULTI_byRes3_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_MULTI_byRes3_get(NET_DVR_NETCFG_MULTI self) -> BYTE [24]"},
	 { (char *)"new_NET_DVR_NETCFG_MULTI", _wrap_new_NET_DVR_NETCFG_MULTI, METH_VARARGS, (char *)"new_NET_DVR_NETCFG_MULTI() -> NET_DVR_NETCFG_MULTI"},
	 { (char *)"delete_NET_DVR_NETCFG_MULTI", _wrap_delete_NET_DVR_NETCFG_MULTI, METH_VARARGS, (char *)"delete_NET_DVR_NETCFG_MULTI(NET_DVR_NETCFG_MULTI self)"},
	 { (char *)"NET_DVR_NETCFG_MULTI_swigregister", NET_DVR_NETCFG_MULTI_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_NETCFG_dwSize_set", _wrap_NET_DVR_NETCFG_dwSize_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_dwSize_set(NET_DVR_NETCFG self, DWORD dwSize)"},
	 { (char *)"NET_DVR_NETCFG_dwSize_get", _wrap_NET_DVR_NETCFG_dwSize_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_dwSize_get(NET_DVR_NETCFG self) -> DWORD"},
	 { (char *)"NET_DVR_NETCFG_struEtherNet_set", _wrap_NET_DVR_NETCFG_struEtherNet_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_struEtherNet_set(NET_DVR_NETCFG self, NET_DVR_ETHERNET struEtherNet)"},
	 { (char *)"NET_DVR_NETCFG_struEtherNet_get", _wrap_NET_DVR_NETCFG_struEtherNet_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_struEtherNet_get(NET_DVR_NETCFG self) -> NET_DVR_ETHERNET"},
	 { (char *)"NET_DVR_NETCFG_sManageHostIP_set", _wrap_NET_DVR_NETCFG_sManageHostIP_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_sManageHostIP_set(NET_DVR_NETCFG self, char [16] sManageHostIP)"},
	 { (char *)"NET_DVR_NETCFG_sManageHostIP_get", _wrap_NET_DVR_NETCFG_sManageHostIP_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_sManageHostIP_get(NET_DVR_NETCFG self) -> char [16]"},
	 { (char *)"NET_DVR_NETCFG_wManageHostPort_set", _wrap_NET_DVR_NETCFG_wManageHostPort_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_wManageHostPort_set(NET_DVR_NETCFG self, WORD wManageHostPort)"},
	 { (char *)"NET_DVR_NETCFG_wManageHostPort_get", _wrap_NET_DVR_NETCFG_wManageHostPort_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_wManageHostPort_get(NET_DVR_NETCFG self) -> WORD"},
	 { (char *)"NET_DVR_NETCFG_sIPServerIP_set", _wrap_NET_DVR_NETCFG_sIPServerIP_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_sIPServerIP_set(NET_DVR_NETCFG self, char [16] sIPServerIP)"},
	 { (char *)"NET_DVR_NETCFG_sIPServerIP_get", _wrap_NET_DVR_NETCFG_sIPServerIP_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_sIPServerIP_get(NET_DVR_NETCFG self) -> char [16]"},
	 { (char *)"NET_DVR_NETCFG_sMultiCastIP_set", _wrap_NET_DVR_NETCFG_sMultiCastIP_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_sMultiCastIP_set(NET_DVR_NETCFG self, char [16] sMultiCastIP)"},
	 { (char *)"NET_DVR_NETCFG_sMultiCastIP_get", _wrap_NET_DVR_NETCFG_sMultiCastIP_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_sMultiCastIP_get(NET_DVR_NETCFG self) -> char [16]"},
	 { (char *)"NET_DVR_NETCFG_sGatewayIP_set", _wrap_NET_DVR_NETCFG_sGatewayIP_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_sGatewayIP_set(NET_DVR_NETCFG self, char [16] sGatewayIP)"},
	 { (char *)"NET_DVR_NETCFG_sGatewayIP_get", _wrap_NET_DVR_NETCFG_sGatewayIP_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_sGatewayIP_get(NET_DVR_NETCFG self) -> char [16]"},
	 { (char *)"NET_DVR_NETCFG_sNFSIP_set", _wrap_NET_DVR_NETCFG_sNFSIP_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_sNFSIP_set(NET_DVR_NETCFG self, char [16] sNFSIP)"},
	 { (char *)"NET_DVR_NETCFG_sNFSIP_get", _wrap_NET_DVR_NETCFG_sNFSIP_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_sNFSIP_get(NET_DVR_NETCFG self) -> char [16]"},
	 { (char *)"NET_DVR_NETCFG_sNFSDirectory_set", _wrap_NET_DVR_NETCFG_sNFSDirectory_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_sNFSDirectory_set(NET_DVR_NETCFG self, BYTE [128] sNFSDirectory)"},
	 { (char *)"NET_DVR_NETCFG_sNFSDirectory_get", _wrap_NET_DVR_NETCFG_sNFSDirectory_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_sNFSDirectory_get(NET_DVR_NETCFG self) -> BYTE [128]"},
	 { (char *)"NET_DVR_NETCFG_dwPPPOE_set", _wrap_NET_DVR_NETCFG_dwPPPOE_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_dwPPPOE_set(NET_DVR_NETCFG self, DWORD dwPPPOE)"},
	 { (char *)"NET_DVR_NETCFG_dwPPPOE_get", _wrap_NET_DVR_NETCFG_dwPPPOE_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_dwPPPOE_get(NET_DVR_NETCFG self) -> DWORD"},
	 { (char *)"NET_DVR_NETCFG_sPPPoEUser_set", _wrap_NET_DVR_NETCFG_sPPPoEUser_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_sPPPoEUser_set(NET_DVR_NETCFG self, BYTE [32] sPPPoEUser)"},
	 { (char *)"NET_DVR_NETCFG_sPPPoEUser_get", _wrap_NET_DVR_NETCFG_sPPPoEUser_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_sPPPoEUser_get(NET_DVR_NETCFG self) -> BYTE [32]"},
	 { (char *)"NET_DVR_NETCFG_sPPPoEPassword_set", _wrap_NET_DVR_NETCFG_sPPPoEPassword_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_sPPPoEPassword_set(NET_DVR_NETCFG self, char [16] sPPPoEPassword)"},
	 { (char *)"NET_DVR_NETCFG_sPPPoEPassword_get", _wrap_NET_DVR_NETCFG_sPPPoEPassword_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_sPPPoEPassword_get(NET_DVR_NETCFG self) -> char [16]"},
	 { (char *)"NET_DVR_NETCFG_sPPPoEIP_set", _wrap_NET_DVR_NETCFG_sPPPoEIP_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_sPPPoEIP_set(NET_DVR_NETCFG self, char [16] sPPPoEIP)"},
	 { (char *)"NET_DVR_NETCFG_sPPPoEIP_get", _wrap_NET_DVR_NETCFG_sPPPoEIP_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_sPPPoEIP_get(NET_DVR_NETCFG self) -> char [16]"},
	 { (char *)"NET_DVR_NETCFG_wHttpPort_set", _wrap_NET_DVR_NETCFG_wHttpPort_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_wHttpPort_set(NET_DVR_NETCFG self, WORD wHttpPort)"},
	 { (char *)"NET_DVR_NETCFG_wHttpPort_get", _wrap_NET_DVR_NETCFG_wHttpPort_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_wHttpPort_get(NET_DVR_NETCFG self) -> WORD"},
	 { (char *)"new_NET_DVR_NETCFG", _wrap_new_NET_DVR_NETCFG, METH_VARARGS, (char *)"new_NET_DVR_NETCFG() -> NET_DVR_NETCFG"},
	 { (char *)"delete_NET_DVR_NETCFG", _wrap_delete_NET_DVR_NETCFG, METH_VARARGS, (char *)"delete_NET_DVR_NETCFG(NET_DVR_NETCFG self)"},
	 { (char *)"NET_DVR_NETCFG_swigregister", NET_DVR_NETCFG_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_NETCFG_V50_dwSize_set", _wrap_NET_DVR_NETCFG_V50_dwSize_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_dwSize_set(NET_DVR_NETCFG_V50 self, DWORD dwSize)"},
	 { (char *)"NET_DVR_NETCFG_V50_dwSize_get", _wrap_NET_DVR_NETCFG_V50_dwSize_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_dwSize_get(NET_DVR_NETCFG_V50 self) -> DWORD"},
	 { (char *)"NET_DVR_NETCFG_V50_struEtherNet_set", _wrap_NET_DVR_NETCFG_V50_struEtherNet_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struEtherNet_set(NET_DVR_NETCFG_V50 self, NET_DVR_ETHERNET_V30 struEtherNet)"},
	 { (char *)"NET_DVR_NETCFG_V50_struEtherNet_get", _wrap_NET_DVR_NETCFG_V50_struEtherNet_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struEtherNet_get(NET_DVR_NETCFG_V50 self) -> NET_DVR_ETHERNET_V30"},
	 { (char *)"NET_DVR_NETCFG_V50_struRes1_set", _wrap_NET_DVR_NETCFG_V50_struRes1_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struRes1_set(NET_DVR_NETCFG_V50 self, NET_DVR_IPADDR struRes1)"},
	 { (char *)"NET_DVR_NETCFG_V50_struRes1_get", _wrap_NET_DVR_NETCFG_V50_struRes1_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struRes1_get(NET_DVR_NETCFG_V50 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_V50_struAlarmHostIpAddr_set", _wrap_NET_DVR_NETCFG_V50_struAlarmHostIpAddr_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struAlarmHostIpAddr_set(NET_DVR_NETCFG_V50 self, NET_DVR_IPADDR struAlarmHostIpAddr)"},
	 { (char *)"NET_DVR_NETCFG_V50_struAlarmHostIpAddr_get", _wrap_NET_DVR_NETCFG_V50_struAlarmHostIpAddr_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struAlarmHostIpAddr_get(NET_DVR_NETCFG_V50 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_V50_byRes2_set", _wrap_NET_DVR_NETCFG_V50_byRes2_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_byRes2_set(NET_DVR_NETCFG_V50 self, BYTE [4] byRes2)"},
	 { (char *)"NET_DVR_NETCFG_V50_byRes2_get", _wrap_NET_DVR_NETCFG_V50_byRes2_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_byRes2_get(NET_DVR_NETCFG_V50 self) -> BYTE [4]"},
	 { (char *)"NET_DVR_NETCFG_V50_wAlarmHostIpPort_set", _wrap_NET_DVR_NETCFG_V50_wAlarmHostIpPort_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_wAlarmHostIpPort_set(NET_DVR_NETCFG_V50 self, WORD wAlarmHostIpPort)"},
	 { (char *)"NET_DVR_NETCFG_V50_wAlarmHostIpPort_get", _wrap_NET_DVR_NETCFG_V50_wAlarmHostIpPort_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_wAlarmHostIpPort_get(NET_DVR_NETCFG_V50 self) -> WORD"},
	 { (char *)"NET_DVR_NETCFG_V50_byUseDhcp_set", _wrap_NET_DVR_NETCFG_V50_byUseDhcp_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_byUseDhcp_set(NET_DVR_NETCFG_V50 self, BYTE byUseDhcp)"},
	 { (char *)"NET_DVR_NETCFG_V50_byUseDhcp_get", _wrap_NET_DVR_NETCFG_V50_byUseDhcp_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_byUseDhcp_get(NET_DVR_NETCFG_V50 self) -> BYTE"},
	 { (char *)"NET_DVR_NETCFG_V50_byIPv6Mode_set", _wrap_NET_DVR_NETCFG_V50_byIPv6Mode_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_byIPv6Mode_set(NET_DVR_NETCFG_V50 self, BYTE byIPv6Mode)"},
	 { (char *)"NET_DVR_NETCFG_V50_byIPv6Mode_get", _wrap_NET_DVR_NETCFG_V50_byIPv6Mode_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_byIPv6Mode_get(NET_DVR_NETCFG_V50 self) -> BYTE"},
	 { (char *)"NET_DVR_NETCFG_V50_struDnsServer1IpAddr_set", _wrap_NET_DVR_NETCFG_V50_struDnsServer1IpAddr_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struDnsServer1IpAddr_set(NET_DVR_NETCFG_V50 self, NET_DVR_IPADDR struDnsServer1IpAddr)"},
	 { (char *)"NET_DVR_NETCFG_V50_struDnsServer1IpAddr_get", _wrap_NET_DVR_NETCFG_V50_struDnsServer1IpAddr_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struDnsServer1IpAddr_get(NET_DVR_NETCFG_V50 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_V50_struDnsServer2IpAddr_set", _wrap_NET_DVR_NETCFG_V50_struDnsServer2IpAddr_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struDnsServer2IpAddr_set(NET_DVR_NETCFG_V50 self, NET_DVR_IPADDR struDnsServer2IpAddr)"},
	 { (char *)"NET_DVR_NETCFG_V50_struDnsServer2IpAddr_get", _wrap_NET_DVR_NETCFG_V50_struDnsServer2IpAddr_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struDnsServer2IpAddr_get(NET_DVR_NETCFG_V50 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_V50_byIpResolver_set", _wrap_NET_DVR_NETCFG_V50_byIpResolver_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_byIpResolver_set(NET_DVR_NETCFG_V50 self, BYTE [64] byIpResolver)"},
	 { (char *)"NET_DVR_NETCFG_V50_byIpResolver_get", _wrap_NET_DVR_NETCFG_V50_byIpResolver_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_byIpResolver_get(NET_DVR_NETCFG_V50 self) -> BYTE [64]"},
	 { (char *)"NET_DVR_NETCFG_V50_wIpResolverPort_set", _wrap_NET_DVR_NETCFG_V50_wIpResolverPort_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_wIpResolverPort_set(NET_DVR_NETCFG_V50 self, WORD wIpResolverPort)"},
	 { (char *)"NET_DVR_NETCFG_V50_wIpResolverPort_get", _wrap_NET_DVR_NETCFG_V50_wIpResolverPort_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_wIpResolverPort_get(NET_DVR_NETCFG_V50 self) -> WORD"},
	 { (char *)"NET_DVR_NETCFG_V50_wHttpPortNo_set", _wrap_NET_DVR_NETCFG_V50_wHttpPortNo_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_wHttpPortNo_set(NET_DVR_NETCFG_V50 self, WORD wHttpPortNo)"},
	 { (char *)"NET_DVR_NETCFG_V50_wHttpPortNo_get", _wrap_NET_DVR_NETCFG_V50_wHttpPortNo_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_wHttpPortNo_get(NET_DVR_NETCFG_V50 self) -> WORD"},
	 { (char *)"NET_DVR_NETCFG_V50_struMulticastIpAddr_set", _wrap_NET_DVR_NETCFG_V50_struMulticastIpAddr_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struMulticastIpAddr_set(NET_DVR_NETCFG_V50 self, NET_DVR_IPADDR struMulticastIpAddr)"},
	 { (char *)"NET_DVR_NETCFG_V50_struMulticastIpAddr_get", _wrap_NET_DVR_NETCFG_V50_struMulticastIpAddr_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struMulticastIpAddr_get(NET_DVR_NETCFG_V50 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_V50_struGatewayIpAddr_set", _wrap_NET_DVR_NETCFG_V50_struGatewayIpAddr_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struGatewayIpAddr_set(NET_DVR_NETCFG_V50 self, NET_DVR_IPADDR struGatewayIpAddr)"},
	 { (char *)"NET_DVR_NETCFG_V50_struGatewayIpAddr_get", _wrap_NET_DVR_NETCFG_V50_struGatewayIpAddr_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struGatewayIpAddr_get(NET_DVR_NETCFG_V50 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_V50_struPPPoE_set", _wrap_NET_DVR_NETCFG_V50_struPPPoE_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struPPPoE_set(NET_DVR_NETCFG_V50 self, NET_DVR_PPPOECFG struPPPoE)"},
	 { (char *)"NET_DVR_NETCFG_V50_struPPPoE_get", _wrap_NET_DVR_NETCFG_V50_struPPPoE_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struPPPoE_get(NET_DVR_NETCFG_V50 self) -> NET_DVR_PPPOECFG"},
	 { (char *)"NET_DVR_NETCFG_V50_byEnablePrivateMulticastDiscovery_set", _wrap_NET_DVR_NETCFG_V50_byEnablePrivateMulticastDiscovery_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_byEnablePrivateMulticastDiscovery_set(NET_DVR_NETCFG_V50 self, BYTE byEnablePrivateMulticastDiscovery)"},
	 { (char *)"NET_DVR_NETCFG_V50_byEnablePrivateMulticastDiscovery_get", _wrap_NET_DVR_NETCFG_V50_byEnablePrivateMulticastDiscovery_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_byEnablePrivateMulticastDiscovery_get(NET_DVR_NETCFG_V50 self) -> BYTE"},
	 { (char *)"NET_DVR_NETCFG_V50_byEnableOnvifMulticastDiscovery_set", _wrap_NET_DVR_NETCFG_V50_byEnableOnvifMulticastDiscovery_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_byEnableOnvifMulticastDiscovery_set(NET_DVR_NETCFG_V50 self, BYTE byEnableOnvifMulticastDiscovery)"},
	 { (char *)"NET_DVR_NETCFG_V50_byEnableOnvifMulticastDiscovery_get", _wrap_NET_DVR_NETCFG_V50_byEnableOnvifMulticastDiscovery_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_byEnableOnvifMulticastDiscovery_get(NET_DVR_NETCFG_V50 self) -> BYTE"},
	 { (char *)"NET_DVR_NETCFG_V50_wAlarmHost2IpPort_set", _wrap_NET_DVR_NETCFG_V50_wAlarmHost2IpPort_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_wAlarmHost2IpPort_set(NET_DVR_NETCFG_V50 self, WORD wAlarmHost2IpPort)"},
	 { (char *)"NET_DVR_NETCFG_V50_wAlarmHost2IpPort_get", _wrap_NET_DVR_NETCFG_V50_wAlarmHost2IpPort_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_wAlarmHost2IpPort_get(NET_DVR_NETCFG_V50 self) -> WORD"},
	 { (char *)"NET_DVR_NETCFG_V50_struAlarmHost2IpAddr_set", _wrap_NET_DVR_NETCFG_V50_struAlarmHost2IpAddr_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struAlarmHost2IpAddr_set(NET_DVR_NETCFG_V50 self, NET_DVR_IPADDR struAlarmHost2IpAddr)"},
	 { (char *)"NET_DVR_NETCFG_V50_struAlarmHost2IpAddr_get", _wrap_NET_DVR_NETCFG_V50_struAlarmHost2IpAddr_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_struAlarmHost2IpAddr_get(NET_DVR_NETCFG_V50 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_NETCFG_V50_byEnableDNS_set", _wrap_NET_DVR_NETCFG_V50_byEnableDNS_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_byEnableDNS_set(NET_DVR_NETCFG_V50 self, BYTE byEnableDNS)"},
	 { (char *)"NET_DVR_NETCFG_V50_byEnableDNS_get", _wrap_NET_DVR_NETCFG_V50_byEnableDNS_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_byEnableDNS_get(NET_DVR_NETCFG_V50 self) -> BYTE"},
	 { (char *)"NET_DVR_NETCFG_V50_byRes_set", _wrap_NET_DVR_NETCFG_V50_byRes_set, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_byRes_set(NET_DVR_NETCFG_V50 self, BYTE [599] byRes)"},
	 { (char *)"NET_DVR_NETCFG_V50_byRes_get", _wrap_NET_DVR_NETCFG_V50_byRes_get, METH_VARARGS, (char *)"NET_DVR_NETCFG_V50_byRes_get(NET_DVR_NETCFG_V50 self) -> BYTE [599]"},
	 { (char *)"new_NET_DVR_NETCFG_V50", _wrap_new_NET_DVR_NETCFG_V50, METH_VARARGS, (char *)"new_NET_DVR_NETCFG_V50() -> NET_DVR_NETCFG_V50"},
	 { (char *)"delete_NET_DVR_NETCFG_V50", _wrap_delete_NET_DVR_NETCFG_V50, METH_VARARGS, (char *)"delete_NET_DVR_NETCFG_V50(NET_DVR_NETCFG_V50 self)"},
	 { (char *)"NET_DVR_NETCFG_V50_swigregister", NET_DVR_NETCFG_V50_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_SIP_CFG_dwSize_set", _wrap_NET_DVR_SIP_CFG_dwSize_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_dwSize_set(NET_DVR_SIP_CFG self, DWORD dwSize)"},
	 { (char *)"NET_DVR_SIP_CFG_dwSize_get", _wrap_NET_DVR_SIP_CFG_dwSize_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_dwSize_get(NET_DVR_SIP_CFG self) -> DWORD"},
	 { (char *)"NET_DVR_SIP_CFG_byEnableAutoLogin_set", _wrap_NET_DVR_SIP_CFG_byEnableAutoLogin_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byEnableAutoLogin_set(NET_DVR_SIP_CFG self, BYTE byEnableAutoLogin)"},
	 { (char *)"NET_DVR_SIP_CFG_byEnableAutoLogin_get", _wrap_NET_DVR_SIP_CFG_byEnableAutoLogin_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byEnableAutoLogin_get(NET_DVR_SIP_CFG self) -> BYTE"},
	 { (char *)"NET_DVR_SIP_CFG_byLoginStatus_set", _wrap_NET_DVR_SIP_CFG_byLoginStatus_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byLoginStatus_set(NET_DVR_SIP_CFG self, BYTE byLoginStatus)"},
	 { (char *)"NET_DVR_SIP_CFG_byLoginStatus_get", _wrap_NET_DVR_SIP_CFG_byLoginStatus_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byLoginStatus_get(NET_DVR_SIP_CFG self) -> BYTE"},
	 { (char *)"NET_DVR_SIP_CFG_byRes1_set", _wrap_NET_DVR_SIP_CFG_byRes1_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byRes1_set(NET_DVR_SIP_CFG self, BYTE [2] byRes1)"},
	 { (char *)"NET_DVR_SIP_CFG_byRes1_get", _wrap_NET_DVR_SIP_CFG_byRes1_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byRes1_get(NET_DVR_SIP_CFG self) -> BYTE [2]"},
	 { (char *)"NET_DVR_SIP_CFG_stuServerIP_set", _wrap_NET_DVR_SIP_CFG_stuServerIP_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_stuServerIP_set(NET_DVR_SIP_CFG self, NET_DVR_IPADDR stuServerIP)"},
	 { (char *)"NET_DVR_SIP_CFG_stuServerIP_get", _wrap_NET_DVR_SIP_CFG_stuServerIP_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_stuServerIP_get(NET_DVR_SIP_CFG self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_SIP_CFG_wServerPort_set", _wrap_NET_DVR_SIP_CFG_wServerPort_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_wServerPort_set(NET_DVR_SIP_CFG self, WORD wServerPort)"},
	 { (char *)"NET_DVR_SIP_CFG_wServerPort_get", _wrap_NET_DVR_SIP_CFG_wServerPort_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_wServerPort_get(NET_DVR_SIP_CFG self) -> WORD"},
	 { (char *)"NET_DVR_SIP_CFG_byRes2_set", _wrap_NET_DVR_SIP_CFG_byRes2_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byRes2_set(NET_DVR_SIP_CFG self, BYTE [2] byRes2)"},
	 { (char *)"NET_DVR_SIP_CFG_byRes2_get", _wrap_NET_DVR_SIP_CFG_byRes2_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byRes2_get(NET_DVR_SIP_CFG self) -> BYTE [2]"},
	 { (char *)"NET_DVR_SIP_CFG_byUserName_set", _wrap_NET_DVR_SIP_CFG_byUserName_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byUserName_set(NET_DVR_SIP_CFG self, BYTE [32] byUserName)"},
	 { (char *)"NET_DVR_SIP_CFG_byUserName_get", _wrap_NET_DVR_SIP_CFG_byUserName_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byUserName_get(NET_DVR_SIP_CFG self) -> BYTE [32]"},
	 { (char *)"NET_DVR_SIP_CFG_byPassWord_set", _wrap_NET_DVR_SIP_CFG_byPassWord_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byPassWord_set(NET_DVR_SIP_CFG self, BYTE [16] byPassWord)"},
	 { (char *)"NET_DVR_SIP_CFG_byPassWord_get", _wrap_NET_DVR_SIP_CFG_byPassWord_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byPassWord_get(NET_DVR_SIP_CFG self) -> BYTE [16]"},
	 { (char *)"NET_DVR_SIP_CFG_byLocalNo_set", _wrap_NET_DVR_SIP_CFG_byLocalNo_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byLocalNo_set(NET_DVR_SIP_CFG self, BYTE [32] byLocalNo)"},
	 { (char *)"NET_DVR_SIP_CFG_byLocalNo_get", _wrap_NET_DVR_SIP_CFG_byLocalNo_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byLocalNo_get(NET_DVR_SIP_CFG self) -> BYTE [32]"},
	 { (char *)"NET_DVR_SIP_CFG_byDispalyName_set", _wrap_NET_DVR_SIP_CFG_byDispalyName_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byDispalyName_set(NET_DVR_SIP_CFG self, BYTE [128] byDispalyName)"},
	 { (char *)"NET_DVR_SIP_CFG_byDispalyName_get", _wrap_NET_DVR_SIP_CFG_byDispalyName_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byDispalyName_get(NET_DVR_SIP_CFG self) -> BYTE [128]"},
	 { (char *)"NET_DVR_SIP_CFG_wLocalPort_set", _wrap_NET_DVR_SIP_CFG_wLocalPort_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_wLocalPort_set(NET_DVR_SIP_CFG self, WORD wLocalPort)"},
	 { (char *)"NET_DVR_SIP_CFG_wLocalPort_get", _wrap_NET_DVR_SIP_CFG_wLocalPort_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_wLocalPort_get(NET_DVR_SIP_CFG self) -> WORD"},
	 { (char *)"NET_DVR_SIP_CFG_byLoginCycle_set", _wrap_NET_DVR_SIP_CFG_byLoginCycle_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byLoginCycle_set(NET_DVR_SIP_CFG self, BYTE byLoginCycle)"},
	 { (char *)"NET_DVR_SIP_CFG_byLoginCycle_get", _wrap_NET_DVR_SIP_CFG_byLoginCycle_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byLoginCycle_get(NET_DVR_SIP_CFG self) -> BYTE"},
	 { (char *)"NET_DVR_SIP_CFG_byType_set", _wrap_NET_DVR_SIP_CFG_byType_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byType_set(NET_DVR_SIP_CFG self, BYTE byType)"},
	 { (char *)"NET_DVR_SIP_CFG_byType_get", _wrap_NET_DVR_SIP_CFG_byType_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byType_get(NET_DVR_SIP_CFG self) -> BYTE"},
	 { (char *)"NET_DVR_SIP_CFG_byDomainName_set", _wrap_NET_DVR_SIP_CFG_byDomainName_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byDomainName_set(NET_DVR_SIP_CFG self, BYTE [64] byDomainName)"},
	 { (char *)"NET_DVR_SIP_CFG_byDomainName_get", _wrap_NET_DVR_SIP_CFG_byDomainName_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byDomainName_get(NET_DVR_SIP_CFG self) -> BYTE [64]"},
	 { (char *)"NET_DVR_SIP_CFG_byRes_set", _wrap_NET_DVR_SIP_CFG_byRes_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byRes_set(NET_DVR_SIP_CFG self, BYTE [64] byRes)"},
	 { (char *)"NET_DVR_SIP_CFG_byRes_get", _wrap_NET_DVR_SIP_CFG_byRes_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_byRes_get(NET_DVR_SIP_CFG self) -> BYTE [64]"},
	 { (char *)"new_NET_DVR_SIP_CFG", _wrap_new_NET_DVR_SIP_CFG, METH_VARARGS, (char *)"new_NET_DVR_SIP_CFG() -> NET_DVR_SIP_CFG"},
	 { (char *)"delete_NET_DVR_SIP_CFG", _wrap_delete_NET_DVR_SIP_CFG, METH_VARARGS, (char *)"delete_NET_DVR_SIP_CFG(NET_DVR_SIP_CFG self)"},
	 { (char *)"NET_DVR_SIP_CFG_swigregister", NET_DVR_SIP_CFG_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_SIP_CFG_V50_dwSize_set", _wrap_NET_DVR_SIP_CFG_V50_dwSize_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_dwSize_set(NET_DVR_SIP_CFG_V50 self, DWORD dwSize)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_dwSize_get", _wrap_NET_DVR_SIP_CFG_V50_dwSize_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_dwSize_get(NET_DVR_SIP_CFG_V50 self) -> DWORD"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byEnableAutoLogin_set", _wrap_NET_DVR_SIP_CFG_V50_byEnableAutoLogin_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byEnableAutoLogin_set(NET_DVR_SIP_CFG_V50 self, BYTE byEnableAutoLogin)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byEnableAutoLogin_get", _wrap_NET_DVR_SIP_CFG_V50_byEnableAutoLogin_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byEnableAutoLogin_get(NET_DVR_SIP_CFG_V50 self) -> BYTE"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byLoginStatus_set", _wrap_NET_DVR_SIP_CFG_V50_byLoginStatus_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byLoginStatus_set(NET_DVR_SIP_CFG_V50 self, BYTE byLoginStatus)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byLoginStatus_get", _wrap_NET_DVR_SIP_CFG_V50_byLoginStatus_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byLoginStatus_get(NET_DVR_SIP_CFG_V50 self) -> BYTE"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byRes1_set", _wrap_NET_DVR_SIP_CFG_V50_byRes1_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byRes1_set(NET_DVR_SIP_CFG_V50 self, BYTE [2] byRes1)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byRes1_get", _wrap_NET_DVR_SIP_CFG_V50_byRes1_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byRes1_get(NET_DVR_SIP_CFG_V50 self) -> BYTE [2]"},
	 { (char *)"NET_DVR_SIP_CFG_V50_stuServerIP_set", _wrap_NET_DVR_SIP_CFG_V50_stuServerIP_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_stuServerIP_set(NET_DVR_SIP_CFG_V50 self, NET_DVR_IPADDR stuServerIP)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_stuServerIP_get", _wrap_NET_DVR_SIP_CFG_V50_stuServerIP_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_stuServerIP_get(NET_DVR_SIP_CFG_V50 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_SIP_CFG_V50_wServerPort_set", _wrap_NET_DVR_SIP_CFG_V50_wServerPort_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_wServerPort_set(NET_DVR_SIP_CFG_V50 self, WORD wServerPort)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_wServerPort_get", _wrap_NET_DVR_SIP_CFG_V50_wServerPort_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_wServerPort_get(NET_DVR_SIP_CFG_V50 self) -> WORD"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byRes2_set", _wrap_NET_DVR_SIP_CFG_V50_byRes2_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byRes2_set(NET_DVR_SIP_CFG_V50 self, BYTE [2] byRes2)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byRes2_get", _wrap_NET_DVR_SIP_CFG_V50_byRes2_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byRes2_get(NET_DVR_SIP_CFG_V50 self) -> BYTE [2]"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byUserName_set", _wrap_NET_DVR_SIP_CFG_V50_byUserName_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byUserName_set(NET_DVR_SIP_CFG_V50 self, BYTE [32] byUserName)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byUserName_get", _wrap_NET_DVR_SIP_CFG_V50_byUserName_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byUserName_get(NET_DVR_SIP_CFG_V50 self) -> BYTE [32]"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byPassWord_set", _wrap_NET_DVR_SIP_CFG_V50_byPassWord_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byPassWord_set(NET_DVR_SIP_CFG_V50 self, BYTE [16] byPassWord)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byPassWord_get", _wrap_NET_DVR_SIP_CFG_V50_byPassWord_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byPassWord_get(NET_DVR_SIP_CFG_V50 self) -> BYTE [16]"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byLocalNo_set", _wrap_NET_DVR_SIP_CFG_V50_byLocalNo_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byLocalNo_set(NET_DVR_SIP_CFG_V50 self, BYTE [32] byLocalNo)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byLocalNo_get", _wrap_NET_DVR_SIP_CFG_V50_byLocalNo_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byLocalNo_get(NET_DVR_SIP_CFG_V50 self) -> BYTE [32]"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byDispalyName_set", _wrap_NET_DVR_SIP_CFG_V50_byDispalyName_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byDispalyName_set(NET_DVR_SIP_CFG_V50 self, BYTE [128] byDispalyName)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byDispalyName_get", _wrap_NET_DVR_SIP_CFG_V50_byDispalyName_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byDispalyName_get(NET_DVR_SIP_CFG_V50 self) -> BYTE [128]"},
	 { (char *)"NET_DVR_SIP_CFG_V50_wLocalPort_set", _wrap_NET_DVR_SIP_CFG_V50_wLocalPort_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_wLocalPort_set(NET_DVR_SIP_CFG_V50 self, WORD wLocalPort)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_wLocalPort_get", _wrap_NET_DVR_SIP_CFG_V50_wLocalPort_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_wLocalPort_get(NET_DVR_SIP_CFG_V50 self) -> WORD"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byLoginCycle_set", _wrap_NET_DVR_SIP_CFG_V50_byLoginCycle_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byLoginCycle_set(NET_DVR_SIP_CFG_V50 self, BYTE byLoginCycle)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byLoginCycle_get", _wrap_NET_DVR_SIP_CFG_V50_byLoginCycle_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byLoginCycle_get(NET_DVR_SIP_CFG_V50 self) -> BYTE"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byRes3_set", _wrap_NET_DVR_SIP_CFG_V50_byRes3_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byRes3_set(NET_DVR_SIP_CFG_V50 self, BYTE byRes3)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byRes3_get", _wrap_NET_DVR_SIP_CFG_V50_byRes3_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byRes3_get(NET_DVR_SIP_CFG_V50 self) -> BYTE"},
	 { (char *)"NET_DVR_SIP_CFG_V50_bySIPServerDomain_set", _wrap_NET_DVR_SIP_CFG_V50_bySIPServerDomain_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_bySIPServerDomain_set(NET_DVR_SIP_CFG_V50 self, BYTE [64] bySIPServerDomain)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_bySIPServerDomain_get", _wrap_NET_DVR_SIP_CFG_V50_bySIPServerDomain_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_bySIPServerDomain_get(NET_DVR_SIP_CFG_V50 self) -> BYTE [64]"},
	 { (char *)"NET_DVR_SIP_CFG_V50_stuSTUNServerIP_set", _wrap_NET_DVR_SIP_CFG_V50_stuSTUNServerIP_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_stuSTUNServerIP_set(NET_DVR_SIP_CFG_V50 self, NET_DVR_IPADDR stuSTUNServerIP)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_stuSTUNServerIP_get", _wrap_NET_DVR_SIP_CFG_V50_stuSTUNServerIP_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_stuSTUNServerIP_get(NET_DVR_SIP_CFG_V50 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_SIP_CFG_V50_bySTUNServerDomain_set", _wrap_NET_DVR_SIP_CFG_V50_bySTUNServerDomain_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_bySTUNServerDomain_set(NET_DVR_SIP_CFG_V50 self, BYTE [64] bySTUNServerDomain)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_bySTUNServerDomain_get", _wrap_NET_DVR_SIP_CFG_V50_bySTUNServerDomain_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_bySTUNServerDomain_get(NET_DVR_SIP_CFG_V50 self) -> BYTE [64]"},
	 { (char *)"NET_DVR_SIP_CFG_V50_wSTUNServerPort_set", _wrap_NET_DVR_SIP_CFG_V50_wSTUNServerPort_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_wSTUNServerPort_set(NET_DVR_SIP_CFG_V50 self, WORD wSTUNServerPort)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_wSTUNServerPort_get", _wrap_NET_DVR_SIP_CFG_V50_wSTUNServerPort_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_wSTUNServerPort_get(NET_DVR_SIP_CFG_V50 self) -> WORD"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byRes4_set", _wrap_NET_DVR_SIP_CFG_V50_byRes4_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byRes4_set(NET_DVR_SIP_CFG_V50 self, BYTE [2] byRes4)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byRes4_get", _wrap_NET_DVR_SIP_CFG_V50_byRes4_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byRes4_get(NET_DVR_SIP_CFG_V50 self) -> BYTE [2]"},
	 { (char *)"NET_DVR_SIP_CFG_V50_stuProxyServerIP_set", _wrap_NET_DVR_SIP_CFG_V50_stuProxyServerIP_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_stuProxyServerIP_set(NET_DVR_SIP_CFG_V50 self, NET_DVR_IPADDR stuProxyServerIP)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_stuProxyServerIP_get", _wrap_NET_DVR_SIP_CFG_V50_stuProxyServerIP_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_stuProxyServerIP_get(NET_DVR_SIP_CFG_V50 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byProxyServerDomain_set", _wrap_NET_DVR_SIP_CFG_V50_byProxyServerDomain_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byProxyServerDomain_set(NET_DVR_SIP_CFG_V50 self, BYTE [64] byProxyServerDomain)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byProxyServerDomain_get", _wrap_NET_DVR_SIP_CFG_V50_byProxyServerDomain_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byProxyServerDomain_get(NET_DVR_SIP_CFG_V50 self) -> BYTE [64]"},
	 { (char *)"NET_DVR_SIP_CFG_V50_wProxyServerPort_set", _wrap_NET_DVR_SIP_CFG_V50_wProxyServerPort_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_wProxyServerPort_set(NET_DVR_SIP_CFG_V50 self, WORD wProxyServerPort)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_wProxyServerPort_get", _wrap_NET_DVR_SIP_CFG_V50_wProxyServerPort_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_wProxyServerPort_get(NET_DVR_SIP_CFG_V50 self) -> WORD"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byNetWork_set", _wrap_NET_DVR_SIP_CFG_V50_byNetWork_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byNetWork_set(NET_DVR_SIP_CFG_V50 self, BYTE byNetWork)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byNetWork_get", _wrap_NET_DVR_SIP_CFG_V50_byNetWork_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byNetWork_get(NET_DVR_SIP_CFG_V50 self) -> BYTE"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byRes_set", _wrap_NET_DVR_SIP_CFG_V50_byRes_set, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byRes_set(NET_DVR_SIP_CFG_V50 self, BYTE [257] byRes)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_byRes_get", _wrap_NET_DVR_SIP_CFG_V50_byRes_get, METH_VARARGS, (char *)"NET_DVR_SIP_CFG_V50_byRes_get(NET_DVR_SIP_CFG_V50 self) -> BYTE [257]"},
	 { (char *)"new_NET_DVR_SIP_CFG_V50", _wrap_new_NET_DVR_SIP_CFG_V50, METH_VARARGS, (char *)"new_NET_DVR_SIP_CFG_V50() -> NET_DVR_SIP_CFG_V50"},
	 { (char *)"delete_NET_DVR_SIP_CFG_V50", _wrap_delete_NET_DVR_SIP_CFG_V50, METH_VARARGS, (char *)"delete_NET_DVR_SIP_CFG_V50(NET_DVR_SIP_CFG_V50 self)"},
	 { (char *)"NET_DVR_SIP_CFG_V50_swigregister", NET_DVR_SIP_CFG_V50_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_dwSize_set", _wrap_NET_DVR_IP_VIEW_DEVCFG_dwSize_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_dwSize_set(NET_DVR_IP_VIEW_DEVCFG self, DWORD dwSize)"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_dwSize_get", _wrap_NET_DVR_IP_VIEW_DEVCFG_dwSize_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_dwSize_get(NET_DVR_IP_VIEW_DEVCFG self) -> DWORD"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_byDefaultRing_set", _wrap_NET_DVR_IP_VIEW_DEVCFG_byDefaultRing_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_byDefaultRing_set(NET_DVR_IP_VIEW_DEVCFG self, BYTE byDefaultRing)"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_byDefaultRing_get", _wrap_NET_DVR_IP_VIEW_DEVCFG_byDefaultRing_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_byDefaultRing_get(NET_DVR_IP_VIEW_DEVCFG self) -> BYTE"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_byRingVolume_set", _wrap_NET_DVR_IP_VIEW_DEVCFG_byRingVolume_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_byRingVolume_set(NET_DVR_IP_VIEW_DEVCFG self, BYTE byRingVolume)"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_byRingVolume_get", _wrap_NET_DVR_IP_VIEW_DEVCFG_byRingVolume_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_byRingVolume_get(NET_DVR_IP_VIEW_DEVCFG self) -> BYTE"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_byInputVolume_set", _wrap_NET_DVR_IP_VIEW_DEVCFG_byInputVolume_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_byInputVolume_set(NET_DVR_IP_VIEW_DEVCFG self, BYTE byInputVolume)"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_byInputVolume_get", _wrap_NET_DVR_IP_VIEW_DEVCFG_byInputVolume_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_byInputVolume_get(NET_DVR_IP_VIEW_DEVCFG self) -> BYTE"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_byOutputVolume_set", _wrap_NET_DVR_IP_VIEW_DEVCFG_byOutputVolume_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_byOutputVolume_set(NET_DVR_IP_VIEW_DEVCFG self, BYTE byOutputVolume)"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_byOutputVolume_get", _wrap_NET_DVR_IP_VIEW_DEVCFG_byOutputVolume_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_byOutputVolume_get(NET_DVR_IP_VIEW_DEVCFG self) -> BYTE"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_wRtpPort_set", _wrap_NET_DVR_IP_VIEW_DEVCFG_wRtpPort_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_wRtpPort_set(NET_DVR_IP_VIEW_DEVCFG self, WORD wRtpPort)"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_wRtpPort_get", _wrap_NET_DVR_IP_VIEW_DEVCFG_wRtpPort_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_wRtpPort_get(NET_DVR_IP_VIEW_DEVCFG self) -> WORD"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_byRes1_set", _wrap_NET_DVR_IP_VIEW_DEVCFG_byRes1_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_byRes1_set(NET_DVR_IP_VIEW_DEVCFG self, BYTE [2] byRes1)"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_byRes1_get", _wrap_NET_DVR_IP_VIEW_DEVCFG_byRes1_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_byRes1_get(NET_DVR_IP_VIEW_DEVCFG self) -> BYTE [2]"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_dwPreviewDelayTime_set", _wrap_NET_DVR_IP_VIEW_DEVCFG_dwPreviewDelayTime_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_dwPreviewDelayTime_set(NET_DVR_IP_VIEW_DEVCFG self, DWORD dwPreviewDelayTime)"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_dwPreviewDelayTime_get", _wrap_NET_DVR_IP_VIEW_DEVCFG_dwPreviewDelayTime_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_dwPreviewDelayTime_get(NET_DVR_IP_VIEW_DEVCFG self) -> DWORD"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_byRes2_set", _wrap_NET_DVR_IP_VIEW_DEVCFG_byRes2_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_byRes2_set(NET_DVR_IP_VIEW_DEVCFG self, BYTE [64] byRes2)"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_byRes2_get", _wrap_NET_DVR_IP_VIEW_DEVCFG_byRes2_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_DEVCFG_byRes2_get(NET_DVR_IP_VIEW_DEVCFG self) -> BYTE [64]"},
	 { (char *)"new_NET_DVR_IP_VIEW_DEVCFG", _wrap_new_NET_DVR_IP_VIEW_DEVCFG, METH_VARARGS, (char *)"new_NET_DVR_IP_VIEW_DEVCFG() -> NET_DVR_IP_VIEW_DEVCFG"},
	 { (char *)"delete_NET_DVR_IP_VIEW_DEVCFG", _wrap_delete_NET_DVR_IP_VIEW_DEVCFG, METH_VARARGS, (char *)"delete_NET_DVR_IP_VIEW_DEVCFG(NET_DVR_IP_VIEW_DEVCFG self)"},
	 { (char *)"NET_DVR_IP_VIEW_DEVCFG_swigregister", NET_DVR_IP_VIEW_DEVCFG_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_dwSize_set", _wrap_NET_DVR_IP_VIEW_AUDIO_CFG_dwSize_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_dwSize_set(NET_DVR_IP_VIEW_AUDIO_CFG self, DWORD dwSize)"},
	 { (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_dwSize_get", _wrap_NET_DVR_IP_VIEW_AUDIO_CFG_dwSize_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_dwSize_get(NET_DVR_IP_VIEW_AUDIO_CFG self) -> DWORD"},
	 { (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri1_set", _wrap_NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri1_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri1_set(NET_DVR_IP_VIEW_AUDIO_CFG self, BYTE byAudioEncPri1)"},
	 { (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri1_get", _wrap_NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri1_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri1_get(NET_DVR_IP_VIEW_AUDIO_CFG self) -> BYTE"},
	 { (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri2_set", _wrap_NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri2_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri2_set(NET_DVR_IP_VIEW_AUDIO_CFG self, BYTE byAudioEncPri2)"},
	 { (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri2_get", _wrap_NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri2_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_byAudioEncPri2_get(NET_DVR_IP_VIEW_AUDIO_CFG self) -> BYTE"},
	 { (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen1_set", _wrap_NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen1_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen1_set(NET_DVR_IP_VIEW_AUDIO_CFG self, WORD wAudioPacketLen1)"},
	 { (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen1_get", _wrap_NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen1_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen1_get(NET_DVR_IP_VIEW_AUDIO_CFG self) -> WORD"},
	 { (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen2_set", _wrap_NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen2_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen2_set(NET_DVR_IP_VIEW_AUDIO_CFG self, WORD wAudioPacketLen2)"},
	 { (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen2_get", _wrap_NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen2_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_wAudioPacketLen2_get(NET_DVR_IP_VIEW_AUDIO_CFG self) -> WORD"},
	 { (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_byRes_set", _wrap_NET_DVR_IP_VIEW_AUDIO_CFG_byRes_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_byRes_set(NET_DVR_IP_VIEW_AUDIO_CFG self, BYTE [30] byRes)"},
	 { (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_byRes_get", _wrap_NET_DVR_IP_VIEW_AUDIO_CFG_byRes_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_byRes_get(NET_DVR_IP_VIEW_AUDIO_CFG self) -> BYTE [30]"},
	 { (char *)"new_NET_DVR_IP_VIEW_AUDIO_CFG", _wrap_new_NET_DVR_IP_VIEW_AUDIO_CFG, METH_VARARGS, (char *)"new_NET_DVR_IP_VIEW_AUDIO_CFG() -> NET_DVR_IP_VIEW_AUDIO_CFG"},
	 { (char *)"delete_NET_DVR_IP_VIEW_AUDIO_CFG", _wrap_delete_NET_DVR_IP_VIEW_AUDIO_CFG, METH_VARARGS, (char *)"delete_NET_DVR_IP_VIEW_AUDIO_CFG(NET_DVR_IP_VIEW_AUDIO_CFG self)"},
	 { (char *)"NET_DVR_IP_VIEW_AUDIO_CFG_swigregister", NET_DVR_IP_VIEW_AUDIO_CFG_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_dwSize_set", _wrap_NET_DVR_IP_VIEW_CALL_CFG_dwSize_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_dwSize_set(NET_DVR_IP_VIEW_CALL_CFG self, DWORD dwSize)"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_dwSize_get", _wrap_NET_DVR_IP_VIEW_CALL_CFG_dwSize_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_dwSize_get(NET_DVR_IP_VIEW_CALL_CFG self) -> DWORD"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byEnableAutoResponse_set", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byEnableAutoResponse_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byEnableAutoResponse_set(NET_DVR_IP_VIEW_CALL_CFG self, BYTE byEnableAutoResponse)"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byEnableAutoResponse_get", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byEnableAutoResponse_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byEnableAutoResponse_get(NET_DVR_IP_VIEW_CALL_CFG self) -> BYTE"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byAudoResponseTime_set", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byAudoResponseTime_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byAudoResponseTime_set(NET_DVR_IP_VIEW_CALL_CFG self, BYTE byAudoResponseTime)"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byAudoResponseTime_get", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byAudoResponseTime_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byAudoResponseTime_get(NET_DVR_IP_VIEW_CALL_CFG self) -> BYTE"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byRes1_set", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byRes1_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byRes1_set(NET_DVR_IP_VIEW_CALL_CFG self, BYTE [2] byRes1)"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byRes1_get", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byRes1_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byRes1_get(NET_DVR_IP_VIEW_CALL_CFG self) -> BYTE [2]"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber1_set", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber1_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber1_set(NET_DVR_IP_VIEW_CALL_CFG self, BYTE byEnableAlarmNumber1)"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber1_get", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber1_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber1_get(NET_DVR_IP_VIEW_CALL_CFG self) -> BYTE"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byRes2_set", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byRes2_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byRes2_set(NET_DVR_IP_VIEW_CALL_CFG self, BYTE [3] byRes2)"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byRes2_get", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byRes2_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byRes2_get(NET_DVR_IP_VIEW_CALL_CFG self) -> BYTE [3]"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber1_set", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber1_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber1_set(NET_DVR_IP_VIEW_CALL_CFG self, BYTE [32] byAlarmNumber1)"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber1_get", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber1_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber1_get(NET_DVR_IP_VIEW_CALL_CFG self) -> BYTE [32]"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber2_set", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber2_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber2_set(NET_DVR_IP_VIEW_CALL_CFG self, BYTE byEnableAlarmNumber2)"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber2_get", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber2_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byEnableAlarmNumber2_get(NET_DVR_IP_VIEW_CALL_CFG self) -> BYTE"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byRes3_set", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byRes3_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byRes3_set(NET_DVR_IP_VIEW_CALL_CFG self, BYTE [3] byRes3)"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byRes3_get", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byRes3_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byRes3_get(NET_DVR_IP_VIEW_CALL_CFG self) -> BYTE [3]"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber2_set", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber2_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber2_set(NET_DVR_IP_VIEW_CALL_CFG self, BYTE [32] byAlarmNumber2)"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber2_get", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber2_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byAlarmNumber2_get(NET_DVR_IP_VIEW_CALL_CFG self) -> BYTE [32]"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byRes4_set", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byRes4_set, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byRes4_set(NET_DVR_IP_VIEW_CALL_CFG self, BYTE [72] byRes4)"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_byRes4_get", _wrap_NET_DVR_IP_VIEW_CALL_CFG_byRes4_get, METH_VARARGS, (char *)"NET_DVR_IP_VIEW_CALL_CFG_byRes4_get(NET_DVR_IP_VIEW_CALL_CFG self) -> BYTE [72]"},
	 { (char *)"new_NET_DVR_IP_VIEW_CALL_CFG", _wrap_new_NET_DVR_IP_VIEW_CALL_CFG, METH_VARARGS, (char *)"new_NET_DVR_IP_VIEW_CALL_CFG() -> NET_DVR_IP_VIEW_CALL_CFG"},
	 { (char *)"delete_NET_DVR_IP_VIEW_CALL_CFG", _wrap_delete_NET_DVR_IP_VIEW_CALL_CFG, METH_VARARGS, (char *)"delete_NET_DVR_IP_VIEW_CALL_CFG(NET_DVR_IP_VIEW_CALL_CFG self)"},
	 { (char *)"NET_DVR_IP_VIEW_CALL_CFG_swigregister", NET_DVR_IP_VIEW_CALL_CFG_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_RECORDCHAN_dwMaxRecordChanNum_set", _wrap_NET_DVR_RECORDCHAN_dwMaxRecordChanNum_set, METH_VARARGS, (char *)"NET_DVR_RECORDCHAN_dwMaxRecordChanNum_set(NET_DVR_RECORDCHAN self, DWORD dwMaxRecordChanNum)"},
	 { (char *)"NET_DVR_RECORDCHAN_dwMaxRecordChanNum_get", _wrap_NET_DVR_RECORDCHAN_dwMaxRecordChanNum_get, METH_VARARGS, (char *)"NET_DVR_RECORDCHAN_dwMaxRecordChanNum_get(NET_DVR_RECORDCHAN self) -> DWORD"},
	 { (char *)"NET_DVR_RECORDCHAN_dwCurRecordChanNum_set", _wrap_NET_DVR_RECORDCHAN_dwCurRecordChanNum_set, METH_VARARGS, (char *)"NET_DVR_RECORDCHAN_dwCurRecordChanNum_set(NET_DVR_RECORDCHAN self, DWORD dwCurRecordChanNum)"},
	 { (char *)"NET_DVR_RECORDCHAN_dwCurRecordChanNum_get", _wrap_NET_DVR_RECORDCHAN_dwCurRecordChanNum_get, METH_VARARGS, (char *)"NET_DVR_RECORDCHAN_dwCurRecordChanNum_get(NET_DVR_RECORDCHAN self) -> DWORD"},
	 { (char *)"NET_DVR_RECORDCHAN_dwRelRecordChan_set", _wrap_NET_DVR_RECORDCHAN_dwRelRecordChan_set, METH_VARARGS, (char *)"NET_DVR_RECORDCHAN_dwRelRecordChan_set(NET_DVR_RECORDCHAN self, DWORD [(32+32)] dwRelRecordChan)"},
	 { (char *)"NET_DVR_RECORDCHAN_dwRelRecordChan_get", _wrap_NET_DVR_RECORDCHAN_dwRelRecordChan_get, METH_VARARGS, (char *)"NET_DVR_RECORDCHAN_dwRelRecordChan_get(NET_DVR_RECORDCHAN self) -> DWORD [(32+32)]"},
	 { (char *)"NET_DVR_RECORDCHAN_byRes_set", _wrap_NET_DVR_RECORDCHAN_byRes_set, METH_VARARGS, (char *)"NET_DVR_RECORDCHAN_byRes_set(NET_DVR_RECORDCHAN self, BYTE [64] byRes)"},
	 { (char *)"NET_DVR_RECORDCHAN_byRes_get", _wrap_NET_DVR_RECORDCHAN_byRes_get, METH_VARARGS, (char *)"NET_DVR_RECORDCHAN_byRes_get(NET_DVR_RECORDCHAN self) -> BYTE [64]"},
	 { (char *)"new_NET_DVR_RECORDCHAN", _wrap_new_NET_DVR_RECORDCHAN, METH_VARARGS, (char *)"new_NET_DVR_RECORDCHAN() -> NET_DVR_RECORDCHAN"},
	 { (char *)"delete_NET_DVR_RECORDCHAN", _wrap_delete_NET_DVR_RECORDCHAN, METH_VARARGS, (char *)"delete_NET_DVR_RECORDCHAN(NET_DVR_RECORDCHAN self)"},
	 { (char *)"NET_DVR_RECORDCHAN_swigregister", NET_DVR_RECORDCHAN_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_MOTION_V30_byMotionScope_set", _wrap_NET_DVR_MOTION_V30_byMotionScope_set, METH_VARARGS, (char *)"NET_DVR_MOTION_V30_byMotionScope_set(NET_DVR_MOTION_V30 self, BYTE [64][96] byMotionScope)"},
	 { (char *)"NET_DVR_MOTION_V30_byMotionScope_get", _wrap_NET_DVR_MOTION_V30_byMotionScope_get, METH_VARARGS, (char *)"NET_DVR_MOTION_V30_byMotionScope_get(NET_DVR_MOTION_V30 self) -> BYTE [64][96]"},
	 { (char *)"NET_DVR_MOTION_V30_byMotionSensitive_set", _wrap_NET_DVR_MOTION_V30_byMotionSensitive_set, METH_VARARGS, (char *)"NET_DVR_MOTION_V30_byMotionSensitive_set(NET_DVR_MOTION_V30 self, BYTE byMotionSensitive)"},
	 { (char *)"NET_DVR_MOTION_V30_byMotionSensitive_get", _wrap_NET_DVR_MOTION_V30_byMotionSensitive_get, METH_VARARGS, (char *)"NET_DVR_MOTION_V30_byMotionSensitive_get(NET_DVR_MOTION_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_MOTION_V30_byEnableHandleMotion_set", _wrap_NET_DVR_MOTION_V30_byEnableHandleMotion_set, METH_VARARGS, (char *)"NET_DVR_MOTION_V30_byEnableHandleMotion_set(NET_DVR_MOTION_V30 self, BYTE byEnableHandleMotion)"},
	 { (char *)"NET_DVR_MOTION_V30_byEnableHandleMotion_get", _wrap_NET_DVR_MOTION_V30_byEnableHandleMotion_get, METH_VARARGS, (char *)"NET_DVR_MOTION_V30_byEnableHandleMotion_get(NET_DVR_MOTION_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_MOTION_V30_byEnableDisplay_set", _wrap_NET_DVR_MOTION_V30_byEnableDisplay_set, METH_VARARGS, (char *)"NET_DVR_MOTION_V30_byEnableDisplay_set(NET_DVR_MOTION_V30 self, BYTE byEnableDisplay)"},
	 { (char *)"NET_DVR_MOTION_V30_byEnableDisplay_get", _wrap_NET_DVR_MOTION_V30_byEnableDisplay_get, METH_VARARGS, (char *)"NET_DVR_MOTION_V30_byEnableDisplay_get(NET_DVR_MOTION_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_MOTION_V30_reservedData_set", _wrap_NET_DVR_MOTION_V30_reservedData_set, METH_VARARGS, (char *)"NET_DVR_MOTION_V30_reservedData_set(NET_DVR_MOTION_V30 self, char reservedData)"},
	 { (char *)"NET_DVR_MOTION_V30_reservedData_get", _wrap_NET_DVR_MOTION_V30_reservedData_get, METH_VARARGS, (char *)"NET_DVR_MOTION_V30_reservedData_get(NET_DVR_MOTION_V30 self) -> char"},
	 { (char *)"NET_DVR_MOTION_V30_struMotionHandleType_set", _wrap_NET_DVR_MOTION_V30_struMotionHandleType_set, METH_VARARGS, (char *)"NET_DVR_MOTION_V30_struMotionHandleType_set(NET_DVR_MOTION_V30 self, NET_DVR_HANDLEEXCEPTION_V30 struMotionHandleType)"},
	 { (char *)"NET_DVR_MOTION_V30_struMotionHandleType_get", _wrap_NET_DVR_MOTION_V30_struMotionHandleType_get, METH_VARARGS, (char *)"NET_DVR_MOTION_V30_struMotionHandleType_get(NET_DVR_MOTION_V30 self) -> NET_DVR_HANDLEEXCEPTION_V30"},
	 { (char *)"NET_DVR_MOTION_V30_struAlarmTime_set", _wrap_NET_DVR_MOTION_V30_struAlarmTime_set, METH_VARARGS, (char *)"NET_DVR_MOTION_V30_struAlarmTime_set(NET_DVR_MOTION_V30 self, NET_DVR_SCHEDTIME [7][8] struAlarmTime)"},
	 { (char *)"NET_DVR_MOTION_V30_struAlarmTime_get", _wrap_NET_DVR_MOTION_V30_struAlarmTime_get, METH_VARARGS, (char *)"NET_DVR_MOTION_V30_struAlarmTime_get(NET_DVR_MOTION_V30 self) -> NET_DVR_SCHEDTIME [7][8]"},
	 { (char *)"NET_DVR_MOTION_V30_byRelRecordChan_set", _wrap_NET_DVR_MOTION_V30_byRelRecordChan_set, METH_VARARGS, (char *)"NET_DVR_MOTION_V30_byRelRecordChan_set(NET_DVR_MOTION_V30 self, BYTE [(32+32)] byRelRecordChan)"},
	 { (char *)"NET_DVR_MOTION_V30_byRelRecordChan_get", _wrap_NET_DVR_MOTION_V30_byRelRecordChan_get, METH_VARARGS, (char *)"NET_DVR_MOTION_V30_byRelRecordChan_get(NET_DVR_MOTION_V30 self) -> BYTE [(32+32)]"},
	 { (char *)"new_NET_DVR_MOTION_V30", _wrap_new_NET_DVR_MOTION_V30, METH_VARARGS, (char *)"new_NET_DVR_MOTION_V30() -> NET_DVR_MOTION_V30"},
	 { (char *)"delete_NET_DVR_MOTION_V30", _wrap_delete_NET_DVR_MOTION_V30, METH_VARARGS, (char *)"delete_NET_DVR_MOTION_V30(NET_DVR_MOTION_V30 self)"},
	 { (char *)"NET_DVR_MOTION_V30_swigregister", NET_DVR_MOTION_V30_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_MOTION_byMotionScope_set", _wrap_NET_DVR_MOTION_byMotionScope_set, METH_VARARGS, (char *)"NET_DVR_MOTION_byMotionScope_set(NET_DVR_MOTION self, BYTE [18][22] byMotionScope)"},
	 { (char *)"NET_DVR_MOTION_byMotionScope_get", _wrap_NET_DVR_MOTION_byMotionScope_get, METH_VARARGS, (char *)"NET_DVR_MOTION_byMotionScope_get(NET_DVR_MOTION self) -> BYTE [18][22]"},
	 { (char *)"NET_DVR_MOTION_byMotionSensitive_set", _wrap_NET_DVR_MOTION_byMotionSensitive_set, METH_VARARGS, (char *)"NET_DVR_MOTION_byMotionSensitive_set(NET_DVR_MOTION self, BYTE byMotionSensitive)"},
	 { (char *)"NET_DVR_MOTION_byMotionSensitive_get", _wrap_NET_DVR_MOTION_byMotionSensitive_get, METH_VARARGS, (char *)"NET_DVR_MOTION_byMotionSensitive_get(NET_DVR_MOTION self) -> BYTE"},
	 { (char *)"NET_DVR_MOTION_byEnableHandleMotion_set", _wrap_NET_DVR_MOTION_byEnableHandleMotion_set, METH_VARARGS, (char *)"NET_DVR_MOTION_byEnableHandleMotion_set(NET_DVR_MOTION self, BYTE byEnableHandleMotion)"},
	 { (char *)"NET_DVR_MOTION_byEnableHandleMotion_get", _wrap_NET_DVR_MOTION_byEnableHandleMotion_get, METH_VARARGS, (char *)"NET_DVR_MOTION_byEnableHandleMotion_get(NET_DVR_MOTION self) -> BYTE"},
	 { (char *)"NET_DVR_MOTION_byEnableDisplay_set", _wrap_NET_DVR_MOTION_byEnableDisplay_set, METH_VARARGS, (char *)"NET_DVR_MOTION_byEnableDisplay_set(NET_DVR_MOTION self, BYTE byEnableDisplay)"},
	 { (char *)"NET_DVR_MOTION_byEnableDisplay_get", _wrap_NET_DVR_MOTION_byEnableDisplay_get, METH_VARARGS, (char *)"NET_DVR_MOTION_byEnableDisplay_get(NET_DVR_MOTION self) -> BYTE"},
	 { (char *)"NET_DVR_MOTION_reservedData_set", _wrap_NET_DVR_MOTION_reservedData_set, METH_VARARGS, (char *)"NET_DVR_MOTION_reservedData_set(NET_DVR_MOTION self, char reservedData)"},
	 { (char *)"NET_DVR_MOTION_reservedData_get", _wrap_NET_DVR_MOTION_reservedData_get, METH_VARARGS, (char *)"NET_DVR_MOTION_reservedData_get(NET_DVR_MOTION self) -> char"},
	 { (char *)"NET_DVR_MOTION_strMotionHandleType_set", _wrap_NET_DVR_MOTION_strMotionHandleType_set, METH_VARARGS, (char *)"NET_DVR_MOTION_strMotionHandleType_set(NET_DVR_MOTION self, NET_DVR_HANDLEEXCEPTION strMotionHandleType)"},
	 { (char *)"NET_DVR_MOTION_strMotionHandleType_get", _wrap_NET_DVR_MOTION_strMotionHandleType_get, METH_VARARGS, (char *)"NET_DVR_MOTION_strMotionHandleType_get(NET_DVR_MOTION self) -> NET_DVR_HANDLEEXCEPTION"},
	 { (char *)"NET_DVR_MOTION_struAlarmTime_set", _wrap_NET_DVR_MOTION_struAlarmTime_set, METH_VARARGS, (char *)"NET_DVR_MOTION_struAlarmTime_set(NET_DVR_MOTION self, NET_DVR_SCHEDTIME [7][4] struAlarmTime)"},
	 { (char *)"NET_DVR_MOTION_struAlarmTime_get", _wrap_NET_DVR_MOTION_struAlarmTime_get, METH_VARARGS, (char *)"NET_DVR_MOTION_struAlarmTime_get(NET_DVR_MOTION self) -> NET_DVR_SCHEDTIME [7][4]"},
	 { (char *)"NET_DVR_MOTION_byRelRecordChan_set", _wrap_NET_DVR_MOTION_byRelRecordChan_set, METH_VARARGS, (char *)"NET_DVR_MOTION_byRelRecordChan_set(NET_DVR_MOTION self, BYTE [16] byRelRecordChan)"},
	 { (char *)"NET_DVR_MOTION_byRelRecordChan_get", _wrap_NET_DVR_MOTION_byRelRecordChan_get, METH_VARARGS, (char *)"NET_DVR_MOTION_byRelRecordChan_get(NET_DVR_MOTION self) -> BYTE [16]"},
	 { (char *)"new_NET_DVR_MOTION", _wrap_new_NET_DVR_MOTION, METH_VARARGS, (char *)"new_NET_DVR_MOTION() -> NET_DVR_MOTION"},
	 { (char *)"delete_NET_DVR_MOTION", _wrap_delete_NET_DVR_MOTION, METH_VARARGS, (char *)"delete_NET_DVR_MOTION(NET_DVR_MOTION self)"},
	 { (char *)"NET_DVR_MOTION_swigregister", NET_DVR_MOTION_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_HIDEALARM_V30_dwEnableHideAlarm_set", _wrap_NET_DVR_HIDEALARM_V30_dwEnableHideAlarm_set, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_V30_dwEnableHideAlarm_set(NET_DVR_HIDEALARM_V30 self, DWORD dwEnableHideAlarm)"},
	 { (char *)"NET_DVR_HIDEALARM_V30_dwEnableHideAlarm_get", _wrap_NET_DVR_HIDEALARM_V30_dwEnableHideAlarm_get, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_V30_dwEnableHideAlarm_get(NET_DVR_HIDEALARM_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftX_set", _wrap_NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftX_set, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftX_set(NET_DVR_HIDEALARM_V30 self, WORD wHideAlarmAreaTopLeftX)"},
	 { (char *)"NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftX_get", _wrap_NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftX_get, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftX_get(NET_DVR_HIDEALARM_V30 self) -> WORD"},
	 { (char *)"NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftY_set", _wrap_NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftY_set, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftY_set(NET_DVR_HIDEALARM_V30 self, WORD wHideAlarmAreaTopLeftY)"},
	 { (char *)"NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftY_get", _wrap_NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftY_get, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_V30_wHideAlarmAreaTopLeftY_get(NET_DVR_HIDEALARM_V30 self) -> WORD"},
	 { (char *)"NET_DVR_HIDEALARM_V30_wHideAlarmAreaWidth_set", _wrap_NET_DVR_HIDEALARM_V30_wHideAlarmAreaWidth_set, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_V30_wHideAlarmAreaWidth_set(NET_DVR_HIDEALARM_V30 self, WORD wHideAlarmAreaWidth)"},
	 { (char *)"NET_DVR_HIDEALARM_V30_wHideAlarmAreaWidth_get", _wrap_NET_DVR_HIDEALARM_V30_wHideAlarmAreaWidth_get, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_V30_wHideAlarmAreaWidth_get(NET_DVR_HIDEALARM_V30 self) -> WORD"},
	 { (char *)"NET_DVR_HIDEALARM_V30_wHideAlarmAreaHeight_set", _wrap_NET_DVR_HIDEALARM_V30_wHideAlarmAreaHeight_set, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_V30_wHideAlarmAreaHeight_set(NET_DVR_HIDEALARM_V30 self, WORD wHideAlarmAreaHeight)"},
	 { (char *)"NET_DVR_HIDEALARM_V30_wHideAlarmAreaHeight_get", _wrap_NET_DVR_HIDEALARM_V30_wHideAlarmAreaHeight_get, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_V30_wHideAlarmAreaHeight_get(NET_DVR_HIDEALARM_V30 self) -> WORD"},
	 { (char *)"NET_DVR_HIDEALARM_V30_strHideAlarmHandleType_set", _wrap_NET_DVR_HIDEALARM_V30_strHideAlarmHandleType_set, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_V30_strHideAlarmHandleType_set(NET_DVR_HIDEALARM_V30 self, NET_DVR_HANDLEEXCEPTION_V30 strHideAlarmHandleType)"},
	 { (char *)"NET_DVR_HIDEALARM_V30_strHideAlarmHandleType_get", _wrap_NET_DVR_HIDEALARM_V30_strHideAlarmHandleType_get, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_V30_strHideAlarmHandleType_get(NET_DVR_HIDEALARM_V30 self) -> NET_DVR_HANDLEEXCEPTION_V30"},
	 { (char *)"NET_DVR_HIDEALARM_V30_struAlarmTime_set", _wrap_NET_DVR_HIDEALARM_V30_struAlarmTime_set, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_V30_struAlarmTime_set(NET_DVR_HIDEALARM_V30 self, NET_DVR_SCHEDTIME [7][8] struAlarmTime)"},
	 { (char *)"NET_DVR_HIDEALARM_V30_struAlarmTime_get", _wrap_NET_DVR_HIDEALARM_V30_struAlarmTime_get, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_V30_struAlarmTime_get(NET_DVR_HIDEALARM_V30 self) -> NET_DVR_SCHEDTIME [7][8]"},
	 { (char *)"new_NET_DVR_HIDEALARM_V30", _wrap_new_NET_DVR_HIDEALARM_V30, METH_VARARGS, (char *)"new_NET_DVR_HIDEALARM_V30() -> NET_DVR_HIDEALARM_V30"},
	 { (char *)"delete_NET_DVR_HIDEALARM_V30", _wrap_delete_NET_DVR_HIDEALARM_V30, METH_VARARGS, (char *)"delete_NET_DVR_HIDEALARM_V30(NET_DVR_HIDEALARM_V30 self)"},
	 { (char *)"NET_DVR_HIDEALARM_V30_swigregister", NET_DVR_HIDEALARM_V30_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_HIDEALARM_dwEnableHideAlarm_set", _wrap_NET_DVR_HIDEALARM_dwEnableHideAlarm_set, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_dwEnableHideAlarm_set(NET_DVR_HIDEALARM self, DWORD dwEnableHideAlarm)"},
	 { (char *)"NET_DVR_HIDEALARM_dwEnableHideAlarm_get", _wrap_NET_DVR_HIDEALARM_dwEnableHideAlarm_get, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_dwEnableHideAlarm_get(NET_DVR_HIDEALARM self) -> DWORD"},
	 { (char *)"NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftX_set", _wrap_NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftX_set, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftX_set(NET_DVR_HIDEALARM self, WORD wHideAlarmAreaTopLeftX)"},
	 { (char *)"NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftX_get", _wrap_NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftX_get, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftX_get(NET_DVR_HIDEALARM self) -> WORD"},
	 { (char *)"NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftY_set", _wrap_NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftY_set, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftY_set(NET_DVR_HIDEALARM self, WORD wHideAlarmAreaTopLeftY)"},
	 { (char *)"NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftY_get", _wrap_NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftY_get, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_wHideAlarmAreaTopLeftY_get(NET_DVR_HIDEALARM self) -> WORD"},
	 { (char *)"NET_DVR_HIDEALARM_wHideAlarmAreaWidth_set", _wrap_NET_DVR_HIDEALARM_wHideAlarmAreaWidth_set, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_wHideAlarmAreaWidth_set(NET_DVR_HIDEALARM self, WORD wHideAlarmAreaWidth)"},
	 { (char *)"NET_DVR_HIDEALARM_wHideAlarmAreaWidth_get", _wrap_NET_DVR_HIDEALARM_wHideAlarmAreaWidth_get, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_wHideAlarmAreaWidth_get(NET_DVR_HIDEALARM self) -> WORD"},
	 { (char *)"NET_DVR_HIDEALARM_wHideAlarmAreaHeight_set", _wrap_NET_DVR_HIDEALARM_wHideAlarmAreaHeight_set, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_wHideAlarmAreaHeight_set(NET_DVR_HIDEALARM self, WORD wHideAlarmAreaHeight)"},
	 { (char *)"NET_DVR_HIDEALARM_wHideAlarmAreaHeight_get", _wrap_NET_DVR_HIDEALARM_wHideAlarmAreaHeight_get, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_wHideAlarmAreaHeight_get(NET_DVR_HIDEALARM self) -> WORD"},
	 { (char *)"NET_DVR_HIDEALARM_strHideAlarmHandleType_set", _wrap_NET_DVR_HIDEALARM_strHideAlarmHandleType_set, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_strHideAlarmHandleType_set(NET_DVR_HIDEALARM self, NET_DVR_HANDLEEXCEPTION strHideAlarmHandleType)"},
	 { (char *)"NET_DVR_HIDEALARM_strHideAlarmHandleType_get", _wrap_NET_DVR_HIDEALARM_strHideAlarmHandleType_get, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_strHideAlarmHandleType_get(NET_DVR_HIDEALARM self) -> NET_DVR_HANDLEEXCEPTION"},
	 { (char *)"NET_DVR_HIDEALARM_struAlarmTime_set", _wrap_NET_DVR_HIDEALARM_struAlarmTime_set, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_struAlarmTime_set(NET_DVR_HIDEALARM self, NET_DVR_SCHEDTIME [7][4] struAlarmTime)"},
	 { (char *)"NET_DVR_HIDEALARM_struAlarmTime_get", _wrap_NET_DVR_HIDEALARM_struAlarmTime_get, METH_VARARGS, (char *)"NET_DVR_HIDEALARM_struAlarmTime_get(NET_DVR_HIDEALARM self) -> NET_DVR_SCHEDTIME [7][4]"},
	 { (char *)"new_NET_DVR_HIDEALARM", _wrap_new_NET_DVR_HIDEALARM, METH_VARARGS, (char *)"new_NET_DVR_HIDEALARM() -> NET_DVR_HIDEALARM"},
	 { (char *)"delete_NET_DVR_HIDEALARM", _wrap_delete_NET_DVR_HIDEALARM, METH_VARARGS, (char *)"delete_NET_DVR_HIDEALARM(NET_DVR_HIDEALARM self)"},
	 { (char *)"NET_DVR_HIDEALARM_swigregister", NET_DVR_HIDEALARM_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_VILOST_V30_byEnableHandleVILost_set", _wrap_NET_DVR_VILOST_V30_byEnableHandleVILost_set, METH_VARARGS, (char *)"NET_DVR_VILOST_V30_byEnableHandleVILost_set(NET_DVR_VILOST_V30 self, BYTE byEnableHandleVILost)"},
	 { (char *)"NET_DVR_VILOST_V30_byEnableHandleVILost_get", _wrap_NET_DVR_VILOST_V30_byEnableHandleVILost_get, METH_VARARGS, (char *)"NET_DVR_VILOST_V30_byEnableHandleVILost_get(NET_DVR_VILOST_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_VILOST_V30_strVILostHandleType_set", _wrap_NET_DVR_VILOST_V30_strVILostHandleType_set, METH_VARARGS, (char *)"NET_DVR_VILOST_V30_strVILostHandleType_set(NET_DVR_VILOST_V30 self, NET_DVR_HANDLEEXCEPTION_V30 strVILostHandleType)"},
	 { (char *)"NET_DVR_VILOST_V30_strVILostHandleType_get", _wrap_NET_DVR_VILOST_V30_strVILostHandleType_get, METH_VARARGS, (char *)"NET_DVR_VILOST_V30_strVILostHandleType_get(NET_DVR_VILOST_V30 self) -> NET_DVR_HANDLEEXCEPTION_V30"},
	 { (char *)"NET_DVR_VILOST_V30_struAlarmTime_set", _wrap_NET_DVR_VILOST_V30_struAlarmTime_set, METH_VARARGS, (char *)"NET_DVR_VILOST_V30_struAlarmTime_set(NET_DVR_VILOST_V30 self, NET_DVR_SCHEDTIME [7][8] struAlarmTime)"},
	 { (char *)"NET_DVR_VILOST_V30_struAlarmTime_get", _wrap_NET_DVR_VILOST_V30_struAlarmTime_get, METH_VARARGS, (char *)"NET_DVR_VILOST_V30_struAlarmTime_get(NET_DVR_VILOST_V30 self) -> NET_DVR_SCHEDTIME [7][8]"},
	 { (char *)"new_NET_DVR_VILOST_V30", _wrap_new_NET_DVR_VILOST_V30, METH_VARARGS, (char *)"new_NET_DVR_VILOST_V30() -> NET_DVR_VILOST_V30"},
	 { (char *)"delete_NET_DVR_VILOST_V30", _wrap_delete_NET_DVR_VILOST_V30, METH_VARARGS, (char *)"delete_NET_DVR_VILOST_V30(NET_DVR_VILOST_V30 self)"},
	 { (char *)"NET_DVR_VILOST_V30_swigregister", NET_DVR_VILOST_V30_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_VILOST_byEnableHandleVILost_set", _wrap_NET_DVR_VILOST_byEnableHandleVILost_set, METH_VARARGS, (char *)"NET_DVR_VILOST_byEnableHandleVILost_set(NET_DVR_VILOST self, BYTE byEnableHandleVILost)"},
	 { (char *)"NET_DVR_VILOST_byEnableHandleVILost_get", _wrap_NET_DVR_VILOST_byEnableHandleVILost_get, METH_VARARGS, (char *)"NET_DVR_VILOST_byEnableHandleVILost_get(NET_DVR_VILOST self) -> BYTE"},
	 { (char *)"NET_DVR_VILOST_strVILostHandleType_set", _wrap_NET_DVR_VILOST_strVILostHandleType_set, METH_VARARGS, (char *)"NET_DVR_VILOST_strVILostHandleType_set(NET_DVR_VILOST self, NET_DVR_HANDLEEXCEPTION strVILostHandleType)"},
	 { (char *)"NET_DVR_VILOST_strVILostHandleType_get", _wrap_NET_DVR_VILOST_strVILostHandleType_get, METH_VARARGS, (char *)"NET_DVR_VILOST_strVILostHandleType_get(NET_DVR_VILOST self) -> NET_DVR_HANDLEEXCEPTION"},
	 { (char *)"NET_DVR_VILOST_struAlarmTime_set", _wrap_NET_DVR_VILOST_struAlarmTime_set, METH_VARARGS, (char *)"NET_DVR_VILOST_struAlarmTime_set(NET_DVR_VILOST self, NET_DVR_SCHEDTIME [7][4] struAlarmTime)"},
	 { (char *)"NET_DVR_VILOST_struAlarmTime_get", _wrap_NET_DVR_VILOST_struAlarmTime_get, METH_VARARGS, (char *)"NET_DVR_VILOST_struAlarmTime_get(NET_DVR_VILOST self) -> NET_DVR_SCHEDTIME [7][4]"},
	 { (char *)"new_NET_DVR_VILOST", _wrap_new_NET_DVR_VILOST, METH_VARARGS, (char *)"new_NET_DVR_VILOST() -> NET_DVR_VILOST"},
	 { (char *)"delete_NET_DVR_VILOST", _wrap_delete_NET_DVR_VILOST, METH_VARARGS, (char *)"delete_NET_DVR_VILOST(NET_DVR_VILOST self)"},
	 { (char *)"NET_DVR_VILOST_swigregister", NET_DVR_VILOST_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_SHELTER_wHideAreaTopLeftX_set", _wrap_NET_DVR_SHELTER_wHideAreaTopLeftX_set, METH_VARARGS, (char *)"NET_DVR_SHELTER_wHideAreaTopLeftX_set(NET_DVR_SHELTER self, WORD wHideAreaTopLeftX)"},
	 { (char *)"NET_DVR_SHELTER_wHideAreaTopLeftX_get", _wrap_NET_DVR_SHELTER_wHideAreaTopLeftX_get, METH_VARARGS, (char *)"NET_DVR_SHELTER_wHideAreaTopLeftX_get(NET_DVR_SHELTER self) -> WORD"},
	 { (char *)"NET_DVR_SHELTER_wHideAreaTopLeftY_set", _wrap_NET_DVR_SHELTER_wHideAreaTopLeftY_set, METH_VARARGS, (char *)"NET_DVR_SHELTER_wHideAreaTopLeftY_set(NET_DVR_SHELTER self, WORD wHideAreaTopLeftY)"},
	 { (char *)"NET_DVR_SHELTER_wHideAreaTopLeftY_get", _wrap_NET_DVR_SHELTER_wHideAreaTopLeftY_get, METH_VARARGS, (char *)"NET_DVR_SHELTER_wHideAreaTopLeftY_get(NET_DVR_SHELTER self) -> WORD"},
	 { (char *)"NET_DVR_SHELTER_wHideAreaWidth_set", _wrap_NET_DVR_SHELTER_wHideAreaWidth_set, METH_VARARGS, (char *)"NET_DVR_SHELTER_wHideAreaWidth_set(NET_DVR_SHELTER self, WORD wHideAreaWidth)"},
	 { (char *)"NET_DVR_SHELTER_wHideAreaWidth_get", _wrap_NET_DVR_SHELTER_wHideAreaWidth_get, METH_VARARGS, (char *)"NET_DVR_SHELTER_wHideAreaWidth_get(NET_DVR_SHELTER self) -> WORD"},
	 { (char *)"NET_DVR_SHELTER_wHideAreaHeight_set", _wrap_NET_DVR_SHELTER_wHideAreaHeight_set, METH_VARARGS, (char *)"NET_DVR_SHELTER_wHideAreaHeight_set(NET_DVR_SHELTER self, WORD wHideAreaHeight)"},
	 { (char *)"NET_DVR_SHELTER_wHideAreaHeight_get", _wrap_NET_DVR_SHELTER_wHideAreaHeight_get, METH_VARARGS, (char *)"NET_DVR_SHELTER_wHideAreaHeight_get(NET_DVR_SHELTER self) -> WORD"},
	 { (char *)"new_NET_DVR_SHELTER", _wrap_new_NET_DVR_SHELTER, METH_VARARGS, (char *)"new_NET_DVR_SHELTER() -> NET_DVR_SHELTER"},
	 { (char *)"delete_NET_DVR_SHELTER", _wrap_delete_NET_DVR_SHELTER, METH_VARARGS, (char *)"delete_NET_DVR_SHELTER(NET_DVR_SHELTER self)"},
	 { (char *)"NET_DVR_SHELTER_swigregister", NET_DVR_SHELTER_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_COLOR_byBrightness_set", _wrap_NET_DVR_COLOR_byBrightness_set, METH_VARARGS, (char *)"NET_DVR_COLOR_byBrightness_set(NET_DVR_COLOR self, BYTE byBrightness)"},
	 { (char *)"NET_DVR_COLOR_byBrightness_get", _wrap_NET_DVR_COLOR_byBrightness_get, METH_VARARGS, (char *)"NET_DVR_COLOR_byBrightness_get(NET_DVR_COLOR self) -> BYTE"},
	 { (char *)"NET_DVR_COLOR_byContrast_set", _wrap_NET_DVR_COLOR_byContrast_set, METH_VARARGS, (char *)"NET_DVR_COLOR_byContrast_set(NET_DVR_COLOR self, BYTE byContrast)"},
	 { (char *)"NET_DVR_COLOR_byContrast_get", _wrap_NET_DVR_COLOR_byContrast_get, METH_VARARGS, (char *)"NET_DVR_COLOR_byContrast_get(NET_DVR_COLOR self) -> BYTE"},
	 { (char *)"NET_DVR_COLOR_bySaturation_set", _wrap_NET_DVR_COLOR_bySaturation_set, METH_VARARGS, (char *)"NET_DVR_COLOR_bySaturation_set(NET_DVR_COLOR self, BYTE bySaturation)"},
	 { (char *)"NET_DVR_COLOR_bySaturation_get", _wrap_NET_DVR_COLOR_bySaturation_get, METH_VARARGS, (char *)"NET_DVR_COLOR_bySaturation_get(NET_DVR_COLOR self) -> BYTE"},
	 { (char *)"NET_DVR_COLOR_byHue_set", _wrap_NET_DVR_COLOR_byHue_set, METH_VARARGS, (char *)"NET_DVR_COLOR_byHue_set(NET_DVR_COLOR self, BYTE byHue)"},
	 { (char *)"NET_DVR_COLOR_byHue_get", _wrap_NET_DVR_COLOR_byHue_get, METH_VARARGS, (char *)"NET_DVR_COLOR_byHue_get(NET_DVR_COLOR self) -> BYTE"},
	 { (char *)"new_NET_DVR_COLOR", _wrap_new_NET_DVR_COLOR, METH_VARARGS, (char *)"new_NET_DVR_COLOR() -> NET_DVR_COLOR"},
	 { (char *)"delete_NET_DVR_COLOR", _wrap_delete_NET_DVR_COLOR, METH_VARARGS, (char *)"delete_NET_DVR_COLOR(NET_DVR_COLOR self)"},
	 { (char *)"NET_DVR_COLOR_swigregister", NET_DVR_COLOR_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_RGB_COLOR_byRed_set", _wrap_NET_DVR_RGB_COLOR_byRed_set, METH_VARARGS, (char *)"NET_DVR_RGB_COLOR_byRed_set(NET_DVR_RGB_COLOR self, BYTE byRed)"},
	 { (char *)"NET_DVR_RGB_COLOR_byRed_get", _wrap_NET_DVR_RGB_COLOR_byRed_get, METH_VARARGS, (char *)"NET_DVR_RGB_COLOR_byRed_get(NET_DVR_RGB_COLOR self) -> BYTE"},
	 { (char *)"NET_DVR_RGB_COLOR_byGreen_set", _wrap_NET_DVR_RGB_COLOR_byGreen_set, METH_VARARGS, (char *)"NET_DVR_RGB_COLOR_byGreen_set(NET_DVR_RGB_COLOR self, BYTE byGreen)"},
	 { (char *)"NET_DVR_RGB_COLOR_byGreen_get", _wrap_NET_DVR_RGB_COLOR_byGreen_get, METH_VARARGS, (char *)"NET_DVR_RGB_COLOR_byGreen_get(NET_DVR_RGB_COLOR self) -> BYTE"},
	 { (char *)"NET_DVR_RGB_COLOR_byBlue_set", _wrap_NET_DVR_RGB_COLOR_byBlue_set, METH_VARARGS, (char *)"NET_DVR_RGB_COLOR_byBlue_set(NET_DVR_RGB_COLOR self, BYTE byBlue)"},
	 { (char *)"NET_DVR_RGB_COLOR_byBlue_get", _wrap_NET_DVR_RGB_COLOR_byBlue_get, METH_VARARGS, (char *)"NET_DVR_RGB_COLOR_byBlue_get(NET_DVR_RGB_COLOR self) -> BYTE"},
	 { (char *)"NET_DVR_RGB_COLOR_byRes_set", _wrap_NET_DVR_RGB_COLOR_byRes_set, METH_VARARGS, (char *)"NET_DVR_RGB_COLOR_byRes_set(NET_DVR_RGB_COLOR self, BYTE byRes)"},
	 { (char *)"NET_DVR_RGB_COLOR_byRes_get", _wrap_NET_DVR_RGB_COLOR_byRes_get, METH_VARARGS, (char *)"NET_DVR_RGB_COLOR_byRes_get(NET_DVR_RGB_COLOR self) -> BYTE"},
	 { (char *)"new_NET_DVR_RGB_COLOR", _wrap_new_NET_DVR_RGB_COLOR, METH_VARARGS, (char *)"new_NET_DVR_RGB_COLOR() -> NET_DVR_RGB_COLOR"},
	 { (char *)"delete_NET_DVR_RGB_COLOR", _wrap_delete_NET_DVR_RGB_COLOR, METH_VARARGS, (char *)"delete_NET_DVR_RGB_COLOR(NET_DVR_RGB_COLOR self)"},
	 { (char *)"NET_DVR_RGB_COLOR_swigregister", NET_DVR_RGB_COLOR_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_VCA_POINT_fX_set", _wrap_NET_VCA_POINT_fX_set, METH_VARARGS, (char *)"NET_VCA_POINT_fX_set(NET_VCA_POINT self, float fX)"},
	 { (char *)"NET_VCA_POINT_fX_get", _wrap_NET_VCA_POINT_fX_get, METH_VARARGS, (char *)"NET_VCA_POINT_fX_get(NET_VCA_POINT self) -> float"},
	 { (char *)"NET_VCA_POINT_fY_set", _wrap_NET_VCA_POINT_fY_set, METH_VARARGS, (char *)"NET_VCA_POINT_fY_set(NET_VCA_POINT self, float fY)"},
	 { (char *)"NET_VCA_POINT_fY_get", _wrap_NET_VCA_POINT_fY_get, METH_VARARGS, (char *)"NET_VCA_POINT_fY_get(NET_VCA_POINT self) -> float"},
	 { (char *)"new_NET_VCA_POINT", _wrap_new_NET_VCA_POINT, METH_VARARGS, (char *)"new_NET_VCA_POINT() -> NET_VCA_POINT"},
	 { (char *)"delete_NET_VCA_POINT", _wrap_delete_NET_VCA_POINT, METH_VARARGS, (char *)"delete_NET_VCA_POINT(NET_VCA_POINT self)"},
	 { (char *)"NET_VCA_POINT_swigregister", NET_VCA_POINT_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_PICCFG_V30_dwSize_set", _wrap_NET_DVR_PICCFG_V30_dwSize_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_dwSize_set(NET_DVR_PICCFG_V30 self, DWORD dwSize)"},
	 { (char *)"NET_DVR_PICCFG_V30_dwSize_get", _wrap_NET_DVR_PICCFG_V30_dwSize_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_dwSize_get(NET_DVR_PICCFG_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_PICCFG_V30_sChanName_set", _wrap_NET_DVR_PICCFG_V30_sChanName_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_sChanName_set(NET_DVR_PICCFG_V30 self, BYTE [32] sChanName)"},
	 { (char *)"NET_DVR_PICCFG_V30_sChanName_get", _wrap_NET_DVR_PICCFG_V30_sChanName_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_sChanName_get(NET_DVR_PICCFG_V30 self) -> BYTE [32]"},
	 { (char *)"NET_DVR_PICCFG_V30_dwVideoFormat_set", _wrap_NET_DVR_PICCFG_V30_dwVideoFormat_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_dwVideoFormat_set(NET_DVR_PICCFG_V30 self, DWORD dwVideoFormat)"},
	 { (char *)"NET_DVR_PICCFG_V30_dwVideoFormat_get", _wrap_NET_DVR_PICCFG_V30_dwVideoFormat_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_dwVideoFormat_get(NET_DVR_PICCFG_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_PICCFG_V30_byReservedData_set", _wrap_NET_DVR_PICCFG_V30_byReservedData_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byReservedData_set(NET_DVR_PICCFG_V30 self, BYTE [64] byReservedData)"},
	 { (char *)"NET_DVR_PICCFG_V30_byReservedData_get", _wrap_NET_DVR_PICCFG_V30_byReservedData_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byReservedData_get(NET_DVR_PICCFG_V30 self) -> BYTE [64]"},
	 { (char *)"NET_DVR_PICCFG_V30_dwShowChanName_set", _wrap_NET_DVR_PICCFG_V30_dwShowChanName_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_dwShowChanName_set(NET_DVR_PICCFG_V30 self, DWORD dwShowChanName)"},
	 { (char *)"NET_DVR_PICCFG_V30_dwShowChanName_get", _wrap_NET_DVR_PICCFG_V30_dwShowChanName_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_dwShowChanName_get(NET_DVR_PICCFG_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_PICCFG_V30_wShowNameTopLeftX_set", _wrap_NET_DVR_PICCFG_V30_wShowNameTopLeftX_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_wShowNameTopLeftX_set(NET_DVR_PICCFG_V30 self, WORD wShowNameTopLeftX)"},
	 { (char *)"NET_DVR_PICCFG_V30_wShowNameTopLeftX_get", _wrap_NET_DVR_PICCFG_V30_wShowNameTopLeftX_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_wShowNameTopLeftX_get(NET_DVR_PICCFG_V30 self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_V30_wShowNameTopLeftY_set", _wrap_NET_DVR_PICCFG_V30_wShowNameTopLeftY_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_wShowNameTopLeftY_set(NET_DVR_PICCFG_V30 self, WORD wShowNameTopLeftY)"},
	 { (char *)"NET_DVR_PICCFG_V30_wShowNameTopLeftY_get", _wrap_NET_DVR_PICCFG_V30_wShowNameTopLeftY_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_wShowNameTopLeftY_get(NET_DVR_PICCFG_V30 self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_V30_struVILost_set", _wrap_NET_DVR_PICCFG_V30_struVILost_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_struVILost_set(NET_DVR_PICCFG_V30 self, NET_DVR_VILOST_V30 struVILost)"},
	 { (char *)"NET_DVR_PICCFG_V30_struVILost_get", _wrap_NET_DVR_PICCFG_V30_struVILost_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_struVILost_get(NET_DVR_PICCFG_V30 self) -> NET_DVR_VILOST_V30"},
	 { (char *)"NET_DVR_PICCFG_V30_struRes_set", _wrap_NET_DVR_PICCFG_V30_struRes_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_struRes_set(NET_DVR_PICCFG_V30 self, NET_DVR_VILOST_V30 struRes)"},
	 { (char *)"NET_DVR_PICCFG_V30_struRes_get", _wrap_NET_DVR_PICCFG_V30_struRes_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_struRes_get(NET_DVR_PICCFG_V30 self) -> NET_DVR_VILOST_V30"},
	 { (char *)"NET_DVR_PICCFG_V30_struMotion_set", _wrap_NET_DVR_PICCFG_V30_struMotion_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_struMotion_set(NET_DVR_PICCFG_V30 self, NET_DVR_MOTION_V30 struMotion)"},
	 { (char *)"NET_DVR_PICCFG_V30_struMotion_get", _wrap_NET_DVR_PICCFG_V30_struMotion_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_struMotion_get(NET_DVR_PICCFG_V30 self) -> NET_DVR_MOTION_V30"},
	 { (char *)"NET_DVR_PICCFG_V30_struHideAlarm_set", _wrap_NET_DVR_PICCFG_V30_struHideAlarm_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_struHideAlarm_set(NET_DVR_PICCFG_V30 self, NET_DVR_HIDEALARM_V30 struHideAlarm)"},
	 { (char *)"NET_DVR_PICCFG_V30_struHideAlarm_get", _wrap_NET_DVR_PICCFG_V30_struHideAlarm_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_struHideAlarm_get(NET_DVR_PICCFG_V30 self) -> NET_DVR_HIDEALARM_V30"},
	 { (char *)"NET_DVR_PICCFG_V30_dwEnableHide_set", _wrap_NET_DVR_PICCFG_V30_dwEnableHide_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_dwEnableHide_set(NET_DVR_PICCFG_V30 self, DWORD dwEnableHide)"},
	 { (char *)"NET_DVR_PICCFG_V30_dwEnableHide_get", _wrap_NET_DVR_PICCFG_V30_dwEnableHide_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_dwEnableHide_get(NET_DVR_PICCFG_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_PICCFG_V30_struShelter_set", _wrap_NET_DVR_PICCFG_V30_struShelter_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_struShelter_set(NET_DVR_PICCFG_V30 self, NET_DVR_SHELTER struShelter)"},
	 { (char *)"NET_DVR_PICCFG_V30_struShelter_get", _wrap_NET_DVR_PICCFG_V30_struShelter_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_struShelter_get(NET_DVR_PICCFG_V30 self) -> NET_DVR_SHELTER"},
	 { (char *)"NET_DVR_PICCFG_V30_dwShowOsd_set", _wrap_NET_DVR_PICCFG_V30_dwShowOsd_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_dwShowOsd_set(NET_DVR_PICCFG_V30 self, DWORD dwShowOsd)"},
	 { (char *)"NET_DVR_PICCFG_V30_dwShowOsd_get", _wrap_NET_DVR_PICCFG_V30_dwShowOsd_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_dwShowOsd_get(NET_DVR_PICCFG_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_PICCFG_V30_wOSDTopLeftX_set", _wrap_NET_DVR_PICCFG_V30_wOSDTopLeftX_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_wOSDTopLeftX_set(NET_DVR_PICCFG_V30 self, WORD wOSDTopLeftX)"},
	 { (char *)"NET_DVR_PICCFG_V30_wOSDTopLeftX_get", _wrap_NET_DVR_PICCFG_V30_wOSDTopLeftX_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_wOSDTopLeftX_get(NET_DVR_PICCFG_V30 self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_V30_wOSDTopLeftY_set", _wrap_NET_DVR_PICCFG_V30_wOSDTopLeftY_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_wOSDTopLeftY_set(NET_DVR_PICCFG_V30 self, WORD wOSDTopLeftY)"},
	 { (char *)"NET_DVR_PICCFG_V30_wOSDTopLeftY_get", _wrap_NET_DVR_PICCFG_V30_wOSDTopLeftY_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_wOSDTopLeftY_get(NET_DVR_PICCFG_V30 self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_V30_byOSDType_set", _wrap_NET_DVR_PICCFG_V30_byOSDType_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byOSDType_set(NET_DVR_PICCFG_V30 self, BYTE byOSDType)"},
	 { (char *)"NET_DVR_PICCFG_V30_byOSDType_get", _wrap_NET_DVR_PICCFG_V30_byOSDType_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byOSDType_get(NET_DVR_PICCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_V30_byDispWeek_set", _wrap_NET_DVR_PICCFG_V30_byDispWeek_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byDispWeek_set(NET_DVR_PICCFG_V30 self, BYTE byDispWeek)"},
	 { (char *)"NET_DVR_PICCFG_V30_byDispWeek_get", _wrap_NET_DVR_PICCFG_V30_byDispWeek_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byDispWeek_get(NET_DVR_PICCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_V30_byOSDAttrib_set", _wrap_NET_DVR_PICCFG_V30_byOSDAttrib_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byOSDAttrib_set(NET_DVR_PICCFG_V30 self, BYTE byOSDAttrib)"},
	 { (char *)"NET_DVR_PICCFG_V30_byOSDAttrib_get", _wrap_NET_DVR_PICCFG_V30_byOSDAttrib_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byOSDAttrib_get(NET_DVR_PICCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_V30_byHourOSDType_set", _wrap_NET_DVR_PICCFG_V30_byHourOSDType_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byHourOSDType_set(NET_DVR_PICCFG_V30 self, BYTE byHourOSDType)"},
	 { (char *)"NET_DVR_PICCFG_V30_byHourOSDType_get", _wrap_NET_DVR_PICCFG_V30_byHourOSDType_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byHourOSDType_get(NET_DVR_PICCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_V30_byFontSize_set", _wrap_NET_DVR_PICCFG_V30_byFontSize_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byFontSize_set(NET_DVR_PICCFG_V30 self, BYTE byFontSize)"},
	 { (char *)"NET_DVR_PICCFG_V30_byFontSize_get", _wrap_NET_DVR_PICCFG_V30_byFontSize_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byFontSize_get(NET_DVR_PICCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_V30_byOSDColorType_set", _wrap_NET_DVR_PICCFG_V30_byOSDColorType_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byOSDColorType_set(NET_DVR_PICCFG_V30 self, BYTE byOSDColorType)"},
	 { (char *)"NET_DVR_PICCFG_V30_byOSDColorType_get", _wrap_NET_DVR_PICCFG_V30_byOSDColorType_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byOSDColorType_get(NET_DVR_PICCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_V30_byAlignment_set", _wrap_NET_DVR_PICCFG_V30_byAlignment_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byAlignment_set(NET_DVR_PICCFG_V30 self, BYTE byAlignment)"},
	 { (char *)"NET_DVR_PICCFG_V30_byAlignment_get", _wrap_NET_DVR_PICCFG_V30_byAlignment_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byAlignment_get(NET_DVR_PICCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_V30_byOSDMilliSecondEnable_set", _wrap_NET_DVR_PICCFG_V30_byOSDMilliSecondEnable_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byOSDMilliSecondEnable_set(NET_DVR_PICCFG_V30 self, BYTE byOSDMilliSecondEnable)"},
	 { (char *)"NET_DVR_PICCFG_V30_byOSDMilliSecondEnable_get", _wrap_NET_DVR_PICCFG_V30_byOSDMilliSecondEnable_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byOSDMilliSecondEnable_get(NET_DVR_PICCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_V30_struOsdColor_set", _wrap_NET_DVR_PICCFG_V30_struOsdColor_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_struOsdColor_set(NET_DVR_PICCFG_V30 self, NET_DVR_RGB_COLOR struOsdColor)"},
	 { (char *)"NET_DVR_PICCFG_V30_struOsdColor_get", _wrap_NET_DVR_PICCFG_V30_struOsdColor_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_struOsdColor_get(NET_DVR_PICCFG_V30 self) -> NET_DVR_RGB_COLOR"},
	 { (char *)"NET_DVR_PICCFG_V30_dwBoundary_set", _wrap_NET_DVR_PICCFG_V30_dwBoundary_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_dwBoundary_set(NET_DVR_PICCFG_V30 self, DWORD dwBoundary)"},
	 { (char *)"NET_DVR_PICCFG_V30_dwBoundary_get", _wrap_NET_DVR_PICCFG_V30_dwBoundary_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_dwBoundary_get(NET_DVR_PICCFG_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_PICCFG_V30_struOsdBkColor_set", _wrap_NET_DVR_PICCFG_V30_struOsdBkColor_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_struOsdBkColor_set(NET_DVR_PICCFG_V30 self, NET_DVR_RGB_COLOR struOsdBkColor)"},
	 { (char *)"NET_DVR_PICCFG_V30_struOsdBkColor_get", _wrap_NET_DVR_PICCFG_V30_struOsdBkColor_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_struOsdBkColor_get(NET_DVR_PICCFG_V30 self) -> NET_DVR_RGB_COLOR"},
	 { (char *)"NET_DVR_PICCFG_V30_byOSDBkColorMode_set", _wrap_NET_DVR_PICCFG_V30_byOSDBkColorMode_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byOSDBkColorMode_set(NET_DVR_PICCFG_V30 self, BYTE byOSDBkColorMode)"},
	 { (char *)"NET_DVR_PICCFG_V30_byOSDBkColorMode_get", _wrap_NET_DVR_PICCFG_V30_byOSDBkColorMode_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byOSDBkColorMode_get(NET_DVR_PICCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_V30_byUpDownBoundary_set", _wrap_NET_DVR_PICCFG_V30_byUpDownBoundary_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byUpDownBoundary_set(NET_DVR_PICCFG_V30 self, BYTE byUpDownBoundary)"},
	 { (char *)"NET_DVR_PICCFG_V30_byUpDownBoundary_get", _wrap_NET_DVR_PICCFG_V30_byUpDownBoundary_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byUpDownBoundary_get(NET_DVR_PICCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_V30_byLeftRightBoundary_set", _wrap_NET_DVR_PICCFG_V30_byLeftRightBoundary_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byLeftRightBoundary_set(NET_DVR_PICCFG_V30 self, BYTE byLeftRightBoundary)"},
	 { (char *)"NET_DVR_PICCFG_V30_byLeftRightBoundary_get", _wrap_NET_DVR_PICCFG_V30_byLeftRightBoundary_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byLeftRightBoundary_get(NET_DVR_PICCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_V30_byAngleEnabled_set", _wrap_NET_DVR_PICCFG_V30_byAngleEnabled_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byAngleEnabled_set(NET_DVR_PICCFG_V30 self, BYTE byAngleEnabled)"},
	 { (char *)"NET_DVR_PICCFG_V30_byAngleEnabled_get", _wrap_NET_DVR_PICCFG_V30_byAngleEnabled_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byAngleEnabled_get(NET_DVR_PICCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_V30_wTiltAngleTopLeftX_set", _wrap_NET_DVR_PICCFG_V30_wTiltAngleTopLeftX_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_wTiltAngleTopLeftX_set(NET_DVR_PICCFG_V30 self, WORD wTiltAngleTopLeftX)"},
	 { (char *)"NET_DVR_PICCFG_V30_wTiltAngleTopLeftX_get", _wrap_NET_DVR_PICCFG_V30_wTiltAngleTopLeftX_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_wTiltAngleTopLeftX_get(NET_DVR_PICCFG_V30 self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_V30_wTiltAngleTopLeftY_set", _wrap_NET_DVR_PICCFG_V30_wTiltAngleTopLeftY_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_wTiltAngleTopLeftY_set(NET_DVR_PICCFG_V30 self, WORD wTiltAngleTopLeftY)"},
	 { (char *)"NET_DVR_PICCFG_V30_wTiltAngleTopLeftY_get", _wrap_NET_DVR_PICCFG_V30_wTiltAngleTopLeftY_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_wTiltAngleTopLeftY_get(NET_DVR_PICCFG_V30 self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_V30_byRes_set", _wrap_NET_DVR_PICCFG_V30_byRes_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byRes_set(NET_DVR_PICCFG_V30 self, BYTE [40] byRes)"},
	 { (char *)"NET_DVR_PICCFG_V30_byRes_get", _wrap_NET_DVR_PICCFG_V30_byRes_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_V30_byRes_get(NET_DVR_PICCFG_V30 self) -> BYTE [40]"},
	 { (char *)"new_NET_DVR_PICCFG_V30", _wrap_new_NET_DVR_PICCFG_V30, METH_VARARGS, (char *)"new_NET_DVR_PICCFG_V30() -> NET_DVR_PICCFG_V30"},
	 { (char *)"delete_NET_DVR_PICCFG_V30", _wrap_delete_NET_DVR_PICCFG_V30, METH_VARARGS, (char *)"delete_NET_DVR_PICCFG_V30(NET_DVR_PICCFG_V30 self)"},
	 { (char *)"NET_DVR_PICCFG_V30_swigregister", NET_DVR_PICCFG_V30_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_PICCFG_EX_dwSize_set", _wrap_NET_DVR_PICCFG_EX_dwSize_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_dwSize_set(NET_DVR_PICCFG_EX self, DWORD dwSize)"},
	 { (char *)"NET_DVR_PICCFG_EX_dwSize_get", _wrap_NET_DVR_PICCFG_EX_dwSize_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_dwSize_get(NET_DVR_PICCFG_EX self) -> DWORD"},
	 { (char *)"NET_DVR_PICCFG_EX_sChanName_set", _wrap_NET_DVR_PICCFG_EX_sChanName_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_sChanName_set(NET_DVR_PICCFG_EX self, BYTE [32] sChanName)"},
	 { (char *)"NET_DVR_PICCFG_EX_sChanName_get", _wrap_NET_DVR_PICCFG_EX_sChanName_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_sChanName_get(NET_DVR_PICCFG_EX self) -> BYTE [32]"},
	 { (char *)"NET_DVR_PICCFG_EX_dwVideoFormat_set", _wrap_NET_DVR_PICCFG_EX_dwVideoFormat_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_dwVideoFormat_set(NET_DVR_PICCFG_EX self, DWORD dwVideoFormat)"},
	 { (char *)"NET_DVR_PICCFG_EX_dwVideoFormat_get", _wrap_NET_DVR_PICCFG_EX_dwVideoFormat_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_dwVideoFormat_get(NET_DVR_PICCFG_EX self) -> DWORD"},
	 { (char *)"NET_DVR_PICCFG_EX_byBrightness_set", _wrap_NET_DVR_PICCFG_EX_byBrightness_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_byBrightness_set(NET_DVR_PICCFG_EX self, BYTE byBrightness)"},
	 { (char *)"NET_DVR_PICCFG_EX_byBrightness_get", _wrap_NET_DVR_PICCFG_EX_byBrightness_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_byBrightness_get(NET_DVR_PICCFG_EX self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_EX_byContrast_set", _wrap_NET_DVR_PICCFG_EX_byContrast_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_byContrast_set(NET_DVR_PICCFG_EX self, BYTE byContrast)"},
	 { (char *)"NET_DVR_PICCFG_EX_byContrast_get", _wrap_NET_DVR_PICCFG_EX_byContrast_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_byContrast_get(NET_DVR_PICCFG_EX self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_EX_bySaturation_set", _wrap_NET_DVR_PICCFG_EX_bySaturation_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_bySaturation_set(NET_DVR_PICCFG_EX self, BYTE bySaturation)"},
	 { (char *)"NET_DVR_PICCFG_EX_bySaturation_get", _wrap_NET_DVR_PICCFG_EX_bySaturation_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_bySaturation_get(NET_DVR_PICCFG_EX self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_EX_byHue_set", _wrap_NET_DVR_PICCFG_EX_byHue_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_byHue_set(NET_DVR_PICCFG_EX self, BYTE byHue)"},
	 { (char *)"NET_DVR_PICCFG_EX_byHue_get", _wrap_NET_DVR_PICCFG_EX_byHue_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_byHue_get(NET_DVR_PICCFG_EX self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_EX_dwShowChanName_set", _wrap_NET_DVR_PICCFG_EX_dwShowChanName_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_dwShowChanName_set(NET_DVR_PICCFG_EX self, DWORD dwShowChanName)"},
	 { (char *)"NET_DVR_PICCFG_EX_dwShowChanName_get", _wrap_NET_DVR_PICCFG_EX_dwShowChanName_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_dwShowChanName_get(NET_DVR_PICCFG_EX self) -> DWORD"},
	 { (char *)"NET_DVR_PICCFG_EX_wShowNameTopLeftX_set", _wrap_NET_DVR_PICCFG_EX_wShowNameTopLeftX_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_wShowNameTopLeftX_set(NET_DVR_PICCFG_EX self, WORD wShowNameTopLeftX)"},
	 { (char *)"NET_DVR_PICCFG_EX_wShowNameTopLeftX_get", _wrap_NET_DVR_PICCFG_EX_wShowNameTopLeftX_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_wShowNameTopLeftX_get(NET_DVR_PICCFG_EX self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_EX_wShowNameTopLeftY_set", _wrap_NET_DVR_PICCFG_EX_wShowNameTopLeftY_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_wShowNameTopLeftY_set(NET_DVR_PICCFG_EX self, WORD wShowNameTopLeftY)"},
	 { (char *)"NET_DVR_PICCFG_EX_wShowNameTopLeftY_get", _wrap_NET_DVR_PICCFG_EX_wShowNameTopLeftY_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_wShowNameTopLeftY_get(NET_DVR_PICCFG_EX self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_EX_struVILost_set", _wrap_NET_DVR_PICCFG_EX_struVILost_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_struVILost_set(NET_DVR_PICCFG_EX self, NET_DVR_VILOST struVILost)"},
	 { (char *)"NET_DVR_PICCFG_EX_struVILost_get", _wrap_NET_DVR_PICCFG_EX_struVILost_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_struVILost_get(NET_DVR_PICCFG_EX self) -> NET_DVR_VILOST"},
	 { (char *)"NET_DVR_PICCFG_EX_struMotion_set", _wrap_NET_DVR_PICCFG_EX_struMotion_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_struMotion_set(NET_DVR_PICCFG_EX self, NET_DVR_MOTION struMotion)"},
	 { (char *)"NET_DVR_PICCFG_EX_struMotion_get", _wrap_NET_DVR_PICCFG_EX_struMotion_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_struMotion_get(NET_DVR_PICCFG_EX self) -> NET_DVR_MOTION"},
	 { (char *)"NET_DVR_PICCFG_EX_struHideAlarm_set", _wrap_NET_DVR_PICCFG_EX_struHideAlarm_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_struHideAlarm_set(NET_DVR_PICCFG_EX self, NET_DVR_HIDEALARM struHideAlarm)"},
	 { (char *)"NET_DVR_PICCFG_EX_struHideAlarm_get", _wrap_NET_DVR_PICCFG_EX_struHideAlarm_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_struHideAlarm_get(NET_DVR_PICCFG_EX self) -> NET_DVR_HIDEALARM"},
	 { (char *)"NET_DVR_PICCFG_EX_dwEnableHide_set", _wrap_NET_DVR_PICCFG_EX_dwEnableHide_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_dwEnableHide_set(NET_DVR_PICCFG_EX self, DWORD dwEnableHide)"},
	 { (char *)"NET_DVR_PICCFG_EX_dwEnableHide_get", _wrap_NET_DVR_PICCFG_EX_dwEnableHide_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_dwEnableHide_get(NET_DVR_PICCFG_EX self) -> DWORD"},
	 { (char *)"NET_DVR_PICCFG_EX_struShelter_set", _wrap_NET_DVR_PICCFG_EX_struShelter_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_struShelter_set(NET_DVR_PICCFG_EX self, NET_DVR_SHELTER struShelter)"},
	 { (char *)"NET_DVR_PICCFG_EX_struShelter_get", _wrap_NET_DVR_PICCFG_EX_struShelter_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_struShelter_get(NET_DVR_PICCFG_EX self) -> NET_DVR_SHELTER"},
	 { (char *)"NET_DVR_PICCFG_EX_dwShowOsd_set", _wrap_NET_DVR_PICCFG_EX_dwShowOsd_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_dwShowOsd_set(NET_DVR_PICCFG_EX self, DWORD dwShowOsd)"},
	 { (char *)"NET_DVR_PICCFG_EX_dwShowOsd_get", _wrap_NET_DVR_PICCFG_EX_dwShowOsd_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_dwShowOsd_get(NET_DVR_PICCFG_EX self) -> DWORD"},
	 { (char *)"NET_DVR_PICCFG_EX_wOSDTopLeftX_set", _wrap_NET_DVR_PICCFG_EX_wOSDTopLeftX_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_wOSDTopLeftX_set(NET_DVR_PICCFG_EX self, WORD wOSDTopLeftX)"},
	 { (char *)"NET_DVR_PICCFG_EX_wOSDTopLeftX_get", _wrap_NET_DVR_PICCFG_EX_wOSDTopLeftX_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_wOSDTopLeftX_get(NET_DVR_PICCFG_EX self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_EX_wOSDTopLeftY_set", _wrap_NET_DVR_PICCFG_EX_wOSDTopLeftY_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_wOSDTopLeftY_set(NET_DVR_PICCFG_EX self, WORD wOSDTopLeftY)"},
	 { (char *)"NET_DVR_PICCFG_EX_wOSDTopLeftY_get", _wrap_NET_DVR_PICCFG_EX_wOSDTopLeftY_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_wOSDTopLeftY_get(NET_DVR_PICCFG_EX self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_EX_byOSDType_set", _wrap_NET_DVR_PICCFG_EX_byOSDType_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_byOSDType_set(NET_DVR_PICCFG_EX self, BYTE byOSDType)"},
	 { (char *)"NET_DVR_PICCFG_EX_byOSDType_get", _wrap_NET_DVR_PICCFG_EX_byOSDType_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_byOSDType_get(NET_DVR_PICCFG_EX self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_EX_byDispWeek_set", _wrap_NET_DVR_PICCFG_EX_byDispWeek_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_byDispWeek_set(NET_DVR_PICCFG_EX self, BYTE byDispWeek)"},
	 { (char *)"NET_DVR_PICCFG_EX_byDispWeek_get", _wrap_NET_DVR_PICCFG_EX_byDispWeek_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_byDispWeek_get(NET_DVR_PICCFG_EX self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_EX_byOSDAttrib_set", _wrap_NET_DVR_PICCFG_EX_byOSDAttrib_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_byOSDAttrib_set(NET_DVR_PICCFG_EX self, BYTE byOSDAttrib)"},
	 { (char *)"NET_DVR_PICCFG_EX_byOSDAttrib_get", _wrap_NET_DVR_PICCFG_EX_byOSDAttrib_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_byOSDAttrib_get(NET_DVR_PICCFG_EX self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_EX_byHourOsdType_set", _wrap_NET_DVR_PICCFG_EX_byHourOsdType_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_byHourOsdType_set(NET_DVR_PICCFG_EX self, BYTE byHourOsdType)"},
	 { (char *)"NET_DVR_PICCFG_EX_byHourOsdType_get", _wrap_NET_DVR_PICCFG_EX_byHourOsdType_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_EX_byHourOsdType_get(NET_DVR_PICCFG_EX self) -> BYTE"},
	 { (char *)"new_NET_DVR_PICCFG_EX", _wrap_new_NET_DVR_PICCFG_EX, METH_VARARGS, (char *)"new_NET_DVR_PICCFG_EX() -> NET_DVR_PICCFG_EX"},
	 { (char *)"delete_NET_DVR_PICCFG_EX", _wrap_delete_NET_DVR_PICCFG_EX, METH_VARARGS, (char *)"delete_NET_DVR_PICCFG_EX(NET_DVR_PICCFG_EX self)"},
	 { (char *)"NET_DVR_PICCFG_EX_swigregister", NET_DVR_PICCFG_EX_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_PICCFG_dwSize_set", _wrap_NET_DVR_PICCFG_dwSize_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_dwSize_set(NET_DVR_PICCFG self, DWORD dwSize)"},
	 { (char *)"NET_DVR_PICCFG_dwSize_get", _wrap_NET_DVR_PICCFG_dwSize_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_dwSize_get(NET_DVR_PICCFG self) -> DWORD"},
	 { (char *)"NET_DVR_PICCFG_sChanName_set", _wrap_NET_DVR_PICCFG_sChanName_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_sChanName_set(NET_DVR_PICCFG self, BYTE [32] sChanName)"},
	 { (char *)"NET_DVR_PICCFG_sChanName_get", _wrap_NET_DVR_PICCFG_sChanName_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_sChanName_get(NET_DVR_PICCFG self) -> BYTE [32]"},
	 { (char *)"NET_DVR_PICCFG_dwVideoFormat_set", _wrap_NET_DVR_PICCFG_dwVideoFormat_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_dwVideoFormat_set(NET_DVR_PICCFG self, DWORD dwVideoFormat)"},
	 { (char *)"NET_DVR_PICCFG_dwVideoFormat_get", _wrap_NET_DVR_PICCFG_dwVideoFormat_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_dwVideoFormat_get(NET_DVR_PICCFG self) -> DWORD"},
	 { (char *)"NET_DVR_PICCFG_byBrightness_set", _wrap_NET_DVR_PICCFG_byBrightness_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_byBrightness_set(NET_DVR_PICCFG self, BYTE byBrightness)"},
	 { (char *)"NET_DVR_PICCFG_byBrightness_get", _wrap_NET_DVR_PICCFG_byBrightness_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_byBrightness_get(NET_DVR_PICCFG self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_byContrast_set", _wrap_NET_DVR_PICCFG_byContrast_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_byContrast_set(NET_DVR_PICCFG self, BYTE byContrast)"},
	 { (char *)"NET_DVR_PICCFG_byContrast_get", _wrap_NET_DVR_PICCFG_byContrast_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_byContrast_get(NET_DVR_PICCFG self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_bySaturation_set", _wrap_NET_DVR_PICCFG_bySaturation_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_bySaturation_set(NET_DVR_PICCFG self, BYTE bySaturation)"},
	 { (char *)"NET_DVR_PICCFG_bySaturation_get", _wrap_NET_DVR_PICCFG_bySaturation_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_bySaturation_get(NET_DVR_PICCFG self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_byHue_set", _wrap_NET_DVR_PICCFG_byHue_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_byHue_set(NET_DVR_PICCFG self, BYTE byHue)"},
	 { (char *)"NET_DVR_PICCFG_byHue_get", _wrap_NET_DVR_PICCFG_byHue_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_byHue_get(NET_DVR_PICCFG self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_dwShowChanName_set", _wrap_NET_DVR_PICCFG_dwShowChanName_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_dwShowChanName_set(NET_DVR_PICCFG self, DWORD dwShowChanName)"},
	 { (char *)"NET_DVR_PICCFG_dwShowChanName_get", _wrap_NET_DVR_PICCFG_dwShowChanName_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_dwShowChanName_get(NET_DVR_PICCFG self) -> DWORD"},
	 { (char *)"NET_DVR_PICCFG_wShowNameTopLeftX_set", _wrap_NET_DVR_PICCFG_wShowNameTopLeftX_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_wShowNameTopLeftX_set(NET_DVR_PICCFG self, WORD wShowNameTopLeftX)"},
	 { (char *)"NET_DVR_PICCFG_wShowNameTopLeftX_get", _wrap_NET_DVR_PICCFG_wShowNameTopLeftX_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_wShowNameTopLeftX_get(NET_DVR_PICCFG self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_wShowNameTopLeftY_set", _wrap_NET_DVR_PICCFG_wShowNameTopLeftY_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_wShowNameTopLeftY_set(NET_DVR_PICCFG self, WORD wShowNameTopLeftY)"},
	 { (char *)"NET_DVR_PICCFG_wShowNameTopLeftY_get", _wrap_NET_DVR_PICCFG_wShowNameTopLeftY_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_wShowNameTopLeftY_get(NET_DVR_PICCFG self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_struVILost_set", _wrap_NET_DVR_PICCFG_struVILost_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_struVILost_set(NET_DVR_PICCFG self, NET_DVR_VILOST struVILost)"},
	 { (char *)"NET_DVR_PICCFG_struVILost_get", _wrap_NET_DVR_PICCFG_struVILost_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_struVILost_get(NET_DVR_PICCFG self) -> NET_DVR_VILOST"},
	 { (char *)"NET_DVR_PICCFG_struMotion_set", _wrap_NET_DVR_PICCFG_struMotion_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_struMotion_set(NET_DVR_PICCFG self, NET_DVR_MOTION struMotion)"},
	 { (char *)"NET_DVR_PICCFG_struMotion_get", _wrap_NET_DVR_PICCFG_struMotion_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_struMotion_get(NET_DVR_PICCFG self) -> NET_DVR_MOTION"},
	 { (char *)"NET_DVR_PICCFG_struHideAlarm_set", _wrap_NET_DVR_PICCFG_struHideAlarm_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_struHideAlarm_set(NET_DVR_PICCFG self, NET_DVR_HIDEALARM struHideAlarm)"},
	 { (char *)"NET_DVR_PICCFG_struHideAlarm_get", _wrap_NET_DVR_PICCFG_struHideAlarm_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_struHideAlarm_get(NET_DVR_PICCFG self) -> NET_DVR_HIDEALARM"},
	 { (char *)"NET_DVR_PICCFG_dwEnableHide_set", _wrap_NET_DVR_PICCFG_dwEnableHide_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_dwEnableHide_set(NET_DVR_PICCFG self, DWORD dwEnableHide)"},
	 { (char *)"NET_DVR_PICCFG_dwEnableHide_get", _wrap_NET_DVR_PICCFG_dwEnableHide_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_dwEnableHide_get(NET_DVR_PICCFG self) -> DWORD"},
	 { (char *)"NET_DVR_PICCFG_wHideAreaTopLeftX_set", _wrap_NET_DVR_PICCFG_wHideAreaTopLeftX_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_wHideAreaTopLeftX_set(NET_DVR_PICCFG self, WORD wHideAreaTopLeftX)"},
	 { (char *)"NET_DVR_PICCFG_wHideAreaTopLeftX_get", _wrap_NET_DVR_PICCFG_wHideAreaTopLeftX_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_wHideAreaTopLeftX_get(NET_DVR_PICCFG self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_wHideAreaTopLeftY_set", _wrap_NET_DVR_PICCFG_wHideAreaTopLeftY_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_wHideAreaTopLeftY_set(NET_DVR_PICCFG self, WORD wHideAreaTopLeftY)"},
	 { (char *)"NET_DVR_PICCFG_wHideAreaTopLeftY_get", _wrap_NET_DVR_PICCFG_wHideAreaTopLeftY_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_wHideAreaTopLeftY_get(NET_DVR_PICCFG self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_wHideAreaWidth_set", _wrap_NET_DVR_PICCFG_wHideAreaWidth_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_wHideAreaWidth_set(NET_DVR_PICCFG self, WORD wHideAreaWidth)"},
	 { (char *)"NET_DVR_PICCFG_wHideAreaWidth_get", _wrap_NET_DVR_PICCFG_wHideAreaWidth_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_wHideAreaWidth_get(NET_DVR_PICCFG self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_wHideAreaHeight_set", _wrap_NET_DVR_PICCFG_wHideAreaHeight_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_wHideAreaHeight_set(NET_DVR_PICCFG self, WORD wHideAreaHeight)"},
	 { (char *)"NET_DVR_PICCFG_wHideAreaHeight_get", _wrap_NET_DVR_PICCFG_wHideAreaHeight_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_wHideAreaHeight_get(NET_DVR_PICCFG self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_dwShowOsd_set", _wrap_NET_DVR_PICCFG_dwShowOsd_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_dwShowOsd_set(NET_DVR_PICCFG self, DWORD dwShowOsd)"},
	 { (char *)"NET_DVR_PICCFG_dwShowOsd_get", _wrap_NET_DVR_PICCFG_dwShowOsd_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_dwShowOsd_get(NET_DVR_PICCFG self) -> DWORD"},
	 { (char *)"NET_DVR_PICCFG_wOSDTopLeftX_set", _wrap_NET_DVR_PICCFG_wOSDTopLeftX_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_wOSDTopLeftX_set(NET_DVR_PICCFG self, WORD wOSDTopLeftX)"},
	 { (char *)"NET_DVR_PICCFG_wOSDTopLeftX_get", _wrap_NET_DVR_PICCFG_wOSDTopLeftX_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_wOSDTopLeftX_get(NET_DVR_PICCFG self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_wOSDTopLeftY_set", _wrap_NET_DVR_PICCFG_wOSDTopLeftY_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_wOSDTopLeftY_set(NET_DVR_PICCFG self, WORD wOSDTopLeftY)"},
	 { (char *)"NET_DVR_PICCFG_wOSDTopLeftY_get", _wrap_NET_DVR_PICCFG_wOSDTopLeftY_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_wOSDTopLeftY_get(NET_DVR_PICCFG self) -> WORD"},
	 { (char *)"NET_DVR_PICCFG_byOSDType_set", _wrap_NET_DVR_PICCFG_byOSDType_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_byOSDType_set(NET_DVR_PICCFG self, BYTE byOSDType)"},
	 { (char *)"NET_DVR_PICCFG_byOSDType_get", _wrap_NET_DVR_PICCFG_byOSDType_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_byOSDType_get(NET_DVR_PICCFG self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_byDispWeek_set", _wrap_NET_DVR_PICCFG_byDispWeek_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_byDispWeek_set(NET_DVR_PICCFG self, BYTE byDispWeek)"},
	 { (char *)"NET_DVR_PICCFG_byDispWeek_get", _wrap_NET_DVR_PICCFG_byDispWeek_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_byDispWeek_get(NET_DVR_PICCFG self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_byOSDAttrib_set", _wrap_NET_DVR_PICCFG_byOSDAttrib_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_byOSDAttrib_set(NET_DVR_PICCFG self, BYTE byOSDAttrib)"},
	 { (char *)"NET_DVR_PICCFG_byOSDAttrib_get", _wrap_NET_DVR_PICCFG_byOSDAttrib_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_byOSDAttrib_get(NET_DVR_PICCFG self) -> BYTE"},
	 { (char *)"NET_DVR_PICCFG_reservedData2_set", _wrap_NET_DVR_PICCFG_reservedData2_set, METH_VARARGS, (char *)"NET_DVR_PICCFG_reservedData2_set(NET_DVR_PICCFG self, char reservedData2)"},
	 { (char *)"NET_DVR_PICCFG_reservedData2_get", _wrap_NET_DVR_PICCFG_reservedData2_get, METH_VARARGS, (char *)"NET_DVR_PICCFG_reservedData2_get(NET_DVR_PICCFG self) -> char"},
	 { (char *)"new_NET_DVR_PICCFG", _wrap_new_NET_DVR_PICCFG, METH_VARARGS, (char *)"new_NET_DVR_PICCFG() -> NET_DVR_PICCFG"},
	 { (char *)"delete_NET_DVR_PICCFG", _wrap_delete_NET_DVR_PICCFG, METH_VARARGS, (char *)"delete_NET_DVR_PICCFG(NET_DVR_PICCFG self)"},
	 { (char *)"NET_DVR_PICCFG_swigregister", NET_DVR_PICCFG_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byStreamType_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_byStreamType_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byStreamType_set(NET_DVR_COMPRESSION_INFO_V30 self, BYTE byStreamType)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byStreamType_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_byStreamType_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byStreamType_get(NET_DVR_COMPRESSION_INFO_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byResolution_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_byResolution_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byResolution_set(NET_DVR_COMPRESSION_INFO_V30 self, BYTE byResolution)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byResolution_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_byResolution_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byResolution_get(NET_DVR_COMPRESSION_INFO_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byBitrateType_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_byBitrateType_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byBitrateType_set(NET_DVR_COMPRESSION_INFO_V30 self, BYTE byBitrateType)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byBitrateType_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_byBitrateType_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byBitrateType_get(NET_DVR_COMPRESSION_INFO_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byPicQuality_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_byPicQuality_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byPicQuality_set(NET_DVR_COMPRESSION_INFO_V30 self, BYTE byPicQuality)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byPicQuality_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_byPicQuality_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byPicQuality_get(NET_DVR_COMPRESSION_INFO_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_dwVideoBitrate_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_dwVideoBitrate_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_dwVideoBitrate_set(NET_DVR_COMPRESSION_INFO_V30 self, DWORD dwVideoBitrate)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_dwVideoBitrate_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_dwVideoBitrate_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_dwVideoBitrate_get(NET_DVR_COMPRESSION_INFO_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_dwVideoFrameRate_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_dwVideoFrameRate_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_dwVideoFrameRate_set(NET_DVR_COMPRESSION_INFO_V30 self, DWORD dwVideoFrameRate)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_dwVideoFrameRate_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_dwVideoFrameRate_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_dwVideoFrameRate_get(NET_DVR_COMPRESSION_INFO_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_wIntervalFrameI_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_wIntervalFrameI_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_wIntervalFrameI_set(NET_DVR_COMPRESSION_INFO_V30 self, WORD wIntervalFrameI)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_wIntervalFrameI_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_wIntervalFrameI_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_wIntervalFrameI_get(NET_DVR_COMPRESSION_INFO_V30 self) -> WORD"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byIntervalBPFrame_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_byIntervalBPFrame_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byIntervalBPFrame_set(NET_DVR_COMPRESSION_INFO_V30 self, BYTE byIntervalBPFrame)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byIntervalBPFrame_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_byIntervalBPFrame_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byIntervalBPFrame_get(NET_DVR_COMPRESSION_INFO_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byres1_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_byres1_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byres1_set(NET_DVR_COMPRESSION_INFO_V30 self, BYTE byres1)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byres1_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_byres1_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byres1_get(NET_DVR_COMPRESSION_INFO_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byVideoEncType_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_byVideoEncType_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byVideoEncType_set(NET_DVR_COMPRESSION_INFO_V30 self, BYTE byVideoEncType)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byVideoEncType_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_byVideoEncType_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byVideoEncType_get(NET_DVR_COMPRESSION_INFO_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byAudioEncType_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_byAudioEncType_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byAudioEncType_set(NET_DVR_COMPRESSION_INFO_V30 self, BYTE byAudioEncType)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byAudioEncType_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_byAudioEncType_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byAudioEncType_get(NET_DVR_COMPRESSION_INFO_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byVideoEncComplexity_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_byVideoEncComplexity_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byVideoEncComplexity_set(NET_DVR_COMPRESSION_INFO_V30 self, BYTE byVideoEncComplexity)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byVideoEncComplexity_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_byVideoEncComplexity_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byVideoEncComplexity_get(NET_DVR_COMPRESSION_INFO_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byEnableSvc_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_byEnableSvc_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byEnableSvc_set(NET_DVR_COMPRESSION_INFO_V30 self, BYTE byEnableSvc)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byEnableSvc_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_byEnableSvc_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byEnableSvc_get(NET_DVR_COMPRESSION_INFO_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byFormatType_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_byFormatType_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byFormatType_set(NET_DVR_COMPRESSION_INFO_V30 self, BYTE byFormatType)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byFormatType_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_byFormatType_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byFormatType_get(NET_DVR_COMPRESSION_INFO_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byAudioBitRate_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_byAudioBitRate_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byAudioBitRate_set(NET_DVR_COMPRESSION_INFO_V30 self, BYTE byAudioBitRate)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byAudioBitRate_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_byAudioBitRate_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byAudioBitRate_get(NET_DVR_COMPRESSION_INFO_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byStreamSmooth_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_byStreamSmooth_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byStreamSmooth_set(NET_DVR_COMPRESSION_INFO_V30 self, BYTE byStreamSmooth)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byStreamSmooth_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_byStreamSmooth_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byStreamSmooth_get(NET_DVR_COMPRESSION_INFO_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byAudioSamplingRate_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_byAudioSamplingRate_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byAudioSamplingRate_set(NET_DVR_COMPRESSION_INFO_V30 self, BYTE byAudioSamplingRate)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byAudioSamplingRate_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_byAudioSamplingRate_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byAudioSamplingRate_get(NET_DVR_COMPRESSION_INFO_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_bySmartCodec_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_bySmartCodec_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_bySmartCodec_set(NET_DVR_COMPRESSION_INFO_V30 self, BYTE bySmartCodec)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_bySmartCodec_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_bySmartCodec_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_bySmartCodec_get(NET_DVR_COMPRESSION_INFO_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byDepthMapEnable_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_byDepthMapEnable_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byDepthMapEnable_set(NET_DVR_COMPRESSION_INFO_V30 self, BYTE byDepthMapEnable)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_byDepthMapEnable_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_byDepthMapEnable_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_byDepthMapEnable_get(NET_DVR_COMPRESSION_INFO_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_wAverageVideoBitrate_set", _wrap_NET_DVR_COMPRESSION_INFO_V30_wAverageVideoBitrate_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_wAverageVideoBitrate_set(NET_DVR_COMPRESSION_INFO_V30 self, WORD wAverageVideoBitrate)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_wAverageVideoBitrate_get", _wrap_NET_DVR_COMPRESSION_INFO_V30_wAverageVideoBitrate_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_V30_wAverageVideoBitrate_get(NET_DVR_COMPRESSION_INFO_V30 self) -> WORD"},
	 { (char *)"new_NET_DVR_COMPRESSION_INFO_V30", _wrap_new_NET_DVR_COMPRESSION_INFO_V30, METH_VARARGS, (char *)"new_NET_DVR_COMPRESSION_INFO_V30() -> NET_DVR_COMPRESSION_INFO_V30"},
	 { (char *)"delete_NET_DVR_COMPRESSION_INFO_V30", _wrap_delete_NET_DVR_COMPRESSION_INFO_V30, METH_VARARGS, (char *)"delete_NET_DVR_COMPRESSION_INFO_V30(NET_DVR_COMPRESSION_INFO_V30 self)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_V30_swigregister", NET_DVR_COMPRESSION_INFO_V30_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_COMPRESSIONCFG_V30_dwSize_set", _wrap_NET_DVR_COMPRESSIONCFG_V30_dwSize_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_V30_dwSize_set(NET_DVR_COMPRESSIONCFG_V30 self, DWORD dwSize)"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_V30_dwSize_get", _wrap_NET_DVR_COMPRESSIONCFG_V30_dwSize_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_V30_dwSize_get(NET_DVR_COMPRESSIONCFG_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_V30_struNormHighRecordPara_set", _wrap_NET_DVR_COMPRESSIONCFG_V30_struNormHighRecordPara_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_V30_struNormHighRecordPara_set(NET_DVR_COMPRESSIONCFG_V30 self, NET_DVR_COMPRESSION_INFO_V30 struNormHighRecordPara)"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_V30_struNormHighRecordPara_get", _wrap_NET_DVR_COMPRESSIONCFG_V30_struNormHighRecordPara_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_V30_struNormHighRecordPara_get(NET_DVR_COMPRESSIONCFG_V30 self) -> NET_DVR_COMPRESSION_INFO_V30"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_V30_struRes_set", _wrap_NET_DVR_COMPRESSIONCFG_V30_struRes_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_V30_struRes_set(NET_DVR_COMPRESSIONCFG_V30 self, NET_DVR_COMPRESSION_INFO_V30 struRes)"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_V30_struRes_get", _wrap_NET_DVR_COMPRESSIONCFG_V30_struRes_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_V30_struRes_get(NET_DVR_COMPRESSIONCFG_V30 self) -> NET_DVR_COMPRESSION_INFO_V30"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_V30_struEventRecordPara_set", _wrap_NET_DVR_COMPRESSIONCFG_V30_struEventRecordPara_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_V30_struEventRecordPara_set(NET_DVR_COMPRESSIONCFG_V30 self, NET_DVR_COMPRESSION_INFO_V30 struEventRecordPara)"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_V30_struEventRecordPara_get", _wrap_NET_DVR_COMPRESSIONCFG_V30_struEventRecordPara_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_V30_struEventRecordPara_get(NET_DVR_COMPRESSIONCFG_V30 self) -> NET_DVR_COMPRESSION_INFO_V30"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_V30_struNetPara_set", _wrap_NET_DVR_COMPRESSIONCFG_V30_struNetPara_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_V30_struNetPara_set(NET_DVR_COMPRESSIONCFG_V30 self, NET_DVR_COMPRESSION_INFO_V30 struNetPara)"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_V30_struNetPara_get", _wrap_NET_DVR_COMPRESSIONCFG_V30_struNetPara_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_V30_struNetPara_get(NET_DVR_COMPRESSIONCFG_V30 self) -> NET_DVR_COMPRESSION_INFO_V30"},
	 { (char *)"new_NET_DVR_COMPRESSIONCFG_V30", _wrap_new_NET_DVR_COMPRESSIONCFG_V30, METH_VARARGS, (char *)"new_NET_DVR_COMPRESSIONCFG_V30() -> NET_DVR_COMPRESSIONCFG_V30"},
	 { (char *)"delete_NET_DVR_COMPRESSIONCFG_V30", _wrap_delete_NET_DVR_COMPRESSIONCFG_V30, METH_VARARGS, (char *)"delete_NET_DVR_COMPRESSIONCFG_V30(NET_DVR_COMPRESSIONCFG_V30 self)"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_V30_swigregister", NET_DVR_COMPRESSIONCFG_V30_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_COMPRESSION_INFO_byStreamType_set", _wrap_NET_DVR_COMPRESSION_INFO_byStreamType_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_byStreamType_set(NET_DVR_COMPRESSION_INFO self, BYTE byStreamType)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_byStreamType_get", _wrap_NET_DVR_COMPRESSION_INFO_byStreamType_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_byStreamType_get(NET_DVR_COMPRESSION_INFO self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_byResolution_set", _wrap_NET_DVR_COMPRESSION_INFO_byResolution_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_byResolution_set(NET_DVR_COMPRESSION_INFO self, BYTE byResolution)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_byResolution_get", _wrap_NET_DVR_COMPRESSION_INFO_byResolution_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_byResolution_get(NET_DVR_COMPRESSION_INFO self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_byBitrateType_set", _wrap_NET_DVR_COMPRESSION_INFO_byBitrateType_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_byBitrateType_set(NET_DVR_COMPRESSION_INFO self, BYTE byBitrateType)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_byBitrateType_get", _wrap_NET_DVR_COMPRESSION_INFO_byBitrateType_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_byBitrateType_get(NET_DVR_COMPRESSION_INFO self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_byPicQuality_set", _wrap_NET_DVR_COMPRESSION_INFO_byPicQuality_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_byPicQuality_set(NET_DVR_COMPRESSION_INFO self, BYTE byPicQuality)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_byPicQuality_get", _wrap_NET_DVR_COMPRESSION_INFO_byPicQuality_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_byPicQuality_get(NET_DVR_COMPRESSION_INFO self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_dwVideoBitrate_set", _wrap_NET_DVR_COMPRESSION_INFO_dwVideoBitrate_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_dwVideoBitrate_set(NET_DVR_COMPRESSION_INFO self, DWORD dwVideoBitrate)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_dwVideoBitrate_get", _wrap_NET_DVR_COMPRESSION_INFO_dwVideoBitrate_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_dwVideoBitrate_get(NET_DVR_COMPRESSION_INFO self) -> DWORD"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_dwVideoFrameRate_set", _wrap_NET_DVR_COMPRESSION_INFO_dwVideoFrameRate_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_dwVideoFrameRate_set(NET_DVR_COMPRESSION_INFO self, DWORD dwVideoFrameRate)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_dwVideoFrameRate_get", _wrap_NET_DVR_COMPRESSION_INFO_dwVideoFrameRate_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_dwVideoFrameRate_get(NET_DVR_COMPRESSION_INFO self) -> DWORD"},
	 { (char *)"new_NET_DVR_COMPRESSION_INFO", _wrap_new_NET_DVR_COMPRESSION_INFO, METH_VARARGS, (char *)"new_NET_DVR_COMPRESSION_INFO() -> NET_DVR_COMPRESSION_INFO"},
	 { (char *)"delete_NET_DVR_COMPRESSION_INFO", _wrap_delete_NET_DVR_COMPRESSION_INFO, METH_VARARGS, (char *)"delete_NET_DVR_COMPRESSION_INFO(NET_DVR_COMPRESSION_INFO self)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_swigregister", NET_DVR_COMPRESSION_INFO_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_COMPRESSIONCFG_dwSize_set", _wrap_NET_DVR_COMPRESSIONCFG_dwSize_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_dwSize_set(NET_DVR_COMPRESSIONCFG self, DWORD dwSize)"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_dwSize_get", _wrap_NET_DVR_COMPRESSIONCFG_dwSize_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_dwSize_get(NET_DVR_COMPRESSIONCFG self) -> DWORD"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_struRecordPara_set", _wrap_NET_DVR_COMPRESSIONCFG_struRecordPara_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_struRecordPara_set(NET_DVR_COMPRESSIONCFG self, NET_DVR_COMPRESSION_INFO struRecordPara)"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_struRecordPara_get", _wrap_NET_DVR_COMPRESSIONCFG_struRecordPara_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_struRecordPara_get(NET_DVR_COMPRESSIONCFG self) -> NET_DVR_COMPRESSION_INFO"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_struNetPara_set", _wrap_NET_DVR_COMPRESSIONCFG_struNetPara_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_struNetPara_set(NET_DVR_COMPRESSIONCFG self, NET_DVR_COMPRESSION_INFO struNetPara)"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_struNetPara_get", _wrap_NET_DVR_COMPRESSIONCFG_struNetPara_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_struNetPara_get(NET_DVR_COMPRESSIONCFG self) -> NET_DVR_COMPRESSION_INFO"},
	 { (char *)"new_NET_DVR_COMPRESSIONCFG", _wrap_new_NET_DVR_COMPRESSIONCFG, METH_VARARGS, (char *)"new_NET_DVR_COMPRESSIONCFG() -> NET_DVR_COMPRESSIONCFG"},
	 { (char *)"delete_NET_DVR_COMPRESSIONCFG", _wrap_delete_NET_DVR_COMPRESSIONCFG, METH_VARARGS, (char *)"delete_NET_DVR_COMPRESSIONCFG(NET_DVR_COMPRESSIONCFG self)"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_swigregister", NET_DVR_COMPRESSIONCFG_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_byStreamType_set", _wrap_NET_DVR_COMPRESSION_INFO_EX_byStreamType_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_byStreamType_set(NET_DVR_COMPRESSION_INFO_EX self, BYTE byStreamType)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_byStreamType_get", _wrap_NET_DVR_COMPRESSION_INFO_EX_byStreamType_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_byStreamType_get(NET_DVR_COMPRESSION_INFO_EX self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_byResolution_set", _wrap_NET_DVR_COMPRESSION_INFO_EX_byResolution_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_byResolution_set(NET_DVR_COMPRESSION_INFO_EX self, BYTE byResolution)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_byResolution_get", _wrap_NET_DVR_COMPRESSION_INFO_EX_byResolution_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_byResolution_get(NET_DVR_COMPRESSION_INFO_EX self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_byBitrateType_set", _wrap_NET_DVR_COMPRESSION_INFO_EX_byBitrateType_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_byBitrateType_set(NET_DVR_COMPRESSION_INFO_EX self, BYTE byBitrateType)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_byBitrateType_get", _wrap_NET_DVR_COMPRESSION_INFO_EX_byBitrateType_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_byBitrateType_get(NET_DVR_COMPRESSION_INFO_EX self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_byPicQuality_set", _wrap_NET_DVR_COMPRESSION_INFO_EX_byPicQuality_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_byPicQuality_set(NET_DVR_COMPRESSION_INFO_EX self, BYTE byPicQuality)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_byPicQuality_get", _wrap_NET_DVR_COMPRESSION_INFO_EX_byPicQuality_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_byPicQuality_get(NET_DVR_COMPRESSION_INFO_EX self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_dwVideoBitrate_set", _wrap_NET_DVR_COMPRESSION_INFO_EX_dwVideoBitrate_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_dwVideoBitrate_set(NET_DVR_COMPRESSION_INFO_EX self, DWORD dwVideoBitrate)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_dwVideoBitrate_get", _wrap_NET_DVR_COMPRESSION_INFO_EX_dwVideoBitrate_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_dwVideoBitrate_get(NET_DVR_COMPRESSION_INFO_EX self) -> DWORD"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_dwVideoFrameRate_set", _wrap_NET_DVR_COMPRESSION_INFO_EX_dwVideoFrameRate_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_dwVideoFrameRate_set(NET_DVR_COMPRESSION_INFO_EX self, DWORD dwVideoFrameRate)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_dwVideoFrameRate_get", _wrap_NET_DVR_COMPRESSION_INFO_EX_dwVideoFrameRate_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_dwVideoFrameRate_get(NET_DVR_COMPRESSION_INFO_EX self) -> DWORD"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_wIntervalFrameI_set", _wrap_NET_DVR_COMPRESSION_INFO_EX_wIntervalFrameI_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_wIntervalFrameI_set(NET_DVR_COMPRESSION_INFO_EX self, WORD wIntervalFrameI)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_wIntervalFrameI_get", _wrap_NET_DVR_COMPRESSION_INFO_EX_wIntervalFrameI_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_wIntervalFrameI_get(NET_DVR_COMPRESSION_INFO_EX self) -> WORD"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_byIntervalBPFrame_set", _wrap_NET_DVR_COMPRESSION_INFO_EX_byIntervalBPFrame_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_byIntervalBPFrame_set(NET_DVR_COMPRESSION_INFO_EX self, BYTE byIntervalBPFrame)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_byIntervalBPFrame_get", _wrap_NET_DVR_COMPRESSION_INFO_EX_byIntervalBPFrame_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_byIntervalBPFrame_get(NET_DVR_COMPRESSION_INFO_EX self) -> BYTE"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_byRes_set", _wrap_NET_DVR_COMPRESSION_INFO_EX_byRes_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_byRes_set(NET_DVR_COMPRESSION_INFO_EX self, BYTE byRes)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_byRes_get", _wrap_NET_DVR_COMPRESSION_INFO_EX_byRes_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSION_INFO_EX_byRes_get(NET_DVR_COMPRESSION_INFO_EX self) -> BYTE"},
	 { (char *)"new_NET_DVR_COMPRESSION_INFO_EX", _wrap_new_NET_DVR_COMPRESSION_INFO_EX, METH_VARARGS, (char *)"new_NET_DVR_COMPRESSION_INFO_EX() -> NET_DVR_COMPRESSION_INFO_EX"},
	 { (char *)"delete_NET_DVR_COMPRESSION_INFO_EX", _wrap_delete_NET_DVR_COMPRESSION_INFO_EX, METH_VARARGS, (char *)"delete_NET_DVR_COMPRESSION_INFO_EX(NET_DVR_COMPRESSION_INFO_EX self)"},
	 { (char *)"NET_DVR_COMPRESSION_INFO_EX_swigregister", NET_DVR_COMPRESSION_INFO_EX_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_COMPRESSIONCFG_EX_dwSize_set", _wrap_NET_DVR_COMPRESSIONCFG_EX_dwSize_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_EX_dwSize_set(NET_DVR_COMPRESSIONCFG_EX self, DWORD dwSize)"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_EX_dwSize_get", _wrap_NET_DVR_COMPRESSIONCFG_EX_dwSize_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_EX_dwSize_get(NET_DVR_COMPRESSIONCFG_EX self) -> DWORD"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_EX_struRecordPara_set", _wrap_NET_DVR_COMPRESSIONCFG_EX_struRecordPara_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_EX_struRecordPara_set(NET_DVR_COMPRESSIONCFG_EX self, NET_DVR_COMPRESSION_INFO_EX struRecordPara)"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_EX_struRecordPara_get", _wrap_NET_DVR_COMPRESSIONCFG_EX_struRecordPara_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_EX_struRecordPara_get(NET_DVR_COMPRESSIONCFG_EX self) -> NET_DVR_COMPRESSION_INFO_EX"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_EX_struNetPara_set", _wrap_NET_DVR_COMPRESSIONCFG_EX_struNetPara_set, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_EX_struNetPara_set(NET_DVR_COMPRESSIONCFG_EX self, NET_DVR_COMPRESSION_INFO_EX struNetPara)"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_EX_struNetPara_get", _wrap_NET_DVR_COMPRESSIONCFG_EX_struNetPara_get, METH_VARARGS, (char *)"NET_DVR_COMPRESSIONCFG_EX_struNetPara_get(NET_DVR_COMPRESSIONCFG_EX self) -> NET_DVR_COMPRESSION_INFO_EX"},
	 { (char *)"new_NET_DVR_COMPRESSIONCFG_EX", _wrap_new_NET_DVR_COMPRESSIONCFG_EX, METH_VARARGS, (char *)"new_NET_DVR_COMPRESSIONCFG_EX() -> NET_DVR_COMPRESSIONCFG_EX"},
	 { (char *)"delete_NET_DVR_COMPRESSIONCFG_EX", _wrap_delete_NET_DVR_COMPRESSIONCFG_EX, METH_VARARGS, (char *)"delete_NET_DVR_COMPRESSIONCFG_EX(NET_DVR_COMPRESSIONCFG_EX self)"},
	 { (char *)"NET_DVR_COMPRESSIONCFG_EX_swigregister", NET_DVR_COMPRESSIONCFG_EX_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_RECORDSCHED_struRecordTime_set", _wrap_NET_DVR_RECORDSCHED_struRecordTime_set, METH_VARARGS, (char *)"NET_DVR_RECORDSCHED_struRecordTime_set(NET_DVR_RECORDSCHED self, NET_DVR_SCHEDTIME struRecordTime)"},
	 { (char *)"NET_DVR_RECORDSCHED_struRecordTime_get", _wrap_NET_DVR_RECORDSCHED_struRecordTime_get, METH_VARARGS, (char *)"NET_DVR_RECORDSCHED_struRecordTime_get(NET_DVR_RECORDSCHED self) -> NET_DVR_SCHEDTIME"},
	 { (char *)"NET_DVR_RECORDSCHED_byRecordType_set", _wrap_NET_DVR_RECORDSCHED_byRecordType_set, METH_VARARGS, (char *)"NET_DVR_RECORDSCHED_byRecordType_set(NET_DVR_RECORDSCHED self, BYTE byRecordType)"},
	 { (char *)"NET_DVR_RECORDSCHED_byRecordType_get", _wrap_NET_DVR_RECORDSCHED_byRecordType_get, METH_VARARGS, (char *)"NET_DVR_RECORDSCHED_byRecordType_get(NET_DVR_RECORDSCHED self) -> BYTE"},
	 { (char *)"NET_DVR_RECORDSCHED_reservedData_set", _wrap_NET_DVR_RECORDSCHED_reservedData_set, METH_VARARGS, (char *)"NET_DVR_RECORDSCHED_reservedData_set(NET_DVR_RECORDSCHED self, char [3] reservedData)"},
	 { (char *)"NET_DVR_RECORDSCHED_reservedData_get", _wrap_NET_DVR_RECORDSCHED_reservedData_get, METH_VARARGS, (char *)"NET_DVR_RECORDSCHED_reservedData_get(NET_DVR_RECORDSCHED self) -> char [3]"},
	 { (char *)"new_NET_DVR_RECORDSCHED", _wrap_new_NET_DVR_RECORDSCHED, METH_VARARGS, (char *)"new_NET_DVR_RECORDSCHED() -> NET_DVR_RECORDSCHED"},
	 { (char *)"delete_NET_DVR_RECORDSCHED", _wrap_delete_NET_DVR_RECORDSCHED, METH_VARARGS, (char *)"delete_NET_DVR_RECORDSCHED(NET_DVR_RECORDSCHED self)"},
	 { (char *)"NET_DVR_RECORDSCHED_swigregister", NET_DVR_RECORDSCHED_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_RECORDDAY_wAllDayRecord_set", _wrap_NET_DVR_RECORDDAY_wAllDayRecord_set, METH_VARARGS, (char *)"NET_DVR_RECORDDAY_wAllDayRecord_set(NET_DVR_RECORDDAY self, WORD wAllDayRecord)"},
	 { (char *)"NET_DVR_RECORDDAY_wAllDayRecord_get", _wrap_NET_DVR_RECORDDAY_wAllDayRecord_get, METH_VARARGS, (char *)"NET_DVR_RECORDDAY_wAllDayRecord_get(NET_DVR_RECORDDAY self) -> WORD"},
	 { (char *)"NET_DVR_RECORDDAY_byRecordType_set", _wrap_NET_DVR_RECORDDAY_byRecordType_set, METH_VARARGS, (char *)"NET_DVR_RECORDDAY_byRecordType_set(NET_DVR_RECORDDAY self, BYTE byRecordType)"},
	 { (char *)"NET_DVR_RECORDDAY_byRecordType_get", _wrap_NET_DVR_RECORDDAY_byRecordType_get, METH_VARARGS, (char *)"NET_DVR_RECORDDAY_byRecordType_get(NET_DVR_RECORDDAY self) -> BYTE"},
	 { (char *)"NET_DVR_RECORDDAY_reservedData_set", _wrap_NET_DVR_RECORDDAY_reservedData_set, METH_VARARGS, (char *)"NET_DVR_RECORDDAY_reservedData_set(NET_DVR_RECORDDAY self, char reservedData)"},
	 { (char *)"NET_DVR_RECORDDAY_reservedData_get", _wrap_NET_DVR_RECORDDAY_reservedData_get, METH_VARARGS, (char *)"NET_DVR_RECORDDAY_reservedData_get(NET_DVR_RECORDDAY self) -> char"},
	 { (char *)"new_NET_DVR_RECORDDAY", _wrap_new_NET_DVR_RECORDDAY, METH_VARARGS, (char *)"new_NET_DVR_RECORDDAY() -> NET_DVR_RECORDDAY"},
	 { (char *)"delete_NET_DVR_RECORDDAY", _wrap_delete_NET_DVR_RECORDDAY, METH_VARARGS, (char *)"delete_NET_DVR_RECORDDAY(NET_DVR_RECORDDAY self)"},
	 { (char *)"NET_DVR_RECORDDAY_swigregister", NET_DVR_RECORDDAY_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_RECORD_V30_dwSize_set", _wrap_NET_DVR_RECORD_V30_dwSize_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_dwSize_set(NET_DVR_RECORD_V30 self, DWORD dwSize)"},
	 { (char *)"NET_DVR_RECORD_V30_dwSize_get", _wrap_NET_DVR_RECORD_V30_dwSize_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_dwSize_get(NET_DVR_RECORD_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_RECORD_V30_dwRecord_set", _wrap_NET_DVR_RECORD_V30_dwRecord_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_dwRecord_set(NET_DVR_RECORD_V30 self, DWORD dwRecord)"},
	 { (char *)"NET_DVR_RECORD_V30_dwRecord_get", _wrap_NET_DVR_RECORD_V30_dwRecord_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_dwRecord_get(NET_DVR_RECORD_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_RECORD_V30_struRecAllDay_set", _wrap_NET_DVR_RECORD_V30_struRecAllDay_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_struRecAllDay_set(NET_DVR_RECORD_V30 self, NET_DVR_RECORDDAY struRecAllDay)"},
	 { (char *)"NET_DVR_RECORD_V30_struRecAllDay_get", _wrap_NET_DVR_RECORD_V30_struRecAllDay_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_struRecAllDay_get(NET_DVR_RECORD_V30 self) -> NET_DVR_RECORDDAY"},
	 { (char *)"NET_DVR_RECORD_V30_struRecordSched_set", _wrap_NET_DVR_RECORD_V30_struRecordSched_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_struRecordSched_set(NET_DVR_RECORD_V30 self, NET_DVR_RECORDSCHED [7][8] struRecordSched)"},
	 { (char *)"NET_DVR_RECORD_V30_struRecordSched_get", _wrap_NET_DVR_RECORD_V30_struRecordSched_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_struRecordSched_get(NET_DVR_RECORD_V30 self) -> NET_DVR_RECORDSCHED [7][8]"},
	 { (char *)"NET_DVR_RECORD_V30_dwRecordTime_set", _wrap_NET_DVR_RECORD_V30_dwRecordTime_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_dwRecordTime_set(NET_DVR_RECORD_V30 self, DWORD dwRecordTime)"},
	 { (char *)"NET_DVR_RECORD_V30_dwRecordTime_get", _wrap_NET_DVR_RECORD_V30_dwRecordTime_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_dwRecordTime_get(NET_DVR_RECORD_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_RECORD_V30_dwPreRecordTime_set", _wrap_NET_DVR_RECORD_V30_dwPreRecordTime_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_dwPreRecordTime_set(NET_DVR_RECORD_V30 self, DWORD dwPreRecordTime)"},
	 { (char *)"NET_DVR_RECORD_V30_dwPreRecordTime_get", _wrap_NET_DVR_RECORD_V30_dwPreRecordTime_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_dwPreRecordTime_get(NET_DVR_RECORD_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_RECORD_V30_dwRecorderDuration_set", _wrap_NET_DVR_RECORD_V30_dwRecorderDuration_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_dwRecorderDuration_set(NET_DVR_RECORD_V30 self, DWORD dwRecorderDuration)"},
	 { (char *)"NET_DVR_RECORD_V30_dwRecorderDuration_get", _wrap_NET_DVR_RECORD_V30_dwRecorderDuration_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_dwRecorderDuration_get(NET_DVR_RECORD_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_RECORD_V30_byRedundancyRec_set", _wrap_NET_DVR_RECORD_V30_byRedundancyRec_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byRedundancyRec_set(NET_DVR_RECORD_V30 self, BYTE byRedundancyRec)"},
	 { (char *)"NET_DVR_RECORD_V30_byRedundancyRec_get", _wrap_NET_DVR_RECORD_V30_byRedundancyRec_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byRedundancyRec_get(NET_DVR_RECORD_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V30_byAudioRec_set", _wrap_NET_DVR_RECORD_V30_byAudioRec_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byAudioRec_set(NET_DVR_RECORD_V30 self, BYTE byAudioRec)"},
	 { (char *)"NET_DVR_RECORD_V30_byAudioRec_get", _wrap_NET_DVR_RECORD_V30_byAudioRec_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byAudioRec_get(NET_DVR_RECORD_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V30_byStreamType_set", _wrap_NET_DVR_RECORD_V30_byStreamType_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byStreamType_set(NET_DVR_RECORD_V30 self, BYTE byStreamType)"},
	 { (char *)"NET_DVR_RECORD_V30_byStreamType_get", _wrap_NET_DVR_RECORD_V30_byStreamType_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byStreamType_get(NET_DVR_RECORD_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V30_byPassbackRecord_set", _wrap_NET_DVR_RECORD_V30_byPassbackRecord_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byPassbackRecord_set(NET_DVR_RECORD_V30 self, BYTE byPassbackRecord)"},
	 { (char *)"NET_DVR_RECORD_V30_byPassbackRecord_get", _wrap_NET_DVR_RECORD_V30_byPassbackRecord_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byPassbackRecord_get(NET_DVR_RECORD_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V30_wLockDuration_set", _wrap_NET_DVR_RECORD_V30_wLockDuration_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_wLockDuration_set(NET_DVR_RECORD_V30 self, WORD wLockDuration)"},
	 { (char *)"NET_DVR_RECORD_V30_wLockDuration_get", _wrap_NET_DVR_RECORD_V30_wLockDuration_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_wLockDuration_get(NET_DVR_RECORD_V30 self) -> WORD"},
	 { (char *)"NET_DVR_RECORD_V30_byRecordBackup_set", _wrap_NET_DVR_RECORD_V30_byRecordBackup_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byRecordBackup_set(NET_DVR_RECORD_V30 self, BYTE byRecordBackup)"},
	 { (char *)"NET_DVR_RECORD_V30_byRecordBackup_get", _wrap_NET_DVR_RECORD_V30_byRecordBackup_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byRecordBackup_get(NET_DVR_RECORD_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V30_bySVCLevel_set", _wrap_NET_DVR_RECORD_V30_bySVCLevel_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_bySVCLevel_set(NET_DVR_RECORD_V30 self, BYTE bySVCLevel)"},
	 { (char *)"NET_DVR_RECORD_V30_bySVCLevel_get", _wrap_NET_DVR_RECORD_V30_bySVCLevel_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_bySVCLevel_get(NET_DVR_RECORD_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V30_byRecordManage_set", _wrap_NET_DVR_RECORD_V30_byRecordManage_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byRecordManage_set(NET_DVR_RECORD_V30 self, BYTE byRecordManage)"},
	 { (char *)"NET_DVR_RECORD_V30_byRecordManage_get", _wrap_NET_DVR_RECORD_V30_byRecordManage_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byRecordManage_get(NET_DVR_RECORD_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V30_byExtraSaveAudio_set", _wrap_NET_DVR_RECORD_V30_byExtraSaveAudio_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byExtraSaveAudio_set(NET_DVR_RECORD_V30 self, BYTE byExtraSaveAudio)"},
	 { (char *)"NET_DVR_RECORD_V30_byExtraSaveAudio_get", _wrap_NET_DVR_RECORD_V30_byExtraSaveAudio_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byExtraSaveAudio_get(NET_DVR_RECORD_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V30_byIntelligentRecord_set", _wrap_NET_DVR_RECORD_V30_byIntelligentRecord_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byIntelligentRecord_set(NET_DVR_RECORD_V30 self, BYTE byIntelligentRecord)"},
	 { (char *)"NET_DVR_RECORD_V30_byIntelligentRecord_get", _wrap_NET_DVR_RECORD_V30_byIntelligentRecord_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byIntelligentRecord_get(NET_DVR_RECORD_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V30_byReserve_set", _wrap_NET_DVR_RECORD_V30_byReserve_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byReserve_set(NET_DVR_RECORD_V30 self, BYTE byReserve)"},
	 { (char *)"NET_DVR_RECORD_V30_byReserve_get", _wrap_NET_DVR_RECORD_V30_byReserve_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V30_byReserve_get(NET_DVR_RECORD_V30 self) -> BYTE"},
	 { (char *)"new_NET_DVR_RECORD_V30", _wrap_new_NET_DVR_RECORD_V30, METH_VARARGS, (char *)"new_NET_DVR_RECORD_V30() -> NET_DVR_RECORD_V30"},
	 { (char *)"delete_NET_DVR_RECORD_V30", _wrap_delete_NET_DVR_RECORD_V30, METH_VARARGS, (char *)"delete_NET_DVR_RECORD_V30(NET_DVR_RECORD_V30 self)"},
	 { (char *)"NET_DVR_RECORD_V30_swigregister", NET_DVR_RECORD_V30_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_RECORDSCHED_V40_struRecordTime_set", _wrap_NET_DVR_RECORDSCHED_V40_struRecordTime_set, METH_VARARGS, (char *)"NET_DVR_RECORDSCHED_V40_struRecordTime_set(NET_DVR_RECORDSCHED_V40 self, NET_DVR_SCHEDTIME struRecordTime)"},
	 { (char *)"NET_DVR_RECORDSCHED_V40_struRecordTime_get", _wrap_NET_DVR_RECORDSCHED_V40_struRecordTime_get, METH_VARARGS, (char *)"NET_DVR_RECORDSCHED_V40_struRecordTime_get(NET_DVR_RECORDSCHED_V40 self) -> NET_DVR_SCHEDTIME"},
	 { (char *)"NET_DVR_RECORDSCHED_V40_byRecordType_set", _wrap_NET_DVR_RECORDSCHED_V40_byRecordType_set, METH_VARARGS, (char *)"NET_DVR_RECORDSCHED_V40_byRecordType_set(NET_DVR_RECORDSCHED_V40 self, BYTE byRecordType)"},
	 { (char *)"NET_DVR_RECORDSCHED_V40_byRecordType_get", _wrap_NET_DVR_RECORDSCHED_V40_byRecordType_get, METH_VARARGS, (char *)"NET_DVR_RECORDSCHED_V40_byRecordType_get(NET_DVR_RECORDSCHED_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORDSCHED_V40_byRes_set", _wrap_NET_DVR_RECORDSCHED_V40_byRes_set, METH_VARARGS, (char *)"NET_DVR_RECORDSCHED_V40_byRes_set(NET_DVR_RECORDSCHED_V40 self, BYTE [31] byRes)"},
	 { (char *)"NET_DVR_RECORDSCHED_V40_byRes_get", _wrap_NET_DVR_RECORDSCHED_V40_byRes_get, METH_VARARGS, (char *)"NET_DVR_RECORDSCHED_V40_byRes_get(NET_DVR_RECORDSCHED_V40 self) -> BYTE [31]"},
	 { (char *)"new_NET_DVR_RECORDSCHED_V40", _wrap_new_NET_DVR_RECORDSCHED_V40, METH_VARARGS, (char *)"new_NET_DVR_RECORDSCHED_V40() -> NET_DVR_RECORDSCHED_V40"},
	 { (char *)"delete_NET_DVR_RECORDSCHED_V40", _wrap_delete_NET_DVR_RECORDSCHED_V40, METH_VARARGS, (char *)"delete_NET_DVR_RECORDSCHED_V40(NET_DVR_RECORDSCHED_V40 self)"},
	 { (char *)"NET_DVR_RECORDSCHED_V40_swigregister", NET_DVR_RECORDSCHED_V40_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_RECORDDAY_V40_byAllDayRecord_set", _wrap_NET_DVR_RECORDDAY_V40_byAllDayRecord_set, METH_VARARGS, (char *)"NET_DVR_RECORDDAY_V40_byAllDayRecord_set(NET_DVR_RECORDDAY_V40 self, BYTE byAllDayRecord)"},
	 { (char *)"NET_DVR_RECORDDAY_V40_byAllDayRecord_get", _wrap_NET_DVR_RECORDDAY_V40_byAllDayRecord_get, METH_VARARGS, (char *)"NET_DVR_RECORDDAY_V40_byAllDayRecord_get(NET_DVR_RECORDDAY_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORDDAY_V40_byRecordType_set", _wrap_NET_DVR_RECORDDAY_V40_byRecordType_set, METH_VARARGS, (char *)"NET_DVR_RECORDDAY_V40_byRecordType_set(NET_DVR_RECORDDAY_V40 self, BYTE byRecordType)"},
	 { (char *)"NET_DVR_RECORDDAY_V40_byRecordType_get", _wrap_NET_DVR_RECORDDAY_V40_byRecordType_get, METH_VARARGS, (char *)"NET_DVR_RECORDDAY_V40_byRecordType_get(NET_DVR_RECORDDAY_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORDDAY_V40_byRes_set", _wrap_NET_DVR_RECORDDAY_V40_byRes_set, METH_VARARGS, (char *)"NET_DVR_RECORDDAY_V40_byRes_set(NET_DVR_RECORDDAY_V40 self, BYTE [62] byRes)"},
	 { (char *)"NET_DVR_RECORDDAY_V40_byRes_get", _wrap_NET_DVR_RECORDDAY_V40_byRes_get, METH_VARARGS, (char *)"NET_DVR_RECORDDAY_V40_byRes_get(NET_DVR_RECORDDAY_V40 self) -> BYTE [62]"},
	 { (char *)"new_NET_DVR_RECORDDAY_V40", _wrap_new_NET_DVR_RECORDDAY_V40, METH_VARARGS, (char *)"new_NET_DVR_RECORDDAY_V40() -> NET_DVR_RECORDDAY_V40"},
	 { (char *)"delete_NET_DVR_RECORDDAY_V40", _wrap_delete_NET_DVR_RECORDDAY_V40, METH_VARARGS, (char *)"delete_NET_DVR_RECORDDAY_V40(NET_DVR_RECORDDAY_V40 self)"},
	 { (char *)"NET_DVR_RECORDDAY_V40_swigregister", NET_DVR_RECORDDAY_V40_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_RECORD_V40_dwSize_set", _wrap_NET_DVR_RECORD_V40_dwSize_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_dwSize_set(NET_DVR_RECORD_V40 self, DWORD dwSize)"},
	 { (char *)"NET_DVR_RECORD_V40_dwSize_get", _wrap_NET_DVR_RECORD_V40_dwSize_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_dwSize_get(NET_DVR_RECORD_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_RECORD_V40_dwRecord_set", _wrap_NET_DVR_RECORD_V40_dwRecord_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_dwRecord_set(NET_DVR_RECORD_V40 self, DWORD dwRecord)"},
	 { (char *)"NET_DVR_RECORD_V40_dwRecord_get", _wrap_NET_DVR_RECORD_V40_dwRecord_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_dwRecord_get(NET_DVR_RECORD_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_RECORD_V40_struRecAllDay_set", _wrap_NET_DVR_RECORD_V40_struRecAllDay_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_struRecAllDay_set(NET_DVR_RECORD_V40 self, NET_DVR_RECORDDAY_V40 struRecAllDay)"},
	 { (char *)"NET_DVR_RECORD_V40_struRecAllDay_get", _wrap_NET_DVR_RECORD_V40_struRecAllDay_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_struRecAllDay_get(NET_DVR_RECORD_V40 self) -> NET_DVR_RECORDDAY_V40"},
	 { (char *)"NET_DVR_RECORD_V40_struRecordSched_set", _wrap_NET_DVR_RECORD_V40_struRecordSched_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_struRecordSched_set(NET_DVR_RECORD_V40 self, NET_DVR_RECORDSCHED_V40 [7][8] struRecordSched)"},
	 { (char *)"NET_DVR_RECORD_V40_struRecordSched_get", _wrap_NET_DVR_RECORD_V40_struRecordSched_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_struRecordSched_get(NET_DVR_RECORD_V40 self) -> NET_DVR_RECORDSCHED_V40 [7][8]"},
	 { (char *)"NET_DVR_RECORD_V40_dwRecordTime_set", _wrap_NET_DVR_RECORD_V40_dwRecordTime_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_dwRecordTime_set(NET_DVR_RECORD_V40 self, DWORD dwRecordTime)"},
	 { (char *)"NET_DVR_RECORD_V40_dwRecordTime_get", _wrap_NET_DVR_RECORD_V40_dwRecordTime_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_dwRecordTime_get(NET_DVR_RECORD_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_RECORD_V40_dwPreRecordTime_set", _wrap_NET_DVR_RECORD_V40_dwPreRecordTime_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_dwPreRecordTime_set(NET_DVR_RECORD_V40 self, DWORD dwPreRecordTime)"},
	 { (char *)"NET_DVR_RECORD_V40_dwPreRecordTime_get", _wrap_NET_DVR_RECORD_V40_dwPreRecordTime_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_dwPreRecordTime_get(NET_DVR_RECORD_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_RECORD_V40_dwRecorderDuration_set", _wrap_NET_DVR_RECORD_V40_dwRecorderDuration_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_dwRecorderDuration_set(NET_DVR_RECORD_V40 self, DWORD dwRecorderDuration)"},
	 { (char *)"NET_DVR_RECORD_V40_dwRecorderDuration_get", _wrap_NET_DVR_RECORD_V40_dwRecorderDuration_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_dwRecorderDuration_get(NET_DVR_RECORD_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_RECORD_V40_byRedundancyRec_set", _wrap_NET_DVR_RECORD_V40_byRedundancyRec_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byRedundancyRec_set(NET_DVR_RECORD_V40 self, BYTE byRedundancyRec)"},
	 { (char *)"NET_DVR_RECORD_V40_byRedundancyRec_get", _wrap_NET_DVR_RECORD_V40_byRedundancyRec_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byRedundancyRec_get(NET_DVR_RECORD_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V40_byAudioRec_set", _wrap_NET_DVR_RECORD_V40_byAudioRec_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byAudioRec_set(NET_DVR_RECORD_V40 self, BYTE byAudioRec)"},
	 { (char *)"NET_DVR_RECORD_V40_byAudioRec_get", _wrap_NET_DVR_RECORD_V40_byAudioRec_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byAudioRec_get(NET_DVR_RECORD_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V40_byStreamType_set", _wrap_NET_DVR_RECORD_V40_byStreamType_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byStreamType_set(NET_DVR_RECORD_V40 self, BYTE byStreamType)"},
	 { (char *)"NET_DVR_RECORD_V40_byStreamType_get", _wrap_NET_DVR_RECORD_V40_byStreamType_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byStreamType_get(NET_DVR_RECORD_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V40_byPassbackRecord_set", _wrap_NET_DVR_RECORD_V40_byPassbackRecord_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byPassbackRecord_set(NET_DVR_RECORD_V40 self, BYTE byPassbackRecord)"},
	 { (char *)"NET_DVR_RECORD_V40_byPassbackRecord_get", _wrap_NET_DVR_RECORD_V40_byPassbackRecord_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byPassbackRecord_get(NET_DVR_RECORD_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V40_wLockDuration_set", _wrap_NET_DVR_RECORD_V40_wLockDuration_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_wLockDuration_set(NET_DVR_RECORD_V40 self, WORD wLockDuration)"},
	 { (char *)"NET_DVR_RECORD_V40_wLockDuration_get", _wrap_NET_DVR_RECORD_V40_wLockDuration_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_wLockDuration_get(NET_DVR_RECORD_V40 self) -> WORD"},
	 { (char *)"NET_DVR_RECORD_V40_byRecordBackup_set", _wrap_NET_DVR_RECORD_V40_byRecordBackup_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byRecordBackup_set(NET_DVR_RECORD_V40 self, BYTE byRecordBackup)"},
	 { (char *)"NET_DVR_RECORD_V40_byRecordBackup_get", _wrap_NET_DVR_RECORD_V40_byRecordBackup_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byRecordBackup_get(NET_DVR_RECORD_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V40_bySVCLevel_set", _wrap_NET_DVR_RECORD_V40_bySVCLevel_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_bySVCLevel_set(NET_DVR_RECORD_V40 self, BYTE bySVCLevel)"},
	 { (char *)"NET_DVR_RECORD_V40_bySVCLevel_get", _wrap_NET_DVR_RECORD_V40_bySVCLevel_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_bySVCLevel_get(NET_DVR_RECORD_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V40_byRecordManage_set", _wrap_NET_DVR_RECORD_V40_byRecordManage_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byRecordManage_set(NET_DVR_RECORD_V40 self, BYTE byRecordManage)"},
	 { (char *)"NET_DVR_RECORD_V40_byRecordManage_get", _wrap_NET_DVR_RECORD_V40_byRecordManage_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byRecordManage_get(NET_DVR_RECORD_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V40_byExtraSaveAudio_set", _wrap_NET_DVR_RECORD_V40_byExtraSaveAudio_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byExtraSaveAudio_set(NET_DVR_RECORD_V40 self, BYTE byExtraSaveAudio)"},
	 { (char *)"NET_DVR_RECORD_V40_byExtraSaveAudio_get", _wrap_NET_DVR_RECORD_V40_byExtraSaveAudio_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byExtraSaveAudio_get(NET_DVR_RECORD_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V40_byIntelligentRecord_set", _wrap_NET_DVR_RECORD_V40_byIntelligentRecord_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byIntelligentRecord_set(NET_DVR_RECORD_V40 self, BYTE byIntelligentRecord)"},
	 { (char *)"NET_DVR_RECORD_V40_byIntelligentRecord_get", _wrap_NET_DVR_RECORD_V40_byIntelligentRecord_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byIntelligentRecord_get(NET_DVR_RECORD_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_RECORD_V40_byRes_set", _wrap_NET_DVR_RECORD_V40_byRes_set, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byRes_set(NET_DVR_RECORD_V40 self, BYTE [125] byRes)"},
	 { (char *)"NET_DVR_RECORD_V40_byRes_get", _wrap_NET_DVR_RECORD_V40_byRes_get, METH_VARARGS, (char *)"NET_DVR_RECORD_V40_byRes_get(NET_DVR_RECORD_V40 self) -> BYTE [125]"},
	 { (char *)"new_NET_DVR_RECORD_V40", _wrap_new_NET_DVR_RECORD_V40, METH_VARARGS, (char *)"new_NET_DVR_RECORD_V40() -> NET_DVR_RECORD_V40"},
	 { (char *)"delete_NET_DVR_RECORD_V40", _wrap_delete_NET_DVR_RECORD_V40, METH_VARARGS, (char *)"delete_NET_DVR_RECORD_V40(NET_DVR_RECORD_V40 self)"},
	 { (char *)"NET_DVR_RECORD_V40_swigregister", NET_DVR_RECORD_V40_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_RECORD_dwSize_set", _wrap_NET_DVR_RECORD_dwSize_set, METH_VARARGS, (char *)"NET_DVR_RECORD_dwSize_set(NET_DVR_RECORD self, DWORD dwSize)"},
	 { (char *)"NET_DVR_RECORD_dwSize_get", _wrap_NET_DVR_RECORD_dwSize_get, METH_VARARGS, (char *)"NET_DVR_RECORD_dwSize_get(NET_DVR_RECORD self) -> DWORD"},
	 { (char *)"NET_DVR_RECORD_dwRecord_set", _wrap_NET_DVR_RECORD_dwRecord_set, METH_VARARGS, (char *)"NET_DVR_RECORD_dwRecord_set(NET_DVR_RECORD self, DWORD dwRecord)"},
	 { (char *)"NET_DVR_RECORD_dwRecord_get", _wrap_NET_DVR_RECORD_dwRecord_get, METH_VARARGS, (char *)"NET_DVR_RECORD_dwRecord_get(NET_DVR_RECORD self) -> DWORD"},
	 { (char *)"NET_DVR_RECORD_struRecAllDay_set", _wrap_NET_DVR_RECORD_struRecAllDay_set, METH_VARARGS, (char *)"NET_DVR_RECORD_struRecAllDay_set(NET_DVR_RECORD self, NET_DVR_RECORDDAY struRecAllDay)"},
	 { (char *)"NET_DVR_RECORD_struRecAllDay_get", _wrap_NET_DVR_RECORD_struRecAllDay_get, METH_VARARGS, (char *)"NET_DVR_RECORD_struRecAllDay_get(NET_DVR_RECORD self) -> NET_DVR_RECORDDAY"},
	 { (char *)"NET_DVR_RECORD_struRecordSched_set", _wrap_NET_DVR_RECORD_struRecordSched_set, METH_VARARGS, (char *)"NET_DVR_RECORD_struRecordSched_set(NET_DVR_RECORD self, NET_DVR_RECORDSCHED [7][4] struRecordSched)"},
	 { (char *)"NET_DVR_RECORD_struRecordSched_get", _wrap_NET_DVR_RECORD_struRecordSched_get, METH_VARARGS, (char *)"NET_DVR_RECORD_struRecordSched_get(NET_DVR_RECORD self) -> NET_DVR_RECORDSCHED [7][4]"},
	 { (char *)"NET_DVR_RECORD_dwRecordTime_set", _wrap_NET_DVR_RECORD_dwRecordTime_set, METH_VARARGS, (char *)"NET_DVR_RECORD_dwRecordTime_set(NET_DVR_RECORD self, DWORD dwRecordTime)"},
	 { (char *)"NET_DVR_RECORD_dwRecordTime_get", _wrap_NET_DVR_RECORD_dwRecordTime_get, METH_VARARGS, (char *)"NET_DVR_RECORD_dwRecordTime_get(NET_DVR_RECORD self) -> DWORD"},
	 { (char *)"NET_DVR_RECORD_dwPreRecordTime_set", _wrap_NET_DVR_RECORD_dwPreRecordTime_set, METH_VARARGS, (char *)"NET_DVR_RECORD_dwPreRecordTime_set(NET_DVR_RECORD self, DWORD dwPreRecordTime)"},
	 { (char *)"NET_DVR_RECORD_dwPreRecordTime_get", _wrap_NET_DVR_RECORD_dwPreRecordTime_get, METH_VARARGS, (char *)"NET_DVR_RECORD_dwPreRecordTime_get(NET_DVR_RECORD self) -> DWORD"},
	 { (char *)"new_NET_DVR_RECORD", _wrap_new_NET_DVR_RECORD, METH_VARARGS, (char *)"new_NET_DVR_RECORD() -> NET_DVR_RECORD"},
	 { (char *)"delete_NET_DVR_RECORD", _wrap_delete_NET_DVR_RECORD, METH_VARARGS, (char *)"delete_NET_DVR_RECORD(NET_DVR_RECORD self)"},
	 { (char *)"NET_DVR_RECORD_swigregister", NET_DVR_RECORD_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_PTZ_PROTOCOL_dwType_set", _wrap_NET_DVR_PTZ_PROTOCOL_dwType_set, METH_VARARGS, (char *)"NET_DVR_PTZ_PROTOCOL_dwType_set(NET_DVR_PTZ_PROTOCOL self, DWORD dwType)"},
	 { (char *)"NET_DVR_PTZ_PROTOCOL_dwType_get", _wrap_NET_DVR_PTZ_PROTOCOL_dwType_get, METH_VARARGS, (char *)"NET_DVR_PTZ_PROTOCOL_dwType_get(NET_DVR_PTZ_PROTOCOL self) -> DWORD"},
	 { (char *)"NET_DVR_PTZ_PROTOCOL_byDescribe_set", _wrap_NET_DVR_PTZ_PROTOCOL_byDescribe_set, METH_VARARGS, (char *)"NET_DVR_PTZ_PROTOCOL_byDescribe_set(NET_DVR_PTZ_PROTOCOL self, BYTE [16] byDescribe)"},
	 { (char *)"NET_DVR_PTZ_PROTOCOL_byDescribe_get", _wrap_NET_DVR_PTZ_PROTOCOL_byDescribe_get, METH_VARARGS, (char *)"NET_DVR_PTZ_PROTOCOL_byDescribe_get(NET_DVR_PTZ_PROTOCOL self) -> BYTE [16]"},
	 { (char *)"new_NET_DVR_PTZ_PROTOCOL", _wrap_new_NET_DVR_PTZ_PROTOCOL, METH_VARARGS, (char *)"new_NET_DVR_PTZ_PROTOCOL() -> NET_DVR_PTZ_PROTOCOL"},
	 { (char *)"delete_NET_DVR_PTZ_PROTOCOL", _wrap_delete_NET_DVR_PTZ_PROTOCOL, METH_VARARGS, (char *)"delete_NET_DVR_PTZ_PROTOCOL(NET_DVR_PTZ_PROTOCOL self)"},
	 { (char *)"NET_DVR_PTZ_PROTOCOL_swigregister", NET_DVR_PTZ_PROTOCOL_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_PTZCFG_dwSize_set", _wrap_NET_DVR_PTZCFG_dwSize_set, METH_VARARGS, (char *)"NET_DVR_PTZCFG_dwSize_set(NET_DVR_PTZCFG self, DWORD dwSize)"},
	 { (char *)"NET_DVR_PTZCFG_dwSize_get", _wrap_NET_DVR_PTZCFG_dwSize_get, METH_VARARGS, (char *)"NET_DVR_PTZCFG_dwSize_get(NET_DVR_PTZCFG self) -> DWORD"},
	 { (char *)"NET_DVR_PTZCFG_struPtz_set", _wrap_NET_DVR_PTZCFG_struPtz_set, METH_VARARGS, (char *)"NET_DVR_PTZCFG_struPtz_set(NET_DVR_PTZCFG self, NET_DVR_PTZ_PROTOCOL struPtz)"},
	 { (char *)"NET_DVR_PTZCFG_struPtz_get", _wrap_NET_DVR_PTZCFG_struPtz_get, METH_VARARGS, (char *)"NET_DVR_PTZCFG_struPtz_get(NET_DVR_PTZCFG self) -> NET_DVR_PTZ_PROTOCOL"},
	 { (char *)"NET_DVR_PTZCFG_dwPtzNum_set", _wrap_NET_DVR_PTZCFG_dwPtzNum_set, METH_VARARGS, (char *)"NET_DVR_PTZCFG_dwPtzNum_set(NET_DVR_PTZCFG self, DWORD dwPtzNum)"},
	 { (char *)"NET_DVR_PTZCFG_dwPtzNum_get", _wrap_NET_DVR_PTZCFG_dwPtzNum_get, METH_VARARGS, (char *)"NET_DVR_PTZCFG_dwPtzNum_get(NET_DVR_PTZCFG self) -> DWORD"},
	 { (char *)"NET_DVR_PTZCFG_byRes_set", _wrap_NET_DVR_PTZCFG_byRes_set, METH_VARARGS, (char *)"NET_DVR_PTZCFG_byRes_set(NET_DVR_PTZCFG self, BYTE [8] byRes)"},
	 { (char *)"NET_DVR_PTZCFG_byRes_get", _wrap_NET_DVR_PTZCFG_byRes_get, METH_VARARGS, (char *)"NET_DVR_PTZCFG_byRes_get(NET_DVR_PTZCFG self) -> BYTE [8]"},
	 { (char *)"new_NET_DVR_PTZCFG", _wrap_new_NET_DVR_PTZCFG, METH_VARARGS, (char *)"new_NET_DVR_PTZCFG() -> NET_DVR_PTZCFG"},
	 { (char *)"delete_NET_DVR_PTZCFG", _wrap_delete_NET_DVR_PTZCFG, METH_VARARGS, (char *)"delete_NET_DVR_PTZCFG(NET_DVR_PTZCFG self)"},
	 { (char *)"NET_DVR_PTZCFG_swigregister", NET_DVR_PTZCFG_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_SERIALSTART_V40_dwSize_set", _wrap_NET_DVR_SERIALSTART_V40_dwSize_set, METH_VARARGS, (char *)"NET_DVR_SERIALSTART_V40_dwSize_set(NET_DVR_SERIALSTART_V40 self, DWORD dwSize)"},
	 { (char *)"NET_DVR_SERIALSTART_V40_dwSize_get", _wrap_NET_DVR_SERIALSTART_V40_dwSize_get, METH_VARARGS, (char *)"NET_DVR_SERIALSTART_V40_dwSize_get(NET_DVR_SERIALSTART_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_SERIALSTART_V40_dwSerialType_set", _wrap_NET_DVR_SERIALSTART_V40_dwSerialType_set, METH_VARARGS, (char *)"NET_DVR_SERIALSTART_V40_dwSerialType_set(NET_DVR_SERIALSTART_V40 self, DWORD dwSerialType)"},
	 { (char *)"NET_DVR_SERIALSTART_V40_dwSerialType_get", _wrap_NET_DVR_SERIALSTART_V40_dwSerialType_get, METH_VARARGS, (char *)"NET_DVR_SERIALSTART_V40_dwSerialType_get(NET_DVR_SERIALSTART_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_SERIALSTART_V40_bySerialNum_set", _wrap_NET_DVR_SERIALSTART_V40_bySerialNum_set, METH_VARARGS, (char *)"NET_DVR_SERIALSTART_V40_bySerialNum_set(NET_DVR_SERIALSTART_V40 self, BYTE bySerialNum)"},
	 { (char *)"NET_DVR_SERIALSTART_V40_bySerialNum_get", _wrap_NET_DVR_SERIALSTART_V40_bySerialNum_get, METH_VARARGS, (char *)"NET_DVR_SERIALSTART_V40_bySerialNum_get(NET_DVR_SERIALSTART_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_SERIALSTART_V40_byRes_set", _wrap_NET_DVR_SERIALSTART_V40_byRes_set, METH_VARARGS, (char *)"NET_DVR_SERIALSTART_V40_byRes_set(NET_DVR_SERIALSTART_V40 self, BYTE [255] byRes)"},
	 { (char *)"NET_DVR_SERIALSTART_V40_byRes_get", _wrap_NET_DVR_SERIALSTART_V40_byRes_get, METH_VARARGS, (char *)"NET_DVR_SERIALSTART_V40_byRes_get(NET_DVR_SERIALSTART_V40 self) -> BYTE [255]"},
	 { (char *)"new_NET_DVR_SERIALSTART_V40", _wrap_new_NET_DVR_SERIALSTART_V40, METH_VARARGS, (char *)"new_NET_DVR_SERIALSTART_V40() -> NET_DVR_SERIALSTART_V40"},
	 { (char *)"delete_NET_DVR_SERIALSTART_V40", _wrap_delete_NET_DVR_SERIALSTART_V40, METH_VARARGS, (char *)"delete_NET_DVR_SERIALSTART_V40(NET_DVR_SERIALSTART_V40 self)"},
	 { (char *)"NET_DVR_SERIALSTART_V40_swigregister", NET_DVR_SERIALSTART_V40_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_DECODERCFG_V40_dwSize_set", _wrap_NET_DVR_DECODERCFG_V40_dwSize_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_dwSize_set(NET_DVR_DECODERCFG_V40 self, DWORD dwSize)"},
	 { (char *)"NET_DVR_DECODERCFG_V40_dwSize_get", _wrap_NET_DVR_DECODERCFG_V40_dwSize_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_dwSize_get(NET_DVR_DECODERCFG_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_DECODERCFG_V40_dwBaudRate_set", _wrap_NET_DVR_DECODERCFG_V40_dwBaudRate_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_dwBaudRate_set(NET_DVR_DECODERCFG_V40 self, DWORD dwBaudRate)"},
	 { (char *)"NET_DVR_DECODERCFG_V40_dwBaudRate_get", _wrap_NET_DVR_DECODERCFG_V40_dwBaudRate_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_dwBaudRate_get(NET_DVR_DECODERCFG_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_DECODERCFG_V40_byDataBit_set", _wrap_NET_DVR_DECODERCFG_V40_byDataBit_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_byDataBit_set(NET_DVR_DECODERCFG_V40 self, BYTE byDataBit)"},
	 { (char *)"NET_DVR_DECODERCFG_V40_byDataBit_get", _wrap_NET_DVR_DECODERCFG_V40_byDataBit_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_byDataBit_get(NET_DVR_DECODERCFG_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_DECODERCFG_V40_byStopBit_set", _wrap_NET_DVR_DECODERCFG_V40_byStopBit_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_byStopBit_set(NET_DVR_DECODERCFG_V40 self, BYTE byStopBit)"},
	 { (char *)"NET_DVR_DECODERCFG_V40_byStopBit_get", _wrap_NET_DVR_DECODERCFG_V40_byStopBit_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_byStopBit_get(NET_DVR_DECODERCFG_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_DECODERCFG_V40_byParity_set", _wrap_NET_DVR_DECODERCFG_V40_byParity_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_byParity_set(NET_DVR_DECODERCFG_V40 self, BYTE byParity)"},
	 { (char *)"NET_DVR_DECODERCFG_V40_byParity_get", _wrap_NET_DVR_DECODERCFG_V40_byParity_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_byParity_get(NET_DVR_DECODERCFG_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_DECODERCFG_V40_byFlowcontrol_set", _wrap_NET_DVR_DECODERCFG_V40_byFlowcontrol_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_byFlowcontrol_set(NET_DVR_DECODERCFG_V40 self, BYTE byFlowcontrol)"},
	 { (char *)"NET_DVR_DECODERCFG_V40_byFlowcontrol_get", _wrap_NET_DVR_DECODERCFG_V40_byFlowcontrol_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_byFlowcontrol_get(NET_DVR_DECODERCFG_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_DECODERCFG_V40_wDecoderType_set", _wrap_NET_DVR_DECODERCFG_V40_wDecoderType_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_wDecoderType_set(NET_DVR_DECODERCFG_V40 self, WORD wDecoderType)"},
	 { (char *)"NET_DVR_DECODERCFG_V40_wDecoderType_get", _wrap_NET_DVR_DECODERCFG_V40_wDecoderType_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_wDecoderType_get(NET_DVR_DECODERCFG_V40 self) -> WORD"},
	 { (char *)"NET_DVR_DECODERCFG_V40_wDecoderAddress_set", _wrap_NET_DVR_DECODERCFG_V40_wDecoderAddress_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_wDecoderAddress_set(NET_DVR_DECODERCFG_V40 self, WORD wDecoderAddress)"},
	 { (char *)"NET_DVR_DECODERCFG_V40_wDecoderAddress_get", _wrap_NET_DVR_DECODERCFG_V40_wDecoderAddress_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_wDecoderAddress_get(NET_DVR_DECODERCFG_V40 self) -> WORD"},
	 { (char *)"NET_DVR_DECODERCFG_V40_bySetPreset_set", _wrap_NET_DVR_DECODERCFG_V40_bySetPreset_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_bySetPreset_set(NET_DVR_DECODERCFG_V40 self, BYTE [256] bySetPreset)"},
	 { (char *)"NET_DVR_DECODERCFG_V40_bySetPreset_get", _wrap_NET_DVR_DECODERCFG_V40_bySetPreset_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_bySetPreset_get(NET_DVR_DECODERCFG_V40 self) -> BYTE [256]"},
	 { (char *)"NET_DVR_DECODERCFG_V40_bySetCruise_set", _wrap_NET_DVR_DECODERCFG_V40_bySetCruise_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_bySetCruise_set(NET_DVR_DECODERCFG_V40 self, BYTE [256] bySetCruise)"},
	 { (char *)"NET_DVR_DECODERCFG_V40_bySetCruise_get", _wrap_NET_DVR_DECODERCFG_V40_bySetCruise_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_bySetCruise_get(NET_DVR_DECODERCFG_V40 self) -> BYTE [256]"},
	 { (char *)"NET_DVR_DECODERCFG_V40_bySetTrack_set", _wrap_NET_DVR_DECODERCFG_V40_bySetTrack_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_bySetTrack_set(NET_DVR_DECODERCFG_V40 self, BYTE [256] bySetTrack)"},
	 { (char *)"NET_DVR_DECODERCFG_V40_bySetTrack_get", _wrap_NET_DVR_DECODERCFG_V40_bySetTrack_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_bySetTrack_get(NET_DVR_DECODERCFG_V40 self) -> BYTE [256]"},
	 { (char *)"NET_DVR_DECODERCFG_V40_bySerialNO_set", _wrap_NET_DVR_DECODERCFG_V40_bySerialNO_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_bySerialNO_set(NET_DVR_DECODERCFG_V40 self, BYTE bySerialNO)"},
	 { (char *)"NET_DVR_DECODERCFG_V40_bySerialNO_get", _wrap_NET_DVR_DECODERCFG_V40_bySerialNO_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_bySerialNO_get(NET_DVR_DECODERCFG_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_DECODERCFG_V40_byWorkMode_set", _wrap_NET_DVR_DECODERCFG_V40_byWorkMode_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_byWorkMode_set(NET_DVR_DECODERCFG_V40 self, BYTE byWorkMode)"},
	 { (char *)"NET_DVR_DECODERCFG_V40_byWorkMode_get", _wrap_NET_DVR_DECODERCFG_V40_byWorkMode_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_byWorkMode_get(NET_DVR_DECODERCFG_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_DECODERCFG_V40_byRes_set", _wrap_NET_DVR_DECODERCFG_V40_byRes_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_byRes_set(NET_DVR_DECODERCFG_V40 self, BYTE [254] byRes)"},
	 { (char *)"NET_DVR_DECODERCFG_V40_byRes_get", _wrap_NET_DVR_DECODERCFG_V40_byRes_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V40_byRes_get(NET_DVR_DECODERCFG_V40 self) -> BYTE [254]"},
	 { (char *)"new_NET_DVR_DECODERCFG_V40", _wrap_new_NET_DVR_DECODERCFG_V40, METH_VARARGS, (char *)"new_NET_DVR_DECODERCFG_V40() -> NET_DVR_DECODERCFG_V40"},
	 { (char *)"delete_NET_DVR_DECODERCFG_V40", _wrap_delete_NET_DVR_DECODERCFG_V40, METH_VARARGS, (char *)"delete_NET_DVR_DECODERCFG_V40(NET_DVR_DECODERCFG_V40 self)"},
	 { (char *)"NET_DVR_DECODERCFG_V40_swigregister", NET_DVR_DECODERCFG_V40_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMaxTemperature_set", _wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMaxTemperature_set, METH_VARARGS, (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMaxTemperature_set(NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO self, float fMaxTemperature)"},
	 { (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMaxTemperature_get", _wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMaxTemperature_get, METH_VARARGS, (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMaxTemperature_get(NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO self) -> float"},
	 { (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMinTemperature_set", _wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMinTemperature_set, METH_VARARGS, (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMinTemperature_set(NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO self, float fMinTemperature)"},
	 { (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMinTemperature_get", _wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMinTemperature_get, METH_VARARGS, (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fMinTemperature_get(NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO self) -> float"},
	 { (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fAverageTemperature_set", _wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fAverageTemperature_set, METH_VARARGS, (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fAverageTemperature_set(NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO self, float fAverageTemperature)"},
	 { (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fAverageTemperature_get", _wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fAverageTemperature_get, METH_VARARGS, (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_fAverageTemperature_get(NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO self) -> float"},
	 { (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struHighestPoint_set", _wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struHighestPoint_set, METH_VARARGS, (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struHighestPoint_set(NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO self, NET_VCA_POINT struHighestPoint)"},
	 { (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struHighestPoint_get", _wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struHighestPoint_get, METH_VARARGS, (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struHighestPoint_get(NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO self) -> NET_VCA_POINT"},
	 { (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struLowestPoint_set", _wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struLowestPoint_set, METH_VARARGS, (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struLowestPoint_set(NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO self, NET_VCA_POINT struLowestPoint)"},
	 { (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struLowestPoint_get", _wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struLowestPoint_get, METH_VARARGS, (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_struLowestPoint_get(NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO self) -> NET_VCA_POINT"},
	 { (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byIsFreezedata_set", _wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byIsFreezedata_set, METH_VARARGS, (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byIsFreezedata_set(NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO self, BYTE byIsFreezedata)"},
	 { (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byIsFreezedata_get", _wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byIsFreezedata_get, METH_VARARGS, (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byIsFreezedata_get(NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO self) -> BYTE"},
	 { (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byRes_set", _wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byRes_set, METH_VARARGS, (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byRes_set(NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO self, BYTE [15] byRes)"},
	 { (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byRes_get", _wrap_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byRes_get, METH_VARARGS, (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_byRes_get(NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO self) -> BYTE [15]"},
	 { (char *)"new_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO", _wrap_new_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, METH_VARARGS, (char *)"new_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO() -> NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO"},
	 { (char *)"delete_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO", _wrap_delete_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, METH_VARARGS, (char *)"delete_NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO(NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO self)"},
	 { (char *)"NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_swigregister", NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_DECODERCFG_V30_dwSize_set", _wrap_NET_DVR_DECODERCFG_V30_dwSize_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_dwSize_set(NET_DVR_DECODERCFG_V30 self, DWORD dwSize)"},
	 { (char *)"NET_DVR_DECODERCFG_V30_dwSize_get", _wrap_NET_DVR_DECODERCFG_V30_dwSize_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_dwSize_get(NET_DVR_DECODERCFG_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_DECODERCFG_V30_dwBaudRate_set", _wrap_NET_DVR_DECODERCFG_V30_dwBaudRate_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_dwBaudRate_set(NET_DVR_DECODERCFG_V30 self, DWORD dwBaudRate)"},
	 { (char *)"NET_DVR_DECODERCFG_V30_dwBaudRate_get", _wrap_NET_DVR_DECODERCFG_V30_dwBaudRate_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_dwBaudRate_get(NET_DVR_DECODERCFG_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_DECODERCFG_V30_byDataBit_set", _wrap_NET_DVR_DECODERCFG_V30_byDataBit_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_byDataBit_set(NET_DVR_DECODERCFG_V30 self, BYTE byDataBit)"},
	 { (char *)"NET_DVR_DECODERCFG_V30_byDataBit_get", _wrap_NET_DVR_DECODERCFG_V30_byDataBit_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_byDataBit_get(NET_DVR_DECODERCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_DECODERCFG_V30_byStopBit_set", _wrap_NET_DVR_DECODERCFG_V30_byStopBit_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_byStopBit_set(NET_DVR_DECODERCFG_V30 self, BYTE byStopBit)"},
	 { (char *)"NET_DVR_DECODERCFG_V30_byStopBit_get", _wrap_NET_DVR_DECODERCFG_V30_byStopBit_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_byStopBit_get(NET_DVR_DECODERCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_DECODERCFG_V30_byParity_set", _wrap_NET_DVR_DECODERCFG_V30_byParity_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_byParity_set(NET_DVR_DECODERCFG_V30 self, BYTE byParity)"},
	 { (char *)"NET_DVR_DECODERCFG_V30_byParity_get", _wrap_NET_DVR_DECODERCFG_V30_byParity_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_byParity_get(NET_DVR_DECODERCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_DECODERCFG_V30_byFlowcontrol_set", _wrap_NET_DVR_DECODERCFG_V30_byFlowcontrol_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_byFlowcontrol_set(NET_DVR_DECODERCFG_V30 self, BYTE byFlowcontrol)"},
	 { (char *)"NET_DVR_DECODERCFG_V30_byFlowcontrol_get", _wrap_NET_DVR_DECODERCFG_V30_byFlowcontrol_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_byFlowcontrol_get(NET_DVR_DECODERCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_DECODERCFG_V30_wDecoderType_set", _wrap_NET_DVR_DECODERCFG_V30_wDecoderType_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_wDecoderType_set(NET_DVR_DECODERCFG_V30 self, WORD wDecoderType)"},
	 { (char *)"NET_DVR_DECODERCFG_V30_wDecoderType_get", _wrap_NET_DVR_DECODERCFG_V30_wDecoderType_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_wDecoderType_get(NET_DVR_DECODERCFG_V30 self) -> WORD"},
	 { (char *)"NET_DVR_DECODERCFG_V30_wDecoderAddress_set", _wrap_NET_DVR_DECODERCFG_V30_wDecoderAddress_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_wDecoderAddress_set(NET_DVR_DECODERCFG_V30 self, WORD wDecoderAddress)"},
	 { (char *)"NET_DVR_DECODERCFG_V30_wDecoderAddress_get", _wrap_NET_DVR_DECODERCFG_V30_wDecoderAddress_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_wDecoderAddress_get(NET_DVR_DECODERCFG_V30 self) -> WORD"},
	 { (char *)"NET_DVR_DECODERCFG_V30_bySetPreset_set", _wrap_NET_DVR_DECODERCFG_V30_bySetPreset_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_bySetPreset_set(NET_DVR_DECODERCFG_V30 self, BYTE [256] bySetPreset)"},
	 { (char *)"NET_DVR_DECODERCFG_V30_bySetPreset_get", _wrap_NET_DVR_DECODERCFG_V30_bySetPreset_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_bySetPreset_get(NET_DVR_DECODERCFG_V30 self) -> BYTE [256]"},
	 { (char *)"NET_DVR_DECODERCFG_V30_bySetCruise_set", _wrap_NET_DVR_DECODERCFG_V30_bySetCruise_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_bySetCruise_set(NET_DVR_DECODERCFG_V30 self, BYTE [256] bySetCruise)"},
	 { (char *)"NET_DVR_DECODERCFG_V30_bySetCruise_get", _wrap_NET_DVR_DECODERCFG_V30_bySetCruise_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_bySetCruise_get(NET_DVR_DECODERCFG_V30 self) -> BYTE [256]"},
	 { (char *)"NET_DVR_DECODERCFG_V30_bySetTrack_set", _wrap_NET_DVR_DECODERCFG_V30_bySetTrack_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_bySetTrack_set(NET_DVR_DECODERCFG_V30 self, BYTE [256] bySetTrack)"},
	 { (char *)"NET_DVR_DECODERCFG_V30_bySetTrack_get", _wrap_NET_DVR_DECODERCFG_V30_bySetTrack_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_V30_bySetTrack_get(NET_DVR_DECODERCFG_V30 self) -> BYTE [256]"},
	 { (char *)"new_NET_DVR_DECODERCFG_V30", _wrap_new_NET_DVR_DECODERCFG_V30, METH_VARARGS, (char *)"new_NET_DVR_DECODERCFG_V30() -> NET_DVR_DECODERCFG_V30"},
	 { (char *)"delete_NET_DVR_DECODERCFG_V30", _wrap_delete_NET_DVR_DECODERCFG_V30, METH_VARARGS, (char *)"delete_NET_DVR_DECODERCFG_V30(NET_DVR_DECODERCFG_V30 self)"},
	 { (char *)"NET_DVR_DECODERCFG_V30_swigregister", NET_DVR_DECODERCFG_V30_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_DECODERCFG_dwSize_set", _wrap_NET_DVR_DECODERCFG_dwSize_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_dwSize_set(NET_DVR_DECODERCFG self, DWORD dwSize)"},
	 { (char *)"NET_DVR_DECODERCFG_dwSize_get", _wrap_NET_DVR_DECODERCFG_dwSize_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_dwSize_get(NET_DVR_DECODERCFG self) -> DWORD"},
	 { (char *)"NET_DVR_DECODERCFG_dwBaudRate_set", _wrap_NET_DVR_DECODERCFG_dwBaudRate_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_dwBaudRate_set(NET_DVR_DECODERCFG self, DWORD dwBaudRate)"},
	 { (char *)"NET_DVR_DECODERCFG_dwBaudRate_get", _wrap_NET_DVR_DECODERCFG_dwBaudRate_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_dwBaudRate_get(NET_DVR_DECODERCFG self) -> DWORD"},
	 { (char *)"NET_DVR_DECODERCFG_byDataBit_set", _wrap_NET_DVR_DECODERCFG_byDataBit_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_byDataBit_set(NET_DVR_DECODERCFG self, BYTE byDataBit)"},
	 { (char *)"NET_DVR_DECODERCFG_byDataBit_get", _wrap_NET_DVR_DECODERCFG_byDataBit_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_byDataBit_get(NET_DVR_DECODERCFG self) -> BYTE"},
	 { (char *)"NET_DVR_DECODERCFG_byStopBit_set", _wrap_NET_DVR_DECODERCFG_byStopBit_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_byStopBit_set(NET_DVR_DECODERCFG self, BYTE byStopBit)"},
	 { (char *)"NET_DVR_DECODERCFG_byStopBit_get", _wrap_NET_DVR_DECODERCFG_byStopBit_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_byStopBit_get(NET_DVR_DECODERCFG self) -> BYTE"},
	 { (char *)"NET_DVR_DECODERCFG_byParity_set", _wrap_NET_DVR_DECODERCFG_byParity_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_byParity_set(NET_DVR_DECODERCFG self, BYTE byParity)"},
	 { (char *)"NET_DVR_DECODERCFG_byParity_get", _wrap_NET_DVR_DECODERCFG_byParity_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_byParity_get(NET_DVR_DECODERCFG self) -> BYTE"},
	 { (char *)"NET_DVR_DECODERCFG_byFlowcontrol_set", _wrap_NET_DVR_DECODERCFG_byFlowcontrol_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_byFlowcontrol_set(NET_DVR_DECODERCFG self, BYTE byFlowcontrol)"},
	 { (char *)"NET_DVR_DECODERCFG_byFlowcontrol_get", _wrap_NET_DVR_DECODERCFG_byFlowcontrol_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_byFlowcontrol_get(NET_DVR_DECODERCFG self) -> BYTE"},
	 { (char *)"NET_DVR_DECODERCFG_wDecoderType_set", _wrap_NET_DVR_DECODERCFG_wDecoderType_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_wDecoderType_set(NET_DVR_DECODERCFG self, WORD wDecoderType)"},
	 { (char *)"NET_DVR_DECODERCFG_wDecoderType_get", _wrap_NET_DVR_DECODERCFG_wDecoderType_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_wDecoderType_get(NET_DVR_DECODERCFG self) -> WORD"},
	 { (char *)"NET_DVR_DECODERCFG_wDecoderAddress_set", _wrap_NET_DVR_DECODERCFG_wDecoderAddress_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_wDecoderAddress_set(NET_DVR_DECODERCFG self, WORD wDecoderAddress)"},
	 { (char *)"NET_DVR_DECODERCFG_wDecoderAddress_get", _wrap_NET_DVR_DECODERCFG_wDecoderAddress_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_wDecoderAddress_get(NET_DVR_DECODERCFG self) -> WORD"},
	 { (char *)"NET_DVR_DECODERCFG_bySetPreset_set", _wrap_NET_DVR_DECODERCFG_bySetPreset_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_bySetPreset_set(NET_DVR_DECODERCFG self, BYTE [128] bySetPreset)"},
	 { (char *)"NET_DVR_DECODERCFG_bySetPreset_get", _wrap_NET_DVR_DECODERCFG_bySetPreset_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_bySetPreset_get(NET_DVR_DECODERCFG self) -> BYTE [128]"},
	 { (char *)"NET_DVR_DECODERCFG_bySetCruise_set", _wrap_NET_DVR_DECODERCFG_bySetCruise_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_bySetCruise_set(NET_DVR_DECODERCFG self, BYTE [128] bySetCruise)"},
	 { (char *)"NET_DVR_DECODERCFG_bySetCruise_get", _wrap_NET_DVR_DECODERCFG_bySetCruise_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_bySetCruise_get(NET_DVR_DECODERCFG self) -> BYTE [128]"},
	 { (char *)"NET_DVR_DECODERCFG_bySetTrack_set", _wrap_NET_DVR_DECODERCFG_bySetTrack_set, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_bySetTrack_set(NET_DVR_DECODERCFG self, BYTE [128] bySetTrack)"},
	 { (char *)"NET_DVR_DECODERCFG_bySetTrack_get", _wrap_NET_DVR_DECODERCFG_bySetTrack_get, METH_VARARGS, (char *)"NET_DVR_DECODERCFG_bySetTrack_get(NET_DVR_DECODERCFG self) -> BYTE [128]"},
	 { (char *)"new_NET_DVR_DECODERCFG", _wrap_new_NET_DVR_DECODERCFG, METH_VARARGS, (char *)"new_NET_DVR_DECODERCFG() -> NET_DVR_DECODERCFG"},
	 { (char *)"delete_NET_DVR_DECODERCFG", _wrap_delete_NET_DVR_DECODERCFG, METH_VARARGS, (char *)"delete_NET_DVR_DECODERCFG(NET_DVR_DECODERCFG self)"},
	 { (char *)"NET_DVR_DECODERCFG_swigregister", NET_DVR_DECODERCFG_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_PPPCFG_V30_struRemoteIP_set", _wrap_NET_DVR_PPPCFG_V30_struRemoteIP_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_struRemoteIP_set(NET_DVR_PPPCFG_V30 self, NET_DVR_IPADDR struRemoteIP)"},
	 { (char *)"NET_DVR_PPPCFG_V30_struRemoteIP_get", _wrap_NET_DVR_PPPCFG_V30_struRemoteIP_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_struRemoteIP_get(NET_DVR_PPPCFG_V30 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_PPPCFG_V30_struLocalIP_set", _wrap_NET_DVR_PPPCFG_V30_struLocalIP_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_struLocalIP_set(NET_DVR_PPPCFG_V30 self, NET_DVR_IPADDR struLocalIP)"},
	 { (char *)"NET_DVR_PPPCFG_V30_struLocalIP_get", _wrap_NET_DVR_PPPCFG_V30_struLocalIP_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_struLocalIP_get(NET_DVR_PPPCFG_V30 self) -> NET_DVR_IPADDR"},
	 { (char *)"NET_DVR_PPPCFG_V30_sLocalIPMask_set", _wrap_NET_DVR_PPPCFG_V30_sLocalIPMask_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_sLocalIPMask_set(NET_DVR_PPPCFG_V30 self, char [16] sLocalIPMask)"},
	 { (char *)"NET_DVR_PPPCFG_V30_sLocalIPMask_get", _wrap_NET_DVR_PPPCFG_V30_sLocalIPMask_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_sLocalIPMask_get(NET_DVR_PPPCFG_V30 self) -> char [16]"},
	 { (char *)"NET_DVR_PPPCFG_V30_sUsername_set", _wrap_NET_DVR_PPPCFG_V30_sUsername_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_sUsername_set(NET_DVR_PPPCFG_V30 self, BYTE [32] sUsername)"},
	 { (char *)"NET_DVR_PPPCFG_V30_sUsername_get", _wrap_NET_DVR_PPPCFG_V30_sUsername_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_sUsername_get(NET_DVR_PPPCFG_V30 self) -> BYTE [32]"},
	 { (char *)"NET_DVR_PPPCFG_V30_sPassword_set", _wrap_NET_DVR_PPPCFG_V30_sPassword_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_sPassword_set(NET_DVR_PPPCFG_V30 self, BYTE [16] sPassword)"},
	 { (char *)"NET_DVR_PPPCFG_V30_sPassword_get", _wrap_NET_DVR_PPPCFG_V30_sPassword_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_sPassword_get(NET_DVR_PPPCFG_V30 self) -> BYTE [16]"},
	 { (char *)"NET_DVR_PPPCFG_V30_byPPPMode_set", _wrap_NET_DVR_PPPCFG_V30_byPPPMode_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_byPPPMode_set(NET_DVR_PPPCFG_V30 self, BYTE byPPPMode)"},
	 { (char *)"NET_DVR_PPPCFG_V30_byPPPMode_get", _wrap_NET_DVR_PPPCFG_V30_byPPPMode_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_byPPPMode_get(NET_DVR_PPPCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_PPPCFG_V30_byRedial_set", _wrap_NET_DVR_PPPCFG_V30_byRedial_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_byRedial_set(NET_DVR_PPPCFG_V30 self, BYTE byRedial)"},
	 { (char *)"NET_DVR_PPPCFG_V30_byRedial_get", _wrap_NET_DVR_PPPCFG_V30_byRedial_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_byRedial_get(NET_DVR_PPPCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_PPPCFG_V30_byRedialMode_set", _wrap_NET_DVR_PPPCFG_V30_byRedialMode_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_byRedialMode_set(NET_DVR_PPPCFG_V30 self, BYTE byRedialMode)"},
	 { (char *)"NET_DVR_PPPCFG_V30_byRedialMode_get", _wrap_NET_DVR_PPPCFG_V30_byRedialMode_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_byRedialMode_get(NET_DVR_PPPCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_PPPCFG_V30_byDataEncrypt_set", _wrap_NET_DVR_PPPCFG_V30_byDataEncrypt_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_byDataEncrypt_set(NET_DVR_PPPCFG_V30 self, BYTE byDataEncrypt)"},
	 { (char *)"NET_DVR_PPPCFG_V30_byDataEncrypt_get", _wrap_NET_DVR_PPPCFG_V30_byDataEncrypt_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_byDataEncrypt_get(NET_DVR_PPPCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_PPPCFG_V30_dwMTU_set", _wrap_NET_DVR_PPPCFG_V30_dwMTU_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_dwMTU_set(NET_DVR_PPPCFG_V30 self, DWORD dwMTU)"},
	 { (char *)"NET_DVR_PPPCFG_V30_dwMTU_get", _wrap_NET_DVR_PPPCFG_V30_dwMTU_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_dwMTU_get(NET_DVR_PPPCFG_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_PPPCFG_V30_sTelephoneNumber_set", _wrap_NET_DVR_PPPCFG_V30_sTelephoneNumber_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_sTelephoneNumber_set(NET_DVR_PPPCFG_V30 self, char [32] sTelephoneNumber)"},
	 { (char *)"NET_DVR_PPPCFG_V30_sTelephoneNumber_get", _wrap_NET_DVR_PPPCFG_V30_sTelephoneNumber_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_V30_sTelephoneNumber_get(NET_DVR_PPPCFG_V30 self) -> char [32]"},
	 { (char *)"new_NET_DVR_PPPCFG_V30", _wrap_new_NET_DVR_PPPCFG_V30, METH_VARARGS, (char *)"new_NET_DVR_PPPCFG_V30() -> NET_DVR_PPPCFG_V30"},
	 { (char *)"delete_NET_DVR_PPPCFG_V30", _wrap_delete_NET_DVR_PPPCFG_V30, METH_VARARGS, (char *)"delete_NET_DVR_PPPCFG_V30(NET_DVR_PPPCFG_V30 self)"},
	 { (char *)"NET_DVR_PPPCFG_V30_swigregister", NET_DVR_PPPCFG_V30_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_PPPCFG_sRemoteIP_set", _wrap_NET_DVR_PPPCFG_sRemoteIP_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_sRemoteIP_set(NET_DVR_PPPCFG self, char [16] sRemoteIP)"},
	 { (char *)"NET_DVR_PPPCFG_sRemoteIP_get", _wrap_NET_DVR_PPPCFG_sRemoteIP_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_sRemoteIP_get(NET_DVR_PPPCFG self) -> char [16]"},
	 { (char *)"NET_DVR_PPPCFG_sLocalIP_set", _wrap_NET_DVR_PPPCFG_sLocalIP_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_sLocalIP_set(NET_DVR_PPPCFG self, char [16] sLocalIP)"},
	 { (char *)"NET_DVR_PPPCFG_sLocalIP_get", _wrap_NET_DVR_PPPCFG_sLocalIP_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_sLocalIP_get(NET_DVR_PPPCFG self) -> char [16]"},
	 { (char *)"NET_DVR_PPPCFG_sLocalIPMask_set", _wrap_NET_DVR_PPPCFG_sLocalIPMask_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_sLocalIPMask_set(NET_DVR_PPPCFG self, char [16] sLocalIPMask)"},
	 { (char *)"NET_DVR_PPPCFG_sLocalIPMask_get", _wrap_NET_DVR_PPPCFG_sLocalIPMask_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_sLocalIPMask_get(NET_DVR_PPPCFG self) -> char [16]"},
	 { (char *)"NET_DVR_PPPCFG_sUsername_set", _wrap_NET_DVR_PPPCFG_sUsername_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_sUsername_set(NET_DVR_PPPCFG self, BYTE [32] sUsername)"},
	 { (char *)"NET_DVR_PPPCFG_sUsername_get", _wrap_NET_DVR_PPPCFG_sUsername_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_sUsername_get(NET_DVR_PPPCFG self) -> BYTE [32]"},
	 { (char *)"NET_DVR_PPPCFG_sPassword_set", _wrap_NET_DVR_PPPCFG_sPassword_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_sPassword_set(NET_DVR_PPPCFG self, BYTE [16] sPassword)"},
	 { (char *)"NET_DVR_PPPCFG_sPassword_get", _wrap_NET_DVR_PPPCFG_sPassword_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_sPassword_get(NET_DVR_PPPCFG self) -> BYTE [16]"},
	 { (char *)"NET_DVR_PPPCFG_byPPPMode_set", _wrap_NET_DVR_PPPCFG_byPPPMode_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_byPPPMode_set(NET_DVR_PPPCFG self, BYTE byPPPMode)"},
	 { (char *)"NET_DVR_PPPCFG_byPPPMode_get", _wrap_NET_DVR_PPPCFG_byPPPMode_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_byPPPMode_get(NET_DVR_PPPCFG self) -> BYTE"},
	 { (char *)"NET_DVR_PPPCFG_byRedial_set", _wrap_NET_DVR_PPPCFG_byRedial_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_byRedial_set(NET_DVR_PPPCFG self, BYTE byRedial)"},
	 { (char *)"NET_DVR_PPPCFG_byRedial_get", _wrap_NET_DVR_PPPCFG_byRedial_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_byRedial_get(NET_DVR_PPPCFG self) -> BYTE"},
	 { (char *)"NET_DVR_PPPCFG_byRedialMode_set", _wrap_NET_DVR_PPPCFG_byRedialMode_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_byRedialMode_set(NET_DVR_PPPCFG self, BYTE byRedialMode)"},
	 { (char *)"NET_DVR_PPPCFG_byRedialMode_get", _wrap_NET_DVR_PPPCFG_byRedialMode_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_byRedialMode_get(NET_DVR_PPPCFG self) -> BYTE"},
	 { (char *)"NET_DVR_PPPCFG_byDataEncrypt_set", _wrap_NET_DVR_PPPCFG_byDataEncrypt_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_byDataEncrypt_set(NET_DVR_PPPCFG self, BYTE byDataEncrypt)"},
	 { (char *)"NET_DVR_PPPCFG_byDataEncrypt_get", _wrap_NET_DVR_PPPCFG_byDataEncrypt_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_byDataEncrypt_get(NET_DVR_PPPCFG self) -> BYTE"},
	 { (char *)"NET_DVR_PPPCFG_dwMTU_set", _wrap_NET_DVR_PPPCFG_dwMTU_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_dwMTU_set(NET_DVR_PPPCFG self, DWORD dwMTU)"},
	 { (char *)"NET_DVR_PPPCFG_dwMTU_get", _wrap_NET_DVR_PPPCFG_dwMTU_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_dwMTU_get(NET_DVR_PPPCFG self) -> DWORD"},
	 { (char *)"NET_DVR_PPPCFG_sTelephoneNumber_set", _wrap_NET_DVR_PPPCFG_sTelephoneNumber_set, METH_VARARGS, (char *)"NET_DVR_PPPCFG_sTelephoneNumber_set(NET_DVR_PPPCFG self, char [32] sTelephoneNumber)"},
	 { (char *)"NET_DVR_PPPCFG_sTelephoneNumber_get", _wrap_NET_DVR_PPPCFG_sTelephoneNumber_get, METH_VARARGS, (char *)"NET_DVR_PPPCFG_sTelephoneNumber_get(NET_DVR_PPPCFG self) -> char [32]"},
	 { (char *)"new_NET_DVR_PPPCFG", _wrap_new_NET_DVR_PPPCFG, METH_VARARGS, (char *)"new_NET_DVR_PPPCFG() -> NET_DVR_PPPCFG"},
	 { (char *)"delete_NET_DVR_PPPCFG", _wrap_delete_NET_DVR_PPPCFG, METH_VARARGS, (char *)"delete_NET_DVR_PPPCFG(NET_DVR_PPPCFG self)"},
	 { (char *)"NET_DVR_PPPCFG_swigregister", NET_DVR_PPPCFG_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_SINGLE_RS232_dwBaudRate_set", _wrap_NET_DVR_SINGLE_RS232_dwBaudRate_set, METH_VARARGS, (char *)"NET_DVR_SINGLE_RS232_dwBaudRate_set(NET_DVR_SINGLE_RS232 self, DWORD dwBaudRate)"},
	 { (char *)"NET_DVR_SINGLE_RS232_dwBaudRate_get", _wrap_NET_DVR_SINGLE_RS232_dwBaudRate_get, METH_VARARGS, (char *)"NET_DVR_SINGLE_RS232_dwBaudRate_get(NET_DVR_SINGLE_RS232 self) -> DWORD"},
	 { (char *)"NET_DVR_SINGLE_RS232_byDataBit_set", _wrap_NET_DVR_SINGLE_RS232_byDataBit_set, METH_VARARGS, (char *)"NET_DVR_SINGLE_RS232_byDataBit_set(NET_DVR_SINGLE_RS232 self, BYTE byDataBit)"},
	 { (char *)"NET_DVR_SINGLE_RS232_byDataBit_get", _wrap_NET_DVR_SINGLE_RS232_byDataBit_get, METH_VARARGS, (char *)"NET_DVR_SINGLE_RS232_byDataBit_get(NET_DVR_SINGLE_RS232 self) -> BYTE"},
	 { (char *)"NET_DVR_SINGLE_RS232_byStopBit_set", _wrap_NET_DVR_SINGLE_RS232_byStopBit_set, METH_VARARGS, (char *)"NET_DVR_SINGLE_RS232_byStopBit_set(NET_DVR_SINGLE_RS232 self, BYTE byStopBit)"},
	 { (char *)"NET_DVR_SINGLE_RS232_byStopBit_get", _wrap_NET_DVR_SINGLE_RS232_byStopBit_get, METH_VARARGS, (char *)"NET_DVR_SINGLE_RS232_byStopBit_get(NET_DVR_SINGLE_RS232 self) -> BYTE"},
	 { (char *)"NET_DVR_SINGLE_RS232_byParity_set", _wrap_NET_DVR_SINGLE_RS232_byParity_set, METH_VARARGS, (char *)"NET_DVR_SINGLE_RS232_byParity_set(NET_DVR_SINGLE_RS232 self, BYTE byParity)"},
	 { (char *)"NET_DVR_SINGLE_RS232_byParity_get", _wrap_NET_DVR_SINGLE_RS232_byParity_get, METH_VARARGS, (char *)"NET_DVR_SINGLE_RS232_byParity_get(NET_DVR_SINGLE_RS232 self) -> BYTE"},
	 { (char *)"NET_DVR_SINGLE_RS232_byFlowcontrol_set", _wrap_NET_DVR_SINGLE_RS232_byFlowcontrol_set, METH_VARARGS, (char *)"NET_DVR_SINGLE_RS232_byFlowcontrol_set(NET_DVR_SINGLE_RS232 self, BYTE byFlowcontrol)"},
	 { (char *)"NET_DVR_SINGLE_RS232_byFlowcontrol_get", _wrap_NET_DVR_SINGLE_RS232_byFlowcontrol_get, METH_VARARGS, (char *)"NET_DVR_SINGLE_RS232_byFlowcontrol_get(NET_DVR_SINGLE_RS232 self) -> BYTE"},
	 { (char *)"NET_DVR_SINGLE_RS232_dwWorkMode_set", _wrap_NET_DVR_SINGLE_RS232_dwWorkMode_set, METH_VARARGS, (char *)"NET_DVR_SINGLE_RS232_dwWorkMode_set(NET_DVR_SINGLE_RS232 self, DWORD dwWorkMode)"},
	 { (char *)"NET_DVR_SINGLE_RS232_dwWorkMode_get", _wrap_NET_DVR_SINGLE_RS232_dwWorkMode_get, METH_VARARGS, (char *)"NET_DVR_SINGLE_RS232_dwWorkMode_get(NET_DVR_SINGLE_RS232 self) -> DWORD"},
	 { (char *)"new_NET_DVR_SINGLE_RS232", _wrap_new_NET_DVR_SINGLE_RS232, METH_VARARGS, (char *)"new_NET_DVR_SINGLE_RS232() -> NET_DVR_SINGLE_RS232"},
	 { (char *)"delete_NET_DVR_SINGLE_RS232", _wrap_delete_NET_DVR_SINGLE_RS232, METH_VARARGS, (char *)"delete_NET_DVR_SINGLE_RS232(NET_DVR_SINGLE_RS232 self)"},
	 { (char *)"NET_DVR_SINGLE_RS232_swigregister", NET_DVR_SINGLE_RS232_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_USB_RS232_dwBaudRate_set", _wrap_NET_DVR_USB_RS232_dwBaudRate_set, METH_VARARGS, (char *)"NET_DVR_USB_RS232_dwBaudRate_set(NET_DVR_USB_RS232 self, DWORD dwBaudRate)"},
	 { (char *)"NET_DVR_USB_RS232_dwBaudRate_get", _wrap_NET_DVR_USB_RS232_dwBaudRate_get, METH_VARARGS, (char *)"NET_DVR_USB_RS232_dwBaudRate_get(NET_DVR_USB_RS232 self) -> DWORD"},
	 { (char *)"NET_DVR_USB_RS232_byDataBit_set", _wrap_NET_DVR_USB_RS232_byDataBit_set, METH_VARARGS, (char *)"NET_DVR_USB_RS232_byDataBit_set(NET_DVR_USB_RS232 self, BYTE byDataBit)"},
	 { (char *)"NET_DVR_USB_RS232_byDataBit_get", _wrap_NET_DVR_USB_RS232_byDataBit_get, METH_VARARGS, (char *)"NET_DVR_USB_RS232_byDataBit_get(NET_DVR_USB_RS232 self) -> BYTE"},
	 { (char *)"NET_DVR_USB_RS232_byStopBit_set", _wrap_NET_DVR_USB_RS232_byStopBit_set, METH_VARARGS, (char *)"NET_DVR_USB_RS232_byStopBit_set(NET_DVR_USB_RS232 self, BYTE byStopBit)"},
	 { (char *)"NET_DVR_USB_RS232_byStopBit_get", _wrap_NET_DVR_USB_RS232_byStopBit_get, METH_VARARGS, (char *)"NET_DVR_USB_RS232_byStopBit_get(NET_DVR_USB_RS232 self) -> BYTE"},
	 { (char *)"NET_DVR_USB_RS232_byParity_set", _wrap_NET_DVR_USB_RS232_byParity_set, METH_VARARGS, (char *)"NET_DVR_USB_RS232_byParity_set(NET_DVR_USB_RS232 self, BYTE byParity)"},
	 { (char *)"NET_DVR_USB_RS232_byParity_get", _wrap_NET_DVR_USB_RS232_byParity_get, METH_VARARGS, (char *)"NET_DVR_USB_RS232_byParity_get(NET_DVR_USB_RS232 self) -> BYTE"},
	 { (char *)"NET_DVR_USB_RS232_byFlowcontrol_set", _wrap_NET_DVR_USB_RS232_byFlowcontrol_set, METH_VARARGS, (char *)"NET_DVR_USB_RS232_byFlowcontrol_set(NET_DVR_USB_RS232 self, BYTE byFlowcontrol)"},
	 { (char *)"NET_DVR_USB_RS232_byFlowcontrol_get", _wrap_NET_DVR_USB_RS232_byFlowcontrol_get, METH_VARARGS, (char *)"NET_DVR_USB_RS232_byFlowcontrol_get(NET_DVR_USB_RS232 self) -> BYTE"},
	 { (char *)"NET_DVR_USB_RS232_byVirtualSerialPort_set", _wrap_NET_DVR_USB_RS232_byVirtualSerialPort_set, METH_VARARGS, (char *)"NET_DVR_USB_RS232_byVirtualSerialPort_set(NET_DVR_USB_RS232 self, BYTE byVirtualSerialPort)"},
	 { (char *)"NET_DVR_USB_RS232_byVirtualSerialPort_get", _wrap_NET_DVR_USB_RS232_byVirtualSerialPort_get, METH_VARARGS, (char *)"NET_DVR_USB_RS232_byVirtualSerialPort_get(NET_DVR_USB_RS232 self) -> BYTE"},
	 { (char *)"NET_DVR_USB_RS232_byRes_set", _wrap_NET_DVR_USB_RS232_byRes_set, METH_VARARGS, (char *)"NET_DVR_USB_RS232_byRes_set(NET_DVR_USB_RS232 self, BYTE [3] byRes)"},
	 { (char *)"NET_DVR_USB_RS232_byRes_get", _wrap_NET_DVR_USB_RS232_byRes_get, METH_VARARGS, (char *)"NET_DVR_USB_RS232_byRes_get(NET_DVR_USB_RS232 self) -> BYTE [3]"},
	 { (char *)"new_NET_DVR_USB_RS232", _wrap_new_NET_DVR_USB_RS232, METH_VARARGS, (char *)"new_NET_DVR_USB_RS232() -> NET_DVR_USB_RS232"},
	 { (char *)"delete_NET_DVR_USB_RS232", _wrap_delete_NET_DVR_USB_RS232, METH_VARARGS, (char *)"delete_NET_DVR_USB_RS232(NET_DVR_USB_RS232 self)"},
	 { (char *)"NET_DVR_USB_RS232_swigregister", NET_DVR_USB_RS232_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_RS232CFG_V30_dwSize_set", _wrap_NET_DVR_RS232CFG_V30_dwSize_set, METH_VARARGS, (char *)"NET_DVR_RS232CFG_V30_dwSize_set(NET_DVR_RS232CFG_V30 self, DWORD dwSize)"},
	 { (char *)"NET_DVR_RS232CFG_V30_dwSize_get", _wrap_NET_DVR_RS232CFG_V30_dwSize_get, METH_VARARGS, (char *)"NET_DVR_RS232CFG_V30_dwSize_get(NET_DVR_RS232CFG_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_RS232CFG_V30_struRs232_set", _wrap_NET_DVR_RS232CFG_V30_struRs232_set, METH_VARARGS, (char *)"NET_DVR_RS232CFG_V30_struRs232_set(NET_DVR_RS232CFG_V30 self, NET_DVR_SINGLE_RS232 struRs232)"},
	 { (char *)"NET_DVR_RS232CFG_V30_struRs232_get", _wrap_NET_DVR_RS232CFG_V30_struRs232_get, METH_VARARGS, (char *)"NET_DVR_RS232CFG_V30_struRs232_get(NET_DVR_RS232CFG_V30 self) -> NET_DVR_SINGLE_RS232"},
	 { (char *)"NET_DVR_RS232CFG_V30_struPPPConfig_set", _wrap_NET_DVR_RS232CFG_V30_struPPPConfig_set, METH_VARARGS, (char *)"NET_DVR_RS232CFG_V30_struPPPConfig_set(NET_DVR_RS232CFG_V30 self, NET_DVR_PPPCFG_V30 struPPPConfig)"},
	 { (char *)"NET_DVR_RS232CFG_V30_struPPPConfig_get", _wrap_NET_DVR_RS232CFG_V30_struPPPConfig_get, METH_VARARGS, (char *)"NET_DVR_RS232CFG_V30_struPPPConfig_get(NET_DVR_RS232CFG_V30 self) -> NET_DVR_PPPCFG_V30"},
	 { (char *)"new_NET_DVR_RS232CFG_V30", _wrap_new_NET_DVR_RS232CFG_V30, METH_VARARGS, (char *)"new_NET_DVR_RS232CFG_V30() -> NET_DVR_RS232CFG_V30"},
	 { (char *)"delete_NET_DVR_RS232CFG_V30", _wrap_delete_NET_DVR_RS232CFG_V30, METH_VARARGS, (char *)"delete_NET_DVR_RS232CFG_V30(NET_DVR_RS232CFG_V30 self)"},
	 { (char *)"NET_DVR_RS232CFG_V30_swigregister", NET_DVR_RS232CFG_V30_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_RS232CFG_dwSize_set", _wrap_NET_DVR_RS232CFG_dwSize_set, METH_VARARGS, (char *)"NET_DVR_RS232CFG_dwSize_set(NET_DVR_RS232CFG self, DWORD dwSize)"},
	 { (char *)"NET_DVR_RS232CFG_dwSize_get", _wrap_NET_DVR_RS232CFG_dwSize_get, METH_VARARGS, (char *)"NET_DVR_RS232CFG_dwSize_get(NET_DVR_RS232CFG self) -> DWORD"},
	 { (char *)"NET_DVR_RS232CFG_dwBaudRate_set", _wrap_NET_DVR_RS232CFG_dwBaudRate_set, METH_VARARGS, (char *)"NET_DVR_RS232CFG_dwBaudRate_set(NET_DVR_RS232CFG self, DWORD dwBaudRate)"},
	 { (char *)"NET_DVR_RS232CFG_dwBaudRate_get", _wrap_NET_DVR_RS232CFG_dwBaudRate_get, METH_VARARGS, (char *)"NET_DVR_RS232CFG_dwBaudRate_get(NET_DVR_RS232CFG self) -> DWORD"},
	 { (char *)"NET_DVR_RS232CFG_byDataBit_set", _wrap_NET_DVR_RS232CFG_byDataBit_set, METH_VARARGS, (char *)"NET_DVR_RS232CFG_byDataBit_set(NET_DVR_RS232CFG self, BYTE byDataBit)"},
	 { (char *)"NET_DVR_RS232CFG_byDataBit_get", _wrap_NET_DVR_RS232CFG_byDataBit_get, METH_VARARGS, (char *)"NET_DVR_RS232CFG_byDataBit_get(NET_DVR_RS232CFG self) -> BYTE"},
	 { (char *)"NET_DVR_RS232CFG_byStopBit_set", _wrap_NET_DVR_RS232CFG_byStopBit_set, METH_VARARGS, (char *)"NET_DVR_RS232CFG_byStopBit_set(NET_DVR_RS232CFG self, BYTE byStopBit)"},
	 { (char *)"NET_DVR_RS232CFG_byStopBit_get", _wrap_NET_DVR_RS232CFG_byStopBit_get, METH_VARARGS, (char *)"NET_DVR_RS232CFG_byStopBit_get(NET_DVR_RS232CFG self) -> BYTE"},
	 { (char *)"NET_DVR_RS232CFG_byParity_set", _wrap_NET_DVR_RS232CFG_byParity_set, METH_VARARGS, (char *)"NET_DVR_RS232CFG_byParity_set(NET_DVR_RS232CFG self, BYTE byParity)"},
	 { (char *)"NET_DVR_RS232CFG_byParity_get", _wrap_NET_DVR_RS232CFG_byParity_get, METH_VARARGS, (char *)"NET_DVR_RS232CFG_byParity_get(NET_DVR_RS232CFG self) -> BYTE"},
	 { (char *)"NET_DVR_RS232CFG_byFlowcontrol_set", _wrap_NET_DVR_RS232CFG_byFlowcontrol_set, METH_VARARGS, (char *)"NET_DVR_RS232CFG_byFlowcontrol_set(NET_DVR_RS232CFG self, BYTE byFlowcontrol)"},
	 { (char *)"NET_DVR_RS232CFG_byFlowcontrol_get", _wrap_NET_DVR_RS232CFG_byFlowcontrol_get, METH_VARARGS, (char *)"NET_DVR_RS232CFG_byFlowcontrol_get(NET_DVR_RS232CFG self) -> BYTE"},
	 { (char *)"NET_DVR_RS232CFG_dwWorkMode_set", _wrap_NET_DVR_RS232CFG_dwWorkMode_set, METH_VARARGS, (char *)"NET_DVR_RS232CFG_dwWorkMode_set(NET_DVR_RS232CFG self, DWORD dwWorkMode)"},
	 { (char *)"NET_DVR_RS232CFG_dwWorkMode_get", _wrap_NET_DVR_RS232CFG_dwWorkMode_get, METH_VARARGS, (char *)"NET_DVR_RS232CFG_dwWorkMode_get(NET_DVR_RS232CFG self) -> DWORD"},
	 { (char *)"NET_DVR_RS232CFG_struPPPConfig_set", _wrap_NET_DVR_RS232CFG_struPPPConfig_set, METH_VARARGS, (char *)"NET_DVR_RS232CFG_struPPPConfig_set(NET_DVR_RS232CFG self, NET_DVR_PPPCFG struPPPConfig)"},
	 { (char *)"NET_DVR_RS232CFG_struPPPConfig_get", _wrap_NET_DVR_RS232CFG_struPPPConfig_get, METH_VARARGS, (char *)"NET_DVR_RS232CFG_struPPPConfig_get(NET_DVR_RS232CFG self) -> NET_DVR_PPPCFG"},
	 { (char *)"new_NET_DVR_RS232CFG", _wrap_new_NET_DVR_RS232CFG, METH_VARARGS, (char *)"new_NET_DVR_RS232CFG() -> NET_DVR_RS232CFG"},
	 { (char *)"delete_NET_DVR_RS232CFG", _wrap_delete_NET_DVR_RS232CFG, METH_VARARGS, (char *)"delete_NET_DVR_RS232CFG(NET_DVR_RS232CFG self)"},
	 { (char *)"NET_DVR_RS232CFG_swigregister", NET_DVR_RS232CFG_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_PRESETCHAN_INFO_dwEnablePresetChan_set", _wrap_NET_DVR_PRESETCHAN_INFO_dwEnablePresetChan_set, METH_VARARGS, (char *)"NET_DVR_PRESETCHAN_INFO_dwEnablePresetChan_set(NET_DVR_PRESETCHAN_INFO self, DWORD dwEnablePresetChan)"},
	 { (char *)"NET_DVR_PRESETCHAN_INFO_dwEnablePresetChan_get", _wrap_NET_DVR_PRESETCHAN_INFO_dwEnablePresetChan_get, METH_VARARGS, (char *)"NET_DVR_PRESETCHAN_INFO_dwEnablePresetChan_get(NET_DVR_PRESETCHAN_INFO self) -> DWORD"},
	 { (char *)"NET_DVR_PRESETCHAN_INFO_dwPresetPointNo_set", _wrap_NET_DVR_PRESETCHAN_INFO_dwPresetPointNo_set, METH_VARARGS, (char *)"NET_DVR_PRESETCHAN_INFO_dwPresetPointNo_set(NET_DVR_PRESETCHAN_INFO self, DWORD dwPresetPointNo)"},
	 { (char *)"NET_DVR_PRESETCHAN_INFO_dwPresetPointNo_get", _wrap_NET_DVR_PRESETCHAN_INFO_dwPresetPointNo_get, METH_VARARGS, (char *)"NET_DVR_PRESETCHAN_INFO_dwPresetPointNo_get(NET_DVR_PRESETCHAN_INFO self) -> DWORD"},
	 { (char *)"new_NET_DVR_PRESETCHAN_INFO", _wrap_new_NET_DVR_PRESETCHAN_INFO, METH_VARARGS, (char *)"new_NET_DVR_PRESETCHAN_INFO() -> NET_DVR_PRESETCHAN_INFO"},
	 { (char *)"delete_NET_DVR_PRESETCHAN_INFO", _wrap_delete_NET_DVR_PRESETCHAN_INFO, METH_VARARGS, (char *)"delete_NET_DVR_PRESETCHAN_INFO(NET_DVR_PRESETCHAN_INFO self)"},
	 { (char *)"NET_DVR_PRESETCHAN_INFO_swigregister", NET_DVR_PRESETCHAN_INFO_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_CRUISECHAN_INFO_dwEnableCruiseChan_set", _wrap_NET_DVR_CRUISECHAN_INFO_dwEnableCruiseChan_set, METH_VARARGS, (char *)"NET_DVR_CRUISECHAN_INFO_dwEnableCruiseChan_set(NET_DVR_CRUISECHAN_INFO self, DWORD dwEnableCruiseChan)"},
	 { (char *)"NET_DVR_CRUISECHAN_INFO_dwEnableCruiseChan_get", _wrap_NET_DVR_CRUISECHAN_INFO_dwEnableCruiseChan_get, METH_VARARGS, (char *)"NET_DVR_CRUISECHAN_INFO_dwEnableCruiseChan_get(NET_DVR_CRUISECHAN_INFO self) -> DWORD"},
	 { (char *)"NET_DVR_CRUISECHAN_INFO_dwCruiseNo_set", _wrap_NET_DVR_CRUISECHAN_INFO_dwCruiseNo_set, METH_VARARGS, (char *)"NET_DVR_CRUISECHAN_INFO_dwCruiseNo_set(NET_DVR_CRUISECHAN_INFO self, DWORD dwCruiseNo)"},
	 { (char *)"NET_DVR_CRUISECHAN_INFO_dwCruiseNo_get", _wrap_NET_DVR_CRUISECHAN_INFO_dwCruiseNo_get, METH_VARARGS, (char *)"NET_DVR_CRUISECHAN_INFO_dwCruiseNo_get(NET_DVR_CRUISECHAN_INFO self) -> DWORD"},
	 { (char *)"new_NET_DVR_CRUISECHAN_INFO", _wrap_new_NET_DVR_CRUISECHAN_INFO, METH_VARARGS, (char *)"new_NET_DVR_CRUISECHAN_INFO() -> NET_DVR_CRUISECHAN_INFO"},
	 { (char *)"delete_NET_DVR_CRUISECHAN_INFO", _wrap_delete_NET_DVR_CRUISECHAN_INFO, METH_VARARGS, (char *)"delete_NET_DVR_CRUISECHAN_INFO(NET_DVR_CRUISECHAN_INFO self)"},
	 { (char *)"NET_DVR_CRUISECHAN_INFO_swigregister", NET_DVR_CRUISECHAN_INFO_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_PTZTRACKCHAN_INFO_dwEnablePtzTrackChan_set", _wrap_NET_DVR_PTZTRACKCHAN_INFO_dwEnablePtzTrackChan_set, METH_VARARGS, (char *)"NET_DVR_PTZTRACKCHAN_INFO_dwEnablePtzTrackChan_set(NET_DVR_PTZTRACKCHAN_INFO self, DWORD dwEnablePtzTrackChan)"},
	 { (char *)"NET_DVR_PTZTRACKCHAN_INFO_dwEnablePtzTrackChan_get", _wrap_NET_DVR_PTZTRACKCHAN_INFO_dwEnablePtzTrackChan_get, METH_VARARGS, (char *)"NET_DVR_PTZTRACKCHAN_INFO_dwEnablePtzTrackChan_get(NET_DVR_PTZTRACKCHAN_INFO self) -> DWORD"},
	 { (char *)"NET_DVR_PTZTRACKCHAN_INFO_dwPtzTrackNo_set", _wrap_NET_DVR_PTZTRACKCHAN_INFO_dwPtzTrackNo_set, METH_VARARGS, (char *)"NET_DVR_PTZTRACKCHAN_INFO_dwPtzTrackNo_set(NET_DVR_PTZTRACKCHAN_INFO self, DWORD dwPtzTrackNo)"},
	 { (char *)"NET_DVR_PTZTRACKCHAN_INFO_dwPtzTrackNo_get", _wrap_NET_DVR_PTZTRACKCHAN_INFO_dwPtzTrackNo_get, METH_VARARGS, (char *)"NET_DVR_PTZTRACKCHAN_INFO_dwPtzTrackNo_get(NET_DVR_PTZTRACKCHAN_INFO self) -> DWORD"},
	 { (char *)"new_NET_DVR_PTZTRACKCHAN_INFO", _wrap_new_NET_DVR_PTZTRACKCHAN_INFO, METH_VARARGS, (char *)"new_NET_DVR_PTZTRACKCHAN_INFO() -> NET_DVR_PTZTRACKCHAN_INFO"},
	 { (char *)"delete_NET_DVR_PTZTRACKCHAN_INFO", _wrap_delete_NET_DVR_PTZTRACKCHAN_INFO, METH_VARARGS, (char *)"delete_NET_DVR_PTZTRACKCHAN_INFO(NET_DVR_PTZTRACKCHAN_INFO self)"},
	 { (char *)"NET_DVR_PTZTRACKCHAN_INFO_swigregister", NET_DVR_PTZTRACKCHAN_INFO_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_COND_dwSize_set", _wrap_NET_DVR_PTZ_NOTIFICATION_COND_dwSize_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_COND_dwSize_set(NET_DVR_PTZ_NOTIFICATION_COND self, DWORD dwSize)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_COND_dwSize_get", _wrap_NET_DVR_PTZ_NOTIFICATION_COND_dwSize_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_COND_dwSize_get(NET_DVR_PTZ_NOTIFICATION_COND self) -> DWORD"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_COND_byEventType_set", _wrap_NET_DVR_PTZ_NOTIFICATION_COND_byEventType_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_COND_byEventType_set(NET_DVR_PTZ_NOTIFICATION_COND self, WORD byEventType)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_COND_byEventType_get", _wrap_NET_DVR_PTZ_NOTIFICATION_COND_byEventType_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_COND_byEventType_get(NET_DVR_PTZ_NOTIFICATION_COND self) -> WORD"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_COND_byRes_set", _wrap_NET_DVR_PTZ_NOTIFICATION_COND_byRes_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_COND_byRes_set(NET_DVR_PTZ_NOTIFICATION_COND self, BYTE [2] byRes)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_COND_byRes_get", _wrap_NET_DVR_PTZ_NOTIFICATION_COND_byRes_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_COND_byRes_get(NET_DVR_PTZ_NOTIFICATION_COND self) -> BYTE [2]"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_COND_dwChannel_set", _wrap_NET_DVR_PTZ_NOTIFICATION_COND_dwChannel_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_COND_dwChannel_set(NET_DVR_PTZ_NOTIFICATION_COND self, DWORD dwChannel)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_COND_dwChannel_get", _wrap_NET_DVR_PTZ_NOTIFICATION_COND_dwChannel_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_COND_dwChannel_get(NET_DVR_PTZ_NOTIFICATION_COND self) -> DWORD"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_COND_byRes1_set", _wrap_NET_DVR_PTZ_NOTIFICATION_COND_byRes1_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_COND_byRes1_set(NET_DVR_PTZ_NOTIFICATION_COND self, BYTE [128] byRes1)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_COND_byRes1_get", _wrap_NET_DVR_PTZ_NOTIFICATION_COND_byRes1_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_COND_byRes1_get(NET_DVR_PTZ_NOTIFICATION_COND self) -> BYTE [128]"},
	 { (char *)"new_NET_DVR_PTZ_NOTIFICATION_COND", _wrap_new_NET_DVR_PTZ_NOTIFICATION_COND, METH_VARARGS, (char *)"new_NET_DVR_PTZ_NOTIFICATION_COND() -> NET_DVR_PTZ_NOTIFICATION_COND"},
	 { (char *)"delete_NET_DVR_PTZ_NOTIFICATION_COND", _wrap_delete_NET_DVR_PTZ_NOTIFICATION_COND, METH_VARARGS, (char *)"delete_NET_DVR_PTZ_NOTIFICATION_COND(NET_DVR_PTZ_NOTIFICATION_COND self)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_COND_swigregister", NET_DVR_PTZ_NOTIFICATION_COND_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_dwSize_set", _wrap_NET_DVR_PTZ_NOTIFICATION_CFG_dwSize_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_dwSize_set(NET_DVR_PTZ_NOTIFICATION_CFG self, DWORD dwSize)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_dwSize_get", _wrap_NET_DVR_PTZ_NOTIFICATION_CFG_dwSize_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_dwSize_get(NET_DVR_PTZ_NOTIFICATION_CFG self) -> DWORD"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePresetChanNum_set", _wrap_NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePresetChanNum_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePresetChanNum_set(NET_DVR_PTZ_NOTIFICATION_CFG self, DWORD dwEnablePresetChanNum)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePresetChanNum_get", _wrap_NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePresetChanNum_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePresetChanNum_get(NET_DVR_PTZ_NOTIFICATION_CFG self) -> DWORD"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_struPresetChanInfo_set", _wrap_NET_DVR_PTZ_NOTIFICATION_CFG_struPresetChanInfo_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_struPresetChanInfo_set(NET_DVR_PTZ_NOTIFICATION_CFG self, NET_DVR_PRESETCHAN_INFO struPresetChanInfo)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_struPresetChanInfo_get", _wrap_NET_DVR_PTZ_NOTIFICATION_CFG_struPresetChanInfo_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_struPresetChanInfo_get(NET_DVR_PTZ_NOTIFICATION_CFG self) -> NET_DVR_PRESETCHAN_INFO"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_dwEnableCruiseChanNum_set", _wrap_NET_DVR_PTZ_NOTIFICATION_CFG_dwEnableCruiseChanNum_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_dwEnableCruiseChanNum_set(NET_DVR_PTZ_NOTIFICATION_CFG self, DWORD dwEnableCruiseChanNum)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_dwEnableCruiseChanNum_get", _wrap_NET_DVR_PTZ_NOTIFICATION_CFG_dwEnableCruiseChanNum_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_dwEnableCruiseChanNum_get(NET_DVR_PTZ_NOTIFICATION_CFG self) -> DWORD"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_struCruiseChanInfo_set", _wrap_NET_DVR_PTZ_NOTIFICATION_CFG_struCruiseChanInfo_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_struCruiseChanInfo_set(NET_DVR_PTZ_NOTIFICATION_CFG self, NET_DVR_CRUISECHAN_INFO struCruiseChanInfo)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_struCruiseChanInfo_get", _wrap_NET_DVR_PTZ_NOTIFICATION_CFG_struCruiseChanInfo_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_struCruiseChanInfo_get(NET_DVR_PTZ_NOTIFICATION_CFG self) -> NET_DVR_CRUISECHAN_INFO"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePtzTrackChanNum_set", _wrap_NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePtzTrackChanNum_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePtzTrackChanNum_set(NET_DVR_PTZ_NOTIFICATION_CFG self, DWORD dwEnablePtzTrackChanNum)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePtzTrackChanNum_get", _wrap_NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePtzTrackChanNum_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_dwEnablePtzTrackChanNum_get(NET_DVR_PTZ_NOTIFICATION_CFG self) -> DWORD"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_struPtzTrackInfo_set", _wrap_NET_DVR_PTZ_NOTIFICATION_CFG_struPtzTrackInfo_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_struPtzTrackInfo_set(NET_DVR_PTZ_NOTIFICATION_CFG self, NET_DVR_PTZTRACKCHAN_INFO struPtzTrackInfo)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_struPtzTrackInfo_get", _wrap_NET_DVR_PTZ_NOTIFICATION_CFG_struPtzTrackInfo_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_struPtzTrackInfo_get(NET_DVR_PTZ_NOTIFICATION_CFG self) -> NET_DVR_PTZTRACKCHAN_INFO"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_byRes1_set", _wrap_NET_DVR_PTZ_NOTIFICATION_CFG_byRes1_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_byRes1_set(NET_DVR_PTZ_NOTIFICATION_CFG self, BYTE [1024] byRes1)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_byRes1_get", _wrap_NET_DVR_PTZ_NOTIFICATION_CFG_byRes1_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_byRes1_get(NET_DVR_PTZ_NOTIFICATION_CFG self) -> BYTE [1024]"},
	 { (char *)"new_NET_DVR_PTZ_NOTIFICATION_CFG", _wrap_new_NET_DVR_PTZ_NOTIFICATION_CFG, METH_VARARGS, (char *)"new_NET_DVR_PTZ_NOTIFICATION_CFG() -> NET_DVR_PTZ_NOTIFICATION_CFG"},
	 { (char *)"delete_NET_DVR_PTZ_NOTIFICATION_CFG", _wrap_delete_NET_DVR_PTZ_NOTIFICATION_CFG, METH_VARARGS, (char *)"delete_NET_DVR_PTZ_NOTIFICATION_CFG(NET_DVR_PTZ_NOTIFICATION_CFG self)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_CFG_swigregister", NET_DVR_PTZ_NOTIFICATION_CFG_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_dwSize_set", _wrap_NET_DVR_PTZ_NOTIFICATION_dwSize_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_dwSize_set(NET_DVR_PTZ_NOTIFICATION self, DWORD dwSize)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_dwSize_get", _wrap_NET_DVR_PTZ_NOTIFICATION_dwSize_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_dwSize_get(NET_DVR_PTZ_NOTIFICATION self) -> DWORD"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_byEventType_set", _wrap_NET_DVR_PTZ_NOTIFICATION_byEventType_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_byEventType_set(NET_DVR_PTZ_NOTIFICATION self, WORD byEventType)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_byEventType_get", _wrap_NET_DVR_PTZ_NOTIFICATION_byEventType_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_byEventType_get(NET_DVR_PTZ_NOTIFICATION self) -> WORD"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_byRes_set", _wrap_NET_DVR_PTZ_NOTIFICATION_byRes_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_byRes_set(NET_DVR_PTZ_NOTIFICATION self, BYTE [62] byRes)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_byRes_get", _wrap_NET_DVR_PTZ_NOTIFICATION_byRes_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_byRes_get(NET_DVR_PTZ_NOTIFICATION self) -> BYTE [62]"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_dwEnablePresetChanNum_set", _wrap_NET_DVR_PTZ_NOTIFICATION_dwEnablePresetChanNum_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_dwEnablePresetChanNum_set(NET_DVR_PTZ_NOTIFICATION self, DWORD dwEnablePresetChanNum)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_dwEnablePresetChanNum_get", _wrap_NET_DVR_PTZ_NOTIFICATION_dwEnablePresetChanNum_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_dwEnablePresetChanNum_get(NET_DVR_PTZ_NOTIFICATION self) -> DWORD"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_struPresetChanInfo_set", _wrap_NET_DVR_PTZ_NOTIFICATION_struPresetChanInfo_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_struPresetChanInfo_set(NET_DVR_PTZ_NOTIFICATION self, NET_DVR_PRESETCHAN_INFO struPresetChanInfo)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_struPresetChanInfo_get", _wrap_NET_DVR_PTZ_NOTIFICATION_struPresetChanInfo_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_struPresetChanInfo_get(NET_DVR_PTZ_NOTIFICATION self) -> NET_DVR_PRESETCHAN_INFO"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_dwEnableCruiseChanNum_set", _wrap_NET_DVR_PTZ_NOTIFICATION_dwEnableCruiseChanNum_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_dwEnableCruiseChanNum_set(NET_DVR_PTZ_NOTIFICATION self, DWORD dwEnableCruiseChanNum)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_dwEnableCruiseChanNum_get", _wrap_NET_DVR_PTZ_NOTIFICATION_dwEnableCruiseChanNum_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_dwEnableCruiseChanNum_get(NET_DVR_PTZ_NOTIFICATION self) -> DWORD"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_struCruiseChanInfo_set", _wrap_NET_DVR_PTZ_NOTIFICATION_struCruiseChanInfo_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_struCruiseChanInfo_set(NET_DVR_PTZ_NOTIFICATION self, NET_DVR_CRUISECHAN_INFO struCruiseChanInfo)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_struCruiseChanInfo_get", _wrap_NET_DVR_PTZ_NOTIFICATION_struCruiseChanInfo_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_struCruiseChanInfo_get(NET_DVR_PTZ_NOTIFICATION self) -> NET_DVR_CRUISECHAN_INFO"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_dwEnablePtzTrackChanNum_set", _wrap_NET_DVR_PTZ_NOTIFICATION_dwEnablePtzTrackChanNum_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_dwEnablePtzTrackChanNum_set(NET_DVR_PTZ_NOTIFICATION self, DWORD dwEnablePtzTrackChanNum)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_dwEnablePtzTrackChanNum_get", _wrap_NET_DVR_PTZ_NOTIFICATION_dwEnablePtzTrackChanNum_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_dwEnablePtzTrackChanNum_get(NET_DVR_PTZ_NOTIFICATION self) -> DWORD"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_struPtzTrackInfo_set", _wrap_NET_DVR_PTZ_NOTIFICATION_struPtzTrackInfo_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_struPtzTrackInfo_set(NET_DVR_PTZ_NOTIFICATION self, NET_DVR_PTZTRACKCHAN_INFO struPtzTrackInfo)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_struPtzTrackInfo_get", _wrap_NET_DVR_PTZ_NOTIFICATION_struPtzTrackInfo_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_struPtzTrackInfo_get(NET_DVR_PTZ_NOTIFICATION self) -> NET_DVR_PTZTRACKCHAN_INFO"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_byRes1_set", _wrap_NET_DVR_PTZ_NOTIFICATION_byRes1_set, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_byRes1_set(NET_DVR_PTZ_NOTIFICATION self, BYTE [1024] byRes1)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_byRes1_get", _wrap_NET_DVR_PTZ_NOTIFICATION_byRes1_get, METH_VARARGS, (char *)"NET_DVR_PTZ_NOTIFICATION_byRes1_get(NET_DVR_PTZ_NOTIFICATION self) -> BYTE [1024]"},
	 { (char *)"new_NET_DVR_PTZ_NOTIFICATION", _wrap_new_NET_DVR_PTZ_NOTIFICATION, METH_VARARGS, (char *)"new_NET_DVR_PTZ_NOTIFICATION() -> NET_DVR_PTZ_NOTIFICATION"},
	 { (char *)"delete_NET_DVR_PTZ_NOTIFICATION", _wrap_delete_NET_DVR_PTZ_NOTIFICATION, METH_VARARGS, (char *)"delete_NET_DVR_PTZ_NOTIFICATION(NET_DVR_PTZ_NOTIFICATION self)"},
	 { (char *)"NET_DVR_PTZ_NOTIFICATION_swigregister", NET_DVR_PTZ_NOTIFICATION_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwSize_set", _wrap_NET_DVR_ALARMINCFG_V40_dwSize_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwSize_set(NET_DVR_ALARMINCFG_V40 self, DWORD dwSize)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwSize_get", _wrap_NET_DVR_ALARMINCFG_V40_dwSize_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwSize_get(NET_DVR_ALARMINCFG_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_sAlarmInName_set", _wrap_NET_DVR_ALARMINCFG_V40_sAlarmInName_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_sAlarmInName_set(NET_DVR_ALARMINCFG_V40 self, BYTE [32] sAlarmInName)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_sAlarmInName_get", _wrap_NET_DVR_ALARMINCFG_V40_sAlarmInName_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_sAlarmInName_get(NET_DVR_ALARMINCFG_V40 self) -> BYTE [32]"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_byAlarmType_set", _wrap_NET_DVR_ALARMINCFG_V40_byAlarmType_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_byAlarmType_set(NET_DVR_ALARMINCFG_V40 self, BYTE byAlarmType)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_byAlarmType_get", _wrap_NET_DVR_ALARMINCFG_V40_byAlarmType_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_byAlarmType_get(NET_DVR_ALARMINCFG_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_byAlarmInHandle_set", _wrap_NET_DVR_ALARMINCFG_V40_byAlarmInHandle_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_byAlarmInHandle_set(NET_DVR_ALARMINCFG_V40 self, BYTE byAlarmInHandle)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_byAlarmInHandle_get", _wrap_NET_DVR_ALARMINCFG_V40_byAlarmInHandle_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_byAlarmInHandle_get(NET_DVR_ALARMINCFG_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_byChannel_set", _wrap_NET_DVR_ALARMINCFG_V40_byChannel_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_byChannel_set(NET_DVR_ALARMINCFG_V40 self, BYTE byChannel)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_byChannel_get", _wrap_NET_DVR_ALARMINCFG_V40_byChannel_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_byChannel_get(NET_DVR_ALARMINCFG_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_byInputType_set", _wrap_NET_DVR_ALARMINCFG_V40_byInputType_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_byInputType_set(NET_DVR_ALARMINCFG_V40 self, BYTE byInputType)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_byInputType_get", _wrap_NET_DVR_ALARMINCFG_V40_byInputType_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_byInputType_get(NET_DVR_ALARMINCFG_V40 self) -> BYTE"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwHandleType_set", _wrap_NET_DVR_ALARMINCFG_V40_dwHandleType_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwHandleType_set(NET_DVR_ALARMINCFG_V40 self, DWORD dwHandleType)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwHandleType_get", _wrap_NET_DVR_ALARMINCFG_V40_dwHandleType_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwHandleType_get(NET_DVR_ALARMINCFG_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwMaxRelAlarmOutChanNum_set", _wrap_NET_DVR_ALARMINCFG_V40_dwMaxRelAlarmOutChanNum_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwMaxRelAlarmOutChanNum_set(NET_DVR_ALARMINCFG_V40 self, DWORD dwMaxRelAlarmOutChanNum)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwMaxRelAlarmOutChanNum_get", _wrap_NET_DVR_ALARMINCFG_V40_dwMaxRelAlarmOutChanNum_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwMaxRelAlarmOutChanNum_get(NET_DVR_ALARMINCFG_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwRelAlarmOutChanNum_set", _wrap_NET_DVR_ALARMINCFG_V40_dwRelAlarmOutChanNum_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwRelAlarmOutChanNum_set(NET_DVR_ALARMINCFG_V40 self, DWORD dwRelAlarmOutChanNum)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwRelAlarmOutChanNum_get", _wrap_NET_DVR_ALARMINCFG_V40_dwRelAlarmOutChanNum_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwRelAlarmOutChanNum_get(NET_DVR_ALARMINCFG_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwRelAlarmOut_set", _wrap_NET_DVR_ALARMINCFG_V40_dwRelAlarmOut_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwRelAlarmOut_set(NET_DVR_ALARMINCFG_V40 self, DWORD [(4096+32)] dwRelAlarmOut)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwRelAlarmOut_get", _wrap_NET_DVR_ALARMINCFG_V40_dwRelAlarmOut_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwRelAlarmOut_get(NET_DVR_ALARMINCFG_V40 self) -> DWORD [(4096+32)]"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_struAlarmTime_set", _wrap_NET_DVR_ALARMINCFG_V40_struAlarmTime_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_struAlarmTime_set(NET_DVR_ALARMINCFG_V40 self, NET_DVR_SCHEDTIME [7][8] struAlarmTime)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_struAlarmTime_get", _wrap_NET_DVR_ALARMINCFG_V40_struAlarmTime_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_struAlarmTime_get(NET_DVR_ALARMINCFG_V40 self) -> NET_DVR_SCHEDTIME [7][8]"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwMaxRecordChanNum_set", _wrap_NET_DVR_ALARMINCFG_V40_dwMaxRecordChanNum_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwMaxRecordChanNum_set(NET_DVR_ALARMINCFG_V40 self, DWORD dwMaxRecordChanNum)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwMaxRecordChanNum_get", _wrap_NET_DVR_ALARMINCFG_V40_dwMaxRecordChanNum_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwMaxRecordChanNum_get(NET_DVR_ALARMINCFG_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwCurRecordChanNum_set", _wrap_NET_DVR_ALARMINCFG_V40_dwCurRecordChanNum_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwCurRecordChanNum_set(NET_DVR_ALARMINCFG_V40 self, DWORD dwCurRecordChanNum)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwCurRecordChanNum_get", _wrap_NET_DVR_ALARMINCFG_V40_dwCurRecordChanNum_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwCurRecordChanNum_get(NET_DVR_ALARMINCFG_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwRelRecordChan_set", _wrap_NET_DVR_ALARMINCFG_V40_dwRelRecordChan_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwRelRecordChan_set(NET_DVR_ALARMINCFG_V40 self, DWORD [512] dwRelRecordChan)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwRelRecordChan_get", _wrap_NET_DVR_ALARMINCFG_V40_dwRelRecordChan_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwRelRecordChan_get(NET_DVR_ALARMINCFG_V40 self) -> DWORD [512]"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwMaxEnablePtzCtrlNun_set", _wrap_NET_DVR_ALARMINCFG_V40_dwMaxEnablePtzCtrlNun_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwMaxEnablePtzCtrlNun_set(NET_DVR_ALARMINCFG_V40 self, DWORD dwMaxEnablePtzCtrlNun)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwMaxEnablePtzCtrlNun_get", _wrap_NET_DVR_ALARMINCFG_V40_dwMaxEnablePtzCtrlNun_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwMaxEnablePtzCtrlNun_get(NET_DVR_ALARMINCFG_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwEnablePresetChanNum_set", _wrap_NET_DVR_ALARMINCFG_V40_dwEnablePresetChanNum_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwEnablePresetChanNum_set(NET_DVR_ALARMINCFG_V40 self, DWORD dwEnablePresetChanNum)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwEnablePresetChanNum_get", _wrap_NET_DVR_ALARMINCFG_V40_dwEnablePresetChanNum_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwEnablePresetChanNum_get(NET_DVR_ALARMINCFG_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_struPresetChanInfo_set", _wrap_NET_DVR_ALARMINCFG_V40_struPresetChanInfo_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_struPresetChanInfo_set(NET_DVR_ALARMINCFG_V40 self, NET_DVR_PRESETCHAN_INFO struPresetChanInfo)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_struPresetChanInfo_get", _wrap_NET_DVR_ALARMINCFG_V40_struPresetChanInfo_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_struPresetChanInfo_get(NET_DVR_ALARMINCFG_V40 self) -> NET_DVR_PRESETCHAN_INFO"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_byPresetDurationTime_set", _wrap_NET_DVR_ALARMINCFG_V40_byPresetDurationTime_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_byPresetDurationTime_set(NET_DVR_ALARMINCFG_V40 self, BYTE [512] byPresetDurationTime)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_byPresetDurationTime_get", _wrap_NET_DVR_ALARMINCFG_V40_byPresetDurationTime_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_byPresetDurationTime_get(NET_DVR_ALARMINCFG_V40 self) -> BYTE [512]"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_byRes2_set", _wrap_NET_DVR_ALARMINCFG_V40_byRes2_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_byRes2_set(NET_DVR_ALARMINCFG_V40 self, BYTE [4] byRes2)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_byRes2_get", _wrap_NET_DVR_ALARMINCFG_V40_byRes2_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_byRes2_get(NET_DVR_ALARMINCFG_V40 self) -> BYTE [4]"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwEnableCruiseChanNum_set", _wrap_NET_DVR_ALARMINCFG_V40_dwEnableCruiseChanNum_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwEnableCruiseChanNum_set(NET_DVR_ALARMINCFG_V40 self, DWORD dwEnableCruiseChanNum)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwEnableCruiseChanNum_get", _wrap_NET_DVR_ALARMINCFG_V40_dwEnableCruiseChanNum_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwEnableCruiseChanNum_get(NET_DVR_ALARMINCFG_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_struCruiseChanInfo_set", _wrap_NET_DVR_ALARMINCFG_V40_struCruiseChanInfo_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_struCruiseChanInfo_set(NET_DVR_ALARMINCFG_V40 self, NET_DVR_CRUISECHAN_INFO struCruiseChanInfo)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_struCruiseChanInfo_get", _wrap_NET_DVR_ALARMINCFG_V40_struCruiseChanInfo_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_struCruiseChanInfo_get(NET_DVR_ALARMINCFG_V40 self) -> NET_DVR_CRUISECHAN_INFO"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwEnablePtzTrackChanNum_set", _wrap_NET_DVR_ALARMINCFG_V40_dwEnablePtzTrackChanNum_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwEnablePtzTrackChanNum_set(NET_DVR_ALARMINCFG_V40 self, DWORD dwEnablePtzTrackChanNum)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_dwEnablePtzTrackChanNum_get", _wrap_NET_DVR_ALARMINCFG_V40_dwEnablePtzTrackChanNum_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_dwEnablePtzTrackChanNum_get(NET_DVR_ALARMINCFG_V40 self) -> DWORD"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_struPtzTrackInfo_set", _wrap_NET_DVR_ALARMINCFG_V40_struPtzTrackInfo_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_struPtzTrackInfo_set(NET_DVR_ALARMINCFG_V40 self, NET_DVR_PTZTRACKCHAN_INFO struPtzTrackInfo)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_struPtzTrackInfo_get", _wrap_NET_DVR_ALARMINCFG_V40_struPtzTrackInfo_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_struPtzTrackInfo_get(NET_DVR_ALARMINCFG_V40 self) -> NET_DVR_PTZTRACKCHAN_INFO"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_wEventType_set", _wrap_NET_DVR_ALARMINCFG_V40_wEventType_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_wEventType_set(NET_DVR_ALARMINCFG_V40 self, WORD [64] wEventType)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_wEventType_get", _wrap_NET_DVR_ALARMINCFG_V40_wEventType_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_wEventType_get(NET_DVR_ALARMINCFG_V40 self) -> WORD [64]"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_byRes_set", _wrap_NET_DVR_ALARMINCFG_V40_byRes_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_byRes_set(NET_DVR_ALARMINCFG_V40 self, BYTE [128] byRes)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_byRes_get", _wrap_NET_DVR_ALARMINCFG_V40_byRes_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V40_byRes_get(NET_DVR_ALARMINCFG_V40 self) -> BYTE [128]"},
	 { (char *)"new_NET_DVR_ALARMINCFG_V40", _wrap_new_NET_DVR_ALARMINCFG_V40, METH_VARARGS, (char *)"new_NET_DVR_ALARMINCFG_V40() -> NET_DVR_ALARMINCFG_V40"},
	 { (char *)"delete_NET_DVR_ALARMINCFG_V40", _wrap_delete_NET_DVR_ALARMINCFG_V40, METH_VARARGS, (char *)"delete_NET_DVR_ALARMINCFG_V40(NET_DVR_ALARMINCFG_V40 self)"},
	 { (char *)"NET_DVR_ALARMINCFG_V40_swigregister", NET_DVR_ALARMINCFG_V40_swigregister, METH_VARARGS, NULL},
	 { (char *)"NET_DVR_ALARMINCFG_V30_dwSize_set", _wrap_NET_DVR_ALARMINCFG_V30_dwSize_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_dwSize_set(NET_DVR_ALARMINCFG_V30 self, DWORD dwSize)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_dwSize_get", _wrap_NET_DVR_ALARMINCFG_V30_dwSize_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_dwSize_get(NET_DVR_ALARMINCFG_V30 self) -> DWORD"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_sAlarmInName_set", _wrap_NET_DVR_ALARMINCFG_V30_sAlarmInName_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_sAlarmInName_set(NET_DVR_ALARMINCFG_V30 self, BYTE [32] sAlarmInName)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_sAlarmInName_get", _wrap_NET_DVR_ALARMINCFG_V30_sAlarmInName_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_sAlarmInName_get(NET_DVR_ALARMINCFG_V30 self) -> BYTE [32]"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byAlarmType_set", _wrap_NET_DVR_ALARMINCFG_V30_byAlarmType_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byAlarmType_set(NET_DVR_ALARMINCFG_V30 self, BYTE byAlarmType)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byAlarmType_get", _wrap_NET_DVR_ALARMINCFG_V30_byAlarmType_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byAlarmType_get(NET_DVR_ALARMINCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byAlarmInHandle_set", _wrap_NET_DVR_ALARMINCFG_V30_byAlarmInHandle_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byAlarmInHandle_set(NET_DVR_ALARMINCFG_V30 self, BYTE byAlarmInHandle)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byAlarmInHandle_get", _wrap_NET_DVR_ALARMINCFG_V30_byAlarmInHandle_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byAlarmInHandle_get(NET_DVR_ALARMINCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byChannel_set", _wrap_NET_DVR_ALARMINCFG_V30_byChannel_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byChannel_set(NET_DVR_ALARMINCFG_V30 self, BYTE byChannel)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byChannel_get", _wrap_NET_DVR_ALARMINCFG_V30_byChannel_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byChannel_get(NET_DVR_ALARMINCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byInputType_set", _wrap_NET_DVR_ALARMINCFG_V30_byInputType_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byInputType_set(NET_DVR_ALARMINCFG_V30 self, BYTE byInputType)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byInputType_get", _wrap_NET_DVR_ALARMINCFG_V30_byInputType_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byInputType_get(NET_DVR_ALARMINCFG_V30 self) -> BYTE"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_struAlarmHandleType_set", _wrap_NET_DVR_ALARMINCFG_V30_struAlarmHandleType_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_struAlarmHandleType_set(NET_DVR_ALARMINCFG_V30 self, NET_DVR_HANDLEEXCEPTION_V30 struAlarmHandleType)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_struAlarmHandleType_get", _wrap_NET_DVR_ALARMINCFG_V30_struAlarmHandleType_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_struAlarmHandleType_get(NET_DVR_ALARMINCFG_V30 self) -> NET_DVR_HANDLEEXCEPTION_V30"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_struAlarmTime_set", _wrap_NET_DVR_ALARMINCFG_V30_struAlarmTime_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_struAlarmTime_set(NET_DVR_ALARMINCFG_V30 self, NET_DVR_SCHEDTIME [7][8] struAlarmTime)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_struAlarmTime_get", _wrap_NET_DVR_ALARMINCFG_V30_struAlarmTime_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_struAlarmTime_get(NET_DVR_ALARMINCFG_V30 self) -> NET_DVR_SCHEDTIME [7][8]"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byRelRecordChan_set", _wrap_NET_DVR_ALARMINCFG_V30_byRelRecordChan_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byRelRecordChan_set(NET_DVR_ALARMINCFG_V30 self, BYTE [(32+32)] byRelRecordChan)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byRelRecordChan_get", _wrap_NET_DVR_ALARMINCFG_V30_byRelRecordChan_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byRelRecordChan_get(NET_DVR_ALARMINCFG_V30 self) -> BYTE [(32+32)]"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byEnablePreset_set", _wrap_NET_DVR_ALARMINCFG_V30_byEnablePreset_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byEnablePreset_set(NET_DVR_ALARMINCFG_V30 self, BYTE [(32+32)] byEnablePreset)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byEnablePreset_get", _wrap_NET_DVR_ALARMINCFG_V30_byEnablePreset_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byEnablePreset_get(NET_DVR_ALARMINCFG_V30 self) -> BYTE [(32+32)]"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byPresetNo_set", _wrap_NET_DVR_ALARMINCFG_V30_byPresetNo_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byPresetNo_set(NET_DVR_ALARMINCFG_V30 self, BYTE [(32+32)] byPresetNo)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byPresetNo_get", _wrap_NET_DVR_ALARMINCFG_V30_byPresetNo_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byPresetNo_get(NET_DVR_ALARMINCFG_V30 self) -> BYTE [(32+32)]"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byRes2_set", _wrap_NET_DVR_ALARMINCFG_V30_byRes2_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byRes2_set(NET_DVR_ALARMINCFG_V30 self, BYTE [192] byRes2)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byRes2_get", _wrap_NET_DVR_ALARMINCFG_V30_byRes2_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byRes2_get(NET_DVR_ALARMINCFG_V30 self) -> BYTE [192]"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byEnableCruise_set", _wrap_NET_DVR_ALARMINCFG_V30_byEnableCruise_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byEnableCruise_set(NET_DVR_ALARMINCFG_V30 self, BYTE [(32+32)] byEnableCruise)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byEnableCruise_get", _wrap_NET_DVR_ALARMINCFG_V30_byEnableCruise_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byEnableCruise_get(NET_DVR_ALARMINCFG_V30 self) -> BYTE [(32+32)]"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byCruiseNo_set", _wrap_NET_DVR_ALARMINCFG_V30_byCruiseNo_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byCruiseNo_set(NET_DVR_ALARMINCFG_V30 self, BYTE [(32+32)] byCruiseNo)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byCruiseNo_get", _wrap_NET_DVR_ALARMINCFG_V30_byCruiseNo_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byCruiseNo_get(NET_DVR_ALARMINCFG_V30 self) -> BYTE [(32+32)]"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byEnablePtzTrack_set", _wrap_NET_DVR_ALARMINCFG_V30_byEnablePtzTrack_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byEnablePtzTrack_set(NET_DVR_ALARMINCFG_V30 self, BYTE [(32+32)] byEnablePtzTrack)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byEnablePtzTrack_get", _wrap_NET_DVR_ALARMINCFG_V30_byEnablePtzTrack_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byEnablePtzTrack_get(NET_DVR_ALARMINCFG_V30 self) -> BYTE [(32+32)]"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byPTZTrack_set", _wrap_NET_DVR_ALARMINCFG_V30_byPTZTrack_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byPTZTrack_set(NET_DVR_ALARMINCFG_V30 self, BYTE [(32+32)] byPTZTrack)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byPTZTrack_get", _wrap_NET_DVR_ALARMINCFG_V30_byPTZTrack_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byPTZTrack_get(NET_DVR_ALARMINCFG_V30 self) -> BYTE [(32+32)]"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byRes3_set", _wrap_NET_DVR_ALARMINCFG_V30_byRes3_set, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byRes3_set(NET_DVR_ALARMINCFG_V30 self, BYTE [16] byRes3)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_byRes3_get", _wrap_NET_DVR_ALARMINCFG_V30_byRes3_get, METH_VARARGS, (char *)"NET_DVR_ALARMINCFG_V30_byRes3_get(NET_DVR_ALARMINCFG_V30 self) -> BYTE [16]"},
	 { (char *)"new_NET_DVR_ALARMINCFG_V30", _wrap_new_NET_DVR_ALARMINCFG_V30, METH_VARARGS, (char *)"new_NET_DVR_ALARMINCFG_V30() -> NET_DVR_ALARMINCFG_V30"},
	 { (char *)"delete_NET_DVR_ALARMINCFG_V30", _wrap_delete_NET_DVR_ALARMINCFG_V30, METH_VARARGS, (char *)"delete_NET_DVR_ALARMINCFG_V30(NET_DVR_ALARMINCFG_V30 self)"},
	 { (char *)"NET_DVR_ALARMINCFG_V30_swigregister", NET_DVR_ALARMINCFG_V30_swigregister, METH_VARARGS, NULL},
	 { (char *)"test_NET_DVR_ALARMINCFG_V30", _wrap_test_NET_DVR_ALARMINCFG_V30, METH_VARARGS, (char *)"test_NET_DVR_ALARMINCFG_V30(NET_DVR_ALARMINCFG_V30 a)"},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_BYTE = {"_p_BYTE", "BYTE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DWORD = {"_p_DWORD", "DWORD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_ALARMINCFG_V30 = {"_p_NET_DVR_ALARMINCFG_V30", "NET_DVR_ALARMINCFG_V30 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_COLOR = {"_p_NET_DVR_COLOR", "NET_DVR_COLOR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_COMPRESSIONCFG = {"_p_NET_DVR_COMPRESSIONCFG", "NET_DVR_COMPRESSIONCFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_COMPRESSIONCFG_EX = {"_p_NET_DVR_COMPRESSIONCFG_EX", "NET_DVR_COMPRESSIONCFG_EX *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_COMPRESSIONCFG_V30 = {"_p_NET_DVR_COMPRESSIONCFG_V30", "NET_DVR_COMPRESSIONCFG_V30 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_COMPRESSION_INFO = {"_p_NET_DVR_COMPRESSION_INFO", "NET_DVR_COMPRESSION_INFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_COMPRESSION_INFO_EX = {"_p_NET_DVR_COMPRESSION_INFO_EX", "NET_DVR_COMPRESSION_INFO_EX *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_COMPRESSION_INFO_V30 = {"_p_NET_DVR_COMPRESSION_INFO_V30", "NET_DVR_COMPRESSION_INFO_V30 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_CRUISECHAN_INFO = {"_p_NET_DVR_CRUISECHAN_INFO", "NET_DVR_CRUISECHAN_INFO *|LPNET_DVR_CRUISECHAN_INFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_DECODERCFG = {"_p_NET_DVR_DECODERCFG", "NET_DVR_DECODERCFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_DECODERCFG_V30 = {"_p_NET_DVR_DECODERCFG_V30", "NET_DVR_DECODERCFG_V30 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_DEVICECFG = {"_p_NET_DVR_DEVICECFG", "NET_DVR_DEVICECFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_ETHERNET = {"_p_NET_DVR_ETHERNET", "NET_DVR_ETHERNET *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_ETHERNET_MULTI = {"_p_NET_DVR_ETHERNET_MULTI", "NET_DVR_ETHERNET_MULTI *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_ETHERNET_V30 = {"_p_NET_DVR_ETHERNET_V30", "NET_DVR_ETHERNET_V30 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_HANDLEEXCEPTION = {"_p_NET_DVR_HANDLEEXCEPTION", "NET_DVR_HANDLEEXCEPTION *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_HANDLEEXCEPTION_V30 = {"_p_NET_DVR_HANDLEEXCEPTION_V30", "NET_DVR_HANDLEEXCEPTION_V30 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_HIDEALARM = {"_p_NET_DVR_HIDEALARM", "NET_DVR_HIDEALARM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_HIDEALARM_V30 = {"_p_NET_DVR_HIDEALARM_V30", "NET_DVR_HIDEALARM_V30 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_IPADDR = {"_p_NET_DVR_IPADDR", "NET_DVR_IPADDR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_MOTION = {"_p_NET_DVR_MOTION", "NET_DVR_MOTION *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_MOTION_V30 = {"_p_NET_DVR_MOTION_V30", "NET_DVR_MOTION_V30 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_NETCFG = {"_p_NET_DVR_NETCFG", "NET_DVR_NETCFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_NETCFG_MULTI = {"_p_NET_DVR_NETCFG_MULTI", "NET_DVR_NETCFG_MULTI *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_NETCFG_V30 = {"_p_NET_DVR_NETCFG_V30", "NET_DVR_NETCFG_V30 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_PICCFG = {"_p_NET_DVR_PICCFG", "NET_DVR_PICCFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_PICCFG_EX = {"_p_NET_DVR_PICCFG_EX", "NET_DVR_PICCFG_EX *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_PICCFG_V30 = {"_p_NET_DVR_PICCFG_V30", "NET_DVR_PICCFG_V30 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_PPPCFG = {"_p_NET_DVR_PPPCFG", "NET_DVR_PPPCFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_PPPCFG_V30 = {"_p_NET_DVR_PPPCFG_V30", "NET_DVR_PPPCFG_V30 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_PPPOECFG = {"_p_NET_DVR_PPPOECFG", "NET_DVR_PPPOECFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_PRESETCHAN_INFO = {"_p_NET_DVR_PRESETCHAN_INFO", "NET_DVR_PRESETCHAN_INFO *|LPNET_DVR_PRESETCHAN_INFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_PTZCFG = {"_p_NET_DVR_PTZCFG", "NET_DVR_PTZCFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_PTZTRACKCHAN_INFO = {"_p_NET_DVR_PTZTRACKCHAN_INFO", "NET_DVR_PTZTRACKCHAN_INFO *|LPNET_DVR_PTZTRACKCHAN_INFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_PTZ_PROTOCOL = {"_p_NET_DVR_PTZ_PROTOCOL", "NET_DVR_PTZ_PROTOCOL *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_RECORD = {"_p_NET_DVR_RECORD", "NET_DVR_RECORD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_RECORDCHAN = {"_p_NET_DVR_RECORDCHAN", "NET_DVR_RECORDCHAN *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_RECORDDAY = {"_p_NET_DVR_RECORDDAY", "NET_DVR_RECORDDAY *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_RECORDDAY_V40 = {"_p_NET_DVR_RECORDDAY_V40", "NET_DVR_RECORDDAY_V40 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_RECORDSCHED = {"_p_NET_DVR_RECORDSCHED", "NET_DVR_RECORDSCHED *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_RECORDSCHED_V40 = {"_p_NET_DVR_RECORDSCHED_V40", "NET_DVR_RECORDSCHED_V40 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_RECORD_V30 = {"_p_NET_DVR_RECORD_V30", "NET_DVR_RECORD_V30 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_RECORD_V40 = {"_p_NET_DVR_RECORD_V40", "NET_DVR_RECORD_V40 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_RGB_COLOR = {"_p_NET_DVR_RGB_COLOR", "NET_DVR_RGB_COLOR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_RS232CFG = {"_p_NET_DVR_RS232CFG", "NET_DVR_RS232CFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_RS232CFG_V30 = {"_p_NET_DVR_RS232CFG_V30", "NET_DVR_RS232CFG_V30 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_SCHEDTIME = {"_p_NET_DVR_SCHEDTIME", "NET_DVR_SCHEDTIME *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_SHELTER = {"_p_NET_DVR_SHELTER", "NET_DVR_SHELTER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_SINGLE_RS232 = {"_p_NET_DVR_SINGLE_RS232", "NET_DVR_SINGLE_RS232 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_TIME = {"_p_NET_DVR_TIME", "NET_DVR_TIME *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_VILOST = {"_p_NET_DVR_VILOST", "NET_DVR_VILOST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET_DVR_VILOST_V30 = {"_p_NET_DVR_VILOST_V30", "NET_DVR_VILOST_V30 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WORD = {"_p_WORD", "WORD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__BITRATE_ENCODE_INDEX_ = {"_p__BITRATE_ENCODE_INDEX_", "BITRATE_ENCODE_INDEX *|enum _BITRATE_ENCODE_INDEX_ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p___PLAYRECT = {"_p___PLAYRECT", "__PLAYRECT *|PLAYRECT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_22__BYTE = {"_p_a_22__BYTE", "BYTE (*)[22]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_4__NET_DVR_RECORDSCHED = {"_p_a_4__NET_DVR_RECORDSCHED", "NET_DVR_RECORDSCHED (*)[4]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_4__NET_DVR_SCHEDTIME = {"_p_a_4__NET_DVR_SCHEDTIME", "NET_DVR_SCHEDTIME (*)[4]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_8__NET_DVR_RECORDSCHED = {"_p_a_8__NET_DVR_RECORDSCHED", "NET_DVR_RECORDSCHED (*)[8]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_8__NET_DVR_RECORDSCHED_V40 = {"_p_a_8__NET_DVR_RECORDSCHED_V40", "NET_DVR_RECORDSCHED_V40 (*)[8]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_8__NET_DVR_SCHEDTIME = {"_p_a_8__NET_DVR_SCHEDTIME", "NET_DVR_SCHEDTIME (*)[8]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_96__BYTE = {"_p_a_96__BYTE", "BYTE (*)[96]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagALARMHOST_MAJOR_TYPE = {"_p_tagALARMHOST_MAJOR_TYPE", "enum tagALARMHOST_MAJOR_TYPE *|ALARMHOST_MAJOR_TYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagALARMHOST_MINOR_TYPE = {"_p_tagALARMHOST_MINOR_TYPE", "enum tagALARMHOST_MINOR_TYPE *|ALARMHOST_MINOR_TYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagCharEncodeType = {"_p_tagCharEncodeType", "enum tagCharEncodeType *|CHAR_ENCODE_TYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_ADDRESS = {"_p_tagNET_DVR_ADDRESS", "tagNET_DVR_ADDRESS *|NET_DVR_ADDRESS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_ALARMINCFG_V40 = {"_p_tagNET_DVR_ALARMINCFG_V40", "tagNET_DVR_ALARMINCFG_V40 *|NET_DVR_ALARMINCFG_V40 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_CALIBRATE_TIME = {"_p_tagNET_DVR_CALIBRATE_TIME", "tagNET_DVR_CALIBRATE_TIME *|NET_DVR_CALIBRATE_TIME *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_DECODERCFG_V40 = {"_p_tagNET_DVR_DECODERCFG_V40", "tagNET_DVR_DECODERCFG_V40 *|NET_DVR_DECODERCFG_V40 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_HANDLEEXCEPTION_V40 = {"_p_tagNET_DVR_HANDLEEXCEPTION_V40", "tagNET_DVR_HANDLEEXCEPTION_V40 *|NET_DVR_HANDLEEXCEPTION_V40 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_HANDLEEXCEPTION_V41 = {"_p_tagNET_DVR_HANDLEEXCEPTION_V41", "tagNET_DVR_HANDLEEXCEPTION_V41 *|NET_DVR_HANDLEEXCEPTION_V41 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_IP_VIEW_AUDIO_CFG = {"_p_tagNET_DVR_IP_VIEW_AUDIO_CFG", "tagNET_DVR_IP_VIEW_AUDIO_CFG *|NET_DVR_IP_VIEW_AUDIO_CFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_IP_VIEW_CALL_CFG = {"_p_tagNET_DVR_IP_VIEW_CALL_CFG", "tagNET_DVR_IP_VIEW_CALL_CFG *|NET_DVR_IP_VIEW_CALL_CFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_IP_VIEW_DEVCFG = {"_p_tagNET_DVR_IP_VIEW_DEVCFG", "tagNET_DVR_IP_VIEW_DEVCFG *|NET_DVR_IP_VIEW_DEVCFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_NETCFG_V50 = {"_p_tagNET_DVR_NETCFG_V50", "tagNET_DVR_NETCFG_V50 *|NET_DVR_NETCFG_V50 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_PTZ_NOTIFICATION = {"_p_tagNET_DVR_PTZ_NOTIFICATION", "tagNET_DVR_PTZ_NOTIFICATION *|NET_DVR_PTZ_NOTIFICATION *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_PTZ_NOTIFICATION_CFG = {"_p_tagNET_DVR_PTZ_NOTIFICATION_CFG", "tagNET_DVR_PTZ_NOTIFICATION_CFG *|NET_DVR_PTZ_NOTIFICATION_CFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_PTZ_NOTIFICATION_COND = {"_p_tagNET_DVR_PTZ_NOTIFICATION_COND", "tagNET_DVR_PTZ_NOTIFICATION_COND *|NET_DVR_PTZ_NOTIFICATION_COND *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_SERIALSTART_V40 = {"_p_tagNET_DVR_SERIALSTART_V40", "tagNET_DVR_SERIALSTART_V40 *|NET_DVR_SERIALSTART_V40 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_SIP_CFG = {"_p_tagNET_DVR_SIP_CFG", "tagNET_DVR_SIP_CFG *|NET_DVR_SIP_CFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_SIP_CFG_V50 = {"_p_tagNET_DVR_SIP_CFG_V50", "tagNET_DVR_SIP_CFG_V50 *|NET_DVR_SIP_CFG_V50 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_STRUCTHEAD = {"_p_tagNET_DVR_STRUCTHEAD", "tagNET_DVR_STRUCTHEAD *|NET_DVR_STRUCTHEAD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO = {"_p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO", "tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *|NET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_TIMESIGN_CFG = {"_p_tagNET_DVR_TIMESIGN_CFG", "tagNET_DVR_TIMESIGN_CFG *|NET_DVR_TIMESIGN_CFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_TIME_EX = {"_p_tagNET_DVR_TIME_EX", "tagNET_DVR_TIME_EX *|NET_DVR_TIME_EX *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_TIME_SEARCH = {"_p_tagNET_DVR_TIME_SEARCH", "tagNET_DVR_TIME_SEARCH *|NET_DVR_TIME_SEARCH *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_TIME_SEARCH_COND = {"_p_tagNET_DVR_TIME_SEARCH_COND", "tagNET_DVR_TIME_SEARCH_COND *|NET_DVR_TIME_SEARCH_COND *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_TIME_V30 = {"_p_tagNET_DVR_TIME_V30", "tagNET_DVR_TIME_V30 *|NET_DVR_TIME_V30 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_TIME_V50 = {"_p_tagNET_DVR_TIME_V50", "tagNET_DVR_TIME_V50 *|NET_DVR_TIME_V50 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_DVR_USB_RS232 = {"_p_tagNET_DVR_USB_RS232", "tagNET_DVR_USB_RS232 *|NET_DVR_USB_RS232 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagNET_VCA_POINT = {"_p_tagNET_VCA_POINT", "tagNET_VCA_POINT *|NET_VCA_POINT *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BYTE,
  &_swigt__p_DWORD,
  &_swigt__p_NET_DVR_ALARMINCFG_V30,
  &_swigt__p_NET_DVR_COLOR,
  &_swigt__p_NET_DVR_COMPRESSIONCFG,
  &_swigt__p_NET_DVR_COMPRESSIONCFG_EX,
  &_swigt__p_NET_DVR_COMPRESSIONCFG_V30,
  &_swigt__p_NET_DVR_COMPRESSION_INFO,
  &_swigt__p_NET_DVR_COMPRESSION_INFO_EX,
  &_swigt__p_NET_DVR_COMPRESSION_INFO_V30,
  &_swigt__p_NET_DVR_CRUISECHAN_INFO,
  &_swigt__p_NET_DVR_DECODERCFG,
  &_swigt__p_NET_DVR_DECODERCFG_V30,
  &_swigt__p_NET_DVR_DEVICECFG,
  &_swigt__p_NET_DVR_ETHERNET,
  &_swigt__p_NET_DVR_ETHERNET_MULTI,
  &_swigt__p_NET_DVR_ETHERNET_V30,
  &_swigt__p_NET_DVR_HANDLEEXCEPTION,
  &_swigt__p_NET_DVR_HANDLEEXCEPTION_V30,
  &_swigt__p_NET_DVR_HIDEALARM,
  &_swigt__p_NET_DVR_HIDEALARM_V30,
  &_swigt__p_NET_DVR_IPADDR,
  &_swigt__p_NET_DVR_MOTION,
  &_swigt__p_NET_DVR_MOTION_V30,
  &_swigt__p_NET_DVR_NETCFG,
  &_swigt__p_NET_DVR_NETCFG_MULTI,
  &_swigt__p_NET_DVR_NETCFG_V30,
  &_swigt__p_NET_DVR_PICCFG,
  &_swigt__p_NET_DVR_PICCFG_EX,
  &_swigt__p_NET_DVR_PICCFG_V30,
  &_swigt__p_NET_DVR_PPPCFG,
  &_swigt__p_NET_DVR_PPPCFG_V30,
  &_swigt__p_NET_DVR_PPPOECFG,
  &_swigt__p_NET_DVR_PRESETCHAN_INFO,
  &_swigt__p_NET_DVR_PTZCFG,
  &_swigt__p_NET_DVR_PTZTRACKCHAN_INFO,
  &_swigt__p_NET_DVR_PTZ_PROTOCOL,
  &_swigt__p_NET_DVR_RECORD,
  &_swigt__p_NET_DVR_RECORDCHAN,
  &_swigt__p_NET_DVR_RECORDDAY,
  &_swigt__p_NET_DVR_RECORDDAY_V40,
  &_swigt__p_NET_DVR_RECORDSCHED,
  &_swigt__p_NET_DVR_RECORDSCHED_V40,
  &_swigt__p_NET_DVR_RECORD_V30,
  &_swigt__p_NET_DVR_RECORD_V40,
  &_swigt__p_NET_DVR_RGB_COLOR,
  &_swigt__p_NET_DVR_RS232CFG,
  &_swigt__p_NET_DVR_RS232CFG_V30,
  &_swigt__p_NET_DVR_SCHEDTIME,
  &_swigt__p_NET_DVR_SHELTER,
  &_swigt__p_NET_DVR_SINGLE_RS232,
  &_swigt__p_NET_DVR_TIME,
  &_swigt__p_NET_DVR_VILOST,
  &_swigt__p_NET_DVR_VILOST_V30,
  &_swigt__p_WORD,
  &_swigt__p__BITRATE_ENCODE_INDEX_,
  &_swigt__p___PLAYRECT,
  &_swigt__p_a_22__BYTE,
  &_swigt__p_a_4__NET_DVR_RECORDSCHED,
  &_swigt__p_a_4__NET_DVR_SCHEDTIME,
  &_swigt__p_a_8__NET_DVR_RECORDSCHED,
  &_swigt__p_a_8__NET_DVR_RECORDSCHED_V40,
  &_swigt__p_a_8__NET_DVR_SCHEDTIME,
  &_swigt__p_a_96__BYTE,
  &_swigt__p_char,
  &_swigt__p_tagALARMHOST_MAJOR_TYPE,
  &_swigt__p_tagALARMHOST_MINOR_TYPE,
  &_swigt__p_tagCharEncodeType,
  &_swigt__p_tagNET_DVR_ADDRESS,
  &_swigt__p_tagNET_DVR_ALARMINCFG_V40,
  &_swigt__p_tagNET_DVR_CALIBRATE_TIME,
  &_swigt__p_tagNET_DVR_DECODERCFG_V40,
  &_swigt__p_tagNET_DVR_HANDLEEXCEPTION_V40,
  &_swigt__p_tagNET_DVR_HANDLEEXCEPTION_V41,
  &_swigt__p_tagNET_DVR_IP_VIEW_AUDIO_CFG,
  &_swigt__p_tagNET_DVR_IP_VIEW_CALL_CFG,
  &_swigt__p_tagNET_DVR_IP_VIEW_DEVCFG,
  &_swigt__p_tagNET_DVR_NETCFG_V50,
  &_swigt__p_tagNET_DVR_PTZ_NOTIFICATION,
  &_swigt__p_tagNET_DVR_PTZ_NOTIFICATION_CFG,
  &_swigt__p_tagNET_DVR_PTZ_NOTIFICATION_COND,
  &_swigt__p_tagNET_DVR_SERIALSTART_V40,
  &_swigt__p_tagNET_DVR_SIP_CFG,
  &_swigt__p_tagNET_DVR_SIP_CFG_V50,
  &_swigt__p_tagNET_DVR_STRUCTHEAD,
  &_swigt__p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO,
  &_swigt__p_tagNET_DVR_TIMESIGN_CFG,
  &_swigt__p_tagNET_DVR_TIME_EX,
  &_swigt__p_tagNET_DVR_TIME_SEARCH,
  &_swigt__p_tagNET_DVR_TIME_SEARCH_COND,
  &_swigt__p_tagNET_DVR_TIME_V30,
  &_swigt__p_tagNET_DVR_TIME_V50,
  &_swigt__p_tagNET_DVR_USB_RS232,
  &_swigt__p_tagNET_VCA_POINT,
};

static swig_cast_info _swigc__p_BYTE[] = {  {&_swigt__p_BYTE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DWORD[] = {  {&_swigt__p_DWORD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_ALARMINCFG_V30[] = {  {&_swigt__p_NET_DVR_ALARMINCFG_V30, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_COLOR[] = {  {&_swigt__p_NET_DVR_COLOR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_COMPRESSIONCFG[] = {  {&_swigt__p_NET_DVR_COMPRESSIONCFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_COMPRESSIONCFG_EX[] = {  {&_swigt__p_NET_DVR_COMPRESSIONCFG_EX, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_COMPRESSIONCFG_V30[] = {  {&_swigt__p_NET_DVR_COMPRESSIONCFG_V30, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_COMPRESSION_INFO[] = {  {&_swigt__p_NET_DVR_COMPRESSION_INFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_COMPRESSION_INFO_EX[] = {  {&_swigt__p_NET_DVR_COMPRESSION_INFO_EX, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_COMPRESSION_INFO_V30[] = {  {&_swigt__p_NET_DVR_COMPRESSION_INFO_V30, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_CRUISECHAN_INFO[] = {  {&_swigt__p_NET_DVR_CRUISECHAN_INFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_DECODERCFG[] = {  {&_swigt__p_NET_DVR_DECODERCFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_DECODERCFG_V30[] = {  {&_swigt__p_NET_DVR_DECODERCFG_V30, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_DEVICECFG[] = {  {&_swigt__p_NET_DVR_DEVICECFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_ETHERNET[] = {  {&_swigt__p_NET_DVR_ETHERNET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_ETHERNET_MULTI[] = {  {&_swigt__p_NET_DVR_ETHERNET_MULTI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_ETHERNET_V30[] = {  {&_swigt__p_NET_DVR_ETHERNET_V30, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_HANDLEEXCEPTION[] = {  {&_swigt__p_NET_DVR_HANDLEEXCEPTION, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_HANDLEEXCEPTION_V30[] = {  {&_swigt__p_NET_DVR_HANDLEEXCEPTION_V30, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_HIDEALARM[] = {  {&_swigt__p_NET_DVR_HIDEALARM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_HIDEALARM_V30[] = {  {&_swigt__p_NET_DVR_HIDEALARM_V30, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_IPADDR[] = {  {&_swigt__p_NET_DVR_IPADDR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_MOTION[] = {  {&_swigt__p_NET_DVR_MOTION, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_MOTION_V30[] = {  {&_swigt__p_NET_DVR_MOTION_V30, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_NETCFG[] = {  {&_swigt__p_NET_DVR_NETCFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_NETCFG_MULTI[] = {  {&_swigt__p_NET_DVR_NETCFG_MULTI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_NETCFG_V30[] = {  {&_swigt__p_NET_DVR_NETCFG_V30, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_PICCFG[] = {  {&_swigt__p_NET_DVR_PICCFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_PICCFG_EX[] = {  {&_swigt__p_NET_DVR_PICCFG_EX, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_PICCFG_V30[] = {  {&_swigt__p_NET_DVR_PICCFG_V30, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_PPPCFG[] = {  {&_swigt__p_NET_DVR_PPPCFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_PPPCFG_V30[] = {  {&_swigt__p_NET_DVR_PPPCFG_V30, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_PPPOECFG[] = {  {&_swigt__p_NET_DVR_PPPOECFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_PRESETCHAN_INFO[] = {  {&_swigt__p_NET_DVR_PRESETCHAN_INFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_PTZCFG[] = {  {&_swigt__p_NET_DVR_PTZCFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_PTZTRACKCHAN_INFO[] = {  {&_swigt__p_NET_DVR_PTZTRACKCHAN_INFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_PTZ_PROTOCOL[] = {  {&_swigt__p_NET_DVR_PTZ_PROTOCOL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_RECORD[] = {  {&_swigt__p_NET_DVR_RECORD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_RECORDCHAN[] = {  {&_swigt__p_NET_DVR_RECORDCHAN, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_RECORDDAY[] = {  {&_swigt__p_NET_DVR_RECORDDAY, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_RECORDDAY_V40[] = {  {&_swigt__p_NET_DVR_RECORDDAY_V40, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_RECORDSCHED[] = {  {&_swigt__p_NET_DVR_RECORDSCHED, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_RECORDSCHED_V40[] = {  {&_swigt__p_NET_DVR_RECORDSCHED_V40, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_RECORD_V30[] = {  {&_swigt__p_NET_DVR_RECORD_V30, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_RECORD_V40[] = {  {&_swigt__p_NET_DVR_RECORD_V40, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_RGB_COLOR[] = {  {&_swigt__p_NET_DVR_RGB_COLOR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_RS232CFG[] = {  {&_swigt__p_NET_DVR_RS232CFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_RS232CFG_V30[] = {  {&_swigt__p_NET_DVR_RS232CFG_V30, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_SCHEDTIME[] = {  {&_swigt__p_NET_DVR_SCHEDTIME, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_SHELTER[] = {  {&_swigt__p_NET_DVR_SHELTER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_SINGLE_RS232[] = {  {&_swigt__p_NET_DVR_SINGLE_RS232, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_TIME[] = {  {&_swigt__p_NET_DVR_TIME, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_VILOST[] = {  {&_swigt__p_NET_DVR_VILOST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET_DVR_VILOST_V30[] = {  {&_swigt__p_NET_DVR_VILOST_V30, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WORD[] = {  {&_swigt__p_WORD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__BITRATE_ENCODE_INDEX_[] = {  {&_swigt__p__BITRATE_ENCODE_INDEX_, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p___PLAYRECT[] = {  {&_swigt__p___PLAYRECT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_22__BYTE[] = {  {&_swigt__p_a_22__BYTE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_4__NET_DVR_RECORDSCHED[] = {  {&_swigt__p_a_4__NET_DVR_RECORDSCHED, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_4__NET_DVR_SCHEDTIME[] = {  {&_swigt__p_a_4__NET_DVR_SCHEDTIME, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_8__NET_DVR_RECORDSCHED[] = {  {&_swigt__p_a_8__NET_DVR_RECORDSCHED, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_8__NET_DVR_RECORDSCHED_V40[] = {  {&_swigt__p_a_8__NET_DVR_RECORDSCHED_V40, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_8__NET_DVR_SCHEDTIME[] = {  {&_swigt__p_a_8__NET_DVR_SCHEDTIME, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_96__BYTE[] = {  {&_swigt__p_a_96__BYTE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagALARMHOST_MAJOR_TYPE[] = {  {&_swigt__p_tagALARMHOST_MAJOR_TYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagALARMHOST_MINOR_TYPE[] = {  {&_swigt__p_tagALARMHOST_MINOR_TYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagCharEncodeType[] = {  {&_swigt__p_tagCharEncodeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_ADDRESS[] = {  {&_swigt__p_tagNET_DVR_ADDRESS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_ALARMINCFG_V40[] = {  {&_swigt__p_tagNET_DVR_ALARMINCFG_V40, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_CALIBRATE_TIME[] = {  {&_swigt__p_tagNET_DVR_CALIBRATE_TIME, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_DECODERCFG_V40[] = {  {&_swigt__p_tagNET_DVR_DECODERCFG_V40, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_HANDLEEXCEPTION_V40[] = {  {&_swigt__p_tagNET_DVR_HANDLEEXCEPTION_V40, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_HANDLEEXCEPTION_V41[] = {  {&_swigt__p_tagNET_DVR_HANDLEEXCEPTION_V41, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_IP_VIEW_AUDIO_CFG[] = {  {&_swigt__p_tagNET_DVR_IP_VIEW_AUDIO_CFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_IP_VIEW_CALL_CFG[] = {  {&_swigt__p_tagNET_DVR_IP_VIEW_CALL_CFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_IP_VIEW_DEVCFG[] = {  {&_swigt__p_tagNET_DVR_IP_VIEW_DEVCFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_NETCFG_V50[] = {  {&_swigt__p_tagNET_DVR_NETCFG_V50, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_PTZ_NOTIFICATION[] = {  {&_swigt__p_tagNET_DVR_PTZ_NOTIFICATION, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_PTZ_NOTIFICATION_CFG[] = {  {&_swigt__p_tagNET_DVR_PTZ_NOTIFICATION_CFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_PTZ_NOTIFICATION_COND[] = {  {&_swigt__p_tagNET_DVR_PTZ_NOTIFICATION_COND, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_SERIALSTART_V40[] = {  {&_swigt__p_tagNET_DVR_SERIALSTART_V40, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_SIP_CFG[] = {  {&_swigt__p_tagNET_DVR_SIP_CFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_SIP_CFG_V50[] = {  {&_swigt__p_tagNET_DVR_SIP_CFG_V50, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_STRUCTHEAD[] = {  {&_swigt__p_tagNET_DVR_STRUCTHEAD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO[] = {  {&_swigt__p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_TIMESIGN_CFG[] = {  {&_swigt__p_tagNET_DVR_TIMESIGN_CFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_TIME_EX[] = {  {&_swigt__p_tagNET_DVR_TIME_EX, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_TIME_SEARCH[] = {  {&_swigt__p_tagNET_DVR_TIME_SEARCH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_TIME_SEARCH_COND[] = {  {&_swigt__p_tagNET_DVR_TIME_SEARCH_COND, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_TIME_V30[] = {  {&_swigt__p_tagNET_DVR_TIME_V30, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_TIME_V50[] = {  {&_swigt__p_tagNET_DVR_TIME_V50, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_DVR_USB_RS232[] = {  {&_swigt__p_tagNET_DVR_USB_RS232, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagNET_VCA_POINT[] = {  {&_swigt__p_tagNET_VCA_POINT, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BYTE,
  _swigc__p_DWORD,
  _swigc__p_NET_DVR_ALARMINCFG_V30,
  _swigc__p_NET_DVR_COLOR,
  _swigc__p_NET_DVR_COMPRESSIONCFG,
  _swigc__p_NET_DVR_COMPRESSIONCFG_EX,
  _swigc__p_NET_DVR_COMPRESSIONCFG_V30,
  _swigc__p_NET_DVR_COMPRESSION_INFO,
  _swigc__p_NET_DVR_COMPRESSION_INFO_EX,
  _swigc__p_NET_DVR_COMPRESSION_INFO_V30,
  _swigc__p_NET_DVR_CRUISECHAN_INFO,
  _swigc__p_NET_DVR_DECODERCFG,
  _swigc__p_NET_DVR_DECODERCFG_V30,
  _swigc__p_NET_DVR_DEVICECFG,
  _swigc__p_NET_DVR_ETHERNET,
  _swigc__p_NET_DVR_ETHERNET_MULTI,
  _swigc__p_NET_DVR_ETHERNET_V30,
  _swigc__p_NET_DVR_HANDLEEXCEPTION,
  _swigc__p_NET_DVR_HANDLEEXCEPTION_V30,
  _swigc__p_NET_DVR_HIDEALARM,
  _swigc__p_NET_DVR_HIDEALARM_V30,
  _swigc__p_NET_DVR_IPADDR,
  _swigc__p_NET_DVR_MOTION,
  _swigc__p_NET_DVR_MOTION_V30,
  _swigc__p_NET_DVR_NETCFG,
  _swigc__p_NET_DVR_NETCFG_MULTI,
  _swigc__p_NET_DVR_NETCFG_V30,
  _swigc__p_NET_DVR_PICCFG,
  _swigc__p_NET_DVR_PICCFG_EX,
  _swigc__p_NET_DVR_PICCFG_V30,
  _swigc__p_NET_DVR_PPPCFG,
  _swigc__p_NET_DVR_PPPCFG_V30,
  _swigc__p_NET_DVR_PPPOECFG,
  _swigc__p_NET_DVR_PRESETCHAN_INFO,
  _swigc__p_NET_DVR_PTZCFG,
  _swigc__p_NET_DVR_PTZTRACKCHAN_INFO,
  _swigc__p_NET_DVR_PTZ_PROTOCOL,
  _swigc__p_NET_DVR_RECORD,
  _swigc__p_NET_DVR_RECORDCHAN,
  _swigc__p_NET_DVR_RECORDDAY,
  _swigc__p_NET_DVR_RECORDDAY_V40,
  _swigc__p_NET_DVR_RECORDSCHED,
  _swigc__p_NET_DVR_RECORDSCHED_V40,
  _swigc__p_NET_DVR_RECORD_V30,
  _swigc__p_NET_DVR_RECORD_V40,
  _swigc__p_NET_DVR_RGB_COLOR,
  _swigc__p_NET_DVR_RS232CFG,
  _swigc__p_NET_DVR_RS232CFG_V30,
  _swigc__p_NET_DVR_SCHEDTIME,
  _swigc__p_NET_DVR_SHELTER,
  _swigc__p_NET_DVR_SINGLE_RS232,
  _swigc__p_NET_DVR_TIME,
  _swigc__p_NET_DVR_VILOST,
  _swigc__p_NET_DVR_VILOST_V30,
  _swigc__p_WORD,
  _swigc__p__BITRATE_ENCODE_INDEX_,
  _swigc__p___PLAYRECT,
  _swigc__p_a_22__BYTE,
  _swigc__p_a_4__NET_DVR_RECORDSCHED,
  _swigc__p_a_4__NET_DVR_SCHEDTIME,
  _swigc__p_a_8__NET_DVR_RECORDSCHED,
  _swigc__p_a_8__NET_DVR_RECORDSCHED_V40,
  _swigc__p_a_8__NET_DVR_SCHEDTIME,
  _swigc__p_a_96__BYTE,
  _swigc__p_char,
  _swigc__p_tagALARMHOST_MAJOR_TYPE,
  _swigc__p_tagALARMHOST_MINOR_TYPE,
  _swigc__p_tagCharEncodeType,
  _swigc__p_tagNET_DVR_ADDRESS,
  _swigc__p_tagNET_DVR_ALARMINCFG_V40,
  _swigc__p_tagNET_DVR_CALIBRATE_TIME,
  _swigc__p_tagNET_DVR_DECODERCFG_V40,
  _swigc__p_tagNET_DVR_HANDLEEXCEPTION_V40,
  _swigc__p_tagNET_DVR_HANDLEEXCEPTION_V41,
  _swigc__p_tagNET_DVR_IP_VIEW_AUDIO_CFG,
  _swigc__p_tagNET_DVR_IP_VIEW_CALL_CFG,
  _swigc__p_tagNET_DVR_IP_VIEW_DEVCFG,
  _swigc__p_tagNET_DVR_NETCFG_V50,
  _swigc__p_tagNET_DVR_PTZ_NOTIFICATION,
  _swigc__p_tagNET_DVR_PTZ_NOTIFICATION_CFG,
  _swigc__p_tagNET_DVR_PTZ_NOTIFICATION_COND,
  _swigc__p_tagNET_DVR_SERIALSTART_V40,
  _swigc__p_tagNET_DVR_SIP_CFG,
  _swigc__p_tagNET_DVR_SIP_CFG_V50,
  _swigc__p_tagNET_DVR_STRUCTHEAD,
  _swigc__p_tagNET_DVR_THERMOMETRYRULE_TEMPERATURE_INFO,
  _swigc__p_tagNET_DVR_TIMESIGN_CFG,
  _swigc__p_tagNET_DVR_TIME_EX,
  _swigc__p_tagNET_DVR_TIME_SEARCH,
  _swigc__p_tagNET_DVR_TIME_SEARCH_COND,
  _swigc__p_tagNET_DVR_TIME_V30,
  _swigc__p_tagNET_DVR_TIME_V50,
  _swigc__p_tagNET_DVR_USB_RS232,
  _swigc__p_tagNET_VCA_POINT,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "MAX_NAMELEN",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_RIGHT",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "NAME_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MIN_PASSWD_LEN",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "PASSWD_LEN",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "STREAM_PASSWD_LEN",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, "MAX_PASSWD_LEN_EX",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "GUID_LEN",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "DEV_TYPE_NAME_LEN",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, "SERIALNO_LEN",SWIG_From_int(static_cast< int >(48)));
  SWIG_Python_SetConstant(d, "MACADDR_LEN",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "MAC_ADDRESS_NUM",SWIG_From_int(static_cast< int >(48)));
  SWIG_Python_SetConstant(d, "MAX_SENCE_NUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "RULE_REGION_MAX",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_ETHERNET",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "MAX_NETWORK_CARD",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_NETWORK_CARD_EX",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, "PATHNAME_LEN",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_PRESET_V13",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_TEST_COMMAND_NUM",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_NUMBER_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_NAME_LEN",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_INDEX_LED",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_CUSTOM_DIR",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "URL_LEN_V40",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "CLOUD_NAME_LEN",SWIG_From_int(static_cast< int >(48)));
  SWIG_Python_SetConstant(d, "CLOUD_PASSWD_LEN",SWIG_From_int(static_cast< int >(48)));
  SWIG_Python_SetConstant(d, "MAX_SENSORNAME_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_SENSORCHAN_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_DESCRIPTION_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_DEVNAME_LEN_EX",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "NET_SDK_MAX_FILE_PATH",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "MAX_TMEVOICE_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "ISO_8601_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MODULE_INFO_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "VERSION_INFO_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_NUM_INPUT_BOARD",SWIG_From_int(static_cast< int >(512)));
  SWIG_Python_SetConstant(d, "MAX_SHIPSDETE_REGION_NUM",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_RES_NUM_ONE_VS_INPUT_CHAN",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_VS_INPUT_CHAN_NUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "NET_SDK_MAX_FDID_LEN",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "NET_SDK_MAX_PICID_LEN",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "NET_SDK_FDPIC_CUSTOM_INFO_LEN",SWIG_From_int(static_cast< int >(96)));
  SWIG_Python_SetConstant(d, "NET_DVR_MAX_FACE_ANALYSIS_NUM",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "NET_DVR_MAX_FACE_SEARCH_NUM",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "NET_SDK_SECRETKEY_LEN",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "NET_SDK_CUSTOM_LEN",SWIG_From_int(static_cast< int >(512)));
  SWIG_Python_SetConstant(d, "NET_SDK_CHECK_CODE_LEN",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "RELATIVE_CHANNEL_LEN",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "MAX_LEN_TEXT_CONTENT",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_NUM_INPUT_SOURCE_TEXT",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_NUM_OUTPUT_CHANNEL",SWIG_From_int(static_cast< int >(512)));
  SWIG_Python_SetConstant(d, "MAX_LEN_OSD_CONTENT",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "MAX_NUM_OSD_ONE_SUBWND",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_NUM_SPLIT_WND",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_NUM_OSD",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_DEVNAME_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_LED_INFO",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "MAX_TIME_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_CARD_LEN",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, "MAX_OPERATORNAME_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "THERMOMETRY_ALARMRULE_NUM",SWIG_From_int(static_cast< int >(40)));
  SWIG_Python_SetConstant(d, "MAX_THERMOMETRY_REGION_NUM",SWIG_From_int(static_cast< int >(40)));
  SWIG_Python_SetConstant(d, "MAX_THERMOMETRY_DIFFCOMPARISON_NUM",SWIG_From_int(static_cast< int >(40)));
  SWIG_Python_SetConstant(d, "MAX_SHIPS_NUM",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, "KEY_WORD_NUM",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "KEY_WORD_LEN",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "ASYN_LOGIN_SUCC",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ASYN_LOGIN_FAILED",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "NET_SDK_MAX_VERIFICATION_CODE_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "NET_SDK_MAX_OPERATE_CODE_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_TIMESEGMENT_V30",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_TIMESEGMENT",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_ICR_NUM",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_VEHICLEFLOW_INFO",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, "MAX_SHELTERNUM",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_DAYS",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, "PHONENUMBER_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_ACCESSORY_CARD",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "MAX_DISKNUM_V30",SWIG_From_int(static_cast< int >(33)));
  SWIG_Python_SetConstant(d, "NET_SDK_DISK_LOCATION_LEN",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "NET_SDK_SUPPLIER_NAME_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "NET_SDK_DISK_MODEL_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "NET_SDK_MAX_DISK_VOLUME",SWIG_From_int(static_cast< int >(33)));
  SWIG_Python_SetConstant(d, "NET_SDK_DISK_VOLUME_LEN",SWIG_From_int(static_cast< int >(36)));
  SWIG_Python_SetConstant(d, "MAX_DISKNUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_DISKNUM_V10",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "CARD_READER_DESCRIPTION",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_FACE_NUM",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "MAX_WINDOW_V30",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_WINDOW_V40",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_WINDOW",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_VGA_V30",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_VGA",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "MAX_USERNUM_V30",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_USERNUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_EXCEPTIONNUM_V30",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_EXCEPTIONNUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_LINK",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "MAX_ITC_EXCEPTIONOUT",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_SCREEN_DISPLAY_LEN",SWIG_From_int(static_cast< int >(512)));
  SWIG_Python_SetConstant(d, "MAX_DECPOOLNUM",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_DECNUM",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_TRANSPARENTNUM",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "MAX_CYCLE_CHAN",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_CYCLE_CHAN_V30",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_DIRNAME_LENGTH",SWIG_From_int(static_cast< int >(80)));
  SWIG_Python_SetConstant(d, "MAX_WINDOWS",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_STRINGNUM_V30",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_STRINGNUM",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_STRINGNUM_EX",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_AUXOUT_V30",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_AUXOUT",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_HD_GROUP",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_HD_GROUP_V40",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_NFS_DISK",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "NET_SDK_VERSION_LIST_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "IW_ESSID_MAX_SIZE",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "IW_ENCODING_TOKEN_MAX",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_SERIAL_NUM",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_DDNS_NUMS",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "MAX_DOMAIN_NAME",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_EMAIL_ADDR_LEN",SWIG_From_int(static_cast< int >(48)));
  SWIG_Python_SetConstant(d, "MAX_EMAIL_PWD_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_SLAVECAMERA_NUM",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_CALIB_NUM",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "MAX_CALIB_NUM_EX",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, "MAX_LEDDISPLAYINFO_LEN",SWIG_From_int(static_cast< int >(1024)));
  SWIG_Python_SetConstant(d, "MAX_PEOPLE_DETECTION_NUM",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAXPROGRESS",SWIG_From_int(static_cast< int >(100)));
  SWIG_Python_SetConstant(d, "MAX_SERIALNUM",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "CARDNUM_LEN",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, "PATIENTID_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "CARDNUM_LEN_OUT",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_VIDEOOUT_V30",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_VIDEOOUT",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "MAX_PRESET_V30",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "MAX_TRACK_V30",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "MAX_CRUISE_V30",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "MAX_PRESET",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_TRACK",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_CRUISE",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_PRESET_V40",SWIG_From_int(static_cast< int >(300)));
  SWIG_Python_SetConstant(d, "MAX_CRUISE_POINT_NUM",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_CRUISEPOINT_NUM_V50",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "CRUISE_MAX_PRESET_NUMS",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_FACE_PIC_NUM",SWIG_From_int(static_cast< int >(30)));
  SWIG_Python_SetConstant(d, "LOCKGATE_TIME_NUM",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_SERIAL_PORT",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_PREVIEW_MODE",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_MATRIXOUT",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "LOG_INFO_LEN",SWIG_From_int(static_cast< int >(11840)));
  SWIG_Python_SetConstant(d, "DESC_LEN",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "PTZ_PROTOCOL_NUM",SWIG_From_int(static_cast< int >(200)));
  SWIG_Python_SetConstant(d, "IPC_PROTOCOL_NUM",SWIG_From_int(static_cast< int >(50)));
  SWIG_Python_SetConstant(d, "MAX_AUDIO",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "MAX_AUDIO_V30",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "MAX_CHANNUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_ALARMIN",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_ALARMOUT",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_ANALOG_CHANNUM",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_ANALOG_ALARMOUT",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_ANALOG_ALARMIN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_IP_DEVICE",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_IP_DEVICE_V40",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_IP_CHANNEL",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_IP_ALARMIN",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_IP_ALARMOUT",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_IP_ALARMIN_V40",SWIG_From_int(static_cast< int >(4096)));
  SWIG_Python_SetConstant(d, "MAX_IP_ALARMOUT_V40",SWIG_From_int(static_cast< int >(4096)));
  SWIG_Python_SetConstant(d, "MAX_RECORD_FILE_NUM",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, "MAX_ACTION_TYPE",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, "MAX_ATM_PROTOCOL_NUM",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "ATM_CUSTOM_PROTO",SWIG_From_int(static_cast< int >(1025)));
  SWIG_Python_SetConstant(d, "ATM_PROTOCOL_SORT",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "ATM_DESC_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_IPV6_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_EVENTID_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "INVALID_VALUE_UINT32",SWIG_From_int(static_cast< int >(0xffffffff)));
  SWIG_Python_SetConstant(d, "MAX_CHANNUM_V40",SWIG_From_int(static_cast< int >(512)));
  SWIG_Python_SetConstant(d, "MAX_MULTI_AREA_NUM",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, "COURSE_NAME_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "INSTRUCTOR_NAME_LEN",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "COURSE_DESCRIPTION_LEN",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "MAX_TIMESEGMENT_V40",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_MIX_CHAN_NUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_LINE_IN_CHAN_NUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_MIC_CHAN_NUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "INQUEST_CASE_NO_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "INQUEST_CASE_NAME_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "CUSTOM_INFO_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "INQUEST_CASE_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_FILE_ID_LEN",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_PIC_NAME_LEN",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_CHANNUM_V30",SWIG_From_int(static_cast< int >((32+32))));
  SWIG_Python_SetConstant(d, "MAX_ALARMOUT_V40",SWIG_From_int(static_cast< int >((4096+32))));
  SWIG_Python_SetConstant(d, "MAX_ALARMOUT_V30",SWIG_From_int(static_cast< int >((32+64))));
  SWIG_Python_SetConstant(d, "MAX_ALARMIN_V30",SWIG_From_int(static_cast< int >((32+128))));
  SWIG_Python_SetConstant(d, "MAX_ALARMIN_V40",SWIG_From_int(static_cast< int >((4096+32))));
  SWIG_Python_SetConstant(d, "MAX_ANALOG_ALARM_WITH_VOLT_LIMIT",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_ROIDETECT_NUM",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_LANERECT_NUM",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "MAX_FORTIFY_NUM",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "MAX_INTERVAL_NUM",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_CHJC_NUM",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "MAX_VL_NUM",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "MAX_DRIVECHAN_NUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_COIL_NUM",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "MAX_SIGNALLIGHT_NUM",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "LEN_16",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "LEN_32",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "LEN_64",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "LEN_31",SWIG_From_int(static_cast< int >(31)));
  SWIG_Python_SetConstant(d, "MAX_LINKAGE_CHAN_NUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_CABINET_COUNT",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_ID_LEN",SWIG_From_int(static_cast< int >(48)));
  SWIG_Python_SetConstant(d, "MAX_PARKNO_LEN",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_ALARMREASON_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_UPGRADE_INFO_LEN",SWIG_From_int(static_cast< int >(48)));
  SWIG_Python_SetConstant(d, "MAX_CUSTOMDIR_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_LED_INFO_LEN",SWIG_From_int(static_cast< int >(512)));
  SWIG_Python_SetConstant(d, "MAX_VOICE_INFO_LEN",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_LITLE_INFO_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_CUSTOM_INFO_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_PHONE_NUM_LEN",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_APP_SERIALNUM_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "AUDIOTALKTYPE_G722",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "AUDIOTALKTYPE_G711_MU",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "AUDIOTALKTYPE_G711_A",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "AUDIOTALKTYPE_MP2L2",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "AUDIOTALKTYPE_G726",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "AUDIOTALKTYPE_AAC",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, "AUDIOTALKTYPE_PCM",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "AUDIOTALKTYPE_G722C",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, "AUDIOTALKTYPE_MP3",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, "FILE_HEAD",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "VIDEO_I_FRAME",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "VIDEO_B_FRAME",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "VIDEO_P_FRAME",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "AUDIO_PACKET",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "PRIVT_PACKET",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, "HIK_H264_E_FRAME",SWIG_From_int(static_cast< int >((1 << 6))));
  SWIG_Python_SetConstant(d, "MAX_TRANSPARENT_CHAN_NUM",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_TRANSPARENT_ACCESS_NUM",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_PARKING_STATUS",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_PARKING_NUM",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_ITS_SCENE_NUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_SCENE_TIMESEG_NUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_IVMS_IP_CHANNEL",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "DEVICE_ID_LEN",SWIG_From_int(static_cast< int >(48)));
  SWIG_Python_SetConstant(d, "MONITORSITE_ID_LEN",SWIG_From_int(static_cast< int >(48)));
  SWIG_Python_SetConstant(d, "MAX_AUXAREA_NUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_SLAVE_CHANNEL_NUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_DEVDESC_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "ILLEGAL_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_TRUCK_AXLE_NUM",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "MAX_CATEGORY_LEN",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "SERIAL_NO_LEN",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_SECRETKEY_LEN",SWIG_From_int(static_cast< int >(512)));
  SWIG_Python_SetConstant(d, "MAX_INDEX_CODE_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_ILLEGAL_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "CODE_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "ALIAS_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_SCH_TASKS_NUM",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "MAX_SERVERID_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_SERVERDOMAIN_LEN",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_AUTHENTICATEID_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_AUTHENTICATEPASSWD_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_SERVERNAME_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_COMPRESSIONID_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_SIPSERVER_ADDRESS_LEN",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_PlATE_NO_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "UPNP_PORT_NUM",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, "MAX_NOTICE_NUMBER_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_NOTICE_THEME_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_NOTICE_DETAIL_LEN",SWIG_From_int(static_cast< int >(1024)));
  SWIG_Python_SetConstant(d, "MAX_NOTICE_PIC_NUM",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "MAX_DEV_NUMBER_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "LOCK_NAME_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "HOLIDAY_GROUP_NAME_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_HOLIDAY_PLAN_NUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "TEMPLATE_NAME_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_HOLIDAY_GROUP_NUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "DOOR_NAME_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "STRESS_PASSWORD_LEN",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "SUPER_PASSWORD_LEN",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "GROUP_NAME_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "GROUP_COMBINATION_NUM",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MULTI_CARD_GROUP_NUM",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "ACS_CARD_NO_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "NET_SDK_EMPLOYEE_NO_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "NET_SDK_UUID_LEN",SWIG_From_int(static_cast< int >(36)));
  SWIG_Python_SetConstant(d, "NET_SDK_EHOME_KEY_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "CARD_PASSWORD_LEN",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_DOOR_NUM",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_CARD_RIGHT_PLAN_NUM",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_GROUP_NUM_128",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_CARD_READER_NUM",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_SNEAK_PATH_NODE",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_MULTI_DOOR_INTERLOCK_GROUP",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_INTER_LOCK_DOOR_NUM",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_CASE_SENSOR_NUM",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_DOOR_NUM_256",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "MAX_READER_ROUTE_NUM",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_FINGER_PRINT_NUM",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "MAX_CARD_READER_NUM_512",SWIG_From_int(static_cast< int >(512)));
  SWIG_Python_SetConstant(d, "NET_SDK_MULTI_CARD_GROUP_NUM_20",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, "ERROR_MSG_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_DOOR_CODE_LEN",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "MAX_LOCK_CODE_LEN",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "PER_RING_PORT_NUM",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "SENSORNAME_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_SENSORDESCR_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_DNS_SERVER_NUM",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "SENSORUNIT_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "WEP_KEY_MAX_SIZE",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "WEP_KEY_MAX_NUM",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "WPA_KEY_MAX_SIZE",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_SINGLE_FTPPICNAME_LEN",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, "MAX_CAMNAME_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_FTPNAME_NUM",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, "MAX_IDCODE_LEN",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_VERSIIN_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_IDCODE_NUM",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "SDK_LEN_2048",SWIG_From_int(static_cast< int >(2048)));
  SWIG_Python_SetConstant(d, "SDK_MAX_IP_LEN",SWIG_From_int(static_cast< int >(48)));
  SWIG_Python_SetConstant(d, "RECT_POINT_NUM",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_PUBLIC_KEY_LEN",SWIG_From_int(static_cast< int >(512)));
  SWIG_Python_SetConstant(d, "CHIP_SERIALNO_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "ENCRYPT_DEV_ID_LEN",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, "MAX_SEARCH_ID_LEN",SWIG_From_int(static_cast< int >(36)));
  SWIG_Python_SetConstant(d, "TERMINAL_NAME_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_URL_LEN",SWIG_From_int(static_cast< int >(512)));
  SWIG_Python_SetConstant(d, "REGISTER_NAME_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_PORT_NUM",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_SINGLE_CARD_PORT_NO",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAX_FUNC_CARD_NUM",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_FC_CARD_NUM",SWIG_From_int(static_cast< int >(33)));
  SWIG_Python_SetConstant(d, "MAX_REMARKS_LEN",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_OUTPUT_PORT_NUM",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_SINGLE_PORT_RECVCARD_NUM",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_GAMMA_X_VALUE",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "NET_DEV_NAME_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "NET_DEV_TYPE_NAME_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "ABNORMAL_INFO_NUM",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "PLAYLIST_NAME_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "PLAYLIST_ITEM_NUM",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "NET_SDK_MAX_LOGIN_PASSWORD_LEN",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "NET_SDK_MAX_ANSWER_LEN",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "NET_SDK_MAX_QUESTION_LIST_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "MAX_SCREEN_AREA_NUM",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "NET_SDK_MAX_THERMOMETRYALGNAME",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "NET_SDK_MAX_SHIPSALGNAME",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "NET_SDK_MAX_FIRESALGNAME",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_PASSPORT_NUM_LEN",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_PASSPORT_INFO_LEN",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "MAX_PASSPORT_NAME_LEN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "MAX_PASSPORT_MONITOR_LEN",SWIG_From_int(static_cast< int >(1024)));
  SWIG_Python_SetConstant(d, "MAX_NATIONALITY_LEN",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "MAX_PASSPORT_TYPE_LEN",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "NET_DVR_NOERROR",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "NET_DVR_PASSWORD_ERROR",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "NET_DVR_NOENOUGHPRI",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "NET_DVR_NOINIT",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_ERROR",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "NET_DVR_OVER_MAXLINK",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "NET_DVR_VERSIONNOMATCH",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "NET_DVR_NETWORK_FAIL_CONNECT",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, "NET_DVR_NETWORK_SEND_ERROR",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "NET_DVR_NETWORK_RECV_ERROR",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, "NET_DVR_NETWORK_RECV_TIMEOUT",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "NET_DVR_NETWORK_ERRORDATA",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, "NET_DVR_ORDER_ERROR",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, "NET_DVR_OPERNOPERMIT",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, "NET_DVR_COMMANDTIMEOUT",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERRORSERIALPORT",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERRORALARMPORT",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "NET_DVR_PARAMETER_ERROR",SWIG_From_int(static_cast< int >(17)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHAN_EXCEPTION",SWIG_From_int(static_cast< int >(18)));
  SWIG_Python_SetConstant(d, "NET_DVR_NODISK",SWIG_From_int(static_cast< int >(19)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERRORDISKNUM",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, "NET_DVR_DISK_FULL",SWIG_From_int(static_cast< int >(21)));
  SWIG_Python_SetConstant(d, "NET_DVR_DISK_ERROR",SWIG_From_int(static_cast< int >(22)));
  SWIG_Python_SetConstant(d, "NET_DVR_NOSUPPORT",SWIG_From_int(static_cast< int >(23)));
  SWIG_Python_SetConstant(d, "NET_DVR_BUSY",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, "NET_DVR_MODIFY_FAIL",SWIG_From_int(static_cast< int >(25)));
  SWIG_Python_SetConstant(d, "NET_DVR_PASSWORD_FORMAT_ERROR",SWIG_From_int(static_cast< int >(26)));
  SWIG_Python_SetConstant(d, "NET_DVR_DISK_FORMATING",SWIG_From_int(static_cast< int >(27)));
  SWIG_Python_SetConstant(d, "NET_DVR_DVRNORESOURCE",SWIG_From_int(static_cast< int >(28)));
  SWIG_Python_SetConstant(d, "NET_DVR_DVROPRATEFAILED",SWIG_From_int(static_cast< int >(29)));
  SWIG_Python_SetConstant(d, "NET_DVR_OPENHOSTSOUND_FAIL",SWIG_From_int(static_cast< int >(30)));
  SWIG_Python_SetConstant(d, "NET_DVR_DVRVOICEOPENED",SWIG_From_int(static_cast< int >(31)));
  SWIG_Python_SetConstant(d, "NET_DVR_TIMEINPUTERROR",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "NET_DVR_NOSPECFILE",SWIG_From_int(static_cast< int >(33)));
  SWIG_Python_SetConstant(d, "NET_DVR_CREATEFILE_ERROR",SWIG_From_int(static_cast< int >(34)));
  SWIG_Python_SetConstant(d, "NET_DVR_FILEOPENFAIL",SWIG_From_int(static_cast< int >(35)));
  SWIG_Python_SetConstant(d, "NET_DVR_OPERNOTFINISH",SWIG_From_int(static_cast< int >(36)));
  SWIG_Python_SetConstant(d, "NET_DVR_GETPLAYTIMEFAIL",SWIG_From_int(static_cast< int >(37)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYFAIL",SWIG_From_int(static_cast< int >(38)));
  SWIG_Python_SetConstant(d, "NET_DVR_FILEFORMAT_ERROR",SWIG_From_int(static_cast< int >(39)));
  SWIG_Python_SetConstant(d, "NET_DVR_DIR_ERROR",SWIG_From_int(static_cast< int >(40)));
  SWIG_Python_SetConstant(d, "NET_DVR_ALLOC_RESOURCE_ERROR",SWIG_From_int(static_cast< int >(41)));
  SWIG_Python_SetConstant(d, "NET_DVR_AUDIO_MODE_ERROR",SWIG_From_int(static_cast< int >(42)));
  SWIG_Python_SetConstant(d, "NET_DVR_NOENOUGH_BUF",SWIG_From_int(static_cast< int >(43)));
  SWIG_Python_SetConstant(d, "NET_DVR_CREATESOCKET_ERROR",SWIG_From_int(static_cast< int >(44)));
  SWIG_Python_SetConstant(d, "NET_DVR_SETSOCKET_ERROR",SWIG_From_int(static_cast< int >(45)));
  SWIG_Python_SetConstant(d, "NET_DVR_MAX_NUM",SWIG_From_int(static_cast< int >(46)));
  SWIG_Python_SetConstant(d, "NET_DVR_USERNOTEXIST",SWIG_From_int(static_cast< int >(47)));
  SWIG_Python_SetConstant(d, "NET_DVR_WRITEFLASHERROR",SWIG_From_int(static_cast< int >(48)));
  SWIG_Python_SetConstant(d, "NET_DVR_UPGRADEFAIL",SWIG_From_int(static_cast< int >(49)));
  SWIG_Python_SetConstant(d, "NET_DVR_CARDHAVEINIT",SWIG_From_int(static_cast< int >(50)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYERFAILED",SWIG_From_int(static_cast< int >(51)));
  SWIG_Python_SetConstant(d, "NET_DVR_MAX_USERNUM",SWIG_From_int(static_cast< int >(52)));
  SWIG_Python_SetConstant(d, "NET_DVR_GETLOCALIPANDMACFAIL",SWIG_From_int(static_cast< int >(53)));
  SWIG_Python_SetConstant(d, "NET_DVR_NOENCODEING",SWIG_From_int(static_cast< int >(54)));
  SWIG_Python_SetConstant(d, "NET_DVR_IPMISMATCH",SWIG_From_int(static_cast< int >(55)));
  SWIG_Python_SetConstant(d, "NET_DVR_MACMISMATCH",SWIG_From_int(static_cast< int >(56)));
  SWIG_Python_SetConstant(d, "NET_DVR_UPGRADELANGMISMATCH",SWIG_From_int(static_cast< int >(57)));
  SWIG_Python_SetConstant(d, "NET_DVR_MAX_PLAYERPORT",SWIG_From_int(static_cast< int >(58)));
  SWIG_Python_SetConstant(d, "NET_DVR_NOSPACEBACKUP",SWIG_From_int(static_cast< int >(59)));
  SWIG_Python_SetConstant(d, "NET_DVR_NODEVICEBACKUP",SWIG_From_int(static_cast< int >(60)));
  SWIG_Python_SetConstant(d, "NET_DVR_PICTURE_BITS_ERROR",SWIG_From_int(static_cast< int >(61)));
  SWIG_Python_SetConstant(d, "NET_DVR_PICTURE_DIMENSION_ERROR",SWIG_From_int(static_cast< int >(62)));
  SWIG_Python_SetConstant(d, "NET_DVR_PICTURE_SIZ_ERROR",SWIG_From_int(static_cast< int >(63)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOADPLAYERSDKFAILED",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOADPLAYERSDKPROC_ERROR",SWIG_From_int(static_cast< int >(65)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOADDSSDKFAILED",SWIG_From_int(static_cast< int >(66)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOADDSSDKPROC_ERROR",SWIG_From_int(static_cast< int >(67)));
  SWIG_Python_SetConstant(d, "NET_DVR_DSSDK_ERROR",SWIG_From_int(static_cast< int >(68)));
  SWIG_Python_SetConstant(d, "NET_DVR_VOICEMONOPOLIZE",SWIG_From_int(static_cast< int >(69)));
  SWIG_Python_SetConstant(d, "NET_DVR_JOINMULTICASTFAILED",SWIG_From_int(static_cast< int >(70)));
  SWIG_Python_SetConstant(d, "NET_DVR_CREATEDIR_ERROR",SWIG_From_int(static_cast< int >(71)));
  SWIG_Python_SetConstant(d, "NET_DVR_BINDSOCKET_ERROR",SWIG_From_int(static_cast< int >(72)));
  SWIG_Python_SetConstant(d, "NET_DVR_SOCKETCLOSE_ERROR",SWIG_From_int(static_cast< int >(73)));
  SWIG_Python_SetConstant(d, "NET_DVR_USERID_ISUSING",SWIG_From_int(static_cast< int >(74)));
  SWIG_Python_SetConstant(d, "NET_DVR_SOCKETLISTEN_ERROR",SWIG_From_int(static_cast< int >(75)));
  SWIG_Python_SetConstant(d, "NET_DVR_PROGRAM_EXCEPTION",SWIG_From_int(static_cast< int >(76)));
  SWIG_Python_SetConstant(d, "NET_DVR_WRITEFILE_FAILED",SWIG_From_int(static_cast< int >(77)));
  SWIG_Python_SetConstant(d, "NET_DVR_FORMAT_READONLY",SWIG_From_int(static_cast< int >(78)));
  SWIG_Python_SetConstant(d, "NET_DVR_WITHSAMEUSERNAME",SWIG_From_int(static_cast< int >(79)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEVICETYPE_ERROR",SWIG_From_int(static_cast< int >(80)));
  SWIG_Python_SetConstant(d, "NET_DVR_LANGUAGE_ERROR",SWIG_From_int(static_cast< int >(81)));
  SWIG_Python_SetConstant(d, "NET_DVR_PARAVERSION_ERROR",SWIG_From_int(static_cast< int >(82)));
  SWIG_Python_SetConstant(d, "NET_DVR_IPCHAN_NOTALIVE",SWIG_From_int(static_cast< int >(83)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_SDK_ERROR",SWIG_From_int(static_cast< int >(84)));
  SWIG_Python_SetConstant(d, "NET_DVR_CONVERT_SDK_ERROR",SWIG_From_int(static_cast< int >(85)));
  SWIG_Python_SetConstant(d, "NET_DVR_IPC_COUNT_OVERFLOW",SWIG_From_int(static_cast< int >(86)));
  SWIG_Python_SetConstant(d, "NET_DVR_MAX_ADD_NUM",SWIG_From_int(static_cast< int >(87)));
  SWIG_Python_SetConstant(d, "NET_DVR_PARAMMODE_ERROR",SWIG_From_int(static_cast< int >(88)));
  SWIG_Python_SetConstant(d, "NET_DVR_CODESPITTER_OFFLINE",SWIG_From_int(static_cast< int >(89)));
  SWIG_Python_SetConstant(d, "NET_DVR_BACKUP_COPYING",SWIG_From_int(static_cast< int >(90)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHAN_NOTSUPPORT",SWIG_From_int(static_cast< int >(91)));
  SWIG_Python_SetConstant(d, "NET_DVR_CALLINEINVALID",SWIG_From_int(static_cast< int >(92)));
  SWIG_Python_SetConstant(d, "NET_DVR_CALCANCELCONFLICT",SWIG_From_int(static_cast< int >(93)));
  SWIG_Python_SetConstant(d, "NET_DVR_CALPOINTOUTRANGE",SWIG_From_int(static_cast< int >(94)));
  SWIG_Python_SetConstant(d, "NET_DVR_FILTERRECTINVALID",SWIG_From_int(static_cast< int >(95)));
  SWIG_Python_SetConstant(d, "NET_DVR_DDNS_DEVOFFLINE",SWIG_From_int(static_cast< int >(96)));
  SWIG_Python_SetConstant(d, "NET_DVR_DDNS_INTER_ERROR",SWIG_From_int(static_cast< int >(97)));
  SWIG_Python_SetConstant(d, "NET_DVR_FUNCTION_NOT_SUPPORT_OS",SWIG_From_int(static_cast< int >(98)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEC_CHAN_REBIND",SWIG_From_int(static_cast< int >(99)));
  SWIG_Python_SetConstant(d, "NET_DVR_INTERCOM_SDK_ERROR",SWIG_From_int(static_cast< int >(100)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_CURRENT_UPDATEFILE",SWIG_From_int(static_cast< int >(101)));
  SWIG_Python_SetConstant(d, "NET_DVR_USER_NOT_SUCC_LOGIN",SWIG_From_int(static_cast< int >(102)));
  SWIG_Python_SetConstant(d, "NET_DVR_USE_LOG_SWITCH_FILE",SWIG_From_int(static_cast< int >(103)));
  SWIG_Python_SetConstant(d, "NET_DVR_POOL_PORT_EXHAUST",SWIG_From_int(static_cast< int >(104)));
  SWIG_Python_SetConstant(d, "NET_DVR_PACKET_TYPE_NOT_SUPPORT",SWIG_From_int(static_cast< int >(105)));
  SWIG_Python_SetConstant(d, "NET_DVR_IPPARA_IPID_ERROR",SWIG_From_int(static_cast< int >(106)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOAD_HCPREVIEW_SDK_ERROR",SWIG_From_int(static_cast< int >(107)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOAD_HCVOICETALK_SDK_ERROR",SWIG_From_int(static_cast< int >(108)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOAD_HCALARM_SDK_ERROR",SWIG_From_int(static_cast< int >(109)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOAD_HCPLAYBACK_SDK_ERROR",SWIG_From_int(static_cast< int >(110)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOAD_HCDISPLAY_SDK_ERROR",SWIG_From_int(static_cast< int >(111)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOAD_HCINDUSTRY_SDK_ERROR",SWIG_From_int(static_cast< int >(112)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOAD_HCGENERALCFGMGR_SDK_ERROR",SWIG_From_int(static_cast< int >(113)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOAD_HCCOREDEVCFG_SDK_ERROR",SWIG_From_int(static_cast< int >(114)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOAD_HCNETUTILS_SDK_ERROR",SWIG_From_int(static_cast< int >(115)));
  SWIG_Python_SetConstant(d, "NET_DVR_CORE_VER_MISMATCH",SWIG_From_int(static_cast< int >(121)));
  SWIG_Python_SetConstant(d, "NET_DVR_CORE_VER_MISMATCH_HCPREVIEW",SWIG_From_int(static_cast< int >(122)));
  SWIG_Python_SetConstant(d, "NET_DVR_CORE_VER_MISMATCH_HCVOICETALK",SWIG_From_int(static_cast< int >(123)));
  SWIG_Python_SetConstant(d, "NET_DVR_CORE_VER_MISMATCH_HCALARM",SWIG_From_int(static_cast< int >(124)));
  SWIG_Python_SetConstant(d, "NET_DVR_CORE_VER_MISMATCH_HCPLAYBACK",SWIG_From_int(static_cast< int >(125)));
  SWIG_Python_SetConstant(d, "NET_DVR_CORE_VER_MISMATCH_HCDISPLAY",SWIG_From_int(static_cast< int >(126)));
  SWIG_Python_SetConstant(d, "NET_DVR_CORE_VER_MISMATCH_HCINDUSTRY",SWIG_From_int(static_cast< int >(127)));
  SWIG_Python_SetConstant(d, "NET_DVR_CORE_VER_MISMATCH_HCGENERALCFGMGR",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "NET_DVR_COM_VER_MISMATCH_HCPREVIEW",SWIG_From_int(static_cast< int >(136)));
  SWIG_Python_SetConstant(d, "NET_DVR_COM_VER_MISMATCH_HCVOICETALK",SWIG_From_int(static_cast< int >(137)));
  SWIG_Python_SetConstant(d, "NET_DVR_COM_VER_MISMATCH_HCALARM",SWIG_From_int(static_cast< int >(138)));
  SWIG_Python_SetConstant(d, "NET_DVR_COM_VER_MISMATCH_HCPLAYBACK",SWIG_From_int(static_cast< int >(139)));
  SWIG_Python_SetConstant(d, "NET_DVR_COM_VER_MISMATCH_HCDISPLAY",SWIG_From_int(static_cast< int >(140)));
  SWIG_Python_SetConstant(d, "NET_DVR_COM_VER_MISMATCH_HCINDUSTRY",SWIG_From_int(static_cast< int >(141)));
  SWIG_Python_SetConstant(d, "NET_DVR_COM_VER_MISMATCH_HCGENERALCFGMGR",SWIG_From_int(static_cast< int >(142)));
  SWIG_Python_SetConstant(d, "NET_ERR_CONFIG_FILE_IMPORT_FAILED",SWIG_From_int(static_cast< int >(145)));
  SWIG_Python_SetConstant(d, "NET_ERR_CONFIG_FILE_EXPORT_FAILED",SWIG_From_int(static_cast< int >(146)));
  SWIG_Python_SetConstant(d, "NET_DVR_CERTIFICATE_FILE_ERROR",SWIG_From_int(static_cast< int >(147)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOAD_SSL_LIB_ERROR",SWIG_From_int(static_cast< int >(148)));
  SWIG_Python_SetConstant(d, "NET_DVR_SSL_VERSION_NOT_MATCH",SWIG_From_int(static_cast< int >(149)));
  SWIG_Python_SetConstant(d, "NET_DVR_ALIAS_DUPLICATE",SWIG_From_int(static_cast< int >(150)));
  SWIG_Python_SetConstant(d, "NET_DVR_INVALID_COMMUNICATION",SWIG_From_int(static_cast< int >(151)));
  SWIG_Python_SetConstant(d, "NET_DVR_USERNAME_NOT_EXIST",SWIG_From_int(static_cast< int >(152)));
  SWIG_Python_SetConstant(d, "NET_DVR_USER_LOCKED",SWIG_From_int(static_cast< int >(153)));
  SWIG_Python_SetConstant(d, "NET_DVR_INVALID_USERID",SWIG_From_int(static_cast< int >(154)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOW_LOGIN_VERSION",SWIG_From_int(static_cast< int >(155)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOAD_LIBEAY32_DLL_ERROR",SWIG_From_int(static_cast< int >(156)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOAD_SSLEAY32_DLL_ERROR",SWIG_From_int(static_cast< int >(157)));
  SWIG_Python_SetConstant(d, "NET_ERR_LOAD_LIBICONV",SWIG_From_int(static_cast< int >(158)));
  SWIG_Python_SetConstant(d, "NET_ERR_SSL_CONNECT_FAILED",SWIG_From_int(static_cast< int >(159)));
  SWIG_Python_SetConstant(d, "NET_ERR_MCAST_ADDRESS_ERROR",SWIG_From_int(static_cast< int >(160)));
  SWIG_Python_SetConstant(d, "NET_ERR_LOAD_ZLIB",SWIG_From_int(static_cast< int >(161)));
  SWIG_Python_SetConstant(d, "NET_ERR_OPENSSL_NO_INIT",SWIG_From_int(static_cast< int >(162)));
  SWIG_Python_SetConstant(d, "NET_DVR_SERVER_NOT_EXIST",SWIG_From_int(static_cast< int >(164)));
  SWIG_Python_SetConstant(d, "NET_DVR_TEST_SERVER_FAIL_CONNECT",SWIG_From_int(static_cast< int >(165)));
  SWIG_Python_SetConstant(d, "NET_DVR_NAS_SERVER_INVALID_DIR",SWIG_From_int(static_cast< int >(166)));
  SWIG_Python_SetConstant(d, "NET_DVR_NAS_SERVER_NOENOUGH_PRI",SWIG_From_int(static_cast< int >(167)));
  SWIG_Python_SetConstant(d, "NET_DVR_EMAIL_SERVER_NOT_CONFIG_DNS",SWIG_From_int(static_cast< int >(168)));
  SWIG_Python_SetConstant(d, "NET_DVR_EMAIL_SERVER_NOT_CONFIG_GATEWAY",SWIG_From_int(static_cast< int >(169)));
  SWIG_Python_SetConstant(d, "NET_DVR_TEST_SERVER_PASSWORD_ERROR",SWIG_From_int(static_cast< int >(170)));
  SWIG_Python_SetConstant(d, "NET_DVR_EMAIL_SERVER_CONNECT_EXCEPTION_WITH_SMTP",SWIG_From_int(static_cast< int >(171)));
  SWIG_Python_SetConstant(d, "NET_DVR_FTP_SERVER_FAIL_CREATE_DIR",SWIG_From_int(static_cast< int >(172)));
  SWIG_Python_SetConstant(d, "NET_DVR_FTP_SERVER_NO_WRITE_PIR",SWIG_From_int(static_cast< int >(173)));
  SWIG_Python_SetConstant(d, "NET_DVR_IP_CONFLICT",SWIG_From_int(static_cast< int >(174)));
  SWIG_Python_SetConstant(d, "NET_DVR_INSUFFICIENT_STORAGEPOOL_SPACE",SWIG_From_int(static_cast< int >(175)));
  SWIG_Python_SetConstant(d, "NET_DVR_STORAGEPOOL_INVALID",SWIG_From_int(static_cast< int >(176)));
  SWIG_Python_SetConstant(d, "NET_DVR_EFFECTIVENESS_REBOOT",SWIG_From_int(static_cast< int >(177)));
  SWIG_Python_SetConstant(d, "NET_ERR_ANR_ARMING_EXIST",SWIG_From_int(static_cast< int >(178)));
  SWIG_Python_SetConstant(d, "NET_ERR_UPLOADLINK_EXIST",SWIG_From_int(static_cast< int >(179)));
  SWIG_Python_SetConstant(d, "NET_ERR_INCORRECT_FILE_FORMAT",SWIG_From_int(static_cast< int >(180)));
  SWIG_Python_SetConstant(d, "NET_ERR_INCORRECT_FILE_CONTENT",SWIG_From_int(static_cast< int >(181)));
  SWIG_Python_SetConstant(d, "NET_ERR_MAX_HRUDP_LINK",SWIG_From_int(static_cast< int >(182)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_MAX_PORT_MULTIPLEX",SWIG_From_int(static_cast< int >(183)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_CREATE_PORT_MULTIPLEX",SWIG_From_int(static_cast< int >(184)));
  SWIG_Python_SetConstant(d, "NET_DVR_NONBLOCKING_CAPTURE_NOTSUPPORT",SWIG_From_int(static_cast< int >(185)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_FUNCTION_INVALID",SWIG_From_int(static_cast< int >(186)));
  SWIG_Python_SetConstant(d, "RAID_ERROR_INDEX",SWIG_From_int(static_cast< int >(200)));
  SWIG_Python_SetConstant(d, "NET_DVR_NAME_NOT_ONLY",SWIG_From_int(static_cast< int >((200+0))));
  SWIG_Python_SetConstant(d, "NET_DVR_OVER_MAX_ARRAY",SWIG_From_int(static_cast< int >((200+1))));
  SWIG_Python_SetConstant(d, "NET_DVR_OVER_MAX_VD",SWIG_From_int(static_cast< int >((200+2))));
  SWIG_Python_SetConstant(d, "NET_DVR_VD_SLOT_EXCEED",SWIG_From_int(static_cast< int >((200+3))));
  SWIG_Python_SetConstant(d, "NET_DVR_PD_STATUS_INVALID",SWIG_From_int(static_cast< int >((200+4))));
  SWIG_Python_SetConstant(d, "NET_DVR_PD_BE_DEDICATE_SPARE",SWIG_From_int(static_cast< int >((200+5))));
  SWIG_Python_SetConstant(d, "NET_DVR_PD_NOT_FREE",SWIG_From_int(static_cast< int >((200+6))));
  SWIG_Python_SetConstant(d, "NET_DVR_CANNOT_MIG2NEWMODE",SWIG_From_int(static_cast< int >((200+7))));
  SWIG_Python_SetConstant(d, "NET_DVR_MIG_PAUSE",SWIG_From_int(static_cast< int >((200+8))));
  SWIG_Python_SetConstant(d, "NET_DVR_MIG_CANCEL",SWIG_From_int(static_cast< int >((200+9))));
  SWIG_Python_SetConstant(d, "NET_DVR_EXIST_VD",SWIG_From_int(static_cast< int >((200+10))));
  SWIG_Python_SetConstant(d, "NET_DVR_TARGET_IN_LD_FUNCTIONAL",SWIG_From_int(static_cast< int >((200+11))));
  SWIG_Python_SetConstant(d, "NET_DVR_HD_IS_ASSIGNED_ALREADY",SWIG_From_int(static_cast< int >((200+12))));
  SWIG_Python_SetConstant(d, "NET_DVR_INVALID_HD_COUNT",SWIG_From_int(static_cast< int >((200+13))));
  SWIG_Python_SetConstant(d, "NET_DVR_LD_IS_FUNCTIONAL",SWIG_From_int(static_cast< int >((200+14))));
  SWIG_Python_SetConstant(d, "NET_DVR_BGA_RUNNING",SWIG_From_int(static_cast< int >((200+15))));
  SWIG_Python_SetConstant(d, "NET_DVR_LD_NO_ATAPI",SWIG_From_int(static_cast< int >((200+16))));
  SWIG_Python_SetConstant(d, "NET_DVR_MIGRATION_NOT_NEED",SWIG_From_int(static_cast< int >((200+17))));
  SWIG_Python_SetConstant(d, "NET_DVR_HD_TYPE_MISMATCH",SWIG_From_int(static_cast< int >((200+18))));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_LD_IN_DG",SWIG_From_int(static_cast< int >((200+19))));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_ROOM_FOR_SPARE",SWIG_From_int(static_cast< int >((200+20))));
  SWIG_Python_SetConstant(d, "NET_DVR_SPARE_IS_IN_MULTI_DG",SWIG_From_int(static_cast< int >((200+21))));
  SWIG_Python_SetConstant(d, "NET_DVR_DG_HAS_MISSING_PD",SWIG_From_int(static_cast< int >((200+22))));
  SWIG_Python_SetConstant(d, "NET_DVR_NAME_EMPTY",SWIG_From_int(static_cast< int >((200+23))));
  SWIG_Python_SetConstant(d, "NET_DVR_INPUT_PARAM",SWIG_From_int(static_cast< int >((200+24))));
  SWIG_Python_SetConstant(d, "NET_DVR_PD_NOT_AVAILABLE",SWIG_From_int(static_cast< int >((200+25))));
  SWIG_Python_SetConstant(d, "NET_DVR_ARRAY_NOT_AVAILABLE",SWIG_From_int(static_cast< int >((200+26))));
  SWIG_Python_SetConstant(d, "NET_DVR_PD_COUNT",SWIG_From_int(static_cast< int >((200+27))));
  SWIG_Python_SetConstant(d, "NET_DVR_VD_SMALL",SWIG_From_int(static_cast< int >((200+28))));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_EXIST",SWIG_From_int(static_cast< int >((200+29))));
  SWIG_Python_SetConstant(d, "NET_DVR_NOT_SUPPORT",SWIG_From_int(static_cast< int >((200+30))));
  SWIG_Python_SetConstant(d, "NET_DVR_NOT_FUNCTIONAL",SWIG_From_int(static_cast< int >((200+31))));
  SWIG_Python_SetConstant(d, "NET_DVR_DEV_NODE_NOT_FOUND",SWIG_From_int(static_cast< int >((200+32))));
  SWIG_Python_SetConstant(d, "NET_DVR_SLOT_EXCEED",SWIG_From_int(static_cast< int >((200+33))));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_VD_IN_ARRAY",SWIG_From_int(static_cast< int >((200+34))));
  SWIG_Python_SetConstant(d, "NET_DVR_VD_SLOT_INVALID",SWIG_From_int(static_cast< int >((200+35))));
  SWIG_Python_SetConstant(d, "NET_DVR_PD_NO_ENOUGH_SPACE",SWIG_From_int(static_cast< int >((200+36))));
  SWIG_Python_SetConstant(d, "NET_DVR_ARRAY_NONFUNCTION",SWIG_From_int(static_cast< int >((200+37))));
  SWIG_Python_SetConstant(d, "NET_DVR_ARRAY_NO_ENOUGH_SPACE",SWIG_From_int(static_cast< int >((200+38))));
  SWIG_Python_SetConstant(d, "NET_DVR_STOPPING_SCANNING_ARRAY",SWIG_From_int(static_cast< int >((200+39))));
  SWIG_Python_SetConstant(d, "NET_DVR_NOT_SUPPORT_16T",SWIG_From_int(static_cast< int >((200+40))));
  SWIG_Python_SetConstant(d, "NET_DVR_ARRAY_FORMATING",SWIG_From_int(static_cast< int >((200+41))));
  SWIG_Python_SetConstant(d, "NET_DVR_QUICK_SETUP_PD_COUNT",SWIG_From_int(static_cast< int >((200+42))));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_DEVICE_NOT_ACTIVATED",SWIG_From_int(static_cast< int >(250)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_RISK_PASSWORD",SWIG_From_int(static_cast< int >(251)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_DEVICE_HAS_ACTIVATED",SWIG_From_int(static_cast< int >(252)));
  SWIG_Python_SetConstant(d, "VCA_ERROR_INDEX",SWIG_From_int(static_cast< int >(300)));
  SWIG_Python_SetConstant(d, "NET_DVR_ID_ERROR",SWIG_From_int(static_cast< int >((300+0))));
  SWIG_Python_SetConstant(d, "NET_DVR_POLYGON_ERROR",SWIG_From_int(static_cast< int >((300+1))));
  SWIG_Python_SetConstant(d, "NET_DVR_RULE_PARAM_ERROR",SWIG_From_int(static_cast< int >((300+2))));
  SWIG_Python_SetConstant(d, "NET_DVR_RULE_CFG_CONFLICT",SWIG_From_int(static_cast< int >((300+3))));
  SWIG_Python_SetConstant(d, "NET_DVR_CALIBRATE_NOT_READY",SWIG_From_int(static_cast< int >((300+4))));
  SWIG_Python_SetConstant(d, "NET_DVR_CAMERA_DATA_ERROR",SWIG_From_int(static_cast< int >((300+5))));
  SWIG_Python_SetConstant(d, "NET_DVR_CALIBRATE_DATA_UNFIT",SWIG_From_int(static_cast< int >((300+6))));
  SWIG_Python_SetConstant(d, "NET_DVR_CALIBRATE_DATA_CONFLICT",SWIG_From_int(static_cast< int >((300+7))));
  SWIG_Python_SetConstant(d, "NET_DVR_CALIBRATE_CALC_FAIL",SWIG_From_int(static_cast< int >((300+8))));
  SWIG_Python_SetConstant(d, "NET_DVR_CALIBRATE_LINE_OUT_RECT",SWIG_From_int(static_cast< int >((300+9))));
  SWIG_Python_SetConstant(d, "NET_DVR_ENTER_RULE_NOT_READY",SWIG_From_int(static_cast< int >((300+10))));
  SWIG_Python_SetConstant(d, "NET_DVR_AID_RULE_NO_INCLUDE_LANE",SWIG_From_int(static_cast< int >((300+11))));
  SWIG_Python_SetConstant(d, "NET_DVR_LANE_NOT_READY",SWIG_From_int(static_cast< int >((300+12))));
  SWIG_Python_SetConstant(d, "NET_DVR_RULE_INCLUDE_TWO_WAY",SWIG_From_int(static_cast< int >((300+13))));
  SWIG_Python_SetConstant(d, "NET_DVR_LANE_TPS_RULE_CONFLICT",SWIG_From_int(static_cast< int >((300+14))));
  SWIG_Python_SetConstant(d, "NET_DVR_NOT_SUPPORT_EVENT_TYPE",SWIG_From_int(static_cast< int >((300+15))));
  SWIG_Python_SetConstant(d, "NET_DVR_LANE_NO_WAY",SWIG_From_int(static_cast< int >((300+16))));
  SWIG_Python_SetConstant(d, "NET_DVR_SIZE_FILTER_ERROR",SWIG_From_int(static_cast< int >((300+17))));
  SWIG_Python_SetConstant(d, "NET_DVR_LIB_FFL_NO_FACE",SWIG_From_int(static_cast< int >((300+18))));
  SWIG_Python_SetConstant(d, "NET_DVR_LIB_FFL_IMG_TOO_SMALL",SWIG_From_int(static_cast< int >((300+19))));
  SWIG_Python_SetConstant(d, "NET_DVR_LIB_FD_IMG_NO_FACE",SWIG_From_int(static_cast< int >((300+20))));
  SWIG_Python_SetConstant(d, "NET_DVR_LIB_FACE_TOO_SMALL",SWIG_From_int(static_cast< int >((300+21))));
  SWIG_Python_SetConstant(d, "NET_DVR_LIB_FACE_QUALITY_TOO_BAD",SWIG_From_int(static_cast< int >((300+22))));
  SWIG_Python_SetConstant(d, "NET_DVR_KEY_PARAM_ERR",SWIG_From_int(static_cast< int >((300+23))));
  SWIG_Python_SetConstant(d, "NET_DVR_CALIBRATE_DATA_ERR",SWIG_From_int(static_cast< int >((300+24))));
  SWIG_Python_SetConstant(d, "NET_DVR_CALIBRATE_DISABLE_FAIL",SWIG_From_int(static_cast< int >((300+25))));
  SWIG_Python_SetConstant(d, "NET_DVR_VCA_LIB_FD_SCALE_OUTRANGE",SWIG_From_int(static_cast< int >((300+26))));
  SWIG_Python_SetConstant(d, "NET_DVR_LIB_FD_REGION_TOO_LARGE",SWIG_From_int(static_cast< int >((300+27))));
  SWIG_Python_SetConstant(d, "NET_DVR_TRIAL_OVERDUE",SWIG_From_int(static_cast< int >((300+28))));
  SWIG_Python_SetConstant(d, "NET_DVR_CONFIG_FILE_CONFLICT",SWIG_From_int(static_cast< int >((300+29))));
  SWIG_Python_SetConstant(d, "NET_DVR_FR_FPL_FAIL",SWIG_From_int(static_cast< int >((300+30))));
  SWIG_Python_SetConstant(d, "NET_DVR_FR_IQA_FAIL",SWIG_From_int(static_cast< int >((300+31))));
  SWIG_Python_SetConstant(d, "NET_DVR_FR_FEM_FAIL",SWIG_From_int(static_cast< int >((300+32))));
  SWIG_Python_SetConstant(d, "NET_DVR_FPL_DT_CONF_TOO_LOW",SWIG_From_int(static_cast< int >((300+33))));
  SWIG_Python_SetConstant(d, "NET_DVR_FPL_CONF_TOO_LOW",SWIG_From_int(static_cast< int >((300+34))));
  SWIG_Python_SetConstant(d, "NET_DVR_E_DATA_SIZE",SWIG_From_int(static_cast< int >((300+35))));
  SWIG_Python_SetConstant(d, "NET_DVR_FR_MODEL_VERSION_ERR",SWIG_From_int(static_cast< int >((300+36))));
  SWIG_Python_SetConstant(d, "NET_DVR_FR_FD_FAIL",SWIG_From_int(static_cast< int >((300+37))));
  SWIG_Python_SetConstant(d, "NET_DVR_FA_NORMALIZE_ERR",SWIG_From_int(static_cast< int >((300+38))));
  SWIG_Python_SetConstant(d, "NET_DVR_DOG_PUSTREAM_NOT_MATCH",SWIG_From_int(static_cast< int >((300+39))));
  SWIG_Python_SetConstant(d, "NET_DVR_DEV_PUSTREAM_NOT_MATCH",SWIG_From_int(static_cast< int >((300+40))));
  SWIG_Python_SetConstant(d, "NET_DVR_PUSTREAM_ALREADY_EXISTS",SWIG_From_int(static_cast< int >((300+41))));
  SWIG_Python_SetConstant(d, "NET_DVR_SEARCH_CONNECT_FAILED",SWIG_From_int(static_cast< int >((300+42))));
  SWIG_Python_SetConstant(d, "NET_DVR_INSUFFICIENT_DISK_SPACE",SWIG_From_int(static_cast< int >((300+43))));
  SWIG_Python_SetConstant(d, "NET_DVR_DATABASE_CONNECTION_FAILED",SWIG_From_int(static_cast< int >((300+44))));
  SWIG_Python_SetConstant(d, "NET_DVR_DATABASE_ADM_PW_ERROR",SWIG_From_int(static_cast< int >((300+45))));
  SWIG_Python_SetConstant(d, "NET_DVR_DECODE_YUV",SWIG_From_int(static_cast< int >((300+46))));
  SWIG_Python_SetConstant(d, "NET_DVR_IMAGE_RESOLUTION_ERROR",SWIG_From_int(static_cast< int >((300+47))));
  SWIG_Python_SetConstant(d, "NET_DVR_CHAN_WORKMODE_ERROR",SWIG_From_int(static_cast< int >((300+48))));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_ERROR_NOENOUGHPRI",SWIG_From_int(static_cast< int >(401)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_ERROR_ALLOC_RESOURCE",SWIG_From_int(static_cast< int >(402)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_ERROR_PARAMETER",SWIG_From_int(static_cast< int >(403)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_ERROR_NO_URL",SWIG_From_int(static_cast< int >(404)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_ERROR_FORCE_STOP",SWIG_From_int(static_cast< int >(406)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_GETPORTFAILED",SWIG_From_int(static_cast< int >(407)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_DESCRIBERROR",SWIG_From_int(static_cast< int >(410)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_DESCRIBESENDTIMEOUT",SWIG_From_int(static_cast< int >(411)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_DESCRIBESENDERROR",SWIG_From_int(static_cast< int >(412)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_DESCRIBERECVTIMEOUT",SWIG_From_int(static_cast< int >(413)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_DESCRIBERECVDATALOST",SWIG_From_int(static_cast< int >(414)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_DESCRIBERECVERROR",SWIG_From_int(static_cast< int >(415)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_DESCRIBESERVERERR",SWIG_From_int(static_cast< int >(416)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_SETUPERROR",SWIG_From_int(static_cast< int >(420)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_SETUPSENDTIMEOUT",SWIG_From_int(static_cast< int >(421)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_SETUPSENDERROR",SWIG_From_int(static_cast< int >(422)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_SETUPRECVTIMEOUT",SWIG_From_int(static_cast< int >(423)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_SETUPRECVDATALOST",SWIG_From_int(static_cast< int >(424)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_SETUPRECVERROR",SWIG_From_int(static_cast< int >(425)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_OVER_MAX_CHAN",SWIG_From_int(static_cast< int >(426)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_SETUPSERVERERR",SWIG_From_int(static_cast< int >(427)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_PLAYERROR",SWIG_From_int(static_cast< int >(430)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_PLAYSENDTIMEOUT",SWIG_From_int(static_cast< int >(431)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_PLAYSENDERROR",SWIG_From_int(static_cast< int >(432)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_PLAYRECVTIMEOUT",SWIG_From_int(static_cast< int >(433)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_PLAYRECVDATALOST",SWIG_From_int(static_cast< int >(434)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_PLAYRECVERROR",SWIG_From_int(static_cast< int >(435)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_PLAYSERVERERR",SWIG_From_int(static_cast< int >(436)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_TEARDOWNERROR",SWIG_From_int(static_cast< int >(440)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_TEARDOWNSENDTIMEOUT",SWIG_From_int(static_cast< int >(441)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_TEARDOWNSENDERROR",SWIG_From_int(static_cast< int >(442)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_TEARDOWNRECVTIMEOUT",SWIG_From_int(static_cast< int >(443)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_TEARDOWNRECVDATALOST",SWIG_From_int(static_cast< int >(444)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_TEARDOWNRECVERROR",SWIG_From_int(static_cast< int >(445)));
  SWIG_Python_SetConstant(d, "NET_DVR_RTSP_TEARDOWNSERVERERR",SWIG_From_int(static_cast< int >(446)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_NOERROR",SWIG_From_int(static_cast< int >(500)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_PARA_OVER",SWIG_From_int(static_cast< int >(501)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_ORDER_ERROR",SWIG_From_int(static_cast< int >(502)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_TIMER_ERROR",SWIG_From_int(static_cast< int >(503)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_DEC_VIDEO_ERROR",SWIG_From_int(static_cast< int >(504)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_DEC_AUDIO_ERROR",SWIG_From_int(static_cast< int >(505)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_ALLOC_MEMORY_ERROR",SWIG_From_int(static_cast< int >(506)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_OPEN_FILE_ERROR",SWIG_From_int(static_cast< int >(507)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_CREATE_OBJ_ERROR",SWIG_From_int(static_cast< int >(508)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_CREATE_DDRAW_ERROR",SWIG_From_int(static_cast< int >(509)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_CREATE_OFFSCREEN_ERROR",SWIG_From_int(static_cast< int >(510)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_BUF_OVER",SWIG_From_int(static_cast< int >(511)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_CREATE_SOUND_ERROR",SWIG_From_int(static_cast< int >(512)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_SET_VOLUME_ERROR",SWIG_From_int(static_cast< int >(513)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_SUPPORT_FILE_ONLY",SWIG_From_int(static_cast< int >(514)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_SUPPORT_STREAM_ONLY",SWIG_From_int(static_cast< int >(515)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_SYS_NOT_SUPPORT",SWIG_From_int(static_cast< int >(516)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_FILEHEADER_UNKNOWN",SWIG_From_int(static_cast< int >(517)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_VERSION_INCORRECT",SWIG_From_int(static_cast< int >(518)));
  SWIG_Python_SetConstant(d, "NET_PALYM4_INIT_DECODER_ERROR",SWIG_From_int(static_cast< int >(519)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_CHECK_FILE_ERROR",SWIG_From_int(static_cast< int >(520)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_INIT_TIMER_ERROR",SWIG_From_int(static_cast< int >(521)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_BLT_ERROR",SWIG_From_int(static_cast< int >(522)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_UPDATE_ERROR",SWIG_From_int(static_cast< int >(523)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_OPEN_FILE_ERROR_MULTI",SWIG_From_int(static_cast< int >(524)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_OPEN_FILE_ERROR_VIDEO",SWIG_From_int(static_cast< int >(525)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_JPEG_COMPRESS_ERROR",SWIG_From_int(static_cast< int >(526)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_EXTRACT_NOT_SUPPORT",SWIG_From_int(static_cast< int >(527)));
  SWIG_Python_SetConstant(d, "NET_PLAYM4_EXTRACT_DATA_ERROR",SWIG_From_int(static_cast< int >(528)));
  SWIG_Python_SetConstant(d, "NET_CONVERT_ERROR_NOT_SUPPORT",SWIG_From_int(static_cast< int >(581)));
  SWIG_Python_SetConstant(d, "NET_AUDIOINTERCOM_OK",SWIG_From_int(static_cast< int >(600)));
  SWIG_Python_SetConstant(d, "NET_AUDIOINTECOM_ERR_NOTSUPORT",SWIG_From_int(static_cast< int >(601)));
  SWIG_Python_SetConstant(d, "NET_AUDIOINTECOM_ERR_ALLOC_MEMERY",SWIG_From_int(static_cast< int >(602)));
  SWIG_Python_SetConstant(d, "NET_AUDIOINTECOM_ERR_PARAMETER",SWIG_From_int(static_cast< int >(603)));
  SWIG_Python_SetConstant(d, "NET_AUDIOINTECOM_ERR_CALL_ORDER",SWIG_From_int(static_cast< int >(604)));
  SWIG_Python_SetConstant(d, "NET_AUDIOINTECOM_ERR_FIND_DEVICE",SWIG_From_int(static_cast< int >(605)));
  SWIG_Python_SetConstant(d, "NET_AUDIOINTECOM_ERR_OPEN_DEVICE",SWIG_From_int(static_cast< int >(606)));
  SWIG_Python_SetConstant(d, "NET_AUDIOINTECOM_ERR_NO_CONTEXT",SWIG_From_int(static_cast< int >(607)));
  SWIG_Python_SetConstant(d, "NET_AUDIOINTECOM_ERR_NO_WAVFILE",SWIG_From_int(static_cast< int >(608)));
  SWIG_Python_SetConstant(d, "NET_AUDIOINTECOM_ERR_INVALID_TYPE",SWIG_From_int(static_cast< int >(609)));
  SWIG_Python_SetConstant(d, "NET_AUDIOINTECOM_ERR_ENCODE_FAIL",SWIG_From_int(static_cast< int >(610)));
  SWIG_Python_SetConstant(d, "NET_AUDIOINTECOM_ERR_DECODE_FAIL",SWIG_From_int(static_cast< int >(611)));
  SWIG_Python_SetConstant(d, "NET_AUDIOINTECOM_ERR_NO_PLAYBACK",SWIG_From_int(static_cast< int >(612)));
  SWIG_Python_SetConstant(d, "NET_AUDIOINTECOM_ERR_DENOISE_FAIL",SWIG_From_int(static_cast< int >(613)));
  SWIG_Python_SetConstant(d, "NET_AUDIOINTECOM_ERR_UNKOWN",SWIG_From_int(static_cast< int >(619)));
  SWIG_Python_SetConstant(d, "NET_QOS_OK",SWIG_From_int(static_cast< int >(700)));
  SWIG_Python_SetConstant(d, "NET_QOS_ERROR",SWIG_From_int(static_cast< int >((700-1))));
  SWIG_Python_SetConstant(d, "NET_QOS_ERR_INVALID_ARGUMENTS",SWIG_From_int(static_cast< int >((700-2))));
  SWIG_Python_SetConstant(d, "NET_QOS_ERR_SESSION_NOT_FOUND",SWIG_From_int(static_cast< int >((700-3))));
  SWIG_Python_SetConstant(d, "NET_QOS_ERR_LIB_NOT_INITIALIZED",SWIG_From_int(static_cast< int >((700-4))));
  SWIG_Python_SetConstant(d, "NET_QOS_ERR_OUTOFMEM",SWIG_From_int(static_cast< int >((700-5))));
  SWIG_Python_SetConstant(d, "NET_QOS_ERR_PACKET_UNKNOW",SWIG_From_int(static_cast< int >((700-10))));
  SWIG_Python_SetConstant(d, "NET_QOS_ERR_PACKET_VERSION",SWIG_From_int(static_cast< int >((700-11))));
  SWIG_Python_SetConstant(d, "NET_QOS_ERR_PACKET_LENGTH",SWIG_From_int(static_cast< int >((700-12))));
  SWIG_Python_SetConstant(d, "NET_QOS_ERR_PACKET_TOO_BIG",SWIG_From_int(static_cast< int >((700-13))));
  SWIG_Python_SetConstant(d, "NET_QOS_ERR_SCHEDPARAMS_INVALID_BANDWIDTH",SWIG_From_int(static_cast< int >((700-20))));
  SWIG_Python_SetConstant(d, "NET_QOS_ERR_SCHEDPARAMS_BAD_FRACTION",SWIG_From_int(static_cast< int >((700-21))));
  SWIG_Python_SetConstant(d, "NET_QOS_ERR_SCHEDPARAMS_BAD_MINIMUM_INTERVAL",SWIG_From_int(static_cast< int >((700-22))));
  SWIG_Python_SetConstant(d, "NET_ERROR_TRUNK_LINE",SWIG_From_int(static_cast< int >(711)));
  SWIG_Python_SetConstant(d, "NET_ERROR_MIXED_JOINT",SWIG_From_int(static_cast< int >(712)));
  SWIG_Python_SetConstant(d, "NET_ERROR_DISPLAY_SWITCH",SWIG_From_int(static_cast< int >(713)));
  SWIG_Python_SetConstant(d, "NET_ERROR_USED_BY_BIG_SCREEN",SWIG_From_int(static_cast< int >(714)));
  SWIG_Python_SetConstant(d, "NET_ERROR_USE_OTHER_DEC_RESOURCE",SWIG_From_int(static_cast< int >(715)));
  SWIG_Python_SetConstant(d, "NET_ERROR_DISP_MODE_SWITCH",SWIG_From_int(static_cast< int >(716)));
  SWIG_Python_SetConstant(d, "NET_ERROR_SCENE_USING",SWIG_From_int(static_cast< int >(717)));
  SWIG_Python_SetConstant(d, "NET_ERR_NO_ENOUGH_DEC_RESOURCE",SWIG_From_int(static_cast< int >(718)));
  SWIG_Python_SetConstant(d, "NET_ERR_NO_ENOUGH_FREE_SHOW_RESOURCE",SWIG_From_int(static_cast< int >(719)));
  SWIG_Python_SetConstant(d, "NET_ERR_NO_ENOUGH_VIDEO_MEMORY",SWIG_From_int(static_cast< int >(720)));
  SWIG_Python_SetConstant(d, "NET_ERR_MAX_VIDEO_NUM",SWIG_From_int(static_cast< int >(721)));
  SWIG_Python_SetConstant(d, "NET_ERR_WIN_COVER_FREE_SHOW_AND_NORMAL",SWIG_From_int(static_cast< int >(722)));
  SWIG_Python_SetConstant(d, "NET_ERR_FREE_SHOW_WIN_SPLIT",SWIG_From_int(static_cast< int >(723)));
  SWIG_Python_SetConstant(d, "NET_ERR_INAPPROPRIATE_WIN_FREE_SHOW",SWIG_From_int(static_cast< int >(724)));
  SWIG_Python_SetConstant(d, "NET_DVR_TRANSPARENT_WIN_NOT_SUPPORT_SPLIT",SWIG_From_int(static_cast< int >(725)));
  SWIG_Python_SetConstant(d, "NET_DVR_SPLIT_WIN_NOT_SUPPORT_TRANSPARENT",SWIG_From_int(static_cast< int >(726)));
  SWIG_Python_SetConstant(d, "NET_ERR_MAX_LOGO_NUM",SWIG_From_int(static_cast< int >(727)));
  SWIG_Python_SetConstant(d, "NET_ERR_MAX_WIN_LOOP_NUM",SWIG_From_int(static_cast< int >(728)));
  SWIG_Python_SetConstant(d, "NET_ERR_VIRTUAL_LED_VERTICAL_CROSS",SWIG_From_int(static_cast< int >(729)));
  SWIG_Python_SetConstant(d, "NET_ERR_MAX_VIRTUAL_LED_HEIGHT",SWIG_From_int(static_cast< int >(730)));
  SWIG_Python_SetConstant(d, "NET_ERR_VIRTUAL_LED_ILLEGAL_CHARACTER",SWIG_From_int(static_cast< int >(731)));
  SWIG_Python_SetConstant(d, "NET_ERR_BASEMAP_NOT_EXIST",SWIG_From_int(static_cast< int >(732)));
  SWIG_Python_SetConstant(d, "NET_ERR_LED_NOT_SUPPORT_VIRTUAL_LED",SWIG_From_int(static_cast< int >(733)));
  SWIG_Python_SetConstant(d, "NET_ERR_LED_RESOLUTION_NOT_SUPPORT",SWIG_From_int(static_cast< int >(734)));
  SWIG_Python_SetConstant(d, "NET_ERR_PLAN_OVERDUE",SWIG_From_int(static_cast< int >(735)));
  SWIG_Python_SetConstant(d, "NET_ERR_PROCESSER_MAX_SCREEN_BLK",SWIG_From_int(static_cast< int >(736)));
  SWIG_Python_SetConstant(d, "NET_ERR_WND_SIZE_TOO_SMALL",SWIG_From_int(static_cast< int >(737)));
  SWIG_Python_SetConstant(d, "NET_ERR_WND_SPLIT_NOT_SUPPORT_ROAM",SWIG_From_int(static_cast< int >(738)));
  SWIG_Python_SetConstant(d, "NET_ERR_OUTPUT_ONE_BOARD_ONE_WALL",SWIG_From_int(static_cast< int >(739)));
  SWIG_Python_SetConstant(d, "NET_ERR_WND_CANNOT_LCD_AND_LED_OUTPUT",SWIG_From_int(static_cast< int >(740)));
  SWIG_Python_SetConstant(d, "NET_ERR_MAX_OSD_NUM",SWIG_From_int(static_cast< int >(741)));
  SWIG_Python_SetConstant(d, "NET_SDK_CANCEL_WND_TOPKEEP_ATTR_FIRST",SWIG_From_int(static_cast< int >(751)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_LED_SCREEN_CHECKING",SWIG_From_int(static_cast< int >(752)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_NOT_SUPPORT_SINGLE_RESOLUTION",SWIG_From_int(static_cast< int >(753)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_LED_RESOLUTION_MISMATCHED",SWIG_From_int(static_cast< int >(754)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_MAX_VIRTUAL_LED_WIDTH",SWIG_From_int(static_cast< int >(755)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_MAX_VIRTUAL_LED_IN_SCREEN",SWIG_From_int(static_cast< int >(756)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_MAX_VIRTUAL_LED_IN_WALL",SWIG_From_int(static_cast< int >(757)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_VIRTUAL_LED_OVERLAP",SWIG_From_int(static_cast< int >(758)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_VIRTUAL_LED_TYPE",SWIG_From_int(static_cast< int >(759)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_VIRTUAL_LED_COLOUR",SWIG_From_int(static_cast< int >(760)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_VIRTUAL_LED_MOVE_DIRECTION",SWIG_From_int(static_cast< int >(761)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_VIRTUAL_LED_MOVE_MODE",SWIG_From_int(static_cast< int >(762)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_VIRTUAL_LED_MOVE_SPEED",SWIG_From_int(static_cast< int >(763)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_VIRTUAL_LED_DISP_MODE",SWIG_From_int(static_cast< int >(764)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_VIRTUAL_LED_NO",SWIG_From_int(static_cast< int >(765)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_VIRTUAL_LED_PARA",SWIG_From_int(static_cast< int >(766)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_BASEMAP_POSITION",SWIG_From_int(static_cast< int >(767)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_BASEMAP_PICTURE_LEN",SWIG_From_int(static_cast< int >(768)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_BASEMAP_PICTURE_RESOLUTION",SWIG_From_int(static_cast< int >(769)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_BASEMAP_PICTURE_FORMAT",SWIG_From_int(static_cast< int >(770)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_MAX_VIRTUAL_LED_NUM",SWIG_From_int(static_cast< int >(771)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_MAX_TIME_VIRTUAL_LED_IN_WALL",SWIG_From_int(static_cast< int >(772)));
  SWIG_Python_SetConstant(d, "NET_ERR_TERMINAL_BUSY",SWIG_From_int(static_cast< int >(780)));
  SWIG_Python_SetConstant(d, "NET_ERR_DATA_RETURNED_ILLEGAL",SWIG_From_int(static_cast< int >(790)));
  SWIG_Python_SetConstant(d, "NET_DVR_FUNCTION_RESOURCE_USAGE_ERROR",SWIG_From_int(static_cast< int >(791)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_IMPORT_EMPTY_FILE",SWIG_From_int(static_cast< int >(792)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_IMPORT_TOO_LARGE_FILE",SWIG_From_int(static_cast< int >(793)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_BAD_IPV4_ADDRESS",SWIG_From_int(static_cast< int >(794)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_BAD_NET_MASK",SWIG_From_int(static_cast< int >(795)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_INVALID_NET_GATE_ADDRESS",SWIG_From_int(static_cast< int >(796)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_BAD_DNS",SWIG_From_int(static_cast< int >(797)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_ILLEGAL_PASSWORD",SWIG_From_int(static_cast< int >(798)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEV_NET_OVERFLOW",SWIG_From_int(static_cast< int >(800)));
  SWIG_Python_SetConstant(d, "NET_DVR_STATUS_RECORDFILE_WRITING_NOT_LOCK",SWIG_From_int(static_cast< int >(801)));
  SWIG_Python_SetConstant(d, "NET_DVR_STATUS_CANT_FORMAT_LITTLE_DISK",SWIG_From_int(static_cast< int >(802)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_REMOTE_DISCONNECT",SWIG_From_int(static_cast< int >(803)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_RD_ADD_RD",SWIG_From_int(static_cast< int >(804)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_BACKUP_DISK_EXCEPT",SWIG_From_int(static_cast< int >(805)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_RD_LIMIT",SWIG_From_int(static_cast< int >(806)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_ADDED_RD_IS_WD",SWIG_From_int(static_cast< int >(807)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_ADD_ORDER_WRONG",SWIG_From_int(static_cast< int >(808)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_WD_ADD_WD",SWIG_From_int(static_cast< int >(809)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_WD_SERVICE_EXCETP",SWIG_From_int(static_cast< int >(810)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_RD_SERVICE_EXCETP",SWIG_From_int(static_cast< int >(811)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_ADDED_WD_IS_RD",SWIG_From_int(static_cast< int >(812)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_PERFORMANCE_LIMIT",SWIG_From_int(static_cast< int >(813)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_ADDED_DEVICE_EXIST",SWIG_From_int(static_cast< int >(814)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_INQUEST_RESUMING",SWIG_From_int(static_cast< int >(815)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_RECORD_BACKUPING",SWIG_From_int(static_cast< int >(816)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_DISK_PLAYING",SWIG_From_int(static_cast< int >(817)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_INQUEST_STARTED",SWIG_From_int(static_cast< int >(818)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_LOCAL_OPERATING",SWIG_From_int(static_cast< int >(819)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_INQUEST_NOT_START",SWIG_From_int(static_cast< int >(820)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_CHAN_AUDIO_BIND",SWIG_From_int(static_cast< int >(821)));
  SWIG_Python_SetConstant(d, "NET_DVR_N_PLUS_ONE_MODE",SWIG_From_int(static_cast< int >(822)));
  SWIG_Python_SetConstant(d, "NET_DVR_CLOUD_STORAGE_OPENED",SWIG_From_int(static_cast< int >(823)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_OPER_NOT_ALLOWED",SWIG_From_int(static_cast< int >(824)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_NEED_RELOCATE",SWIG_From_int(static_cast< int >(825)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_IR_PORT_ERROR",SWIG_From_int(static_cast< int >(830)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_IR_CMD_ERROR",SWIG_From_int(static_cast< int >(831)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_NOT_INQUESTING",SWIG_From_int(static_cast< int >(832)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_INQUEST_NOT_PAUSED",SWIG_From_int(static_cast< int >(833)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHECK_PASSWORD_MISTAKE_ERROR",SWIG_From_int(static_cast< int >(834)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHECK_PASSWORD_NULL_ERROR",SWIG_From_int(static_cast< int >(835)));
  SWIG_Python_SetConstant(d, "NET_DVR_UNABLE_CALIB_ERROR",SWIG_From_int(static_cast< int >(836)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLEASE_CALIB_ERROR",SWIG_From_int(static_cast< int >(837)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PANORAMIC_CAL_EMPTY",SWIG_From_int(static_cast< int >(838)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CALIB_FAIL_PLEASEAGAIN",SWIG_From_int(static_cast< int >(839)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_DETECTION_LINE",SWIG_From_int(static_cast< int >(840)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_TURN_OFF_IMAGE_PARA",SWIG_From_int(static_cast< int >(841)));
  SWIG_Python_SetConstant(d, "NET_DVR_EXCEED_FACE_IMAGES_ERROR",SWIG_From_int(static_cast< int >(843)));
  SWIG_Python_SetConstant(d, "NET_DVR_ANALYSIS_FACE_IMAGES_ERROR",SWIG_From_int(static_cast< int >(844)));
  SWIG_Python_SetConstant(d, "NET_ERR_ALARM_INPUT_OCCUPIED",SWIG_From_int(static_cast< int >(845)));
  SWIG_Python_SetConstant(d, "NET_DVR_FACELIB_DATABASE_ERROR",SWIG_From_int(static_cast< int >(846)));
  SWIG_Python_SetConstant(d, "NET_DVR_FACELIB_DATA_ERROR",SWIG_From_int(static_cast< int >(847)));
  SWIG_Python_SetConstant(d, "NET_DVR_FACE_DATA_ID_ERROR",SWIG_From_int(static_cast< int >(848)));
  SWIG_Python_SetConstant(d, "NET_DVR_FACELIB_ID_ERROR",SWIG_From_int(static_cast< int >(849)));
  SWIG_Python_SetConstant(d, "NET_DVR_EXCEED_FACE_LIBARY_ERROR",SWIG_From_int(static_cast< int >(850)));
  SWIG_Python_SetConstant(d, "NET_DVR_PIC_ANALYSIS_NO_TARGET_ERROR",SWIG_From_int(static_cast< int >(851)));
  SWIG_Python_SetConstant(d, "NET_DVR_SUBPIC_ANALYSIS_MODELING_ERROR",SWIG_From_int(static_cast< int >(852)));
  SWIG_Python_SetConstant(d, "NET_DVR_PIC_ANALYSIS_NO_RESOURCE_ERROR",SWIG_From_int(static_cast< int >(853)));
  SWIG_Python_SetConstant(d, "NET_DVR_ANALYSIS_ENGINES_NO_RESOURCE_ERROR",SWIG_From_int(static_cast< int >(854)));
  SWIG_Python_SetConstant(d, "NET_DVR_ANALYSIS_ENGINES_USAGE_EXCEED_ERROR",SWIG_From_int(static_cast< int >(855)));
  SWIG_Python_SetConstant(d, "NET_DVR_EXCEED_HUMANMISINFO_FILTER_ENABLED_ERROR",SWIG_From_int(static_cast< int >(856)));
  SWIG_Python_SetConstant(d, "NET_DVR_NAME_ERROR",SWIG_From_int(static_cast< int >(857)));
  SWIG_Python_SetConstant(d, "NET_DVR_NAME_EXIST_ERROR",SWIG_From_int(static_cast< int >(858)));
  SWIG_Python_SetConstant(d, "NET_DVR_FACELIB_PIC_IMPORTING_ERROR",SWIG_From_int(static_cast< int >(859)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CALIB_POSITION",SWIG_From_int(static_cast< int >(860)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_DELETE",SWIG_From_int(static_cast< int >(861)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_SCENE_ID",SWIG_From_int(static_cast< int >(862)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CALIBING",SWIG_From_int(static_cast< int >(863)));
  SWIG_Python_SetConstant(d, "NET_DVR_PIC_FORMAT_ERROR",SWIG_From_int(static_cast< int >(864)));
  SWIG_Python_SetConstant(d, "NET_DVR_PIC_RESOLUTION_INVALID_ERROR",SWIG_From_int(static_cast< int >(865)));
  SWIG_Python_SetConstant(d, "NET_DVR_PIC_SIZE_EXCEED_ERROR",SWIG_From_int(static_cast< int >(866)));
  SWIG_Python_SetConstant(d, "NET_DVR_PIC_ANALYSIS_TARGRT_NUM_EXCEED_ERROR",SWIG_From_int(static_cast< int >(867)));
  SWIG_Python_SetConstant(d, "NET_DVR_ANALYSIS_ENGINES_LOADING_ERROR",SWIG_From_int(static_cast< int >(868)));
  SWIG_Python_SetConstant(d, "NET_DVR_ANALYSIS_ENGINES_ABNORMA_ERROR",SWIG_From_int(static_cast< int >(869)));
  SWIG_Python_SetConstant(d, "NET_DVR_ANALYSIS_ENGINES_FACELIB_IMPORTING",SWIG_From_int(static_cast< int >(870)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_DATA_FOR_MODELING_ERROR",SWIG_From_int(static_cast< int >(871)));
  SWIG_Python_SetConstant(d, "NET_DVR_FACE_DATA_MODELING_ERROR",SWIG_From_int(static_cast< int >(872)));
  SWIG_Python_SetConstant(d, "NET_ERR_FACELIBDATA_OVERLIMIT",SWIG_From_int(static_cast< int >(873)));
  SWIG_Python_SetConstant(d, "NET_DVR_ANALYSIS_ENGINES_ASSOCIATED_CHANNEL",SWIG_From_int(static_cast< int >(874)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CUSTOMID_LEN",SWIG_From_int(static_cast< int >(875)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CUSTOMFACELIBID_REPEAT",SWIG_From_int(static_cast< int >(876)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CUSTOMHUMANID_REPEAT",SWIG_From_int(static_cast< int >(877)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_URL_DOWNLOAD_FAIL",SWIG_From_int(static_cast< int >(878)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_URL_DOWNLOAD_NOTSTART",SWIG_From_int(static_cast< int >(879)));
  SWIG_Python_SetConstant(d, "NET_DVR_CFG_FILE_SECRETKEY_ERROR",SWIG_From_int(static_cast< int >(880)));
  SWIG_Python_SetConstant(d, "NET_DVR_WDR_NOTDISABLE_ERROR",SWIG_From_int(static_cast< int >(881)));
  SWIG_Python_SetConstant(d, "NET_DVR_HLC_NOTDISABLE_ERROR",SWIG_From_int(static_cast< int >(882)));
  SWIG_Python_SetConstant(d, "NET_DVR_THERMOMETRY_REGION_OVERSTEP_ERROR",SWIG_From_int(static_cast< int >(883)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_MODELING_DEVICEINTERNAL",SWIG_From_int(static_cast< int >(884)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_MODELING_FACE",SWIG_From_int(static_cast< int >(885)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_MODELING_FACEGRADING",SWIG_From_int(static_cast< int >(886)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_MODELING_FACEGFEATURE",SWIG_From_int(static_cast< int >(887)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_MODELING_FACEGANALYZING",SWIG_From_int(static_cast< int >(888)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_STREAM_LIMIT",SWIG_From_int(static_cast< int >(889)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_STREAM_DESCRIPTION",SWIG_From_int(static_cast< int >(890)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_STREAM_DELETE",SWIG_From_int(static_cast< int >(891)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CUSTOMSTREAM_NAME",SWIG_From_int(static_cast< int >(892)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CUSTOMSTREAM_NOTEXISTED",SWIG_From_int(static_cast< int >(893)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_TOO_SHORT_CALIBRATING_TIME",SWIG_From_int(static_cast< int >(894)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_AUTO_CALIBRATE_FAILED",SWIG_From_int(static_cast< int >(895)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_VERIFICATION_FAILED",SWIG_From_int(static_cast< int >(896)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_TEMP_SENSOR_ERROR",SWIG_From_int(static_cast< int >(897)));
  SWIG_Python_SetConstant(d, "NET_DVR_PUPIL_DISTANCE_OVERSIZE_ERROR",SWIG_From_int(static_cast< int >(898)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_UNOPENED_FACE_SNAP",SWIG_From_int(static_cast< int >(899)));
  SWIG_Python_SetConstant(d, "NET_ERR_CUT_INPUTSTREAM_OVERLIMIT",SWIG_From_int(static_cast< int >(900)));
  SWIG_Python_SetConstant(d, "NET_ERR_WINCHAN_IDX",SWIG_From_int(static_cast< int >(901)));
  SWIG_Python_SetConstant(d, "NET_ERR_WIN_LAYER",SWIG_From_int(static_cast< int >(902)));
  SWIG_Python_SetConstant(d, "NET_ERR_WIN_BLK_NUM",SWIG_From_int(static_cast< int >(903)));
  SWIG_Python_SetConstant(d, "NET_ERR_OUTPUT_RESOLUTION",SWIG_From_int(static_cast< int >(904)));
  SWIG_Python_SetConstant(d, "NET_ERR_LAYOUT",SWIG_From_int(static_cast< int >(905)));
  SWIG_Python_SetConstant(d, "NET_ERR_INPUT_RESOLUTION",SWIG_From_int(static_cast< int >(906)));
  SWIG_Python_SetConstant(d, "NET_ERR_SUBDEVICE_OFFLINE",SWIG_From_int(static_cast< int >(907)));
  SWIG_Python_SetConstant(d, "NET_ERR_NO_DECODE_CHAN",SWIG_From_int(static_cast< int >(908)));
  SWIG_Python_SetConstant(d, "NET_ERR_MAX_WINDOW_ABILITY",SWIG_From_int(static_cast< int >(909)));
  SWIG_Python_SetConstant(d, "NET_ERR_ORDER_ERROR",SWIG_From_int(static_cast< int >(910)));
  SWIG_Python_SetConstant(d, "NET_ERR_PLAYING_PLAN",SWIG_From_int(static_cast< int >(911)));
  SWIG_Python_SetConstant(d, "NET_ERR_DECODER_USED",SWIG_From_int(static_cast< int >(912)));
  SWIG_Python_SetConstant(d, "NET_ERR_OUTPUT_BOARD_DATA_OVERFLOW",SWIG_From_int(static_cast< int >(913)));
  SWIG_Python_SetConstant(d, "NET_ERR_SAME_USER_NAME",SWIG_From_int(static_cast< int >(914)));
  SWIG_Python_SetConstant(d, "NET_ERR_INVALID_USER_NAME",SWIG_From_int(static_cast< int >(915)));
  SWIG_Python_SetConstant(d, "NET_ERR_MATRIX_USING",SWIG_From_int(static_cast< int >(916)));
  SWIG_Python_SetConstant(d, "NET_ERR_DIFFERENT_CHAN_TYPE",SWIG_From_int(static_cast< int >(917)));
  SWIG_Python_SetConstant(d, "NET_ERR_INPUT_CHAN_BINDED",SWIG_From_int(static_cast< int >(918)));
  SWIG_Python_SetConstant(d, "NET_ERR_BINDED_OUTPUT_CHAN_OVERFLOW",SWIG_From_int(static_cast< int >(919)));
  SWIG_Python_SetConstant(d, "NET_ERR_MAX_SIGNAL_NUM",SWIG_From_int(static_cast< int >(920)));
  SWIG_Python_SetConstant(d, "NET_ERR_INPUT_CHAN_USING",SWIG_From_int(static_cast< int >(921)));
  SWIG_Python_SetConstant(d, "NET_ERR_MANAGER_LOGON",SWIG_From_int(static_cast< int >(922)));
  SWIG_Python_SetConstant(d, "NET_ERR_USERALREADY_LOGON",SWIG_From_int(static_cast< int >(923)));
  SWIG_Python_SetConstant(d, "NET_ERR_LAYOUT_INIT",SWIG_From_int(static_cast< int >(924)));
  SWIG_Python_SetConstant(d, "NET_ERR_BASEMAP_SIZE_NOT_MATCH",SWIG_From_int(static_cast< int >(925)));
  SWIG_Python_SetConstant(d, "NET_ERR_WINDOW_OPERATING",SWIG_From_int(static_cast< int >(926)));
  SWIG_Python_SetConstant(d, "NET_ERR_SIGNAL_UPLIMIT",SWIG_From_int(static_cast< int >(927)));
  SWIG_Python_SetConstant(d, "NET_ERR_SIGNAL_MAX_ENLARGE_TIMES",SWIG_From_int(static_cast< int >(928)));
  SWIG_Python_SetConstant(d, "NET_ERR_ONE_SIGNAL_MULTI_CROSS",SWIG_From_int(static_cast< int >(929)));
  SWIG_Python_SetConstant(d, "NET_ERR_ULTRA_HD_SIGNAL_MULTI_WIN",SWIG_From_int(static_cast< int >(930)));
  SWIG_Python_SetConstant(d, "NET_ERR_MAX_VIRTUAL_LED_WIDTH",SWIG_From_int(static_cast< int >(931)));
  SWIG_Python_SetConstant(d, "NET_ERR_MAX_VIRTUAL_LED_WORD_LEN",SWIG_From_int(static_cast< int >(932)));
  SWIG_Python_SetConstant(d, "NET_ERR_SINGLE_OUTPUTPARAM_CONFIG",SWIG_From_int(static_cast< int >(933)));
  SWIG_Python_SetConstant(d, "NET_ERR_MULTI_WIN_BE_COVER",SWIG_From_int(static_cast< int >(934)));
  SWIG_Python_SetConstant(d, "NET_ERR_WIN_NOT_EXIST",SWIG_From_int(static_cast< int >(935)));
  SWIG_Python_SetConstant(d, "NET_ERR_WIN_MAX_SIGNALSOURCE",SWIG_From_int(static_cast< int >(936)));
  SWIG_Python_SetConstant(d, "NET_ERR_MULTI_WIN_MOVE",SWIG_From_int(static_cast< int >(937)));
  SWIG_Python_SetConstant(d, "NET_ERR_MULTI_WIN_YPBPR_SDI",SWIG_From_int(static_cast< int >(938)));
  SWIG_Python_SetConstant(d, "NET_ERR_DIFF_TYPE_OUTPUT_MIXUSE",SWIG_From_int(static_cast< int >(939)));
  SWIG_Python_SetConstant(d, "NET_ERR_SPLIT_WIN_CROSS",SWIG_From_int(static_cast< int >(940)));
  SWIG_Python_SetConstant(d, "NET_ERR_SPLIT_WIN_NOT_FULL_SCREEN",SWIG_From_int(static_cast< int >(941)));
  SWIG_Python_SetConstant(d, "NET_ERR_SPLIT_WIN_MANY_WIN",SWIG_From_int(static_cast< int >(942)));
  SWIG_Python_SetConstant(d, "NET_ERR_WINDOW_SIZE_OVERLIMIT",SWIG_From_int(static_cast< int >(943)));
  SWIG_Python_SetConstant(d, "NET_ERR_INPUTSTREAM_ALREADY_JOINT",SWIG_From_int(static_cast< int >(944)));
  SWIG_Python_SetConstant(d, "NET_ERR_JOINT_INPUTSTREAM_OVERLIMIT",SWIG_From_int(static_cast< int >(945)));
  SWIG_Python_SetConstant(d, "NET_ERR_LED_RESOLUTION",SWIG_From_int(static_cast< int >(946)));
  SWIG_Python_SetConstant(d, "NET_ERR_JOINT_SCALE_OVERLIMIT",SWIG_From_int(static_cast< int >(947)));
  SWIG_Python_SetConstant(d, "NET_ERR_INPUTSTREAM_ALREADY_DECODE",SWIG_From_int(static_cast< int >(948)));
  SWIG_Python_SetConstant(d, "NET_ERR_INPUTSTREAM_NOTSUPPORT_CAPTURE",SWIG_From_int(static_cast< int >(949)));
  SWIG_Python_SetConstant(d, "NET_ERR_JOINT_NOTSUPPORT_SPLITWIN",SWIG_From_int(static_cast< int >(950)));
  SWIG_Python_SetConstant(d, "NET_ERR_MAX_WIN_OVERLAP",SWIG_From_int(static_cast< int >(951)));
  SWIG_Python_SetConstant(d, "NET_ERR_STREAMID_CHAN_BOTH_VALID",SWIG_From_int(static_cast< int >(952)));
  SWIG_Python_SetConstant(d, "NET_ERR_NO_ZERO_CHAN",SWIG_From_int(static_cast< int >(953)));
  SWIG_Python_SetConstant(d, "NEED_RECONNECT",SWIG_From_int(static_cast< int >(955)));
  SWIG_Python_SetConstant(d, "NET_ERR_NO_STREAM_ID",SWIG_From_int(static_cast< int >(956)));
  SWIG_Python_SetConstant(d, "NET_DVR_TRANS_NOT_START",SWIG_From_int(static_cast< int >(957)));
  SWIG_Python_SetConstant(d, "NET_ERR_MAXNUM_STREAM_ID",SWIG_From_int(static_cast< int >(958)));
  SWIG_Python_SetConstant(d, "NET_ERR_WORKMODE_MISMATCH",SWIG_From_int(static_cast< int >(959)));
  SWIG_Python_SetConstant(d, "NET_ERR_MODE_IS_USING",SWIG_From_int(static_cast< int >(960)));
  SWIG_Python_SetConstant(d, "NET_ERR_DEV_PROGRESSING",SWIG_From_int(static_cast< int >(961)));
  SWIG_Python_SetConstant(d, "NET_ERR_PASSIVE_TRANSCODING",SWIG_From_int(static_cast< int >(962)));
  SWIG_Python_SetConstant(d, "NET_ERR_RING_NOT_CONFIGURE",SWIG_From_int(static_cast< int >(964)));
  SWIG_Python_SetConstant(d, "NET_ERR_CLOSE_WINDOW_FIRST",SWIG_From_int(static_cast< int >(971)));
  SWIG_Python_SetConstant(d, "NET_ERR_SPLIT_WINDOW_NUM_NOT_SUPPORT",SWIG_From_int(static_cast< int >(972)));
  SWIG_Python_SetConstant(d, "NET_ERR_REACH_ONE_SIGNAL_PREVIEW_MAX_LINK",SWIG_From_int(static_cast< int >(973)));
  SWIG_Python_SetConstant(d, "NET_ERR_ONLY_SPLITWND_SUPPORT_AMPLIFICATION",SWIG_From_int(static_cast< int >(974)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_WINDOW_SIZE_PLACE",SWIG_From_int(static_cast< int >(975)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RGIONAL_RESTRICTIONS",SWIG_From_int(static_cast< int >(976)));
  SWIG_Python_SetConstant(d, "NET_ERR_WNDZOOM_NOT_SUPPORT",SWIG_From_int(static_cast< int >(977)));
  SWIG_Python_SetConstant(d, "NET_ERR_LED_SCREEN_SIZE",SWIG_From_int(static_cast< int >(978)));
  SWIG_Python_SetConstant(d, "NET_ERR_OPEN_WIN_IN_ERROR_AREA",SWIG_From_int(static_cast< int >(979)));
  SWIG_Python_SetConstant(d, "NET_ERR_TITLE_WIN_NOT_SUPPORT_MOVE",SWIG_From_int(static_cast< int >(980)));
  SWIG_Python_SetConstant(d, "NET_ERR_TITLE_WIN_NOT_SUPPORT_COVER",SWIG_From_int(static_cast< int >(981)));
  SWIG_Python_SetConstant(d, "NET_ERR_TITLE_WIN_NOT_SUPPORT_SPLIT",SWIG_From_int(static_cast< int >(982)));
  SWIG_Python_SetConstant(d, "NET_DVR_LED_WINDOWS_ALREADY_CLOSED",SWIG_From_int(static_cast< int >(983)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CLOSE_WINDOWS",SWIG_From_int(static_cast< int >(984)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_MATRIX_LOOP_ABILITY",SWIG_From_int(static_cast< int >(985)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_MATRIX_LOOP_TIME",SWIG_From_int(static_cast< int >(986)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LINKED_OUT_ABILITY",SWIG_From_int(static_cast< int >(987)));
  SWIG_Python_SetConstant(d, "NET_ERR_REACH_SCENE_MAX_NUM",SWIG_From_int(static_cast< int >(988)));
  SWIG_Python_SetConstant(d, "NET_ERR_SCENE_MEM_NOT_ENOUGH",SWIG_From_int(static_cast< int >(989)));
  SWIG_Python_SetConstant(d, "NET_ERR_RESOLUTION_NOT_SUPPORT_ODD_VOUT",SWIG_From_int(static_cast< int >(990)));
  SWIG_Python_SetConstant(d, "NET_ERR_RESOLUTION_NOT_SUPPORT_EVEN_VOUT",SWIG_From_int(static_cast< int >(991)));
  SWIG_Python_SetConstant(d, "NET_DVR_CANCEL_WND_OPENKEEP_ATTR_FIRST",SWIG_From_int(static_cast< int >(992)));
  SWIG_Python_SetConstant(d, "NET_SDK_LED_MODE_NOT_SUPPORT_SPLIT",SWIG_From_int(static_cast< int >(993)));
  SWIG_Python_SetConstant(d, "NET_ERR_VOICETALK_ONLY_SUPPORT_ONE_TALK",SWIG_From_int(static_cast< int >(994)));
  SWIG_Python_SetConstant(d, "NET_ERR_WND_POSITION_ADJUSTED",SWIG_From_int(static_cast< int >(995)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_STARTTIME_CANNOT_LESSTHAN_CURTIME",SWIG_From_int(static_cast< int >(996)));
  SWIG_Python_SetConstant(d, "NET_SDK_ERR_NEED_ADJUST_PLAN",SWIG_From_int(static_cast< int >(997)));
  SWIG_Python_SetConstant(d, "NET_ERR_UnitConfig_Failed",SWIG_From_int(static_cast< int >(998)));
  SWIG_Python_SetConstant(d, "XML_ABILITY_NOTSUPPORT",SWIG_From_int(static_cast< int >(1000)));
  SWIG_Python_SetConstant(d, "XML_ANALYZE_NOENOUGH_BUF",SWIG_From_int(static_cast< int >(1001)));
  SWIG_Python_SetConstant(d, "XML_ANALYZE_FIND_LOCALXML_ERROR",SWIG_From_int(static_cast< int >(1002)));
  SWIG_Python_SetConstant(d, "XML_ANALYZE_LOAD_LOCALXML_ERROR",SWIG_From_int(static_cast< int >(1003)));
  SWIG_Python_SetConstant(d, "XML_NANLYZE_DVR_DATA_FORMAT_ERROR",SWIG_From_int(static_cast< int >(1004)));
  SWIG_Python_SetConstant(d, "XML_ANALYZE_TYPE_ERROR",SWIG_From_int(static_cast< int >(1005)));
  SWIG_Python_SetConstant(d, "XML_ANALYZE_XML_NODE_ERROR",SWIG_From_int(static_cast< int >(1006)));
  SWIG_Python_SetConstant(d, "XML_INPUT_PARAM_ERROR",SWIG_From_int(static_cast< int >(1007)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RETURNED_XML_DATA",SWIG_From_int(static_cast< int >(1008)));
  SWIG_Python_SetConstant(d, "NET_ERR_LEDAREA_EXIST_WINDOW",SWIG_From_int(static_cast< int >(1051)));
  SWIG_Python_SetConstant(d, "NET_ERR_AUDIO_EXIST",SWIG_From_int(static_cast< int >(1052)));
  SWIG_Python_SetConstant(d, "NET_ERR_MATERIAL_NAME_EXIST",SWIG_From_int(static_cast< int >(1053)));
  SWIG_Python_SetConstant(d, "NET_ERR_MATERIAL_APPROVE_STATE",SWIG_From_int(static_cast< int >(1054)));
  SWIG_Python_SetConstant(d, "NET_ERR_DATAHD_SIGNAL_FORMAT",SWIG_From_int(static_cast< int >(1055)));
  SWIG_Python_SetConstant(d, "NET_ERR_SCENE_SWITCHING",SWIG_From_int(static_cast< int >(1056)));
  SWIG_Python_SetConstant(d, "NER_ERR_DATA_TRANSFER",SWIG_From_int(static_cast< int >(1057)));
  SWIG_Python_SetConstant(d, "NET_ERR_DATA_RESTORE",SWIG_From_int(static_cast< int >(1058)));
  SWIG_Python_SetConstant(d, "NET_ERR_CHECK_NOT_ENABLE",SWIG_From_int(static_cast< int >(1059)));
  SWIG_Python_SetConstant(d, "NET_ERR_AREA_OFFLINE",SWIG_From_int(static_cast< int >(1060)));
  SWIG_Python_SetConstant(d, "NET_ERR_SCREEN_TYPE",SWIG_From_int(static_cast< int >(1061)));
  SWIG_Python_SetConstant(d, "NET_ERR_MIN_OPERATE_UNIT",SWIG_From_int(static_cast< int >(1062)));
  SWIG_Python_SetConstant(d, "NET_ERR_MAINHD_NOT_BACKUP",SWIG_From_int(static_cast< int >(1063)));
  SWIG_Python_SetConstant(d, "NET_ERR_ONE_BACKUP_HD",SWIG_From_int(static_cast< int >(1064)));
  SWIG_Python_SetConstant(d, "NET_ERR_CONNECT_SUB_SYSTEM_ABNORMAL",SWIG_From_int(static_cast< int >(1065)));
  SWIG_Python_SetConstant(d, "NET_ERR_SERIAL_PORT_VEST",SWIG_From_int(static_cast< int >(1066)));
  SWIG_Python_SetConstant(d, "NET_ERR_WHITE_LIST_FULL",SWIG_From_int(static_cast< int >(1067)));
  SWIG_Python_SetConstant(d, "NET_ERR_NOT_MATCH_SOURCE",SWIG_From_int(static_cast< int >(1068)));
  SWIG_Python_SetConstant(d, "NET_ERR_CLOCK_VIRTUAL_LED_FULL",SWIG_From_int(static_cast< int >(1069)));
  SWIG_Python_SetConstant(d, "NET_ERR_MAX_WIN_SIGNAL_LOOP_NUM",SWIG_From_int(static_cast< int >(1070)));
  SWIG_Python_SetConstant(d, "NET_ERR_RESOLUTION_NO_MATCH_FRAME",SWIG_From_int(static_cast< int >(1071)));
  SWIG_Python_SetConstant(d, "NET_ERR_NOT_UPDATE_LOW_VERSION",SWIG_From_int(static_cast< int >(1072)));
  SWIG_Python_SetConstant(d, "NET_ERR_NO_CUSTOM_TO_UPDATE",SWIG_From_int(static_cast< int >(1073)));
  SWIG_Python_SetConstant(d, "NET_ERR_CHAN_RESOLUTION_NOT_SUPPORT_SPLIT",SWIG_From_int(static_cast< int >(1074)));
  SWIG_Python_SetConstant(d, "NET_ERR_HIGH_DEFINITION_NOT_SUPPORT_SPLIT",SWIG_From_int(static_cast< int >(1075)));
  SWIG_Python_SetConstant(d, "NET_ERR_MIRROR_IMAGE_BY_VIDEO_WALL",SWIG_From_int(static_cast< int >(1076)));
  SWIG_Python_SetConstant(d, "NET_ERR_MAX_OSD_FONT_SIZE",SWIG_From_int(static_cast< int >(1077)));
  SWIG_Python_SetConstant(d, "NET_ERR_HIGH_DEFINITION_NOT_SUPPORT_VIDEO_SET",SWIG_From_int(static_cast< int >(1078)));
  SWIG_Python_SetConstant(d, "NET_ERR_TILE_MODE_NOT_SUPPORT_JOINT",SWIG_From_int(static_cast< int >(1079)));
  SWIG_Python_SetConstant(d, "NET_ERR_ADD_AUDIO_MATRIX_FAILED",SWIG_From_int(static_cast< int >(1080)));
  SWIG_Python_SetConstant(d, "NET_ERR_ONE_VIRTUAL_LED_AREA_BIND_ONE_AUDIO_AREA",SWIG_From_int(static_cast< int >(1081)));
  SWIG_Python_SetConstant(d, "NET_ERR_NAT_NOT_MODIFY_SERVER_NETWORK_PARAM",SWIG_From_int(static_cast< int >(1082)));
  SWIG_Python_SetConstant(d, "NET_ERR_ORIGINAL_CHECH_DATA_ERROR",SWIG_From_int(static_cast< int >(1083)));
  SWIG_Python_SetConstant(d, "NET_ERR_INPUT_BOARD_SPLICED_IN_DIFFERENT_NETWORKAREAS",SWIG_From_int(static_cast< int >(1084)));
  SWIG_Python_SetConstant(d, "NET_ERR_SPLICINGSOURCE_ONWALL_IN_DIFFERENT_NETWORKAREAS",SWIG_From_int(static_cast< int >(1085)));
  SWIG_Python_SetConstant(d, "NET_ERR_ONWALL_OUTPUTBOARD_MODIFY_NETWORKAREAS",SWIG_From_int(static_cast< int >(1086)));
  SWIG_Python_SetConstant(d, "NET_ERR_LAN_AND_WAN_CANNOT_SAME_NET_SEGMENT",SWIG_From_int(static_cast< int >(1087)));
  SWIG_Python_SetConstant(d, "NET_ERR_USERNAME_REPETITIVE",SWIG_From_int(static_cast< int >(1088)));
  SWIG_Python_SetConstant(d, "NET_ERR_ASSOCIATED_SAMEWALL_IN_DIFFERENT_NETWORKAREAS",SWIG_From_int(static_cast< int >(1089)));
  SWIG_Python_SetConstant(d, "NET_ERR_BASEMAP_ROAM_IN_LED_AREA",SWIG_From_int(static_cast< int >(1090)));
  SWIG_Python_SetConstant(d, "NET_ERR_VIRTUAL_LED_NOT_SUPPORT_4K_OUTPUT",SWIG_From_int(static_cast< int >(1091)));
  SWIG_Python_SetConstant(d, "NET_ERR_BASEMAP_NOT_SUPPORT_4K_OUTPUT",SWIG_From_int(static_cast< int >(1092)));
  SWIG_Python_SetConstant(d, "NET_ERR_MIN_BLOCK_IN_VIRTUAL_LED_AND_OUTPUT",SWIG_From_int(static_cast< int >(1093)));
  SWIG_Python_SetConstant(d, "NET_ERR_485FIlE_VERSION_INVALID",SWIG_From_int(static_cast< int >(1094)));
  SWIG_Python_SetConstant(d, "NET_ERR_485FIlE_CHECK_ERROR",SWIG_From_int(static_cast< int >(1095)));
  SWIG_Python_SetConstant(d, "NET_ERR_485FIlE_ABNORMAL_SIZE",SWIG_From_int(static_cast< int >(1096)));
  SWIG_Python_SetConstant(d, "NET_ERR_MODIFY_SUBBOARD_NETCFG_IN_NAT",SWIG_From_int(static_cast< int >(1097)));
  SWIG_Python_SetConstant(d, "NET_ERR_OSD_CONTENT_WITH_ILLEGAL_CHARACTERS",SWIG_From_int(static_cast< int >(1098)));
  SWIG_Python_SetConstant(d, "NET_ERR_NON_SLAVE_DEVICE_INSERT_SYNC_LINE",SWIG_From_int(static_cast< int >(1099)));
  SWIG_Python_SetConstant(d, "NET_ERR_PLT_USERID",SWIG_From_int(static_cast< int >(1100)));
  SWIG_Python_SetConstant(d, "NET_ERR_TRANS_CHAN_START",SWIG_From_int(static_cast< int >(1101)));
  SWIG_Python_SetConstant(d, "NET_ERR_DEV_UPGRADING",SWIG_From_int(static_cast< int >(1102)));
  SWIG_Python_SetConstant(d, "NET_ERR_MISMATCH_UPGRADE_PACK_TYPE",SWIG_From_int(static_cast< int >(1103)));
  SWIG_Python_SetConstant(d, "NET_ERR_DEV_FORMATTING",SWIG_From_int(static_cast< int >(1104)));
  SWIG_Python_SetConstant(d, "NET_ERR_MISMATCH_UPGRADE_PACK_VERSION",SWIG_From_int(static_cast< int >(1105)));
  SWIG_Python_SetConstant(d, "NET_ERR_PT_LOCKED",SWIG_From_int(static_cast< int >(1106)));
  SWIG_Python_SetConstant(d, "NET_DVR_LOGO_OVERLAY_WITHOUT_UPLOAD_PIC",SWIG_From_int(static_cast< int >(1110)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_ILLEGAL_VERIFICATION_CODE",SWIG_From_int(static_cast< int >(1111)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LACK_VERIFICATION_CODE",SWIG_From_int(static_cast< int >(1112)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_FORBIDDEN_IP",SWIG_From_int(static_cast< int >(1113)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_UNLOCKPTZ",SWIG_From_int(static_cast< int >(1114)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_COUNTAREA_LARGE",SWIG_From_int(static_cast< int >(1116)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LABEL_ID_EXCEED",SWIG_From_int(static_cast< int >(1117)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LABEL_TYPE",SWIG_From_int(static_cast< int >(1118)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LABEL_FULL",SWIG_From_int(static_cast< int >(1119)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LABEL_DISABLED",SWIG_From_int(static_cast< int >(1120)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_DOME_PT_TRANS_TO_DOME_XY",SWIG_From_int(static_cast< int >(1121)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_DOME_PT_TRANS_TO_PANORAMA_XY",SWIG_From_int(static_cast< int >(1122)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PANORAMA_XY_TRANS_TO_DOME_PT",SWIG_From_int(static_cast< int >(1123)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_SCENE_DUR_TIME_LESS_THAN_INTERV_TIME",SWIG_From_int(static_cast< int >(1124)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_HTTP_BKN_EXCEED_ONE",SWIG_From_int(static_cast< int >(1125)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_DELETING_FAILED_TURN_OFF_HTTPS_ESDK_WEBSOCKETS_FIRST",SWIG_From_int(static_cast< int >(1126)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_DELETING_FAILED_TURN_OFF_HTTPS_ESDK_FIRST",SWIG_From_int(static_cast< int >(1127)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PTZ_OCCUPIED_PRIORITY",SWIG_From_int(static_cast< int >(1128)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_INCORRECT_VIDEOAUDIO_ID",SWIG_From_int(static_cast< int >(1129)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_REPETITIONTIME_OVER_MAXIMUM",SWIG_From_int(static_cast< int >(1130)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_FORMATTING_FAILED",SWIG_From_int(static_cast< int >(1131)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_ENCRYPTED_FORMATTING_FAILED",SWIG_From_int(static_cast< int >(1132)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_WRONG_PASSWORD",SWIG_From_int(static_cast< int >(1133)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_EXPOSURE_SYNC",SWIG_From_int(static_cast< int >(1134)));
  SWIG_Python_SetConstant(d, "NET_ERR_SEARCHING_MODULE",SWIG_From_int(static_cast< int >(1201)));
  SWIG_Python_SetConstant(d, "NET_ERR_REGISTERING_MODULE",SWIG_From_int(static_cast< int >(1202)));
  SWIG_Python_SetConstant(d, "NET_ERR_GETTING_ZONES",SWIG_From_int(static_cast< int >(1203)));
  SWIG_Python_SetConstant(d, "NET_ERR_GETTING_TRIGGERS",SWIG_From_int(static_cast< int >(1204)));
  SWIG_Python_SetConstant(d, "NET_ERR_ARMED_STATUS",SWIG_From_int(static_cast< int >(1205)));
  SWIG_Python_SetConstant(d, "NET_ERR_PROGRAM_MODE_STATUS",SWIG_From_int(static_cast< int >(1206)));
  SWIG_Python_SetConstant(d, "NET_ERR_WALK_TEST_MODE_STATUS",SWIG_From_int(static_cast< int >(1207)));
  SWIG_Python_SetConstant(d, "NET_ERR_BYPASS_STATUS",SWIG_From_int(static_cast< int >(1208)));
  SWIG_Python_SetConstant(d, "NET_ERR_DISABLED_MODULE_STATUS",SWIG_From_int(static_cast< int >(1209)));
  SWIG_Python_SetConstant(d, "NET_ERR_NOT_SUPPORT_OPERATE_ZONE",SWIG_From_int(static_cast< int >(1210)));
  SWIG_Python_SetConstant(d, "NET_ERR_NOT_SUPPORT_MOD_MODULE_ADDR",SWIG_From_int(static_cast< int >(1211)));
  SWIG_Python_SetConstant(d, "NET_ERR_UNREGISTERED_MODULE",SWIG_From_int(static_cast< int >(1212)));
  SWIG_Python_SetConstant(d, "NET_ERR_PUBLIC_SUBSYSTEM_ASSOCIATE_SELF",SWIG_From_int(static_cast< int >(1213)));
  SWIG_Python_SetConstant(d, "NET_ERR_EXCEEDS_ASSOCIATE_SUBSYSTEM_NUM",SWIG_From_int(static_cast< int >(1214)));
  SWIG_Python_SetConstant(d, "NET_ERR_BE_ASSOCIATED_BY_PUBLIC_SUBSYSTEM",SWIG_From_int(static_cast< int >(1215)));
  SWIG_Python_SetConstant(d, "NET_ERR_ZONE_FAULT_STATUS",SWIG_From_int(static_cast< int >(1216)));
  SWIG_Python_SetConstant(d, "NET_ERR_SAME_EVENT_TYPE",SWIG_From_int(static_cast< int >(1217)));
  SWIG_Python_SetConstant(d, "NET_ERR_ZONE_ALARM_STATUS",SWIG_From_int(static_cast< int >(1218)));
  SWIG_Python_SetConstant(d, "NET_ERR_EXPANSION_BUS_SHORT_CIRCUIT",SWIG_From_int(static_cast< int >(1219)));
  SWIG_Python_SetConstant(d, "NET_ERR_PWD_CONFLICT",SWIG_From_int(static_cast< int >(1220)));
  SWIG_Python_SetConstant(d, "NET_ERR_DETECTOR_GISTERED_BY_OTHER_ZONE",SWIG_From_int(static_cast< int >(1221)));
  SWIG_Python_SetConstant(d, "NET_ERR_DETECTOR_GISTERED_BY_OTHER_PU",SWIG_From_int(static_cast< int >(1222)));
  SWIG_Python_SetConstant(d, "NET_ERR_DETECTOR_DISCONNECT",SWIG_From_int(static_cast< int >(1223)));
  SWIG_Python_SetConstant(d, "NET_ERR_CALL_BUSY",SWIG_From_int(static_cast< int >(1224)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_ZONE_TAMPER_STAUS",SWIG_From_int(static_cast< int >(1225)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_WIRELESS_DEV_REGISTER",SWIG_From_int(static_cast< int >(1226)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_WIRELESS_DEV_ADDED",SWIG_From_int(static_cast< int >(1227)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_WIRELESS_DEV_OFFLINE",SWIG_From_int(static_cast< int >(1228)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_WIRELESS_DEV_TAMPER_STATUS",SWIG_From_int(static_cast< int >(1229)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_GPRS_PHONE_CONFLICT",SWIG_From_int(static_cast< int >(1230)));
  SWIG_Python_SetConstant(d, "NET_ERR_GET_ALL_RETURN_OVER",SWIG_From_int(static_cast< int >(1300)));
  SWIG_Python_SetConstant(d, "NET_ERR_RESOURCE_USING",SWIG_From_int(static_cast< int >(1301)));
  SWIG_Python_SetConstant(d, "NET_ERR_FILE_SIZE_OVERLIMIT",SWIG_From_int(static_cast< int >(1302)));
  SWIG_Python_SetConstant(d, "NET_ERR_MATERIAL_NAME",SWIG_From_int(static_cast< int >(1303)));
  SWIG_Python_SetConstant(d, "NET_ERR_MATERIAL_NAME_LEN",SWIG_From_int(static_cast< int >(1304)));
  SWIG_Python_SetConstant(d, "NET_ERR_MATERIAL_REMARK",SWIG_From_int(static_cast< int >(1305)));
  SWIG_Python_SetConstant(d, "NET_ERR_MATERIAL_REMARK_LEN",SWIG_From_int(static_cast< int >(1306)));
  SWIG_Python_SetConstant(d, "NET_ERR_MATERIAL_SHARE_PROPERTY",SWIG_From_int(static_cast< int >(1307)));
  SWIG_Python_SetConstant(d, "NET_ERR_UNSUPPORT_MATERIAL_TYPE",SWIG_From_int(static_cast< int >(1308)));
  SWIG_Python_SetConstant(d, "NET_ERR_MATERIAL_NOT_EXIST",SWIG_From_int(static_cast< int >(1309)));
  SWIG_Python_SetConstant(d, "NET_ERR_READ_FROM_DISK",SWIG_From_int(static_cast< int >(1310)));
  SWIG_Python_SetConstant(d, "NET_ERR_WRITE_TO_DISK",SWIG_From_int(static_cast< int >(1311)));
  SWIG_Python_SetConstant(d, "NET_ERR_WRITE_DATA_BASE",SWIG_From_int(static_cast< int >(1312)));
  SWIG_Python_SetConstant(d, "NET_ERR_NO_APPROVED_NOT_EXPORT",SWIG_From_int(static_cast< int >(1313)));
  SWIG_Python_SetConstant(d, "NET_ERR_MATERIAL_EXCEPTION",SWIG_From_int(static_cast< int >(1314)));
  SWIG_Python_SetConstant(d, "NET_ERR_NO_MISINFO",SWIG_From_int(static_cast< int >(1315)));
  SWIG_Python_SetConstant(d, "NET_ERR_MAX_SCREEN_CTRL_NUM",SWIG_From_int(static_cast< int >(1351)));
  SWIG_Python_SetConstant(d, "NET_ERR_FILE_NOT_EXIST",SWIG_From_int(static_cast< int >(1352)));
  SWIG_Python_SetConstant(d, "NET_ERR_THUMBNAIL_NOT_EXIST",SWIG_From_int(static_cast< int >(1353)));
  SWIG_Python_SetConstant(d, "NET_ERR_DEV_OPEN_FILE_FAIL",SWIG_From_int(static_cast< int >(1354)));
  SWIG_Python_SetConstant(d, "NET_ERR_SERVER_READ_FILE_FAIL",SWIG_From_int(static_cast< int >(1355)));
  SWIG_Python_SetConstant(d, "NET_ERR_FILE_SIZE",SWIG_From_int(static_cast< int >(1356)));
  SWIG_Python_SetConstant(d, "NET_ERR_FILE_NAME",SWIG_From_int(static_cast< int >(1357)));
  SWIG_Python_SetConstant(d, "NET_ERR_BROADCAST_BUSY",SWIG_From_int(static_cast< int >(1358)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LANENUM_EXCEED",SWIG_From_int(static_cast< int >(1400)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PRAREA_EXCEED",SWIG_From_int(static_cast< int >(1401)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LIGHT_PARAM",SWIG_From_int(static_cast< int >(1402)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LANE_LINE_INVALID",SWIG_From_int(static_cast< int >(1403)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_STOP_LINE_INVALID",SWIG_From_int(static_cast< int >(1404)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LEFTORRIGHT_LINE_INVALID",SWIG_From_int(static_cast< int >(1405)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LANE_NO_REPEAT",SWIG_From_int(static_cast< int >(1406)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PRAREA_INVALID",SWIG_From_int(static_cast< int >(1407)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LIGHT_NUM_EXCEED",SWIG_From_int(static_cast< int >(1408)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_SUBLIGHT_NUM_INVALID",SWIG_From_int(static_cast< int >(1409)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LIGHT_AREASIZE_INVALID",SWIG_From_int(static_cast< int >(1410)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LIGHT_COLOR_INVALID",SWIG_From_int(static_cast< int >(1411)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LIGHT_DIRECTION_INVALID",SWIG_From_int(static_cast< int >(1412)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LACK_IOABLITY",SWIG_From_int(static_cast< int >(1413)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_FTP_PORT",SWIG_From_int(static_cast< int >(1414)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_FTP_CATALOGUE",SWIG_From_int(static_cast< int >(1415)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_FTP_UPLOAD_TYPE",SWIG_From_int(static_cast< int >(1416)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_FLASH_PARAM_WRITE",SWIG_From_int(static_cast< int >(1417)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_FLASH_PARAM_READ",SWIG_From_int(static_cast< int >(1418)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PICNAME_DELIMITER",SWIG_From_int(static_cast< int >(1419)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PICNAME_ITEM",SWIG_From_int(static_cast< int >(1420)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PLATE_RECOGNIZE_TYPE",SWIG_From_int(static_cast< int >(1421)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CAPTURE_TIMES",SWIG_From_int(static_cast< int >(1422)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LOOP_DISTANCE",SWIG_From_int(static_cast< int >(1423)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LOOP_INPUT_STATUS",SWIG_From_int(static_cast< int >(1424)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RELATE_IO_CONFLICT",SWIG_From_int(static_cast< int >(1425)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_INTERVAL_TIME",SWIG_From_int(static_cast< int >(1426)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_SIGN_SPEED",SWIG_From_int(static_cast< int >(1427)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PIC_FLIP",SWIG_From_int(static_cast< int >(1428)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RELATE_LANE_NUMBER",SWIG_From_int(static_cast< int >(1429)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_TRIGGER_MODE",SWIG_From_int(static_cast< int >(1430)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_DELAY_TIME",SWIG_From_int(static_cast< int >(1431)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_EXCEED_RS485_COUNT",SWIG_From_int(static_cast< int >(1432)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RADAR_TYPE",SWIG_From_int(static_cast< int >(1433)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RADAR_ANGLE",SWIG_From_int(static_cast< int >(1434)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RADAR_SPEED_VALID_TIME",SWIG_From_int(static_cast< int >(1435)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RADAR_LINE_CORRECT",SWIG_From_int(static_cast< int >(1436)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RADAR_CONST_CORRECT",SWIG_From_int(static_cast< int >(1437)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RECORD_PARAM",SWIG_From_int(static_cast< int >(1438)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LIGHT_WITHOUT_COLOR_AND_DIRECTION",SWIG_From_int(static_cast< int >(1439)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LIGHT_WITHOUT_DETECTION_REGION",SWIG_From_int(static_cast< int >(1440)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RECOGNIZE_PROVINCE_PARAM",SWIG_From_int(static_cast< int >(1441)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_SPEED_TIMEOUT",SWIG_From_int(static_cast< int >(1442)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_NTP_TIMEZONE",SWIG_From_int(static_cast< int >(1443)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_NTP_INTERVAL_TIME",SWIG_From_int(static_cast< int >(1444)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_NETWORK_CARD_NUM",SWIG_From_int(static_cast< int >(1445)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_DEFAULT_ROUTE",SWIG_From_int(static_cast< int >(1446)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_BONDING_WORK_MODE",SWIG_From_int(static_cast< int >(1447)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_SLAVE_CARD",SWIG_From_int(static_cast< int >(1448)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PRIMARY_CARD",SWIG_From_int(static_cast< int >(1449)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_DHCP_PPOE_WORK",SWIG_From_int(static_cast< int >(1450)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_NET_INTERFACE",SWIG_From_int(static_cast< int >(1451)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_MTU",SWIG_From_int(static_cast< int >(1452)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_NETMASK",SWIG_From_int(static_cast< int >(1453)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_IP_INVALID",SWIG_From_int(static_cast< int >(1454)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_MULTICAST_IP_INVALID",SWIG_From_int(static_cast< int >(1455)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_GATEWAY_INVALID",SWIG_From_int(static_cast< int >(1456)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_DNS_INVALID",SWIG_From_int(static_cast< int >(1457)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_ALARMHOST_IP_INVALID",SWIG_From_int(static_cast< int >(1458)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_IP_CONFLICT",SWIG_From_int(static_cast< int >(1459)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_NETWORK_SEGMENT",SWIG_From_int(static_cast< int >(1460)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_NETPORT",SWIG_From_int(static_cast< int >(1461)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PPPOE_NOSUPPORT",SWIG_From_int(static_cast< int >(1462)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_DOMAINNAME_NOSUPPORT",SWIG_From_int(static_cast< int >(1463)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_NO_SPEED",SWIG_From_int(static_cast< int >(1464)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_IOSTATUS_INVALID",SWIG_From_int(static_cast< int >(1465)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_BURST_INTERVAL_INVALID",SWIG_From_int(static_cast< int >(1466)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RESERVE_MODE",SWIG_From_int(static_cast< int >(1467)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LANE_NO",SWIG_From_int(static_cast< int >(1468)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_COIL_AREA_TYPE",SWIG_From_int(static_cast< int >(1469)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_TRIGGER_AREA_PARAM",SWIG_From_int(static_cast< int >(1470)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_SPEED_LIMIT_PARAM",SWIG_From_int(static_cast< int >(1471)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LANE_PROTOCOL_TYPE",SWIG_From_int(static_cast< int >(1472)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_INTERVAL_TYPE",SWIG_From_int(static_cast< int >(1473)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_INTERVAL_DISTANCE",SWIG_From_int(static_cast< int >(1474)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RS485_ASSOCIATE_DEVTYPE",SWIG_From_int(static_cast< int >(1475)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RS485_ASSOCIATE_LANENO",SWIG_From_int(static_cast< int >(1476)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LANENO_ASSOCIATE_MULTIRS485",SWIG_From_int(static_cast< int >(1477)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LIGHT_DETECTION_REGION",SWIG_From_int(static_cast< int >(1478)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_DN2D_NOSUPPORT",SWIG_From_int(static_cast< int >(1479)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_IRISMODE_NOSUPPORT",SWIG_From_int(static_cast< int >(1480)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_WB_NOSUPPORT",SWIG_From_int(static_cast< int >(1481)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_IO_EFFECTIVENESS",SWIG_From_int(static_cast< int >(1482)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LIGHTNO_MAX",SWIG_From_int(static_cast< int >(1483)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LIGHTNO_CONFLICT",SWIG_From_int(static_cast< int >(1484)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CANCEL_LINE",SWIG_From_int(static_cast< int >(1485)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_STOP_LINE",SWIG_From_int(static_cast< int >(1486)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RUSH_REDLIGHT_LINE",SWIG_From_int(static_cast< int >(1487)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_IOOUTNO_MAX",SWIG_From_int(static_cast< int >(1488)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_IOOUTNO_AHEADTIME_MAX",SWIG_From_int(static_cast< int >(1489)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_IOOUTNO_IOWORKTIME",SWIG_From_int(static_cast< int >(1490)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_IOOUTNO_FREQMULTI",SWIG_From_int(static_cast< int >(1491)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_IOOUTNO_DUTYRATE",SWIG_From_int(static_cast< int >(1492)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_VIDEO_WITH_EXPOSURE",SWIG_From_int(static_cast< int >(1493)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PLATE_BRIGHTNESS_WITHOUT_FLASHDET",SWIG_From_int(static_cast< int >(1494)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RECOGNIZE_TYPE_PARAM",SWIG_From_int(static_cast< int >(1495)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PALTE_RECOGNIZE_AREA_PARAM",SWIG_From_int(static_cast< int >(1496)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PORT_CONFLICT",SWIG_From_int(static_cast< int >(1497)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LOOP_IP",SWIG_From_int(static_cast< int >(1498)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_DRIVELINE_SENSITIVE",SWIG_From_int(static_cast< int >(1499)));
  SWIG_Python_SetConstant(d, "NET_ERR_VQD_TIME_CONFLICT",SWIG_From_int(static_cast< int >(1500)));
  SWIG_Python_SetConstant(d, "NET_ERR_VQD_PLAN_NO_EXIST",SWIG_From_int(static_cast< int >(1501)));
  SWIG_Python_SetConstant(d, "NET_ERR_VQD_CHAN_NO_EXIST",SWIG_From_int(static_cast< int >(1502)));
  SWIG_Python_SetConstant(d, "NET_ERR_VQD_CHAN_MAX",SWIG_From_int(static_cast< int >(1503)));
  SWIG_Python_SetConstant(d, "NET_ERR_VQD_TASK_MAX",SWIG_From_int(static_cast< int >(1504)));
  SWIG_Python_SetConstant(d, "NET_SDK_GET_INPUTSTREAMCFG",SWIG_From_int(static_cast< int >(1551)));
  SWIG_Python_SetConstant(d, "NET_SDK_AUDIO_SWITCH_CONTROL",SWIG_From_int(static_cast< int >(1552)));
  SWIG_Python_SetConstant(d, "NET_SDK_GET_VIDEOWALLDISPLAYNO",SWIG_From_int(static_cast< int >(1553)));
  SWIG_Python_SetConstant(d, "NET_SDK_GET_ALLSUBSYSTEM_BASIC_INFO",SWIG_From_int(static_cast< int >(1554)));
  SWIG_Python_SetConstant(d, "NET_SDK_SET_ALLSUBSYSTEM_BASIC_INFO",SWIG_From_int(static_cast< int >(1555)));
  SWIG_Python_SetConstant(d, "NET_SDK_GET_AUDIO_INFO",SWIG_From_int(static_cast< int >(1556)));
  SWIG_Python_SetConstant(d, "NET_SDK_GET_MATRIX_STATUS_V50",SWIG_From_int(static_cast< int >(1557)));
  SWIG_Python_SetConstant(d, "NET_SDK_DELETE_MONITOR_INFO",SWIG_From_int(static_cast< int >(1558)));
  SWIG_Python_SetConstant(d, "NET_SDK_DELETE_CAMERA_INFO",SWIG_From_int(static_cast< int >(1559)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_EXCEED_MAX_CAPTURE_TIMES",SWIG_From_int(static_cast< int >(1600)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_REDAR_TYPE_CONFLICT",SWIG_From_int(static_cast< int >(1601)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LICENSE_PLATE_NULL",SWIG_From_int(static_cast< int >(1602)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_WRITE_DATABASE",SWIG_From_int(static_cast< int >(1603)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LICENSE_EFFECTIVE_TIME",SWIG_From_int(static_cast< int >(1604)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PRERECORDED_STARTTIME_LONG",SWIG_From_int(static_cast< int >(1605)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_TRIGGER_RULE_LINE",SWIG_From_int(static_cast< int >(1606)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LEFTRIGHT_TRIGGERLINE_NOTVERTICAL",SWIG_From_int(static_cast< int >(1607)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_FLASH_LAMP_MODE",SWIG_From_int(static_cast< int >(1608)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_ILLEGAL_SNAPSHOT_NUM",SWIG_From_int(static_cast< int >(1609)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_ILLEGAL_DETECTION_TYPE",SWIG_From_int(static_cast< int >(1610)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_POSITIVEBACK_TRIGGERLINE_HIGH",SWIG_From_int(static_cast< int >(1611)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_MIXEDMODE_CAPTYPE_ALLTARGETS",SWIG_From_int(static_cast< int >(1612)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CARSIGNSPEED_GREATERTHAN_LIMITSPEED",SWIG_From_int(static_cast< int >(1613)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_BIGCARSIGNSPEED_GREATERTHAN_LIMITSPEED",SWIG_From_int(static_cast< int >(1614)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_BIGCARSIGNSPEED_GREATERTHAN_CARSIGNSPEED",SWIG_From_int(static_cast< int >(1615)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_BIGCARLIMITSPEED_GREATERTHAN_CARLIMITSPEED",SWIG_From_int(static_cast< int >(1616)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_BIGCARLOWSPEEDLIMIT_GREATERTHAN_CARLOWSPEEDLIMIT",SWIG_From_int(static_cast< int >(1617)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CARLIMITSPEED_GREATERTHAN_EXCEPHIGHSPEED",SWIG_From_int(static_cast< int >(1618)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_BIGCARLIMITSPEED_GREATERTHAN_EXCEPHIGHSPEED",SWIG_From_int(static_cast< int >(1619)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_STOPLINE_MORETHAN_TRIGGERLINE",SWIG_From_int(static_cast< int >(1620)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_YELLOWLIGHTTIME_INVALID",SWIG_From_int(static_cast< int >(1621)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_TRIGGERLINE1_FOR_NOT_YIELD_TO_PEDESTRIAN_CANNOT_EXCEED_TRIGGERLINE2",SWIG_From_int(static_cast< int >(1622)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_TRIGGERLINE2_FOR_NOT_YIELD_TO_PEDESTRIAN_CANNOT_EXCEED_TRIGGERLINE1",SWIG_From_int(static_cast< int >(1623)));
  SWIG_Python_SetConstant(d, "NET_ERR_TIME_OVERLAP",SWIG_From_int(static_cast< int >(1900)));
  SWIG_Python_SetConstant(d, "NET_ERR_HOLIDAY_PLAN_OVERLAP",SWIG_From_int(static_cast< int >(1901)));
  SWIG_Python_SetConstant(d, "NET_ERR_CARDNO_NOT_SORT",SWIG_From_int(static_cast< int >(1902)));
  SWIG_Python_SetConstant(d, "NET_ERR_CARDNO_NOT_EXIST",SWIG_From_int(static_cast< int >(1903)));
  SWIG_Python_SetConstant(d, "NET_ERR_ILLEGAL_CARDNO",SWIG_From_int(static_cast< int >(1904)));
  SWIG_Python_SetConstant(d, "NET_ERR_ZONE_ALARM",SWIG_From_int(static_cast< int >(1905)));
  SWIG_Python_SetConstant(d, "NET_ERR_ZONE_OPERATION_NOT_SUPPORT",SWIG_From_int(static_cast< int >(1906)));
  SWIG_Python_SetConstant(d, "NET_ERR_INTERLOCK_ANTI_CONFLICT",SWIG_From_int(static_cast< int >(1907)));
  SWIG_Python_SetConstant(d, "NET_ERR_DEVICE_CARD_FULL",SWIG_From_int(static_cast< int >(1908)));
  SWIG_Python_SetConstant(d, "NET_ERR_HOLIDAY_GROUP_DOWNLOAD",SWIG_From_int(static_cast< int >(1909)));
  SWIG_Python_SetConstant(d, "NET_ERR_LOCAL_CONTROL_OFF",SWIG_From_int(static_cast< int >(1910)));
  SWIG_Python_SetConstant(d, "NET_ERR_LOCAL_CONTROL_DISADD",SWIG_From_int(static_cast< int >(1911)));
  SWIG_Python_SetConstant(d, "NET_ERR_LOCAL_CONTROL_HASADD",SWIG_From_int(static_cast< int >(1912)));
  SWIG_Python_SetConstant(d, "NET_ERR_LOCAL_CONTROL_DOORNO_CONFLICT",SWIG_From_int(static_cast< int >(1913)));
  SWIG_Python_SetConstant(d, "NET_ERR_LOCAL_CONTROL_COMMUNICATION_FAIL",SWIG_From_int(static_cast< int >(1914)));
  SWIG_Python_SetConstant(d, "NET_ERR_OPERAND_INEXISTENCE",SWIG_From_int(static_cast< int >(1915)));
  SWIG_Python_SetConstant(d, "NET_ERR_LOCAL_CONTROL_OVER_LIMIT",SWIG_From_int(static_cast< int >(1916)));
  SWIG_Python_SetConstant(d, "NET_ERR_DOOR_OVER_LIMIT",SWIG_From_int(static_cast< int >(1917)));
  SWIG_Python_SetConstant(d, "NET_ERR_ALARM_OVER_LIMIT",SWIG_From_int(static_cast< int >(1918)));
  SWIG_Python_SetConstant(d, "NET_ERR_LOCAL_CONTROL_ADDRESS_INCONFORMITY_TYPE",SWIG_From_int(static_cast< int >(1919)));
  SWIG_Python_SetConstant(d, "NET_ERR_NOT_SUPPORT_ONE_MORE_CARD",SWIG_From_int(static_cast< int >(1920)));
  SWIG_Python_SetConstant(d, "NET_ERR_DELETE_NO_EXISTENCE_FACE",SWIG_From_int(static_cast< int >(1921)));
  SWIG_Python_SetConstant(d, "NET_ERR_DOOR_SPECIAL_PASSWORD_REPEAT",SWIG_From_int(static_cast< int >(1922)));
  SWIG_Python_SetConstant(d, "NET_ERR_AUTH_CODE_REPEAT",SWIG_From_int(static_cast< int >(1923)));
  SWIG_Python_SetConstant(d, "NET_ERR_DEPLOY_EXCEED_MAX",SWIG_From_int(static_cast< int >(1924)));
  SWIG_Python_SetConstant(d, "NET_ERR_NOT_SUPPORT_DEL_FP_BY_ID",SWIG_From_int(static_cast< int >(1925)));
  SWIG_Python_SetConstant(d, "NET_ERR_TIME_RANGE",SWIG_From_int(static_cast< int >(1926)));
  SWIG_Python_SetConstant(d, "NET_ERR_CAPTURE_TIMEOUT",SWIG_From_int(static_cast< int >(1927)));
  SWIG_Python_SetConstant(d, "NET_ERR_LOW_SCORE",SWIG_From_int(static_cast< int >(1928)));
  SWIG_Python_SetConstant(d, "NET_ERR_OFFLINE_CAPTURING",SWIG_From_int(static_cast< int >(1929)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_OUTDOOR_COMMUNICATION",SWIG_From_int(static_cast< int >(1950)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_ROOMNO_UNDEFINED",SWIG_From_int(static_cast< int >(1951)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_NO_CALLING",SWIG_From_int(static_cast< int >(1952)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RINGING",SWIG_From_int(static_cast< int >(1953)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_IS_CALLING_NOW",SWIG_From_int(static_cast< int >(1954)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LOCK_PASSWORD_WRONG",SWIG_From_int(static_cast< int >(1955)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CONTROL_LOCK_FAILURE",SWIG_From_int(static_cast< int >(1956)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CONTROL_LOCK_OVERTIME",SWIG_From_int(static_cast< int >(1957)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LOCK_DEVICE_BUSY",SWIG_From_int(static_cast< int >(1958)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_UNOPEN_REMOTE_LOCK_FUNCTION",SWIG_From_int(static_cast< int >(1959)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_FILE_NOT_COMPLETE",SWIG_From_int(static_cast< int >(2100)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_IPC_EXIST",SWIG_From_int(static_cast< int >(2101)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_ADD_IPC",SWIG_From_int(static_cast< int >(2102)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_OUT_OF_RES",SWIG_From_int(static_cast< int >(2103)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CONFLICT_TO_LOCALIP",SWIG_From_int(static_cast< int >(2104)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_IP_SET",SWIG_From_int(static_cast< int >(2105)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PORT_SET",SWIG_From_int(static_cast< int >(2106)));
  SWIG_Python_SetConstant(d, "NET_ERR_WAN_NOTSUPPORT",SWIG_From_int(static_cast< int >(2107)));
  SWIG_Python_SetConstant(d, "NET_ERR_MUTEX_FUNCTION",SWIG_From_int(static_cast< int >(2108)));
  SWIG_Python_SetConstant(d, "NET_ERR_QUESTION_CONFIGNUM",SWIG_From_int(static_cast< int >(2109)));
  SWIG_Python_SetConstant(d, "NET_ERR_FACECHAN_NORESOURCE",SWIG_From_int(static_cast< int >(2110)));
  SWIG_Python_SetConstant(d, "NET_ERR_DATA_CALLBACK",SWIG_From_int(static_cast< int >(2111)));
  SWIG_Python_SetConstant(d, "NET_ERR_ATM_VCA_CHAN_IS_RELATED",SWIG_From_int(static_cast< int >(2112)));
  SWIG_Python_SetConstant(d, "NET_ERR_ATM_VCA_CHAN_IS_OVERLAPED",SWIG_From_int(static_cast< int >(2113)));
  SWIG_Python_SetConstant(d, "NET_ERR_FACE_CHAN_UNOVERLAP_EACH_OTHER",SWIG_From_int(static_cast< int >(2114)));
  SWIG_Python_SetConstant(d, "NET_ERR_ACHIEVE_MAX_CHANNLE_LIMIT",SWIG_From_int(static_cast< int >(2115)));
  SWIG_Python_SetConstant(d, "NET_DVR_SMD_ENCODING_NORESOURSE",SWIG_From_int(static_cast< int >(2116)));
  SWIG_Python_SetConstant(d, "NET_DVR_SMD_DECODING_NORESOURSE",SWIG_From_int(static_cast< int >(2117)));
  SWIG_Python_SetConstant(d, "NET_DVR_FACELIB_DATA_PROCESSING",SWIG_From_int(static_cast< int >(2118)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LARGE_TIME_DIFFRENCE",SWIG_From_int(static_cast< int >(2119)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_SUPPORT_WITH_PLAYBACK",SWIG_From_int(static_cast< int >(2120)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_NO_SUPPORT_WITH_SMD",SWIG_From_int(static_cast< int >(2121)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_NO_SUPPORT_WITH_FD",SWIG_From_int(static_cast< int >(2122)));
  SWIG_Python_SetConstant(d, "NET_DVR_ILLEGAL_PHONE_NUMBER",SWIG_From_int(static_cast< int >(2123)));
  SWIG_Python_SetConstant(d, "NET_DVR_ILLEGAL_CERITIFICATE_NUMBER",SWIG_From_int(static_cast< int >(2124)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CHANNEL_RESOLUTION_NO_SUPPORT",SWIG_From_int(static_cast< int >(2125)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CHANNEL_COMPRESSION_NO_SUPPORT",SWIG_From_int(static_cast< int >(2126)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CLUSTER_DEVICE_TOO_LESS",SWIG_From_int(static_cast< int >(2127)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CLUSTER_DEL_DEVICE_CM_PLAYLOAD",SWIG_From_int(static_cast< int >(2128)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CLUSTER_DEVNUM_OVER_UPPER_LIMIT",SWIG_From_int(static_cast< int >(2129)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CLUSTER_DEVICE_TYPE_INCONFORMITY",SWIG_From_int(static_cast< int >(2130)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CLUSTER_DEVICE_VERSION_INCONFORMITY",SWIG_From_int(static_cast< int >(2131)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CLUSTER_IP_CONFLICT",SWIG_From_int(static_cast< int >(2132)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CLUSTER_IP_INVALID",SWIG_From_int(static_cast< int >(2133)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CLUSTER_PORT_CONFLICT",SWIG_From_int(static_cast< int >(2134)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CLUSTER_PORT_INVALID",SWIG_From_int(static_cast< int >(2135)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CLUSTER_USERNAEM_OR_PASSWORD_INVALID",SWIG_From_int(static_cast< int >(2136)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CLUSTER_DEVICE_ALREADY_EXIST",SWIG_From_int(static_cast< int >(2137)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CLUSTER_DEVICE_NOT_EXIST",SWIG_From_int(static_cast< int >(2138)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CLUSTER_NON_CLUSTER_MODE",SWIG_From_int(static_cast< int >(2139)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CLUSTER_IP_NOT_SAME_LAN",SWIG_From_int(static_cast< int >(2140)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CAPTURE_PACKAGE_FAILED",SWIG_From_int(static_cast< int >(2141)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CAPTURE_PACKAGE_PROCESSING",SWIG_From_int(static_cast< int >(2142)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_SAFETY_HELMET_NO_RESOURCE",SWIG_From_int(static_cast< int >(2143)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_SUPPORT_WITH_ABSTRACT",SWIG_From_int(static_cast< int >(2144)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_TAPE_LIB_NEED_STOP_ARCHIVE",SWIG_From_int(static_cast< int >(2145)));
  SWIG_Python_SetConstant(d, "NET_DVR_INSUFFICIENT_DEEP_LEARNING_RESOURCES",SWIG_From_int(static_cast< int >(2146)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_IDENTITY_KEY",SWIG_From_int(static_cast< int >(2147)));
  SWIG_Python_SetConstant(d, "NET_DVR_MISSING_IDENTITY_KEY",SWIG_From_int(static_cast< int >(2148)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_SUPPORT_WITH_PERSON_DENSITY_DETECT",SWIG_From_int(static_cast< int >(2149)));
  SWIG_Python_SetConstant(d, "NET_DVR_IPC_RESOLUTION_OVERFLOW",SWIG_From_int(static_cast< int >(2150)));
  SWIG_Python_SetConstant(d, "NET_DVR_IPC_BITRATE_OVERFLOW",SWIG_From_int(static_cast< int >(2151)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_INVALID_TASKID",SWIG_From_int(static_cast< int >(2152)));
  SWIG_Python_SetConstant(d, "NET_DVR_PANEL_MODE_NOT_CONFIG",SWIG_From_int(static_cast< int >(2153)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_HUMAN_ENGINES_RESOURCE",SWIG_From_int(static_cast< int >(2154)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_TASK_NUMBER_OVERFLOW",SWIG_From_int(static_cast< int >(2155)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_COLLISION_TIME_OVERFLOW",SWIG_From_int(static_cast< int >(2156)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_CAPTURE_PACKAGE_NO_USB",SWIG_From_int(static_cast< int >(2157)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_NO_SET_SECURITY_EMAIL",SWIG_From_int(static_cast< int >(2158)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_EVENT_NOTSUPPORT",SWIG_From_int(static_cast< int >(2159)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PASSWORD_FORMAT",SWIG_From_int(static_cast< int >(2160)));
  SWIG_Python_SetConstant(d, "NET_DVR_ACCESS_FRONT_DEVICE_PARAM_FAILURE",SWIG_From_int(static_cast< int >(2161)));
  SWIG_Python_SetConstant(d, "NET_DVR_ACCESS_FRONT_DEVICE_STREAM_FAILURE",SWIG_From_int(static_cast< int >(2162)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_USERNAME_FORMAT",SWIG_From_int(static_cast< int >(2163)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_UNOPENED_HIGH_RESOLUTION_MODE",SWIG_From_int(static_cast< int >(2164)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_TOO_SMALL_QUATO",SWIG_From_int(static_cast< int >(2165)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_EMAIL_FORMAT",SWIG_From_int(static_cast< int >(2166)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_SECURITY_CODE_FORMAT",SWIG_From_int(static_cast< int >(2167)));
  SWIG_Python_SetConstant(d, "NET_DVR_PD_SPACE_TOO_SMALL",SWIG_From_int(static_cast< int >(2168)));
  SWIG_Python_SetConstant(d, "NET_DVR_PD_NUM_TOO_BIG",SWIG_From_int(static_cast< int >(2169)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_USB_IS_FULL",SWIG_From_int(static_cast< int >(2170)));
  SWIG_Python_SetConstant(d, "NET_DVR_EXCEED_MAX_SMD_TYPE",SWIG_From_int(static_cast< int >(2171)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_NO_SUPPORT_WITH_BEHAVIOR",SWIG_From_int(static_cast< int >(2172)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_BEHAVIOR_ENGINES_RESOURCE",SWIG_From_int(static_cast< int >(2173)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_RETENTION_ENGINES_RESOURCE",SWIG_From_int(static_cast< int >(2174)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_LEAVE_POSITION_ENGINES_RESOURCE",SWIG_From_int(static_cast< int >(2175)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_PEOPLE_NUM_CHANGE_ENGINES_RESOURCE",SWIG_From_int(static_cast< int >(2176)));
  SWIG_Python_SetConstant(d, "NET_DVR_PANEL_MODE_NUM_OVER_LIMIT",SWIG_From_int(static_cast< int >(2177)));
  SWIG_Python_SetConstant(d, "NET_DVR_SURROUND_MODE_NUM_OVER_LIMIT",SWIG_From_int(static_cast< int >(2178)));
  SWIG_Python_SetConstant(d, "NET_DVR_FACE_MODE_NUM_OVER_LIMIT",SWIG_From_int(static_cast< int >(2179)));
  SWIG_Python_SetConstant(d, "NET_DVR_SAFETYCABIN_MODE_NUM_OVER_LIMIT",SWIG_From_int(static_cast< int >(2180)));
  SWIG_Python_SetConstant(d, "NET_DVR_DETECT_REGION_RANGE_INVALID",SWIG_From_int(static_cast< int >(2181)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_CAPTURE_PICTURE_FAILURE",SWIG_From_int(static_cast< int >(2182)));
  SWIG_Python_SetConstant(d, "NET_DVR_VCACHAN_IS_NORESOURCE",SWIG_From_int(static_cast< int >(2183)));
  SWIG_Python_SetConstant(d, "NET_DVR_IPC_NUM_REACHES_LIMIT",SWIG_From_int(static_cast< int >(2184)));
  SWIG_Python_SetConstant(d, "NET_DVR_IOT_NUM_REACHES_LIMIT",SWIG_From_int(static_cast< int >(2185)));
  SWIG_Python_SetConstant(d, "NET_DVR_IOT_CHANNEL_DEVICE_EXIST",SWIG_From_int(static_cast< int >(2186)));
  SWIG_Python_SetConstant(d, "NET_DVR_IOT_CHANNEL_DEVICE_NOT_EXIST",SWIG_From_int(static_cast< int >(2187)));
  SWIG_Python_SetConstant(d, "NET_DVR_INVALID_IOT_PROTOCOL_TYPE",SWIG_From_int(static_cast< int >(2188)));
  SWIG_Python_SetConstant(d, "NET_DVR_INVALID_EZVIZ_SECRET_KEY",SWIG_From_int(static_cast< int >(2189)));
  SWIG_Python_SetConstant(d, "NET_DVR_DUPLICATE_IOT_DEVICE",SWIG_From_int(static_cast< int >(2190)));
  SWIG_Python_SetConstant(d, "NET_DVR_SADP_MODIFY_FALIURE",SWIG_From_int(static_cast< int >(2191)));
  SWIG_Python_SetConstant(d, "NET_DVR_IPC_NETWORK_ABNORMAL",SWIG_From_int(static_cast< int >(2192)));
  SWIG_Python_SetConstant(d, "NET_DVR_IPC_PASSWORD_ERROR",SWIG_From_int(static_cast< int >(2193)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_IPC_TYPE",SWIG_From_int(static_cast< int >(2194)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_IPC_LIST_NOT_EMPTY",SWIG_From_int(static_cast< int >(2195)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_IPC_LIST_NOT_MATCH_PAIRING",SWIG_From_int(static_cast< int >(2196)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_IPC_BAD_LANGUAGE",SWIG_From_int(static_cast< int >(2197)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_IPC_IS_LOCKING",SWIG_From_int(static_cast< int >(2198)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_IPC_NOT_ACTIVATED",SWIG_From_int(static_cast< int >(2199)));
  SWIG_Python_SetConstant(d, "NET_DVR_FIELD_CODING_NOT_SUPPORT",SWIG_From_int(static_cast< int >(2200)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_H323_NOT_SUPPORT_H265",SWIG_From_int(static_cast< int >(2201)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_EXPOSURE_TIME_TOO_BIG_IN_MODE_P",SWIG_From_int(static_cast< int >(2202)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_EXPOSURE_TIME_TOO_BIG_IN_MODE_N",SWIG_From_int(static_cast< int >(2203)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_PING_PROCESSING",SWIG_From_int(static_cast< int >(2204)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_PING_NOT_START",SWIG_From_int(static_cast< int >(2205)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_NEED_DOUBLE_VERIFICATION",SWIG_From_int(static_cast< int >(2206)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_DOUBLE_VERIFICATION_USER",SWIG_From_int(static_cast< int >(2207)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_OFFLINE",SWIG_From_int(static_cast< int >(2208)));
  SWIG_Python_SetConstant(d, "NET_DVR_TIMESPAN_NUM_OVER_LIMIT",SWIG_From_int(static_cast< int >(2209)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_NUM_OVER_LIMIT",SWIG_From_int(static_cast< int >(2210)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_SEARCH_ID_RESOURCE",SWIG_From_int(static_cast< int >(2211)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_ONEKEY_EXPORT",SWIG_From_int(static_cast< int >(2212)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_CITY_MANAGEMENT_ENGINES_RESOURCE",SWIG_From_int(static_cast< int >(2213)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_SITUATION_ANALYSIS_ENGINES_RESOURCE",SWIG_From_int(static_cast< int >(2214)));
  SWIG_Python_SetConstant(d, "NET_DVR_INTELLIGENT_ANALYSIS_IPC_CANNT_DELETE",SWIG_From_int(static_cast< int >(2215)));
  SWIG_Python_SetConstant(d, "NET_DVR_NOSUPPORT_RESET_PASSWORD",SWIG_From_int(static_cast< int >(2216)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_IPC_NEED_ON_LAN",SWIG_From_int(static_cast< int >(2217)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_NO_SUPPORT_WITH_SAFETY_HELMET",SWIG_From_int(static_cast< int >(2218)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_GET_RESETPASSWORDTYPE_IS_ABNORMAL",SWIG_From_int(static_cast< int >(2219)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_IPC_NOSUPPORT_RESET_PASSWORD",SWIG_From_int(static_cast< int >(2220)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_IP_IS_NOT_ONLY_ONE",SWIG_From_int(static_cast< int >(2221)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_SUPPORT_WITH_SMD_OR_SCD",SWIG_From_int(static_cast< int >(2222)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_SUPPORT_WITH_FD",SWIG_From_int(static_cast< int >(2223)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_FD_ENGINES_RESOURCE",SWIG_From_int(static_cast< int >(2224)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_ONEKEY_REMOVE",SWIG_From_int(static_cast< int >(2225)));
  SWIG_Python_SetConstant(d, "NET_DVR_FACE_PIP_BACKGROUND_CHANNEL_OVERFLOW",SWIG_From_int(static_cast< int >(2226)));
  SWIG_Python_SetConstant(d, "NET_DVR_MICIN_CHANNEL_OCCUPIED",SWIG_From_int(static_cast< int >(2227)));
  SWIG_Python_SetConstant(d, "NET_DVR_IPC_CHANNEL_IS_IN_PIP",SWIG_From_int(static_cast< int >(2228)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_NO_SUPPORT_WITH_FACE_CONTRAST",SWIG_From_int(static_cast< int >(2229)));
  SWIG_Python_SetConstant(d, "NET_DVR_INVALID_RECHARGE_CARD",SWIG_From_int(static_cast< int >(2230)));
  SWIG_Python_SetConstant(d, "NET_DVR_CLOUD_PLATFORM_SERVER_EXCEPTION",SWIG_From_int(static_cast< int >(2231)));
  SWIG_Python_SetConstant(d, "NET_DVR_OPERATION_FAILURE_WITHOUT_LOGIN",SWIG_From_int(static_cast< int >(2232)));
  SWIG_Python_SetConstant(d, "NET_DVR_INVALID_ASSOCIATED_SERIAL_NUMBER",SWIG_From_int(static_cast< int >(2233)));
  SWIG_Python_SetConstant(d, "NET_DVR_CLOUD_PLATFORM_ACCOUNT_NOT_EXIST",SWIG_From_int(static_cast< int >(2234)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEVICE_SERIAL_NUMBER_REGISTERED",SWIG_From_int(static_cast< int >(2235)));
  SWIG_Python_SetConstant(d, "NET_DVR_CONFERENCE_ROOM_NOT_EXIST",SWIG_From_int(static_cast< int >(2236)));
  SWIG_Python_SetConstant(d, "NET_DVR_NEED_DISABLED_ANALOG_CHANNEL",SWIG_From_int(static_cast< int >(2237)));
  SWIG_Python_SetConstant(d, "NET_DVR_STUDENT_ROLL_CALL_FAILURE",SWIG_From_int(static_cast< int >(2238)));
  SWIG_Python_SetConstant(d, "NET_DVR_SUB_DEVICE_NOT_ENABLE_INDIVIDUAL_BEHAVIOR",SWIG_From_int(static_cast< int >(2239)));
  SWIG_Python_SetConstant(d, "NET_DVR_SUB_DEVICE_CHANNEL_CONTROL_FAILED",SWIG_From_int(static_cast< int >(2240)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEVICE_NOT_IN_CONFERENCE",SWIG_From_int(static_cast< int >(2241)));
  SWIG_Python_SetConstant(d, "NET_DVR_ALREADY_EXIST_CONFERENCE",SWIG_From_int(static_cast< int >(2242)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_SUPPORT_WITH_VIDEO_CONFERENCE",SWIG_From_int(static_cast< int >(2243)));
  SWIG_Python_SetConstant(d, "NET_DVR_START_INTERACTION_FAILURE",SWIG_From_int(static_cast< int >(2244)));
  SWIG_Python_SetConstant(d, "NET_DVR_ASK_QUESTION_STARTED",SWIG_From_int(static_cast< int >(2245)));
  SWIG_Python_SetConstant(d, "NET_DVR_ASK_QUESTION_CLOSED",SWIG_From_int(static_cast< int >(2246)));
  SWIG_Python_SetConstant(d, "NET_DVR_UNABLE_OPERATE_BY_HOST",SWIG_From_int(static_cast< int >(2247)));
  SWIG_Python_SetConstant(d, "NET_DVR_REPEATED_ASK_QUESTION",SWIG_From_int(static_cast< int >(2248)));
  SWIG_Python_SetConstant(d, "NET_DVR_SWITCH_TIMEDIFF_LESS_LIMIT",SWIG_From_int(static_cast< int >(2249)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_DEVICE_EXIST",SWIG_From_int(static_cast< int >(2250)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_DEVICE_NOT_EXIST",SWIG_From_int(static_cast< int >(2251)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERROR_ADJUSTING_RESOLUTION",SWIG_From_int(static_cast< int >(2252)));
  SWIG_Python_SetConstant(d, "NET_DVR_SSD_FILE_SYSTEM_IS_UPGRADING",SWIG_From_int(static_cast< int >(2253)));
  SWIG_Python_SetConstant(d, "NET_DVR_SSD_FILE_SYSTEM_IS_FORMAT",SWIG_From_int(static_cast< int >(2254)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_IS_CONNECTING",SWIG_From_int(static_cast< int >(2255)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_STREAM_TYPE_NOT_SUPPORT",SWIG_From_int(static_cast< int >(2257)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_USERNAME_NOT_EXIST",SWIG_From_int(static_cast< int >(2258)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_ACCESS_PARAM_FAILURE",SWIG_From_int(static_cast< int >(2259)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_GET_STREAM_FAILURE",SWIG_From_int(static_cast< int >(2260)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANNEL_RISK_PASSWORD",SWIG_From_int(static_cast< int >(2261)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_SUPPORT_DELETE_STRANGER_LIB",SWIG_From_int(static_cast< int >(2262)));
  SWIG_Python_SetConstant(d, "NET_DVR_NO_SUPPORT_CREATE_STRANGER_LIB",SWIG_From_int(static_cast< int >(2263)));
  SWIG_Python_SetConstant(d, "NET_DVR_NETWORK_PORT_CONFLICT",SWIG_From_int(static_cast< int >(2264)));
  SWIG_Python_SetConstant(d, "NET_DVR_TRANSCODE_NO_RESOURCES",SWIG_From_int(static_cast< int >(2265)));
  SWIG_Python_SetConstant(d, "NET_DVR_SSD_FILE_SYSTEM_ERROR",SWIG_From_int(static_cast< int >(2266)));
  SWIG_Python_SetConstant(d, "NET_DVR_INSUFFICIENT_SSD__FOR_FPD",SWIG_From_int(static_cast< int >(2267)));
  SWIG_Python_SetConstant(d, "NET_DVR_ASSOCIATED_FACELIB_OVER_LIMIT",SWIG_From_int(static_cast< int >(2268)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_NOTSUPPORT_DEICING",SWIG_From_int(static_cast< int >(3001)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_THERMENABLE_CLOSE",SWIG_From_int(static_cast< int >(3002)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_NOTMEET_DEICING",SWIG_From_int(static_cast< int >(3003)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_PANORAMIC_LIMIT_OPERATED",SWIG_From_int(static_cast< int >(3004)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_SMARTH264_ROI_OPERATED",SWIG_From_int(static_cast< int >(3005)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_RULENUM_LIMIT",SWIG_From_int(static_cast< int >(3006)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_LASER_DEICING_OPERATED",SWIG_From_int(static_cast< int >(3007)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_OFFDIGITALZOOM_OR_MINZOOMLIMIT",SWIG_From_int(static_cast< int >(3008)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_FIREWAITING",SWIG_From_int(static_cast< int >(3009)));
  SWIG_Python_SetConstant(d, "NET_DVR_SYNCHRONIZEFOV_ERROR",SWIG_From_int(static_cast< int >(3010)));
  SWIG_Python_SetConstant(d, "NET_DVR_CERTIFICATE_VALIDATION_ERROR",SWIG_From_int(static_cast< int >(3011)));
  SWIG_Python_SetConstant(d, "NET_DVR_CERTIFICATES_NUM_EXCEED_ERROR",SWIG_From_int(static_cast< int >(3012)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_NO_SAFETY_HELMET_REGION",SWIG_From_int(static_cast< int >(3501)));
  SWIG_Python_SetConstant(d, "NET_DVR_ERR_UNCLOSED_SAFETY_HELMET",SWIG_From_int(static_cast< int >(3502)));
  SWIG_Python_SetConstant(d, "NET_ERR_NPQ_BASE_INDEX",SWIG_From_int(static_cast< int >(8000)));
  SWIG_Python_SetConstant(d, "NET_ERR_NPQ_PARAM",SWIG_From_int(static_cast< int >((8000+1))));
  SWIG_Python_SetConstant(d, "NET_ERR_NPQ_SYSTEM",SWIG_From_int(static_cast< int >((8000+2))));
  SWIG_Python_SetConstant(d, "NET_ERR_NPQ_GENRAL",SWIG_From_int(static_cast< int >((8000+3))));
  SWIG_Python_SetConstant(d, "NET_ERR_NPQ_PRECONDITION",SWIG_From_int(static_cast< int >((8000+4))));
  SWIG_Python_SetConstant(d, "NET_ERR_NPQ_NOTSUPPORT",SWIG_From_int(static_cast< int >((8000+5))));
  SWIG_Python_SetConstant(d, "NET_ERR_NPQ_NOTCALLBACK",SWIG_From_int(static_cast< int >((8000+100))));
  SWIG_Python_SetConstant(d, "NET_ERR_NPQ_LOADLIB",SWIG_From_int(static_cast< int >((8000+101))));
  SWIG_Python_SetConstant(d, "NET_ERR_NPQ_STEAM_CLOSE",SWIG_From_int(static_cast< int >((8000+104))));
  SWIG_Python_SetConstant(d, "NET_ERR_NPQ_MAX_LINK",SWIG_From_int(static_cast< int >((8000+110))));
  SWIG_Python_SetConstant(d, "NET_ERR_NPQ_STREAM_CFG",SWIG_From_int(static_cast< int >((8000+111))));
  SWIG_Python_SetConstant(d, "NET_DVR_SUPPORT_DDRAW",SWIG_From_int(static_cast< int >(0x01)));
  SWIG_Python_SetConstant(d, "NET_DVR_SUPPORT_BLT",SWIG_From_int(static_cast< int >(0x02)));
  SWIG_Python_SetConstant(d, "NET_DVR_SUPPORT_BLTFOURCC",SWIG_From_int(static_cast< int >(0x04)));
  SWIG_Python_SetConstant(d, "NET_DVR_SUPPORT_BLTSHRINKX",SWIG_From_int(static_cast< int >(0x08)));
  SWIG_Python_SetConstant(d, "NET_DVR_SUPPORT_BLTSHRINKY",SWIG_From_int(static_cast< int >(0x10)));
  SWIG_Python_SetConstant(d, "NET_DVR_SUPPORT_BLTSTRETCHX",SWIG_From_int(static_cast< int >(0x20)));
  SWIG_Python_SetConstant(d, "NET_DVR_SUPPORT_BLTSTRETCHY",SWIG_From_int(static_cast< int >(0x40)));
  SWIG_Python_SetConstant(d, "NET_DVR_SUPPORT_SSE",SWIG_From_int(static_cast< int >(0x80)));
  SWIG_Python_SetConstant(d, "NET_DVR_SUPPORT_MMX",SWIG_From_int(static_cast< int >(0x100)));
  SWIG_Python_SetConstant(d, "LIGHT_PWRON",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "WIPER_PWRON",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "FAN_PWRON",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "HEATER_PWRON",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "AUX_PWRON1",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "AUX_PWRON2",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, "SET_PRESET",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "CLE_PRESET",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, "ZOOM_IN",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, "ZOOM_OUT",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, "FOCUS_NEAR",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, "FOCUS_FAR",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, "IRIS_OPEN",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, "IRIS_CLOSE",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "TILT_UP",SWIG_From_int(static_cast< int >(21)));
  SWIG_Python_SetConstant(d, "TILT_DOWN",SWIG_From_int(static_cast< int >(22)));
  SWIG_Python_SetConstant(d, "PAN_LEFT",SWIG_From_int(static_cast< int >(23)));
  SWIG_Python_SetConstant(d, "PAN_RIGHT",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, "UP_LEFT",SWIG_From_int(static_cast< int >(25)));
  SWIG_Python_SetConstant(d, "UP_RIGHT",SWIG_From_int(static_cast< int >(26)));
  SWIG_Python_SetConstant(d, "DOWN_LEFT",SWIG_From_int(static_cast< int >(27)));
  SWIG_Python_SetConstant(d, "DOWN_RIGHT",SWIG_From_int(static_cast< int >(28)));
  SWIG_Python_SetConstant(d, "PAN_AUTO",SWIG_From_int(static_cast< int >(29)));
  SWIG_Python_SetConstant(d, "FILL_PRE_SEQ",SWIG_From_int(static_cast< int >(30)));
  SWIG_Python_SetConstant(d, "SET_SEQ_DWELL",SWIG_From_int(static_cast< int >(31)));
  SWIG_Python_SetConstant(d, "SET_SEQ_SPEED",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "CLE_PRE_SEQ",SWIG_From_int(static_cast< int >(33)));
  SWIG_Python_SetConstant(d, "STA_MEM_CRUISE",SWIG_From_int(static_cast< int >(34)));
  SWIG_Python_SetConstant(d, "STO_MEM_CRUISE",SWIG_From_int(static_cast< int >(35)));
  SWIG_Python_SetConstant(d, "RUN_CRUISE",SWIG_From_int(static_cast< int >(36)));
  SWIG_Python_SetConstant(d, "RUN_SEQ",SWIG_From_int(static_cast< int >(37)));
  SWIG_Python_SetConstant(d, "STOP_SEQ",SWIG_From_int(static_cast< int >(38)));
  SWIG_Python_SetConstant(d, "GOTO_PRESET",SWIG_From_int(static_cast< int >(39)));
  SWIG_Python_SetConstant(d, "DEL_SEQ",SWIG_From_int(static_cast< int >(43)));
  SWIG_Python_SetConstant(d, "STOP_CRUISE",SWIG_From_int(static_cast< int >(44)));
  SWIG_Python_SetConstant(d, "DELETE_CRUISE",SWIG_From_int(static_cast< int >(45)));
  SWIG_Python_SetConstant(d, "DELETE_ALL_CRUISE",SWIG_From_int(static_cast< int >(46)));
  SWIG_Python_SetConstant(d, "PAN_CIRCLE",SWIG_From_int(static_cast< int >(50)));
  SWIG_Python_SetConstant(d, "DRAG_PTZ",SWIG_From_int(static_cast< int >(51)));
  SWIG_Python_SetConstant(d, "LINEAR_SCAN",SWIG_From_int(static_cast< int >(52)));
  SWIG_Python_SetConstant(d, "CLE_ALL_SEQ",SWIG_From_int(static_cast< int >(54)));
  SWIG_Python_SetConstant(d, "CLE_ALL_CRUISE",SWIG_From_int(static_cast< int >(55)));
  SWIG_Python_SetConstant(d, "POPUP_MENU",SWIG_From_int(static_cast< int >(56)));
  SWIG_Python_SetConstant(d, "TILT_DOWN_ZOOM_IN",SWIG_From_int(static_cast< int >(58)));
  SWIG_Python_SetConstant(d, "TILT_DOWN_ZOOM_OUT",SWIG_From_int(static_cast< int >(59)));
  SWIG_Python_SetConstant(d, "PAN_LEFT_ZOOM_IN",SWIG_From_int(static_cast< int >(60)));
  SWIG_Python_SetConstant(d, "PAN_LEFT_ZOOM_OUT",SWIG_From_int(static_cast< int >(61)));
  SWIG_Python_SetConstant(d, "PAN_RIGHT_ZOOM_IN",SWIG_From_int(static_cast< int >(62)));
  SWIG_Python_SetConstant(d, "PAN_RIGHT_ZOOM_OUT",SWIG_From_int(static_cast< int >(63)));
  SWIG_Python_SetConstant(d, "UP_LEFT_ZOOM_IN",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "UP_LEFT_ZOOM_OUT",SWIG_From_int(static_cast< int >(65)));
  SWIG_Python_SetConstant(d, "UP_RIGHT_ZOOM_IN",SWIG_From_int(static_cast< int >(66)));
  SWIG_Python_SetConstant(d, "UP_RIGHT_ZOOM_OUT",SWIG_From_int(static_cast< int >(67)));
  SWIG_Python_SetConstant(d, "DOWN_LEFT_ZOOM_IN",SWIG_From_int(static_cast< int >(68)));
  SWIG_Python_SetConstant(d, "DOWN_LEFT_ZOOM_OUT",SWIG_From_int(static_cast< int >(69)));
  SWIG_Python_SetConstant(d, "DOWN_RIGHT_ZOOM_IN",SWIG_From_int(static_cast< int >(70)));
  SWIG_Python_SetConstant(d, "DOWN_RIGHT_ZOOM_OUT",SWIG_From_int(static_cast< int >(71)));
  SWIG_Python_SetConstant(d, "TILT_UP_ZOOM_IN",SWIG_From_int(static_cast< int >(72)));
  SWIG_Python_SetConstant(d, "TILT_UP_ZOOM_OUT",SWIG_From_int(static_cast< int >(73)));
  SWIG_Python_SetConstant(d, "DVR_VEHICLE_CONTROL_LIST",SWIG_From_int(static_cast< int >(0x1)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYSTART",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYSTOP",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYPAUSE",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYRESTART",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYFAST",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYSLOW",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYNORMAL",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYFRAME",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYSTARTAUDIO",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYSTOPAUDIO",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYAUDIOVOLUME",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYSETPOS",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYGETPOS",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYGETTIME",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYGETFRAME",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, "NET_DVR_GETTOTALFRAMES",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "NET_DVR_GETTOTALTIME",SWIG_From_int(static_cast< int >(17)));
  SWIG_Python_SetConstant(d, "NET_DVR_THROWBFRAME",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, "NET_DVR_SETSPEED",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, "NET_DVR_KEEPALIVE",SWIG_From_int(static_cast< int >(25)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYSETTIME",SWIG_From_int(static_cast< int >(26)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYGETTOTALLEN",SWIG_From_int(static_cast< int >(27)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYSETTIME_V50",SWIG_From_int(static_cast< int >(28)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAY_FORWARD",SWIG_From_int(static_cast< int >(29)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAY_REVERSE",SWIG_From_int(static_cast< int >(30)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DECODEFFRAMETYPE",SWIG_From_int(static_cast< int >(31)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TRANS_TYPE",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAY_CONVERT",SWIG_From_int(static_cast< int >(33)));
  SWIG_Python_SetConstant(d, "NET_DVR_START_DRAWFRAME",SWIG_From_int(static_cast< int >(34)));
  SWIG_Python_SetConstant(d, "NET_DVR_STOP_DRAWFRAME",SWIG_From_int(static_cast< int >(35)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANGEWNDRESOLUTION",SWIG_From_int(static_cast< int >(36)));
  SWIG_Python_SetConstant(d, "NET_DVR_RESETBUFFER",SWIG_From_int(static_cast< int >(37)));
  SWIG_Python_SetConstant(d, "NET_DVR_VOD_DRAG_ING",SWIG_From_int(static_cast< int >(38)));
  SWIG_Python_SetConstant(d, "NET_DVR_VOD_DRAG_END",SWIG_From_int(static_cast< int >(39)));
  SWIG_Python_SetConstant(d, "NET_DVR_VOD_RESET_PLAYTIME",SWIG_From_int(static_cast< int >(40)));
  SWIG_Python_SetConstant(d, "PLAYM4_DECODE_NORMAIL",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "PLAYM4_DECODE_KEY_FRAME",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "PLAYM4_DECODE_NONE",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "PLAYM4_DECODE_TEMPORAL_LAYER_0",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "PLAYM4_DECODE_TEMPORAL_LAYER_1",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "KEY_CODE_1",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "KEY_CODE_2",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "KEY_CODE_3",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "KEY_CODE_4",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "KEY_CODE_5",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "KEY_CODE_6",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "KEY_CODE_7",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, "KEY_CODE_8",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "KEY_CODE_9",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, "KEY_CODE_0",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "KEY_CODE_POWER",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, "KEY_CODE_MENU",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, "KEY_CODE_ENTER",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, "KEY_CODE_CANCEL",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, "KEY_CODE_UP",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, "KEY_CODE_DOWN",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "KEY_CODE_LEFT",SWIG_From_int(static_cast< int >(17)));
  SWIG_Python_SetConstant(d, "KEY_CODE_RIGHT",SWIG_From_int(static_cast< int >(18)));
  SWIG_Python_SetConstant(d, "KEY_CODE_EDIT",SWIG_From_int(static_cast< int >(19)));
  SWIG_Python_SetConstant(d, "KEY_CODE_ADD",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, "KEY_CODE_MINUS",SWIG_From_int(static_cast< int >(21)));
  SWIG_Python_SetConstant(d, "KEY_CODE_PLAY",SWIG_From_int(static_cast< int >(22)));
  SWIG_Python_SetConstant(d, "KEY_CODE_REC",SWIG_From_int(static_cast< int >(23)));
  SWIG_Python_SetConstant(d, "KEY_CODE_PAN",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, "KEY_CODE_M",SWIG_From_int(static_cast< int >(25)));
  SWIG_Python_SetConstant(d, "KEY_CODE_A",SWIG_From_int(static_cast< int >(26)));
  SWIG_Python_SetConstant(d, "KEY_CODE_F1",SWIG_From_int(static_cast< int >(27)));
  SWIG_Python_SetConstant(d, "KEY_CODE_F2",SWIG_From_int(static_cast< int >(28)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_UP_START",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_UP_STOP",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_DOWN_START",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_DOWN_STOP",SWIG_From_int(static_cast< int >(33)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_LEFT_START",SWIG_From_int(static_cast< int >(17)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_LEFT_STOP",SWIG_From_int(static_cast< int >(34)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_RIGHT_START",SWIG_From_int(static_cast< int >(18)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_RIGHT_STOP",SWIG_From_int(static_cast< int >(35)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_AP1_START",SWIG_From_int(static_cast< int >(19)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_AP1_STOP",SWIG_From_int(static_cast< int >(36)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_AP2_START",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_AP2_STOP",SWIG_From_int(static_cast< int >(37)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_FOCUS1_START",SWIG_From_int(static_cast< int >(26)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_FOCUS1_STOP",SWIG_From_int(static_cast< int >(38)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_FOCUS2_START",SWIG_From_int(static_cast< int >(25)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_FOCUS2_STOP",SWIG_From_int(static_cast< int >(39)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_B1_START",SWIG_From_int(static_cast< int >(40)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_B1_STOP",SWIG_From_int(static_cast< int >(41)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_B2_START",SWIG_From_int(static_cast< int >(42)));
  SWIG_Python_SetConstant(d, "KEY_PTZ_B2_STOP",SWIG_From_int(static_cast< int >(43)));
  SWIG_Python_SetConstant(d, "KEY_CODE_11",SWIG_From_int(static_cast< int >(44)));
  SWIG_Python_SetConstant(d, "KEY_CODE_12",SWIG_From_int(static_cast< int >(45)));
  SWIG_Python_SetConstant(d, "KEY_CODE_13",SWIG_From_int(static_cast< int >(46)));
  SWIG_Python_SetConstant(d, "KEY_CODE_14",SWIG_From_int(static_cast< int >(47)));
  SWIG_Python_SetConstant(d, "KEY_CODE_15",SWIG_From_int(static_cast< int >(48)));
  SWIG_Python_SetConstant(d, "KEY_CODE_16",SWIG_From_int(static_cast< int >(49)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEVICECFG",SWIG_From_int(static_cast< int >(100)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DEVICECFG",SWIG_From_int(static_cast< int >(101)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NETCFG",SWIG_From_int(static_cast< int >(102)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_NETCFG",SWIG_From_int(static_cast< int >(103)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PICCFG",SWIG_From_int(static_cast< int >(104)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PICCFG",SWIG_From_int(static_cast< int >(105)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_COMPRESSCFG",SWIG_From_int(static_cast< int >(106)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_COMPRESSCFG",SWIG_From_int(static_cast< int >(107)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORDCFG",SWIG_From_int(static_cast< int >(108)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RECORDCFG",SWIG_From_int(static_cast< int >(109)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DECODERCFG",SWIG_From_int(static_cast< int >(110)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DECODERCFG",SWIG_From_int(static_cast< int >(111)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RS232CFG",SWIG_From_int(static_cast< int >(112)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RS232CFG",SWIG_From_int(static_cast< int >(113)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMINCFG",SWIG_From_int(static_cast< int >(114)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMINCFG",SWIG_From_int(static_cast< int >(115)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMOUTCFG",SWIG_From_int(static_cast< int >(116)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMOUTCFG",SWIG_From_int(static_cast< int >(117)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TIMECFG",SWIG_From_int(static_cast< int >(118)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TIMECFG",SWIG_From_int(static_cast< int >(119)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PREVIEWCFG",SWIG_From_int(static_cast< int >(120)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PREVIEWCFG",SWIG_From_int(static_cast< int >(121)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEOOUTCFG",SWIG_From_int(static_cast< int >(122)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEOOUTCFG",SWIG_From_int(static_cast< int >(123)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_USERCFG",SWIG_From_int(static_cast< int >(124)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_USERCFG",SWIG_From_int(static_cast< int >(125)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EXCEPTIONCFG",SWIG_From_int(static_cast< int >(126)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EXCEPTIONCFG",SWIG_From_int(static_cast< int >(127)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ZONEANDDST",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ZONEANDDST",SWIG_From_int(static_cast< int >(129)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SHOWSTRING",SWIG_From_int(static_cast< int >(130)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SHOWSTRING",SWIG_From_int(static_cast< int >(131)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EVENTCOMPCFG",SWIG_From_int(static_cast< int >(132)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EVENTCOMPCFG",SWIG_From_int(static_cast< int >(133)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FTPCFG",SWIG_From_int(static_cast< int >(134)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FTPCFG",SWIG_From_int(static_cast< int >(135)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUXOUTCFG",SWIG_From_int(static_cast< int >(140)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AUXOUTCFG",SWIG_From_int(static_cast< int >(141)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PREVIEWCFG_AUX",SWIG_From_int(static_cast< int >(142)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PREVIEWCFG_AUX",SWIG_From_int(static_cast< int >(143)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PASSWORD_MANAGE_CFG",SWIG_From_int(static_cast< int >(144)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PASSWORD_MANAGE_CFG",SWIG_From_int(static_cast< int >(145)));
  SWIG_Python_SetConstant(d, "NET_DVR_UNLOCK_USER",SWIG_From_int(static_cast< int >(146)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SECURITY_CFG",SWIG_From_int(static_cast< int >(147)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SECURITY_CFG",SWIG_From_int(static_cast< int >(148)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LOCKED_INFO_LIST",SWIG_From_int(static_cast< int >(149)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RULECFG",SWIG_From_int(static_cast< int >(152)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RULECFG",SWIG_From_int(static_cast< int >(153)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TRACK_CFG",SWIG_From_int(static_cast< int >(160)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRACK_CFG",SWIG_From_int(static_cast< int >(161)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IVMS_STREAMCFG",SWIG_From_int(static_cast< int >(162)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IVMS_STREAMCFG",SWIG_From_int(static_cast< int >(163)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VCA_CTRLCFG",SWIG_From_int(static_cast< int >(164)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VCA_CTRLCFG",SWIG_From_int(static_cast< int >(165)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VCA_MASK_REGION",SWIG_From_int(static_cast< int >(166)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VCA_MASK_REGION",SWIG_From_int(static_cast< int >(167)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VCA_ENTER_REGION",SWIG_From_int(static_cast< int >(168)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VCA_ENTER_REGION",SWIG_From_int(static_cast< int >(169)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VCA_LINE_SEGMENT",SWIG_From_int(static_cast< int >(170)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VCA_LINE_SEGMENT",SWIG_From_int(static_cast< int >(171)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IVMS_MASK_REGION",SWIG_From_int(static_cast< int >(172)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IVMS_MASK_REGION",SWIG_From_int(static_cast< int >(173)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IVMS_ENTER_REGION",SWIG_From_int(static_cast< int >(174)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IVMS_ENTER_REGION",SWIG_From_int(static_cast< int >(175)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IVMS_BEHAVIORCFG",SWIG_From_int(static_cast< int >(176)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IVMS_BEHAVIORCFG",SWIG_From_int(static_cast< int >(177)));
  SWIG_Python_SetConstant(d, "NET_DVR_IVMS_SET_SEARCHCFG",SWIG_From_int(static_cast< int >(178)));
  SWIG_Python_SetConstant(d, "NET_DVR_IVMS_GET_SEARCHCFG",SWIG_From_int(static_cast< int >(179)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_POSITION_TRACK",SWIG_From_int(static_cast< int >(180)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POSITION_TRACK",SWIG_From_int(static_cast< int >(181)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CALIBRATION",SWIG_From_int(static_cast< int >(182)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CALIBRATION",SWIG_From_int(static_cast< int >(183)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PDC_RULECFG",SWIG_From_int(static_cast< int >(184)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PDC_RULECFG",SWIG_From_int(static_cast< int >(185)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PU_STREAMCFG",SWIG_From_int(static_cast< int >(186)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PU_STREAMCFG",SWIG_From_int(static_cast< int >(187)));
  SWIG_Python_SetConstant(d, "NET_VCA_SET_IVMS_BEHAVIOR_CFG",SWIG_From_int(static_cast< int >(192)));
  SWIG_Python_SetConstant(d, "NET_VCA_GET_IVMS_BEHAVIOR_CFG",SWIG_From_int(static_cast< int >(193)));
  SWIG_Python_SetConstant(d, "NET_VCA_SET_SIZE_FILTER",SWIG_From_int(static_cast< int >(194)));
  SWIG_Python_SetConstant(d, "NET_VCA_GET_SIZE_FILTER",SWIG_From_int(static_cast< int >(195)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TRACK_PARAMCFG",SWIG_From_int(static_cast< int >(196)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRACK_PARAMCFG",SWIG_From_int(static_cast< int >(197)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DOME_MOVEMENT_PARAM",SWIG_From_int(static_cast< int >(198)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DOME_MOVEMENT_PARAM",SWIG_From_int(static_cast< int >(199)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PICCFG_EX",SWIG_From_int(static_cast< int >(200)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PICCFG_EX",SWIG_From_int(static_cast< int >(201)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_USERCFG_EX",SWIG_From_int(static_cast< int >(202)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_USERCFG_EX",SWIG_From_int(static_cast< int >(203)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_COMPRESSCFG_EX",SWIG_From_int(static_cast< int >(204)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_COMPRESSCFG_EX",SWIG_From_int(static_cast< int >(205)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NETAPPCFG",SWIG_From_int(static_cast< int >(222)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_NETAPPCFG",SWIG_From_int(static_cast< int >(223)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NTPCFG",SWIG_From_int(static_cast< int >(224)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_NTPCFG",SWIG_From_int(static_cast< int >(225)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DDNSCFG",SWIG_From_int(static_cast< int >(226)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DDNSCFG",SWIG_From_int(static_cast< int >(227)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EMAILCFG",SWIG_From_int(static_cast< int >(228)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EMAILCFG",SWIG_From_int(static_cast< int >(229)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NFSCFG",SWIG_From_int(static_cast< int >(230)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_NFSCFG",SWIG_From_int(static_cast< int >(231)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SHOWSTRING_EX",SWIG_From_int(static_cast< int >(238)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SHOWSTRING_EX",SWIG_From_int(static_cast< int >(239)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NETCFG_OTHER",SWIG_From_int(static_cast< int >(244)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_NETCFG_OTHER",SWIG_From_int(static_cast< int >(245)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EMAILPARACFG",SWIG_From_int(static_cast< int >(250)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EMAILPARACFG",SWIG_From_int(static_cast< int >(251)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DDNSCFG_EX",SWIG_From_int(static_cast< int >(274)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DDNSCFG_EX",SWIG_From_int(static_cast< int >(275)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PTZPOS",SWIG_From_int(static_cast< int >(292)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZPOS",SWIG_From_int(static_cast< int >(293)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZSCOPE",SWIG_From_int(static_cast< int >(294)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AP_INFO_LIST",SWIG_From_int(static_cast< int >(305)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WIFI_CFG",SWIG_From_int(static_cast< int >(306)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIFI_CFG",SWIG_From_int(static_cast< int >(307)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WIFI_WORKMODE",SWIG_From_int(static_cast< int >(308)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIFI_WORKMODE",SWIG_From_int(static_cast< int >(309)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIFI_STATUS",SWIG_From_int(static_cast< int >(310)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REFERENCE_REGION",SWIG_From_int(static_cast< int >(400)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_REFERENCE_REGION",SWIG_From_int(static_cast< int >(401)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRAFFIC_MASK_REGION",SWIG_From_int(static_cast< int >(402)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TRAFFIC_MASK_REGION",SWIG_From_int(static_cast< int >(403)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AID_RULECFG",SWIG_From_int(static_cast< int >(404)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AID_RULECFG",SWIG_From_int(static_cast< int >(405)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TPS_RULECFG",SWIG_From_int(static_cast< int >(406)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TPS_RULECFG",SWIG_From_int(static_cast< int >(407)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LANECFG",SWIG_From_int(static_cast< int >(408)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LANECFG",SWIG_From_int(static_cast< int >(409)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VCA_RULE_COLOR_CFG",SWIG_From_int(static_cast< int >(410)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VCA_RULE_COLOR_CFG",SWIG_From_int(static_cast< int >(411)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SWITCH_LAMP_CFG",SWIG_From_int(static_cast< int >(412)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SWITCH_LAMP_CFG",SWIG_From_int(static_cast< int >(413)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FACEDETECT_RULECFG",SWIG_From_int(static_cast< int >(420)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACEDETECT_RULECFG",SWIG_From_int(static_cast< int >(421)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VEHICLE_RECOG_TASK",SWIG_From_int(static_cast< int >(422)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VEHICLE_RECOG_TASK",SWIG_From_int(static_cast< int >(423)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TIMECORRECT",SWIG_From_int(static_cast< int >(432)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CONNECT_LIST",SWIG_From_int(static_cast< int >(433)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NETCFG_V30",SWIG_From_int(static_cast< int >(1000)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_NETCFG_V30",SWIG_From_int(static_cast< int >(1001)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PICCFG_V30",SWIG_From_int(static_cast< int >(1002)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PICCFG_V30",SWIG_From_int(static_cast< int >(1003)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORDCFG_V30",SWIG_From_int(static_cast< int >(1004)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RECORDCFG_V30",SWIG_From_int(static_cast< int >(1005)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_USERCFG_V30",SWIG_From_int(static_cast< int >(1006)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_USERCFG_V30",SWIG_From_int(static_cast< int >(1007)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORDCFG_V40",SWIG_From_int(static_cast< int >(1008)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RECORDCFG_V40",SWIG_From_int(static_cast< int >(1009)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DDNSCFG_V30",SWIG_From_int(static_cast< int >(1010)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DDNSCFG_V30",SWIG_From_int(static_cast< int >(1011)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EMAILCFG_V30",SWIG_From_int(static_cast< int >(1012)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EMAILCFG_V30",SWIG_From_int(static_cast< int >(1013)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NETCFG_V50",SWIG_From_int(static_cast< int >(1015)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_NETCFG_V50",SWIG_From_int(static_cast< int >(1016)));
  SWIG_Python_SetConstant(d, "NET_GET_CRUISEPOINT_V40",SWIG_From_int(static_cast< int >(1018)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CRUISE",SWIG_From_int(static_cast< int >(1020)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CRUISE",SWIG_From_int(static_cast< int >(1021)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMINCFG_V30",SWIG_From_int(static_cast< int >(1024)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMINCFG_V30",SWIG_From_int(static_cast< int >(1025)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMOUTCFG_V30",SWIG_From_int(static_cast< int >(1026)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMOUTCFG_V30",SWIG_From_int(static_cast< int >(1027)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEOOUTCFG_V30",SWIG_From_int(static_cast< int >(1028)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEOOUTCFG_V30",SWIG_From_int(static_cast< int >(1029)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SHOWSTRING_V30",SWIG_From_int(static_cast< int >(1030)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SHOWSTRING_V30",SWIG_From_int(static_cast< int >(1031)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EXCEPTIONCFG_V30",SWIG_From_int(static_cast< int >(1034)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EXCEPTIONCFG_V30",SWIG_From_int(static_cast< int >(1035)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RS232CFG_V30",SWIG_From_int(static_cast< int >(1036)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RS232CFG_V30",SWIG_From_int(static_cast< int >(1037)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NET_DISKCFG",SWIG_From_int(static_cast< int >(1038)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_NET_DISKCFG",SWIG_From_int(static_cast< int >(1039)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_COMPRESSCFG_V30",SWIG_From_int(static_cast< int >(1040)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_COMPRESSCFG_V30",SWIG_From_int(static_cast< int >(1041)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DECODERCFG_V30",SWIG_From_int(static_cast< int >(1042)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DECODERCFG_V30",SWIG_From_int(static_cast< int >(1043)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PREVIEWCFG_V30",SWIG_From_int(static_cast< int >(1044)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PREVIEWCFG_V30",SWIG_From_int(static_cast< int >(1045)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PREVIEWCFG_AUX_V30",SWIG_From_int(static_cast< int >(1046)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PREVIEWCFG_AUX_V30",SWIG_From_int(static_cast< int >(1047)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IPPARACFG",SWIG_From_int(static_cast< int >(1048)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IPPARACFG",SWIG_From_int(static_cast< int >(1049)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IPALARMINCFG",SWIG_From_int(static_cast< int >(1050)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IPALARMINCFG",SWIG_From_int(static_cast< int >(1051)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IPALARMOUTCFG",SWIG_From_int(static_cast< int >(1052)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IPALARMOUTCFG",SWIG_From_int(static_cast< int >(1053)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HDCFG",SWIG_From_int(static_cast< int >(1054)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HDCFG",SWIG_From_int(static_cast< int >(1055)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HDGROUP_CFG",SWIG_From_int(static_cast< int >(1056)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HDGROUP_CFG",SWIG_From_int(static_cast< int >(1057)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_COMPRESSCFG_AUD",SWIG_From_int(static_cast< int >(1058)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_COMPRESSCFG_AUD",SWIG_From_int(static_cast< int >(1059)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IPPARACFG_V31",SWIG_From_int(static_cast< int >(1060)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IPPARACFG_V31",SWIG_From_int(static_cast< int >(1061)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IPPARACFG_V40",SWIG_From_int(static_cast< int >(1062)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IPPARACFG_V40",SWIG_From_int(static_cast< int >(1063)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CCDPARAMCFG",SWIG_From_int(static_cast< int >(1067)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CCDPARAMCFG",SWIG_From_int(static_cast< int >(1068)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IOINCFG",SWIG_From_int(static_cast< int >(1070)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IOINCFG",SWIG_From_int(static_cast< int >(1071)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IOOUTCFG",SWIG_From_int(static_cast< int >(1072)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IOOUTCFG",SWIG_From_int(static_cast< int >(1073)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FLASHCFG",SWIG_From_int(static_cast< int >(1074)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FLASHCFG",SWIG_From_int(static_cast< int >(1075)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LIGHTSNAPCFG",SWIG_From_int(static_cast< int >(1076)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LIGHTSNAPCFG",SWIG_From_int(static_cast< int >(1077)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MEASURESPEEDCFG",SWIG_From_int(static_cast< int >(1078)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MEASURESPEEDCFG",SWIG_From_int(static_cast< int >(1079)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IMAGEOVERLAYCFG",SWIG_From_int(static_cast< int >(1080)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IMAGEOVERLAYCFG",SWIG_From_int(static_cast< int >(1081)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SNAPCFG",SWIG_From_int(static_cast< int >(1082)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SNAPCFG",SWIG_From_int(static_cast< int >(1083)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VTPPARAM",SWIG_From_int(static_cast< int >(1084)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VTPPARAM",SWIG_From_int(static_cast< int >(1085)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SNAPENABLECFG",SWIG_From_int(static_cast< int >(1086)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SNAPENABLECFG",SWIG_From_int(static_cast< int >(1087)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POSTEPOLICECFG",SWIG_From_int(static_cast< int >(1088)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_POSTEPOLICECFG",SWIG_From_int(static_cast< int >(1089)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_JPEGCFG_V30",SWIG_From_int(static_cast< int >(1090)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_JPEGCFG_V30",SWIG_From_int(static_cast< int >(1091)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SPRCFG",SWIG_From_int(static_cast< int >(1092)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SPRCFG",SWIG_From_int(static_cast< int >(1093)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PLCCFG",SWIG_From_int(static_cast< int >(1094)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PLCCFG",SWIG_From_int(static_cast< int >(1095)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEVICESTATECFG",SWIG_From_int(static_cast< int >(1096)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CALIBRATE_TIME",SWIG_From_int(static_cast< int >(1097)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CALIBRATE_TIME",SWIG_From_int(static_cast< int >(1098)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEVICECFG_V40",SWIG_From_int(static_cast< int >(1100)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DEVICECFG_V40",SWIG_From_int(static_cast< int >(1101)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ZEROCHANCFG",SWIG_From_int(static_cast< int >(1102)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ZEROCHANCFG",SWIG_From_int(static_cast< int >(1103)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ZERO_PREVIEWCFG_V30",SWIG_From_int(static_cast< int >(1104)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ZERO_PREVIEWCFG_V30",SWIG_From_int(static_cast< int >(1105)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ZERO_ZOOM",SWIG_From_int(static_cast< int >(1106)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ZERO_ZOOM",SWIG_From_int(static_cast< int >(1107)));
  SWIG_Python_SetConstant(d, "NET_DVR_NATASSOCIATECFG_GET",SWIG_From_int(static_cast< int >(1110)));
  SWIG_Python_SetConstant(d, "NET_DVR_NATASSOCIATECFG_SET",SWIG_From_int(static_cast< int >(1111)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SNMPCFG",SWIG_From_int(static_cast< int >(1112)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SNMPCFG",SWIG_From_int(static_cast< int >(1113)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SNMPCFG_V30",SWIG_From_int(static_cast< int >(1114)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SNMPCFG_V30",SWIG_From_int(static_cast< int >(1115)));
  SWIG_Python_SetConstant(d, "NET_DVR_VIDEOPLATFORMALARMCFG_GET",SWIG_From_int(static_cast< int >(1130)));
  SWIG_Python_SetConstant(d, "NET_DVR_VIDEOPLATFORMALARMCFG_SET",SWIG_From_int(static_cast< int >(1131)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RAID_ADAPTER_INFO",SWIG_From_int(static_cast< int >(1134)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RAID_ADAPTER_INFO",SWIG_From_int(static_cast< int >(1135)));
  SWIG_Python_SetConstant(d, "NET_DVR_MATRIX_BIGSCREENCFG_GET",SWIG_From_int(static_cast< int >(1140)));
  SWIG_Python_SetConstant(d, "NET_DVR_MATRIX_BIGSCREENCFG_SET",SWIG_From_int(static_cast< int >(1141)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MB_PLATFORMPARA",SWIG_From_int(static_cast< int >(1145)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MB_PLATFORMPARA",SWIG_From_int(static_cast< int >(1146)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MB_DEVSTATUS",SWIG_From_int(static_cast< int >(1147)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DECODER_JOINT_CHAN",SWIG_From_int(static_cast< int >(1151)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DECODER_JOINT_CHAN",SWIG_From_int(static_cast< int >(1152)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NETCFG_MULTI",SWIG_From_int(static_cast< int >(1161)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_NETCFG_MULTI",SWIG_From_int(static_cast< int >(1162)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NETCFG_MULTI_V50",SWIG_From_int(static_cast< int >(1163)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_NETCFG_MULTI_V50",SWIG_From_int(static_cast< int >(1164)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CMSPARA",SWIG_From_int(static_cast< int >(1170)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CMSPARA",SWIG_From_int(static_cast< int >(1171)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DIALSTATUS",SWIG_From_int(static_cast< int >(1172)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SMSRELATIVEPARA",SWIG_From_int(static_cast< int >(1173)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SMSRELATIVEPARA",SWIG_From_int(static_cast< int >(1174)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PINSTATUS",SWIG_From_int(static_cast< int >(1175)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PINCMD",SWIG_From_int(static_cast< int >(1176)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SENSOR_CFG",SWIG_From_int(static_cast< int >(1180)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SENSOR_CFG",SWIG_From_int(static_cast< int >(1181)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMIN_PARAM",SWIG_From_int(static_cast< int >(1182)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMIN_PARAM",SWIG_From_int(static_cast< int >(1183)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMOUT_PARAM",SWIG_From_int(static_cast< int >(1184)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMOUT_PARAM",SWIG_From_int(static_cast< int >(1185)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SIREN_PARAM",SWIG_From_int(static_cast< int >(1186)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SIREN_PARAM",SWIG_From_int(static_cast< int >(1187)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARM_RS485CFG",SWIG_From_int(static_cast< int >(1188)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARM_RS485CFG",SWIG_From_int(static_cast< int >(1189)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_MAIN_STATUS",SWIG_From_int(static_cast< int >(1190)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_OTHER_STATUS",SWIG_From_int(static_cast< int >(1191)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMHOST_ENABLECFG",SWIG_From_int(static_cast< int >(1192)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_ENABLECFG",SWIG_From_int(static_cast< int >(1193)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARM_CAMCFG",SWIG_From_int(static_cast< int >(1194)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARM_CAMCFG",SWIG_From_int(static_cast< int >(1195)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GATEWAY_CFG",SWIG_From_int(static_cast< int >(1196)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GATEWAY_CFG",SWIG_From_int(static_cast< int >(1197)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMDIALMODECFG",SWIG_From_int(static_cast< int >(1198)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMDIALMODECFG",SWIG_From_int(static_cast< int >(1199)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMIN_PARAM_V50",SWIG_From_int(static_cast< int >(1200)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMIN_PARAM_V50",SWIG_From_int(static_cast< int >(1201)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WINCFG",SWIG_From_int(static_cast< int >(1202)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOSTDIALSETUPMODE",SWIG_From_int(static_cast< int >(1204)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMHOSTDIALSETUPMODE",SWIG_From_int(static_cast< int >(1205)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SUBSYSTEM_ALARM",SWIG_From_int(static_cast< int >(1210)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SUBSYSTEM_ALARM",SWIG_From_int(static_cast< int >(1211)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WHITELIST_ALARM",SWIG_From_int(static_cast< int >(1215)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WHITELIST_ALARM",SWIG_From_int(static_cast< int >(1216)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_MODULE_LIST",SWIG_From_int(static_cast< int >(1222)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PRIOR_ALARM",SWIG_From_int(static_cast< int >(1223)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PRIOR_ALARM",SWIG_From_int(static_cast< int >(1224)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TAMPER_ALARMIN_PARAM",SWIG_From_int(static_cast< int >(1225)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TAMPER_ALARMIN_PARAM",SWIG_From_int(static_cast< int >(1226)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HOLIDAY_PARAM_CFG",SWIG_From_int(static_cast< int >(1240)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HOLIDAY_PARAM_CFG",SWIG_From_int(static_cast< int >(1241)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MOTION_HOLIDAY_HANDLE",SWIG_From_int(static_cast< int >(1242)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MOTION_HOLIDAY_HANDLE",SWIG_From_int(static_cast< int >(1243)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VILOST_HOLIDAY_HANDLE",SWIG_From_int(static_cast< int >(1244)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VILOST_HOLIDAY_HANDLE",SWIG_From_int(static_cast< int >(1245)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HIDE_HOLIDAY_HANDLE",SWIG_From_int(static_cast< int >(1246)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HIDE_HOLIDAY_HANDLE",SWIG_From_int(static_cast< int >(1247)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMIN_HOLIDAY_HANDLE",SWIG_From_int(static_cast< int >(1248)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMIN_HOLIDAY_HANDLE",SWIG_From_int(static_cast< int >(1249)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMOUT_HOLIDAY_HANDLE",SWIG_From_int(static_cast< int >(1250)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMOUT_HOLIDAY_HANDLE",SWIG_From_int(static_cast< int >(1251)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HOLIDAY_RECORD",SWIG_From_int(static_cast< int >(1252)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HOLIDAY_RECORD",SWIG_From_int(static_cast< int >(1253)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NETWORK_BONDING",SWIG_From_int(static_cast< int >(1254)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_NETWORK_BONDING",SWIG_From_int(static_cast< int >(1255)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LINK_STATUS",SWIG_From_int(static_cast< int >(1256)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DISK_QUOTA_CFG",SWIG_From_int(static_cast< int >(1278)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DISK_QUOTA_CFG",SWIG_From_int(static_cast< int >(1279)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_JPEG_CAPTURE_CFG",SWIG_From_int(static_cast< int >(1280)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_JPEG_CAPTURE_CFG",SWIG_From_int(static_cast< int >(1281)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCHED_CAPTURECFG",SWIG_From_int(static_cast< int >(1282)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCHED_CAPTURECFG",SWIG_From_int(static_cast< int >(1283)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VGA_PREVIEWCFG",SWIG_From_int(static_cast< int >(1284)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VGA_PREVIEWCFG",SWIG_From_int(static_cast< int >(1285)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEO_INPUT_EFFECT",SWIG_From_int(static_cast< int >(1286)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEO_INPUT_EFFECT",SWIG_From_int(static_cast< int >(1287)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STORAGE_SERVER_SWITCH",SWIG_From_int(static_cast< int >(1290)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STORAGE_SERVER_SWITCH",SWIG_From_int(static_cast< int >(1291)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DISK_QUOTA_CFG_V60",SWIG_From_int(static_cast< int >(1292)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DISK_QUOTA_CFG_V60",SWIG_From_int(static_cast< int >(1293)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OPTICAL_CHANNEL",SWIG_From_int(static_cast< int >(1300)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OPTICAL_CHANNEL",SWIG_From_int(static_cast< int >(1301)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIBER_CASCADE",SWIG_From_int(static_cast< int >(1302)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FIBER_CASCADE",SWIG_From_int(static_cast< int >(1303)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SPARTAN_STATUS",SWIG_From_int(static_cast< int >(1304)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SPARTAN_STATUS",SWIG_From_int(static_cast< int >(1305)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ETHERNET_CHANNEL",SWIG_From_int(static_cast< int >(1306)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ETHERMET_CHANNEL",SWIG_From_int(static_cast< int >(1307)));
  SWIG_Python_SetConstant(d, "NET_DVR_OPTICAL_REBOOT",SWIG_From_int(static_cast< int >(1320)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AUDIOCHAN_CFG",SWIG_From_int(static_cast< int >(1321)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUDIOCHAN_CFG",SWIG_From_int(static_cast< int >(1322)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MATRIX_BASE_CFG",SWIG_From_int(static_cast< int >(1332)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MATRIX_BASE_CFG",SWIG_From_int(static_cast< int >(1333)));
  SWIG_Python_SetConstant(d, "NET_DVR_SWITCH_MATRIX_IO",SWIG_From_int(static_cast< int >(1334)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MATRIX_IO_RELATION",SWIG_From_int(static_cast< int >(1335)));
  SWIG_Python_SetConstant(d, "NET_DVR_V6PSUBSYSTEMARAM_GET",SWIG_From_int(static_cast< int >(1501)));
  SWIG_Python_SetConstant(d, "NET_DVR_V6PSUBSYSTEMARAM_SET",SWIG_From_int(static_cast< int >(1502)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALLWINCFG",SWIG_From_int(static_cast< int >(1503)));
  SWIG_Python_SetConstant(d, "NET_DVR_BIGSCREENASSOCIATECFG_GET",SWIG_From_int(static_cast< int >(1511)));
  SWIG_Python_SetConstant(d, "NET_DVR_BIGSCREENASSOCIATECFG_SET",SWIG_From_int(static_cast< int >(1512)));
  SWIG_Python_SetConstant(d, "NET_DVR_GETSCREENINFO",SWIG_From_int(static_cast< int >(1601)));
  SWIG_Python_SetConstant(d, "NET_DVR_SETSCREENINFO",SWIG_From_int(static_cast< int >(1602)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCREEN_WINCFG",SWIG_From_int(static_cast< int >(1603)));
  SWIG_Python_SetConstant(d, "NET_DVR_LAYOUTLIST_GET",SWIG_From_int(static_cast< int >(1605)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LAYOUTCFG",SWIG_From_int(static_cast< int >(1606)));
  SWIG_Python_SetConstant(d, "NET_DVR_LAYOUTCTRL",SWIG_From_int(static_cast< int >(1607)));
  SWIG_Python_SetConstant(d, "NET_DVR_INPUTLIST_GET",SWIG_From_int(static_cast< int >(1608)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_INPUTSTREAMCFG",SWIG_From_int(static_cast< int >(1609)));
  SWIG_Python_SetConstant(d, "NET_DVR_OUTPUT_SET",SWIG_From_int(static_cast< int >(1610)));
  SWIG_Python_SetConstant(d, "NET_DVR_OUTPUT_GET",SWIG_From_int(static_cast< int >(1611)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OSDCFG",SWIG_From_int(static_cast< int >(1612)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OSDCFG",SWIG_From_int(static_cast< int >(1613)));
  SWIG_Python_SetConstant(d, "NET_DVR_BIGSCREEN_GETSERIAL",SWIG_From_int(static_cast< int >(1614)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PLANLIST",SWIG_From_int(static_cast< int >(1615)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PLAN",SWIG_From_int(static_cast< int >(1616)));
  SWIG_Python_SetConstant(d, "NET_DVR_CTRL_PLAN",SWIG_From_int(static_cast< int >(1617)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEVICE_RUN_STATUS",SWIG_From_int(static_cast< int >(1618)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EXTERNAL_MATRIX_CFG",SWIG_From_int(static_cast< int >(1619)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EXTERNAL_MATRIX_CFG",SWIG_From_int(static_cast< int >(1620)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OUTPUT_SCREEN_RELATION",SWIG_From_int(static_cast< int >(1621)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OUTPUT_SCREEN_RELATION",SWIG_From_int(static_cast< int >(1622)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VCS_USER_CFG",SWIG_From_int(static_cast< int >(1623)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VCS_USER_CFG",SWIG_From_int(static_cast< int >(1624)));
  SWIG_Python_SetConstant(d, "NET_DVR_CONTROL_SCREEN",SWIG_From_int(static_cast< int >(1625)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EXTERNAL_MATRIX_CFG_V50",SWIG_From_int(static_cast< int >(1626)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EXTERNAL_MATRIX_CFG_V50",SWIG_From_int(static_cast< int >(1627)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEV_BASEINFO",SWIG_From_int(static_cast< int >(1650)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DEV_BASEINFO",SWIG_From_int(static_cast< int >(1651)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEV_NETINFO",SWIG_From_int(static_cast< int >(1652)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DEV_NETINFO",SWIG_From_int(static_cast< int >(1653)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SIGNAL_SOURCE_INFO",SWIG_From_int(static_cast< int >(1654)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SIGNAL_SOURCE_INFO",SWIG_From_int(static_cast< int >(1655)));
  SWIG_Python_SetConstant(d, "NET_DVR_ADJUST_PIC_V40",SWIG_From_int(static_cast< int >(1656)));
  SWIG_Python_SetConstant(d, "NET_DVR_RESTORE_V40",SWIG_From_int(static_cast< int >(1657)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_NET_SIGNAL",SWIG_From_int(static_cast< int >(1658)));
  SWIG_Python_SetConstant(d, "NET_DVR_REBOOT_V40",SWIG_From_int(static_cast< int >(1659)));
  SWIG_Python_SetConstant(d, "NET_DVR_CONTROL_PICTURE_V41",SWIG_From_int(static_cast< int >(1660)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUTO_REBOOT_CFG",SWIG_From_int(static_cast< int >(1710)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AUTO_REBOOT_CFG",SWIG_From_int(static_cast< int >(1711)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRUNK_USE_STATE",SWIG_From_int(static_cast< int >(1713)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PTZ_CTRL_INFO",SWIG_From_int(static_cast< int >(1714)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZ_CTRL_INFO",SWIG_From_int(static_cast< int >(1715)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZ_STATUS",SWIG_From_int(static_cast< int >(1716)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DISP_ROUTE_LIST",SWIG_From_int(static_cast< int >(1717)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEC_RESOURCE_LIST",SWIG_From_int(static_cast< int >(1720)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DEC_RESOURCE_LIST",SWIG_From_int(static_cast< int >(1721)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEC_YUV",SWIG_From_int(static_cast< int >(1722)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DEC_YUV",SWIG_From_int(static_cast< int >(1723)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEC_RESOUCE",SWIG_From_int(static_cast< int >(1724)));
  SWIG_Python_SetConstant(d, "NET_DVR_FREE_DEC_RESOURCE",SWIG_From_int(static_cast< int >(1725)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEOWALLDISPLAYMODE",SWIG_From_int(static_cast< int >(1730)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEOWALLDISPLAYMODE",SWIG_From_int(static_cast< int >(1731)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEOWALLDISPLAYNO",SWIG_From_int(static_cast< int >(1732)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEOWALLDISPLAYPOSITION",SWIG_From_int(static_cast< int >(1733)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEOWALLDISPLAYPOSITION",SWIG_From_int(static_cast< int >(1734)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEOWALLWINDOWPOSITION",SWIG_From_int(static_cast< int >(1735)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEOWALLWINDOWPOSITION",SWIG_From_int(static_cast< int >(1736)));
  SWIG_Python_SetConstant(d, "NET_DVR_VIDEOWALLWINDOW_CLOSEALL",SWIG_From_int(static_cast< int >(1737)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIRTUALLED",SWIG_From_int(static_cast< int >(1738)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIRTUALLED",SWIG_From_int(static_cast< int >(1739)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IMAGE_CUT_MODE",SWIG_From_int(static_cast< int >(1740)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IMAGE_CUT_MODE",SWIG_From_int(static_cast< int >(1741)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_USING_SERIALPORT",SWIG_From_int(static_cast< int >(1742)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_USING_SERIALPORT",SWIG_From_int(static_cast< int >(1743)));
  SWIG_Python_SetConstant(d, "NET_DVR_SCENE_CONTROL",SWIG_From_int(static_cast< int >(1744)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CURRENT_SCENE",SWIG_From_int(static_cast< int >(1745)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VW_SCENE_PARAM",SWIG_From_int(static_cast< int >(1746)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VW_SCENE_PARAM",SWIG_From_int(static_cast< int >(1747)));
  SWIG_Python_SetConstant(d, "NET_DVR_DISPLAY_CHANNO_CONTROL",SWIG_From_int(static_cast< int >(1748)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIN_DEC_INFO",SWIG_From_int(static_cast< int >(1749)));
  SWIG_Python_SetConstant(d, "NET_DVR_RESET_VIDEOWALLDISPLAYPOSITION",SWIG_From_int(static_cast< int >(1750)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VW_AUDIO_CFG",SWIG_From_int(static_cast< int >(1752)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VW_AUDIO_CFG",SWIG_From_int(static_cast< int >(1753)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GBT28181_DECCHANINFO_CFG",SWIG_From_int(static_cast< int >(1754)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GBT28181_DECCHANINFO_CFG",SWIG_From_int(static_cast< int >(1755)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MAINBOARD_SERIAL",SWIG_From_int(static_cast< int >(1756)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MAINBOARD_SERIAL",SWIG_From_int(static_cast< int >(1757)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SUBBOARD_INFO",SWIG_From_int(static_cast< int >(1758)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SUBBOARD_EXCEPTION",SWIG_From_int(static_cast< int >(1759)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CAMERACHAN_SERIALCFG",SWIG_From_int(static_cast< int >(1760)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CAMERACHAN_SERIALCFG",SWIG_From_int(static_cast< int >(1761)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MATRIX_STATUS",SWIG_From_int(static_cast< int >(1762)));
  SWIG_Python_SetConstant(d, "NET_SET_MULTIFUNCTION_SERIALCFG",SWIG_From_int(static_cast< int >(1763)));
  SWIG_Python_SetConstant(d, "NET_GET_MULTIFUNCTION_SERIALCFG",SWIG_From_int(static_cast< int >(1764)));
  SWIG_Python_SetConstant(d, "NET_DVR_PTZ_3D_SPEED",SWIG_From_int(static_cast< int >(1765)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SIGNAL_JOINT",SWIG_From_int(static_cast< int >(1766)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SIGNAL_JOINT",SWIG_From_int(static_cast< int >(1767)));
  SWIG_Python_SetConstant(d, "NET_DVR_SIGNAL_CUT",SWIG_From_int(static_cast< int >(1768)));
  SWIG_Python_SetConstant(d, "NET_DVR_DYNAMIC_DECODE_BATCH",SWIG_From_int(static_cast< int >(1769)));
  SWIG_Python_SetConstant(d, "NET_DVR_DECSWITCH_SET_BATCH",SWIG_From_int(static_cast< int >(1770)));
  SWIG_Python_SetConstant(d, "NET_DVR_DECSWITCH_GET_BATCH",SWIG_From_int(static_cast< int >(1771)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_SIGNAL_JOINT",SWIG_From_int(static_cast< int >(1772)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PLAYING_PLAN",SWIG_From_int(static_cast< int >(1773)));
  SWIG_Python_SetConstant(d, "NET_DVR_WALL_RELATION_GET",SWIG_From_int(static_cast< int >(1774)));
  SWIG_Python_SetConstant(d, "NET_DVR_WALL_RELATION_SET",SWIG_From_int(static_cast< int >(1775)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_INPUTSTREAMCFG_V40",SWIG_From_int(static_cast< int >(1776)));
  SWIG_Python_SetConstant(d, "NET_DVR_PTZCFG_INPUTSTREAM_GET",SWIG_From_int(static_cast< int >(1777)));
  SWIG_Python_SetConstant(d, "NET_DVR_PTZCFG_INPUTSTREAM_SET",SWIG_From_int(static_cast< int >(1778)));
  SWIG_Python_SetConstant(d, "NET_DVR_SIGNAL_CUTPARAM_GET",SWIG_From_int(static_cast< int >(1779)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SUBSYSTEM_NETCFG",SWIG_From_int(static_cast< int >(1780)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SUBSYSTEM_NETCFG",SWIG_From_int(static_cast< int >(1781)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_SIGNAL_JOINT",SWIG_From_int(static_cast< int >(1782)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PICTURE_INFO",SWIG_From_int(static_cast< int >(1783)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PICTURE_INFO",SWIG_From_int(static_cast< int >(1784)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEO_INFO",SWIG_From_int(static_cast< int >(1785)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEO_INFO",SWIG_From_int(static_cast< int >(1786)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PLAYLIST",SWIG_From_int(static_cast< int >(1787)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PLAYLIST",SWIG_From_int(static_cast< int >(1788)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_PLAYLIST",SWIG_From_int(static_cast< int >(1789)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYITEM_CONTROL",SWIG_From_int(static_cast< int >(1790)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PLAYPLAN_TEMPLATE",SWIG_From_int(static_cast< int >(1791)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PLAYPLAN_TEMPLATE",SWIG_From_int(static_cast< int >(1792)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_PLAYPLAN_TEMPLATE",SWIG_From_int(static_cast< int >(1793)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WINDOW_PLAYPLAN",SWIG_From_int(static_cast< int >(1794)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WINDOW_PLAYPLAN",SWIG_From_int(static_cast< int >(1795)));
  SWIG_Python_SetConstant(d, "NET_DVR_TOPLAY_ITEM",SWIG_From_int(static_cast< int >(1796)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEVICE_PLAY_CONTROL",SWIG_From_int(static_cast< int >(1797)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PLAY_INFO",SWIG_From_int(static_cast< int >(1798)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_PICTURE_INFO",SWIG_From_int(static_cast< int >(1799)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_VIDEO_INFO",SWIG_From_int(static_cast< int >(1800)));
  SWIG_Python_SetConstant(d, "NET_DVR_DELETE_VIDEO_FILE",SWIG_From_int(static_cast< int >(1801)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOSTSUBSYSTEM_CFG",SWIG_From_int(static_cast< int >(2001)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMHOSTSUBSYSTEM_CFG",SWIG_From_int(static_cast< int >(2002)));
  SWIG_Python_SetConstant(d, "NET_DVR_GETEXTENDALARMININFO",SWIG_From_int(static_cast< int >(2003)));
  SWIG_Python_SetConstant(d, "NET_DVR_MODIFYALARMINNO",SWIG_From_int(static_cast< int >(2004)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_WIRELESS_NETWORK_CFG",SWIG_From_int(static_cast< int >(2005)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMHOST_WIRELESS_NETWORK_CFG",SWIG_From_int(static_cast< int >(2006)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_NETCFG",SWIG_From_int(static_cast< int >(2007)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMHOST_NETCFG",SWIG_From_int(static_cast< int >(2008)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_SCREEN_CFG",SWIG_From_int(static_cast< int >(2009)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_SCREEN_CFG",SWIG_From_int(static_cast< int >(2010)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_CONTENT_CFG",SWIG_From_int(static_cast< int >(2011)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_CONTENT_CFG",SWIG_From_int(static_cast< int >(2012)));
  SWIG_Python_SetConstant(d, "NET_DVR_TURNON_LED",SWIG_From_int(static_cast< int >(2013)));
  SWIG_Python_SetConstant(d, "NET_DVR_TURNOFF_LED",SWIG_From_int(static_cast< int >(2014)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_TIMER_SWITCH",SWIG_From_int(static_cast< int >(2015)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_TIMER_SWITCH",SWIG_From_int(static_cast< int >(2016)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_BRIGHTNESS",SWIG_From_int(static_cast< int >(2017)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_TIMER_BRIGHTNESS",SWIG_From_int(static_cast< int >(2018)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_TIMER_BRIGHTNESS",SWIG_From_int(static_cast< int >(2019)));
  SWIG_Python_SetConstant(d, "NET_DVR_LED_CHECKTIME",SWIG_From_int(static_cast< int >(2020)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_AUDIO_ASSOCIATE_ALARM",SWIG_From_int(static_cast< int >(2021)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMHOST_AUDIO_ASSOCIATE_ALARM",SWIG_From_int(static_cast< int >(2022)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_STATUS",SWIG_From_int(static_cast< int >(2023)));
  SWIG_Python_SetConstant(d, "NET_DVR_CLOSE_SUBSYSTEM_FAULT_ALARM",SWIG_From_int(static_cast< int >(2027)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SUBSYSTEM_BYPASS",SWIG_From_int(static_cast< int >(2028)));
  SWIG_Python_SetConstant(d, "NET_DVR_CANCEL_SUBSYSTEM_BYPASS",SWIG_From_int(static_cast< int >(2029)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_SUBSYSTEM_CFG_EX",SWIG_From_int(static_cast< int >(2030)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMHOST_SUBSYSTEM_CFG_EX",SWIG_From_int(static_cast< int >(2031)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_PRINTER_CFG",SWIG_From_int(static_cast< int >(2032)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMHOST_PRINTER_CFG",SWIG_From_int(static_cast< int >(2033)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_ZONE_LIST_IN_SUBSYSTEM",SWIG_From_int(static_cast< int >(2034)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_TRIGGER_LIST",SWIG_From_int(static_cast< int >(2035)));
  SWIG_Python_SetConstant(d, "NET_DVR_ARM_ALARMHOST_SUBSYSTEM",SWIG_From_int(static_cast< int >(2036)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_EVENT_TRIG_ALARMOUT_CFG",SWIG_From_int(static_cast< int >(2037)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMHOST_EVENT_TRIG_ALARMOUT_CFG",SWIG_From_int(static_cast< int >(2038)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_FAULT_CFG",SWIG_From_int(static_cast< int >(2039)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMHOST_FAULT_CFG",SWIG_From_int(static_cast< int >(2040)));
  SWIG_Python_SetConstant(d, "NET_DVR_SEARCH_ARMHOST_EXTERNAL_MODULE",SWIG_From_int(static_cast< int >(2041)));
  SWIG_Python_SetConstant(d, "NET_DVR_REGISTER_ALARMHOST_EXTERNAL_MODULE",SWIG_From_int(static_cast< int >(2042)));
  SWIG_Python_SetConstant(d, "NET_DVR_CLOSE_ALARMHOST_OVERALL_FAULT_ALARM",SWIG_From_int(static_cast< int >(2043)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SAFETYCABIN_WORK_MODE",SWIG_From_int(static_cast< int >(2044)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SAFETYCABIN_WORK_MODE",SWIG_From_int(static_cast< int >(2045)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SAFETYCABIN_PERSON_SIGNAL_CFG",SWIG_From_int(static_cast< int >(2046)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SAFETYCABIN_PERSON_SIGNAL_CFG",SWIG_From_int(static_cast< int >(2047)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_MODULE_CFG",SWIG_From_int(static_cast< int >(2048)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_EXTERNAL_DEVICE_STATE",SWIG_From_int(static_cast< int >(2050)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMHOST_EXTERNAL_DEVICE_LIMIT_VALUE",SWIG_From_int(static_cast< int >(2051)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_EXTERNAL_DEVICE_LIMIT_VALUE",SWIG_From_int(static_cast< int >(2052)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_SENSOR_JOINT_CFG",SWIG_From_int(static_cast< int >(2053)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMHOST_SENSOR_JOINT_CFG",SWIG_From_int(static_cast< int >(2054)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMHOST_RS485_SLOT_CFG",SWIG_From_int(static_cast< int >(2055)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_RS485_SLOT_CFG",SWIG_From_int(static_cast< int >(2056)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_VARIABLE_INFO",SWIG_From_int(static_cast< int >(2057)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARM_POINT_CFG",SWIG_From_int(static_cast< int >(2058)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARM_POINT_CFG",SWIG_From_int(static_cast< int >(2059)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HISTORY_VALUE",SWIG_From_int(static_cast< int >(2060)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_ALARM_MODE",SWIG_From_int(static_cast< int >(2061)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMHOST_ALARM_MODE",SWIG_From_int(static_cast< int >(2062)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_SENSOR_VALUE",SWIG_From_int(static_cast< int >(2063)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_REPORT_CENTER_V40",SWIG_From_int(static_cast< int >(2064)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMHOST_REPORT_CENTER_V40",SWIG_From_int(static_cast< int >(2065)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OUTPUT_SCHEDULE_RULECFG",SWIG_From_int(static_cast< int >(2068)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OUTPUT_SCHEDULE_RULECFG",SWIG_From_int(static_cast< int >(2069)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CMS_CFG",SWIG_From_int(static_cast< int >(2070)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CMS_CFG",SWIG_From_int(static_cast< int >(2071)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PASSTHROUGH_CAP",SWIG_From_int(static_cast< int >(2073)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_MAIN_STATUS_V40",SWIG_From_int(static_cast< int >(2072)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_MAIN_STATUS_V51",SWIG_From_int(static_cast< int >(2083)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARM_CAPTRUE_CFG",SWIG_From_int(static_cast< int >(2074)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARM_CAPTRUE_CFG",SWIG_From_int(static_cast< int >(2075)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ONE_OUTPUT_SCH_RULECFG_V40",SWIG_From_int(static_cast< int >(2078)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ONE_OUTPUT_SCH_RULECFG_V40",SWIG_From_int(static_cast< int >(2079)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OUTPUT_SCHEDULE_RULECFG_V40",SWIG_From_int(static_cast< int >(2080)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OUTPUT_SCHEDULE_RULECFG_V40",SWIG_From_int(static_cast< int >(2081)));
  SWIG_Python_SetConstant(d, "NET_DVR_ALARMHOST_CLOSE_SUBSYSTEM",SWIG_From_int(static_cast< int >(2082)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WEEK_PLAN_CFG",SWIG_From_int(static_cast< int >(2100)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WEEK_PLAN_CFG",SWIG_From_int(static_cast< int >(2101)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DOOR_STATUS_HOLIDAY_PLAN",SWIG_From_int(static_cast< int >(2102)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DOOR_STATUS_HOLIDAY_PLAN",SWIG_From_int(static_cast< int >(2103)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DOOR_STATUS_HOLIDAY_GROUP",SWIG_From_int(static_cast< int >(2104)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DOOR_STATUS_HOLIDAY_GROUP",SWIG_From_int(static_cast< int >(2105)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DOOR_STATUS_PLAN_TEMPLATE",SWIG_From_int(static_cast< int >(2106)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DOOR_STATUS_PLAN_TEMPLATE",SWIG_From_int(static_cast< int >(2107)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DOOR_CFG",SWIG_From_int(static_cast< int >(2108)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DOOR_CFG",SWIG_From_int(static_cast< int >(2109)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DOOR_STATUS_PLAN",SWIG_From_int(static_cast< int >(2110)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DOOR_STATUS_PLAN",SWIG_From_int(static_cast< int >(2111)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GROUP_CFG",SWIG_From_int(static_cast< int >(2112)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GROUP_CFG",SWIG_From_int(static_cast< int >(2113)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MULTI_CARD_CFG",SWIG_From_int(static_cast< int >(2114)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MULTI_CARD_CFG",SWIG_From_int(static_cast< int >(2115)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD_CFG",SWIG_From_int(static_cast< int >(2116)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD_CFG",SWIG_From_int(static_cast< int >(2117)));
  SWIG_Python_SetConstant(d, "NET_DVR_CLEAR_ACS_PARAM",SWIG_From_int(static_cast< int >(2118)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SNEAK_CFG",SWIG_From_int(static_cast< int >(2119)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SNEAK_CFG",SWIG_From_int(static_cast< int >(2120)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MULTI_DOOR_INTERLOCK_CFG",SWIG_From_int(static_cast< int >(2121)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MULTI_DOOR_INTERLOCK_CFG",SWIG_From_int(static_cast< int >(2122)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ACS_WORK_STATUS",SWIG_From_int(static_cast< int >(2123)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VERIFY_WEEK_PLAN",SWIG_From_int(static_cast< int >(2124)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VERIFY_WEEK_PLAN",SWIG_From_int(static_cast< int >(2125)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD_RIGHT_WEEK_PLAN",SWIG_From_int(static_cast< int >(2126)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD_RIGHT_WEEK_PLAN",SWIG_From_int(static_cast< int >(2127)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VERIFY_HOLIDAY_PLAN",SWIG_From_int(static_cast< int >(2128)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VERIFY_HOLIDAY_PLAN",SWIG_From_int(static_cast< int >(2129)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD_RIGHT_HOLIDAY_PLAN",SWIG_From_int(static_cast< int >(2130)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD_RIGHT_HOLIDAY_PLAN",SWIG_From_int(static_cast< int >(2131)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VERIFY_HOLIDAY_GROUP",SWIG_From_int(static_cast< int >(2132)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VERIFY_HOLIDAY_GROUP",SWIG_From_int(static_cast< int >(2133)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD_RIGHT_HOLIDAY_GROUP",SWIG_From_int(static_cast< int >(2134)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD_RIGHT_HOLIDAY_GROUP",SWIG_From_int(static_cast< int >(2135)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VERIFY_PLAN_TEMPLATE",SWIG_From_int(static_cast< int >(2136)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VERIFY_PLAN_TEMPLATE",SWIG_From_int(static_cast< int >(2137)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD_RIGHT_PLAN_TEMPLATE",SWIG_From_int(static_cast< int >(2138)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD_RIGHT_PLAN_TEMPLATE",SWIG_From_int(static_cast< int >(2139)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD_READER_CFG",SWIG_From_int(static_cast< int >(2140)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD_READER_CFG",SWIG_From_int(static_cast< int >(2141)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD_READER_PLAN",SWIG_From_int(static_cast< int >(2142)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD_READER_PLAN",SWIG_From_int(static_cast< int >(2143)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CASE_SENSOR_CFG",SWIG_From_int(static_cast< int >(2144)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CASE_SENSOR_CFG",SWIG_From_int(static_cast< int >(2145)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD_READER_ANTI_SNEAK_CFG",SWIG_From_int(static_cast< int >(2146)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD_READER_ANTI_SNEAK_CFG",SWIG_From_int(static_cast< int >(2147)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PHONE_DOOR_RIGHT_CFG",SWIG_From_int(static_cast< int >(2148)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PHONE_DOOR_RIGHT_CFG",SWIG_From_int(static_cast< int >(2149)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FINGERPRINT_CFG",SWIG_From_int(static_cast< int >(2150)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FINGERPRINT_CFG",SWIG_From_int(static_cast< int >(2151)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_FINGERPRINT_CFG",SWIG_From_int(static_cast< int >(2152)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EVENT_CARD_LINKAGE_CFG",SWIG_From_int(static_cast< int >(2153)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EVENT_CARD_LINKAGE_CFG",SWIG_From_int(static_cast< int >(2154)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ANTI_SNEAK_HOST_CFG",SWIG_From_int(static_cast< int >(2155)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ANTI_SNEAK_HOST_CFG",SWIG_From_int(static_cast< int >(2156)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_READER_ANTI_SNEAK_HOST_CFG",SWIG_From_int(static_cast< int >(2157)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_READER_ANTI_SNEAK_HOST_CFG",SWIG_From_int(static_cast< int >(2158)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ACS_CFG",SWIG_From_int(static_cast< int >(2159)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ACS_CFG",SWIG_From_int(static_cast< int >(2160)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD_PASSWD_CFG",SWIG_From_int(static_cast< int >(2161)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD_PASSWD_CFG",SWIG_From_int(static_cast< int >(2162)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD_USERINFO_CFG",SWIG_From_int(static_cast< int >(2163)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD_USERINFO_CFG",SWIG_From_int(static_cast< int >(2164)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ACS_EXTERNAL_DEV_CFG",SWIG_From_int(static_cast< int >(2165)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ACS_EXTERNAL_DEV_CFG",SWIG_From_int(static_cast< int >(2166)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PERSONNEL_CHANNEL_CFG",SWIG_From_int(static_cast< int >(2167)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PERSONNEL_CHANNEL_CFG",SWIG_From_int(static_cast< int >(2168)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PLATFORM_VERIFY_CFG",SWIG_From_int(static_cast< int >(2169)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PERSON_STATISTICS_CFG",SWIG_From_int(static_cast< int >(2170)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PERSON_STATISTICS_CFG",SWIG_From_int(static_cast< int >(2171)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ACS_SCREEN_DISPLAY_CFG",SWIG_From_int(static_cast< int >(2172)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ACS_SCREEN_DISPLAY_CFG",SWIG_From_int(static_cast< int >(2173)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GATE_TIME_CFG",SWIG_From_int(static_cast< int >(2174)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GATE_TIME_CFG",SWIG_From_int(static_cast< int >(2175)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LOCAL_CONTROLLER_STATUS",SWIG_From_int(static_cast< int >(2176)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ONLINE_LOCAL_CONTROLLER",SWIG_From_int(static_cast< int >(2177)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD_CFG_V50",SWIG_From_int(static_cast< int >(2178)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD_CFG_V50",SWIG_From_int(static_cast< int >(2179)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ACS_WORK_STATUS_V50",SWIG_From_int(static_cast< int >(2180)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EVENT_CARD_LINKAGE_CFG_V50",SWIG_From_int(static_cast< int >(2181)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EVENT_CARD_LINKAGE_CFG_V50",SWIG_From_int(static_cast< int >(2182)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FINGERPRINT_CFG_V50",SWIG_From_int(static_cast< int >(2183)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FINGERPRINT_CFG_V50",SWIG_From_int(static_cast< int >(2184)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SAFETYCABIN_STATE",SWIG_From_int(static_cast< int >(2197)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RS485_CASCADE_CFG",SWIG_From_int(static_cast< int >(2198)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RS485_CASCADE_CFG",SWIG_From_int(static_cast< int >(2199)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REMOTECONTROLLER_PERMISION_CFG",SWIG_From_int(static_cast< int >(2200)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_REMOTECONTROLLER_PERMISION_CFG",SWIG_From_int(static_cast< int >(2201)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_KEYBOARD_CFG",SWIG_From_int(static_cast< int >(2202)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_KEYBOARD_CFG",SWIG_From_int(static_cast< int >(2203)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_WIRELESS_BUSINNESS_INFO",SWIG_From_int(static_cast< int >(2204)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_REMOTECONTROLLER_LIST",SWIG_From_int(static_cast< int >(2205)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PREVIEW_DELAY_CFG",SWIG_From_int(static_cast< int >(2206)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PREVIEW_DELAY_CFG",SWIG_From_int(static_cast< int >(2207)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ZONE_CHANNEL_LINKAGE_CFG",SWIG_From_int(static_cast< int >(2208)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ZONE_CHANNEL_LINKAGE_CFG",SWIG_From_int(static_cast< int >(2209)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CENTER_SERVER_CFG",SWIG_From_int(static_cast< int >(2210)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CENTER_SERVER_CFG",SWIG_From_int(static_cast< int >(2211)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EMERGENCE_ALARM_PRODUCT_CAP",SWIG_From_int(static_cast< int >(2212)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CALL_WAITTING_CFG_CAP",SWIG_From_int(static_cast< int >(2213)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CALL_WAITTING_CFG",SWIG_From_int(static_cast< int >(2214)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CALL_WAITTING_CFG",SWIG_From_int(static_cast< int >(2215)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARM_LAMP_CFG_CAP",SWIG_From_int(static_cast< int >(2216)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARM_LAMP_CFG",SWIG_From_int(static_cast< int >(2217)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARM_LAMP_CFG",SWIG_From_int(static_cast< int >(2218)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VOICE_PROMPTION_CFG_CAP",SWIG_From_int(static_cast< int >(2219)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VOICE_PROMPTION_CFG",SWIG_From_int(static_cast< int >(2220)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VOICE_PROMPTION_CFG",SWIG_From_int(static_cast< int >(2221)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EMERGENCE_ALARM_RESPONSE_CAP",SWIG_From_int(static_cast< int >(2222)));
  SWIG_Python_SetConstant(d, "NET_DVR_EMERGENCE_ALARM_RESPONSE_CTRL",SWIG_From_int(static_cast< int >(2223)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_NETCFG_V50",SWIG_From_int(static_cast< int >(2224)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMHOST_NETCFG_V50",SWIG_From_int(static_cast< int >(2225)));
  SWIG_Python_SetConstant(d, "NET_DVR_REGISTER_ALARM_RS485",SWIG_From_int(static_cast< int >(2226)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMIN_PARAM_LIST",SWIG_From_int(static_cast< int >(2227)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_OTHER_STATUS_V50",SWIG_From_int(static_cast< int >(2228)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMHOST_OTHER_STATUS_V51",SWIG_From_int(static_cast< int >(2236)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMIN_ASSOCIATED_CHAN_LIST",SWIG_From_int(static_cast< int >(2229)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMIN_TRIGGER",SWIG_From_int(static_cast< int >(2230)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMIN_TRIGGER",SWIG_From_int(static_cast< int >(2231)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EMERGENCY_CALL_HELP_TRIGGER",SWIG_From_int(static_cast< int >(2232)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EMERGENCY_CALL_HELP_TRIGGER",SWIG_From_int(static_cast< int >(2233)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CONSULT_TRIGGER",SWIG_From_int(static_cast< int >(2234)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CONSULT_TRIGGER",SWIG_From_int(static_cast< int >(2235)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMIN_PARAM_LIST_V50",SWIG_From_int(static_cast< int >(2237)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD_RIGHT_WEEK_PLAN_V50",SWIG_From_int(static_cast< int >(2304)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD_RIGHT_WEEK_PLAN_V50",SWIG_From_int(static_cast< int >(2305)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD_RIGHT_HOLIDAY_PLAN_V50",SWIG_From_int(static_cast< int >(2310)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD_RIGHT_HOLIDAY_PLAN_V50",SWIG_From_int(static_cast< int >(2311)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD_RIGHT_HOLIDAY_GROUP_V50",SWIG_From_int(static_cast< int >(2316)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD_RIGHT_HOLIDAY_GROUP_V50",SWIG_From_int(static_cast< int >(2317)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD_RIGHT_PLAN_TEMPLATE_V50",SWIG_From_int(static_cast< int >(2322)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD_RIGHT_PLAN_TEMPLATE_V50",SWIG_From_int(static_cast< int >(2323)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCHEDULE_INFO",SWIG_From_int(static_cast< int >(2500)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ATTENDANCE_SUMMARY_INFO",SWIG_From_int(static_cast< int >(2501)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ATTENDANCE_RECORD_INFO",SWIG_From_int(static_cast< int >(2502)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ABNORMAL_INFO",SWIG_From_int(static_cast< int >(2503)));
  SWIG_Python_SetConstant(d, "NET_DVR_CAPTURE_FINGERPRINT_INFO",SWIG_From_int(static_cast< int >(2504)));
  SWIG_Python_SetConstant(d, "NET_DVR_BULK_UPLOAD_BLACK_LIST_PICTURE",SWIG_From_int(static_cast< int >(2520)));
  SWIG_Python_SetConstant(d, "NET_DVR_BULK_UPLOAD_ID_BLACK_LIST",SWIG_From_int(static_cast< int >(2521)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FAILED_FACE_INFO",SWIG_From_int(static_cast< int >(2522)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACE_AND_TEMPLATE",SWIG_From_int(static_cast< int >(2523)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FACE_AND_TEMPLATE",SWIG_From_int(static_cast< int >(2524)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD_READER_CFG_V50",SWIG_From_int(static_cast< int >(2505)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD_READER_CFG_V50",SWIG_From_int(static_cast< int >(2506)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACE_PARAM_CFG",SWIG_From_int(static_cast< int >(2507)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FACE_PARAM_CFG",SWIG_From_int(static_cast< int >(2508)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_FACE_PARAM_CFG",SWIG_From_int(static_cast< int >(2509)));
  SWIG_Python_SetConstant(d, "NET_DVR_CAPTURE_FACE_INFO",SWIG_From_int(static_cast< int >(2510)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REGISTER_INFO",SWIG_From_int(static_cast< int >(2511)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SMSRELATIVEPARA_V50",SWIG_From_int(static_cast< int >(2512)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SMSRELATIVEPARA_V50",SWIG_From_int(static_cast< int >(2513)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ACS_EVENT",SWIG_From_int(static_cast< int >(2514)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MULTI_CARD_CFG_V50",SWIG_From_int(static_cast< int >(2515)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MULTI_CARD_CFG_V50",SWIG_From_int(static_cast< int >(2516)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_FINGERPRINT_CFG_V50",SWIG_From_int(static_cast< int >(2517)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EVENT_CARD_LINKAGE_CFG_V51",SWIG_From_int(static_cast< int >(2518)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EVENT_CARD_LINKAGE_CFG_V51",SWIG_From_int(static_cast< int >(2519)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EXAM_INFO",SWIG_From_int(static_cast< int >(2530)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EXAMINEE_INFO",SWIG_From_int(static_cast< int >(2531)));
  SWIG_Python_SetConstant(d, "NET_DVR_SEARCH_EXAM_COMPARE_RESULT",SWIG_From_int(static_cast< int >(2532)));
  SWIG_Python_SetConstant(d, "NET_DVR_BULK_CHECK_FACE_PICTURE",SWIG_From_int(static_cast< int >(2533)));
  SWIG_Python_SetConstant(d, "NET_DVR_JSON_CONFIG",SWIG_From_int(static_cast< int >(2550)));
  SWIG_Python_SetConstant(d, "NET_DVR_FACE_DATA_RECORD",SWIG_From_int(static_cast< int >(2551)));
  SWIG_Python_SetConstant(d, "NET_DVR_FACE_DATA_SEARCH",SWIG_From_int(static_cast< int >(2552)));
  SWIG_Python_SetConstant(d, "NET_DVR_FACE_DATA_MODIFY",SWIG_From_int(static_cast< int >(2553)));
  SWIG_Python_SetConstant(d, "NET_DVR_CAPTURE_DATA_SEARCH",SWIG_From_int(static_cast< int >(2554)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CARD",SWIG_From_int(static_cast< int >(2560)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CARD",SWIG_From_int(static_cast< int >(2561)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_CARD",SWIG_From_int(static_cast< int >(2562)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FINGERPRINT",SWIG_From_int(static_cast< int >(2563)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FINGERPRINT",SWIG_From_int(static_cast< int >(2564)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_FINGERPRINT",SWIG_From_int(static_cast< int >(2565)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACE",SWIG_From_int(static_cast< int >(2566)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FACE",SWIG_From_int(static_cast< int >(2567)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_ALARM_RS485CFG",SWIG_From_int(static_cast< int >(2705)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_ALARMHOST_RS485_SLOT_CFG",SWIG_From_int(static_cast< int >(2706)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEVICE_SELF_CHECK_STATE",SWIG_From_int(static_cast< int >(2707)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_ALARM_POINT_CFG",SWIG_From_int(static_cast< int >(2708)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_ALARM_SENSOR_CFG",SWIG_From_int(static_cast< int >(2709)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_ALARM_SENSOR_JOINT",SWIG_From_int(static_cast< int >(2710)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AIR_CONDITION_PARAM",SWIG_From_int(static_cast< int >(2711)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OUT_SCALE_CFG",SWIG_From_int(static_cast< int >(2712)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OUT_SCALE_CFG",SWIG_From_int(static_cast< int >(2713)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARM_CHAN_ABLITITY",SWIG_From_int(static_cast< int >(2714)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMCENTER_NETCFG",SWIG_From_int(static_cast< int >(2715)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMCENTER_NETCFG",SWIG_From_int(static_cast< int >(2716)));
  SWIG_Python_SetConstant(d, "NET_ITC_GET_TRIGGERCFG",SWIG_From_int(static_cast< int >(3003)));
  SWIG_Python_SetConstant(d, "NET_ITC_SET_TRIGGERCFG",SWIG_From_int(static_cast< int >(3004)));
  SWIG_Python_SetConstant(d, "NET_ITC_GET_IOOUT_PARAM_CFG",SWIG_From_int(static_cast< int >(3005)));
  SWIG_Python_SetConstant(d, "NET_ITC_SET_IOOUT_PARAM_CFG",SWIG_From_int(static_cast< int >(3006)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CAMERA_SETUPCFG",SWIG_From_int(static_cast< int >(3007)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CAMERA_SETUPCFG",SWIG_From_int(static_cast< int >(3008)));
  SWIG_Python_SetConstant(d, "NET_ITC_GET_TRIGGER_DEFAULTCFG",SWIG_From_int(static_cast< int >(3013)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STATUS_DETECTCFG",SWIG_From_int(static_cast< int >(3015)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STATUS_DETECTCFG",SWIG_From_int(static_cast< int >(3016)));
  SWIG_Python_SetConstant(d, "NET_ITC_GET_VIDEO_TRIGGERCFG",SWIG_From_int(static_cast< int >(3017)));
  SWIG_Python_SetConstant(d, "NET_ITC_SET_VIDEO_TRIGGERCFG",SWIG_From_int(static_cast< int >(3018)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TPS_ALARMCFG",SWIG_From_int(static_cast< int >(3019)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TPS_ALARMCFG",SWIG_From_int(static_cast< int >(3020)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REDAREACFG",SWIG_From_int(static_cast< int >(3100)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_REDAREACFG",SWIG_From_int(static_cast< int >(3101)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TEST_SPOT",SWIG_From_int(static_cast< int >(3102)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TEST_SPOT",SWIG_From_int(static_cast< int >(3103)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CABINETCFG",SWIG_From_int(static_cast< int >(3104)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CABINETCFG",SWIG_From_int(static_cast< int >(3105)));
  SWIG_Python_SetConstant(d, "NET_DVR_VEHICLE_CHECK_START",SWIG_From_int(static_cast< int >(3106)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CAPTUREPIC_CFG",SWIG_From_int(static_cast< int >(3107)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CAPTUREPIC_CFG",SWIG_From_int(static_cast< int >(3108)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MOBILEPLATE_RECOG_CFG",SWIG_From_int(static_cast< int >(3109)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MOBILEPLATE_RECOG_CFG",SWIG_From_int(static_cast< int >(3110)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MOBILE_RADAR_CFG",SWIG_From_int(static_cast< int >(3111)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MOBILE_RADAR_CFG",SWIG_From_int(static_cast< int >(3112)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MOBILE_LOCALPLATECHK_CFG",SWIG_From_int(static_cast< int >(3113)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MOBILE_LOCALPLATECHK_CFG",SWIG_From_int(static_cast< int >(3114)));
  SWIG_Python_SetConstant(d, "NET_ITC_GET_ICRCFG",SWIG_From_int(static_cast< int >(3115)));
  SWIG_Python_SetConstant(d, "NET_ITC_SET_ICRCFG",SWIG_From_int(static_cast< int >(3116)));
  SWIG_Python_SetConstant(d, "NET_ITC_GET_RS485_ACCESSINFO",SWIG_From_int(static_cast< int >(3117)));
  SWIG_Python_SetConstant(d, "NET_ITC_SET_RS485_ACCESSINFO",SWIG_From_int(static_cast< int >(3118)));
  SWIG_Python_SetConstant(d, "NET_ITC_GET_EXCEPTIONCFG",SWIG_From_int(static_cast< int >(3119)));
  SWIG_Python_SetConstant(d, "NET_ITC_SET_EXCEPTIONCFG",SWIG_From_int(static_cast< int >(3120)));
  SWIG_Python_SetConstant(d, "NET_ITC_GET_FTPCFG",SWIG_From_int(static_cast< int >(3121)));
  SWIG_Python_SetConstant(d, "NET_ITC_SET_FTPCFG",SWIG_From_int(static_cast< int >(3122)));
  SWIG_Python_SetConstant(d, "NET_DVR_VEHICLE_CONTROL_LIST_START",SWIG_From_int(static_cast< int >(3123)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_VEHICLE_CONTROL_LIST",SWIG_From_int(static_cast< int >(3124)));
  SWIG_Python_SetConstant(d, "NET_DVR_VEHICLE_DELINFO_CTRL",SWIG_From_int(static_cast< int >(3125)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ENTRANCE_PARAMCFG",SWIG_From_int(static_cast< int >(3126)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ENTRANCE_PARAMCFG",SWIG_From_int(static_cast< int >(3127)));
  SWIG_Python_SetConstant(d, "NET_DVR_BARRIERGATE_CTRL",SWIG_From_int(static_cast< int >(3128)));
  SWIG_Python_SetConstant(d, "NET_DVR_GATELAMP_CTRL",SWIG_From_int(static_cast< int >(3129)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CURTRIGGERMODE",SWIG_From_int(static_cast< int >(3130)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GPSDATACFG",SWIG_From_int(static_cast< int >(3131)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GPSDATACFG",SWIG_From_int(static_cast< int >(3132)));
  SWIG_Python_SetConstant(d, "NET_DVR_VEHICLELIST_CTRL_START",SWIG_From_int(static_cast< int >(3133)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GUARDCFG",SWIG_From_int(static_cast< int >(3134)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GUARDCFG",SWIG_From_int(static_cast< int >(3135)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SNAPINFO_CFG",SWIG_From_int(static_cast< int >(3136)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SNAPINFO_CFG",SWIG_From_int(static_cast< int >(3137)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SNAPINFO_CFG_V40",SWIG_From_int(static_cast< int >(3138)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SNAPINFO_CFG_V40",SWIG_From_int(static_cast< int >(3139)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CURTRIGGERMODE",SWIG_From_int(static_cast< int >(3140)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRAFFIC_DATA",SWIG_From_int(static_cast< int >(3141)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRAFFIC_FLOW",SWIG_From_int(static_cast< int >(3142)));
  SWIG_Python_SetConstant(d, "NET_DVR_PARKING_VEHICLE_SEND",SWIG_From_int(static_cast< int >(3143)));
  SWIG_Python_SetConstant(d, "NET_DVR_PARKING_CARD_SEND",SWIG_From_int(static_cast< int >(3144)));
  SWIG_Python_SetConstant(d, "NET_DVR_PARKING_CARD_CTRL",SWIG_From_int(static_cast< int >(3145)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMCTRL_CAPABILITIES",SWIG_From_int(static_cast< int >(3146)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMCTRL_CFG",SWIG_From_int(static_cast< int >(3147)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMCTRL_CFG",SWIG_From_int(static_cast< int >(3148)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUDIO_INPUT",SWIG_From_int(static_cast< int >(3201)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AUDIO_INPUT",SWIG_From_int(static_cast< int >(3202)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CAMERA_DEHAZE_CFG",SWIG_From_int(static_cast< int >(3203)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CAMERA_DEHAZE_CFG",SWIG_From_int(static_cast< int >(3204)));
  SWIG_Python_SetConstant(d, "NET_DVR_REMOTECONTROL_ALARM",SWIG_From_int(static_cast< int >(3205)));
  SWIG_Python_SetConstant(d, "NET_DVR_REMOTECONTROL_DISALARM",SWIG_From_int(static_cast< int >(3206)));
  SWIG_Python_SetConstant(d, "NET_DVR_REMOTECONTROL_STUDY",SWIG_From_int(static_cast< int >(3207)));
  SWIG_Python_SetConstant(d, "NET_DVR_WIRELESS_ALARM_STUDY",SWIG_From_int(static_cast< int >(3208)));
  SWIG_Python_SetConstant(d, "NET_IPC_GET_AUX_ALARMCFG",SWIG_From_int(static_cast< int >(3209)));
  SWIG_Python_SetConstant(d, "NET_IPC_SET_AUX_ALARMCFG",SWIG_From_int(static_cast< int >(3210)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PREVIEW_DISPLAYCFG",SWIG_From_int(static_cast< int >(3211)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PREVIEW_DISPLAYCFG",SWIG_From_int(static_cast< int >(3212)));
  SWIG_Python_SetConstant(d, "NET_DVR_REMOTECONTROL_PTZ",SWIG_From_int(static_cast< int >(3213)));
  SWIG_Python_SetConstant(d, "NET_DVR_REMOTECONTROL_PRESETPOINT",SWIG_From_int(static_cast< int >(3214)));
  SWIG_Python_SetConstant(d, "NET_DVR_REMOTECONTROL_CRUISE",SWIG_From_int(static_cast< int >(3215)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MULTI_STREAM_COMPRESSIONCFG",SWIG_From_int(static_cast< int >(3216)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MULTI_STREAM_COMPRESSIONCFG",SWIG_From_int(static_cast< int >(3217)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WPSCFG",SWIG_From_int(static_cast< int >(3218)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WPSCFG",SWIG_From_int(static_cast< int >(3219)));
  SWIG_Python_SetConstant(d, "NET_DVR_WPS_CONNECT",SWIG_From_int(static_cast< int >(3220)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEVICE_PIN",SWIG_From_int(static_cast< int >(3221)));
  SWIG_Python_SetConstant(d, "NET_DVR_UPDATE_PIN",SWIG_From_int(static_cast< int >(3223)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PRESETCFG",SWIG_From_int(static_cast< int >(3224)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZCRUISECFG",SWIG_From_int(static_cast< int >(3225)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PRESET_NUM",SWIG_From_int(static_cast< int >(3226)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZCRUISE_NUM",SWIG_From_int(static_cast< int >(3227)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MOTION_TRACK_CFG",SWIG_From_int(static_cast< int >(3228)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MOTION_TRACK_CFG",SWIG_From_int(static_cast< int >(3229)));
  SWIG_Python_SetConstant(d, "NET_DVR_CLEAR_IPC_PARAM",SWIG_From_int(static_cast< int >(3230)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IPADDR_FILTERCFG",SWIG_From_int(static_cast< int >(3232)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IPADDR_FILTERCFG",SWIG_From_int(static_cast< int >(3233)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LOGO_OVERLAYCFG",SWIG_From_int(static_cast< int >(3234)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LOGO_OVERLAYCFG",SWIG_From_int(static_cast< int >(3235)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IPV6_LIST",SWIG_From_int(static_cast< int >(3236)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUDIOOUT_VOLUME",SWIG_From_int(static_cast< int >(3237)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AUDIOOUT_VOLUME",SWIG_From_int(static_cast< int >(3238)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FUZZY_UPGRADE",SWIG_From_int(static_cast< int >(3239)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BV_CORRECT_PARAM",SWIG_From_int(static_cast< int >(3240)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BV_CORRECT_PARAM",SWIG_From_int(static_cast< int >(3241)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OUTPUT_VIDEO_TYPE",SWIG_From_int(static_cast< int >(3242)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OUTPUT_VIDEO_TYPE",SWIG_From_int(static_cast< int >(3243)));
  SWIG_Python_SetConstant(d, "NET_DVR_FISHEYE_CFG",SWIG_From_int(static_cast< int >(3244)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZ_POINT",SWIG_From_int(static_cast< int >(3245)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PTZ_POINT",SWIG_From_int(static_cast< int >(3246)));
  SWIG_Python_SetConstant(d, "NET_DVR_REMOTECONTROL_DEV_PARAM",SWIG_From_int(static_cast< int >(3247)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FISHEYE_STREAM_STATUS",SWIG_From_int(static_cast< int >(3248)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GBT28181_ACCESS_CFG",SWIG_From_int(static_cast< int >(3249)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GBT28181_ACCESS_CFG",SWIG_From_int(static_cast< int >(3250)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GBT28181_CHANINFO_CFG",SWIG_From_int(static_cast< int >(3251)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GBT28181_CHANINFO_CFG",SWIG_From_int(static_cast< int >(3252)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GBT28181_ALARMINCFG",SWIG_From_int(static_cast< int >(3253)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GBT28181_ALARMINCFG",SWIG_From_int(static_cast< int >(3254)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ISP_CAMERAPARAMCFG",SWIG_From_int(static_cast< int >(3255)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ISP_CAMERAPARAMCFG",SWIG_From_int(static_cast< int >(3256)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEVSERVER_CFG",SWIG_From_int(static_cast< int >(3257)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DEVSERVER_CFG",SWIG_From_int(static_cast< int >(3258)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIPERINFO_CFG",SWIG_From_int(static_cast< int >(3259)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WIPERINFO_CFG",SWIG_From_int(static_cast< int >(3260)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRACK_DEV_PARAM",SWIG_From_int(static_cast< int >(3261)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TRACK_DEV_PARAM",SWIG_From_int(static_cast< int >(3262)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZ_TRACK_PARAM",SWIG_From_int(static_cast< int >(3263)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PTZ_TRACK_PARAM",SWIG_From_int(static_cast< int >(3264)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CENTER_POINT_CFG",SWIG_From_int(static_cast< int >(3265)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CENTER_POINT_CFG",SWIG_From_int(static_cast< int >(3266)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CENTER_POINT_CFG_CAPABILITIES",SWIG_From_int(static_cast< int >(3267)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FISHEYE_CAPABILITIES",SWIG_From_int(static_cast< int >(3268)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BASICPARAMCFG",SWIG_From_int(static_cast< int >(3270)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BASICPARAMCFG",SWIG_From_int(static_cast< int >(3271)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZOSDCFG",SWIG_From_int(static_cast< int >(3272)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PTZOSDCFG",SWIG_From_int(static_cast< int >(3273)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POWEROFFMEMCFG",SWIG_From_int(static_cast< int >(3274)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_POWEROFFMEMCFG",SWIG_From_int(static_cast< int >(3275)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LIMITCFG",SWIG_From_int(static_cast< int >(3276)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LIMITCFG",SWIG_From_int(static_cast< int >(3277)));
  SWIG_Python_SetConstant(d, "NET_DVR_PTZLIMIT_CTRL",SWIG_From_int(static_cast< int >(3278)));
  SWIG_Python_SetConstant(d, "NET_DVR_PTZ_CLEARCTRL",SWIG_From_int(static_cast< int >(3279)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PRIORITIZECFG",SWIG_From_int(static_cast< int >(3281)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PRIORITIZECFG",SWIG_From_int(static_cast< int >(3282)));
  SWIG_Python_SetConstant(d, "NET_DVR_PTZ_INITIALPOSITIONCTRL",SWIG_From_int(static_cast< int >(3283)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PRIVACY_MASKSCFG",SWIG_From_int(static_cast< int >(3285)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PRIVACY_MASKSCFG",SWIG_From_int(static_cast< int >(3286)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZLOCKCFG",SWIG_From_int(static_cast< int >(3287)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PTZLOCKCFG",SWIG_From_int(static_cast< int >(3288)));
  SWIG_Python_SetConstant(d, "NET_DVR_PTZ_ZOOMRATIOCTRL",SWIG_From_int(static_cast< int >(3289)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZLOCKINFO",SWIG_From_int(static_cast< int >(3290)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PRIVACY_MASKS_ENABLECFG",SWIG_From_int(static_cast< int >(3291)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PRIVACY_MASKS_ENABLECFG",SWIG_From_int(static_cast< int >(3292)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SMARTTRACKCFG",SWIG_From_int(static_cast< int >(3293)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SMARTTRACKCFG",SWIG_From_int(static_cast< int >(3294)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EPTZ_CFG",SWIG_From_int(static_cast< int >(3295)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EPTZ_CFG",SWIG_From_int(static_cast< int >(3296)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EPTZ_CFG_CAPABILITIES",SWIG_From_int(static_cast< int >(3297)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LOW_LIGHTCFG",SWIG_From_int(static_cast< int >(3303)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LOW_LIGHTCFG",SWIG_From_int(static_cast< int >(3304)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FOCUSMODECFG",SWIG_From_int(static_cast< int >(3305)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FOCUSMODECFG",SWIG_From_int(static_cast< int >(3306)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_INFRARECFG",SWIG_From_int(static_cast< int >(3307)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_INFRARECFG",SWIG_From_int(static_cast< int >(3308)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AEMODECFG",SWIG_From_int(static_cast< int >(3309)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AEMODECFG",SWIG_From_int(static_cast< int >(3310)));
  SWIG_Python_SetConstant(d, "NET_DVR_CONTROL_RESTORE_SUPPORT",SWIG_From_int(static_cast< int >(3311)));
  SWIG_Python_SetConstant(d, "NET_DVR_CONTROL_RESTART_SUPPORT",SWIG_From_int(static_cast< int >(3312)));
  SWIG_Python_SetConstant(d, "NET_DVR_CONTROL_PTZ_PATTERN",SWIG_From_int(static_cast< int >(3313)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZ_PARKACTION_CFG",SWIG_From_int(static_cast< int >(3314)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PTZ_PARKACTION_CFG",SWIG_From_int(static_cast< int >(3315)));
  SWIG_Python_SetConstant(d, "NET_DVR_CONTROL_PTZ_MANUALTRACE",SWIG_From_int(static_cast< int >(3316)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ROI_DETECT_NUM",SWIG_From_int(static_cast< int >(3349)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ROI_DETECT",SWIG_From_int(static_cast< int >(3350)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ROI_DETECT",SWIG_From_int(static_cast< int >(3351)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACE_DETECT",SWIG_From_int(static_cast< int >(3352)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FACE_DETECT",SWIG_From_int(static_cast< int >(3353)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CORRIDOR_MODE",SWIG_From_int(static_cast< int >(3354)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CORRIDOR_MODE",SWIG_From_int(static_cast< int >(3355)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCENECHANGE_DETECTIONCFG",SWIG_From_int(static_cast< int >(3356)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCENECHANGE_DETECTIONCFG",SWIG_From_int(static_cast< int >(3357)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRAVERSE_PLANE_DETECTION",SWIG_From_int(static_cast< int >(3360)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TRAVERSE_PLANE_DETECTION",SWIG_From_int(static_cast< int >(3361)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIELD_DETECTION",SWIG_From_int(static_cast< int >(3362)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FIELD_DETECTION",SWIG_From_int(static_cast< int >(3363)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEFOCUSPARAM",SWIG_From_int(static_cast< int >(3364)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DEFOCUSPARAM",SWIG_From_int(static_cast< int >(3365)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUDIOEXCEPTIONPARAM",SWIG_From_int(static_cast< int >(3366)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AUDIOEXCEPTIONPARAM",SWIG_From_int(static_cast< int >(3367)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CCDPARAMCFG_EX",SWIG_From_int(static_cast< int >(3368)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CCDPARAMCFG_EX",SWIG_From_int(static_cast< int >(3369)));
  SWIG_Python_SetConstant(d, "NET_DVR_START_GET_INPUTVOLUME",SWIG_From_int(static_cast< int >(3370)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCH_TASK",SWIG_From_int(static_cast< int >(3380)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCH_TASK",SWIG_From_int(static_cast< int >(3381)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PRESET_NAME",SWIG_From_int(static_cast< int >(3382)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PRESET_NAME",SWIG_From_int(static_cast< int >(3383)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AUDIO_NAME",SWIG_From_int(static_cast< int >(3384)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUDIO_NAME",SWIG_From_int(static_cast< int >(3385)));
  SWIG_Python_SetConstant(d, "NET_DVR_RESUME_INITRACKPOS",SWIG_From_int(static_cast< int >(3386)));
  SWIG_Python_SetConstant(d, "NET_DVR_NTP_SERVER_TEST",SWIG_From_int(static_cast< int >(3387)));
  SWIG_Python_SetConstant(d, "NET_DVR_NAS_SERVER_TEST",SWIG_From_int(static_cast< int >(3388)));
  SWIG_Python_SetConstant(d, "NET_DVR_EMAIL_SERVER_TEST",SWIG_From_int(static_cast< int >(3389)));
  SWIG_Python_SetConstant(d, "NET_DVR_FTP_SERVER_TEST",SWIG_From_int(static_cast< int >(3390)));
  SWIG_Python_SetConstant(d, "NET_DVR_IP_TEST",SWIG_From_int(static_cast< int >(3391)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NET_DISKCFG_V40",SWIG_From_int(static_cast< int >(3392)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_NET_DISKCFG_V40",SWIG_From_int(static_cast< int >(3393)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IOOUT_CFG",SWIG_From_int(static_cast< int >(3394)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IOOUT_CFG",SWIG_From_int(static_cast< int >(3395)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SIGNAL_SYNC",SWIG_From_int(static_cast< int >(3396)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SIGNAL_SYNC",SWIG_From_int(static_cast< int >(3397)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EZVIZ_ACCESS_CFG",SWIG_From_int(static_cast< int >(3398)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EZVIZ_ACCESS_CFG",SWIG_From_int(static_cast< int >(3399)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCHEDULE_AUTO_TRACK_CFG",SWIG_From_int(static_cast< int >(3400)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCHEDULE_AUTO_TRACK_CFG",SWIG_From_int(static_cast< int >(3401)));
  SWIG_Python_SetConstant(d, "NET_DVR_MAKE_I_FRAME",SWIG_From_int(static_cast< int >(3402)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARM_RELATE",SWIG_From_int(static_cast< int >(3403)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARM_RELATE",SWIG_From_int(static_cast< int >(3404)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PDC_RULECFG_V42",SWIG_From_int(static_cast< int >(3405)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PDC_RULECFG_V42",SWIG_From_int(static_cast< int >(3406)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HEATMAP_CFG",SWIG_From_int(static_cast< int >(3407)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HEATMAP_CFG",SWIG_From_int(static_cast< int >(3408)));
  SWIG_Python_SetConstant(d, "NET_DVR_REMOTECONTROL_LINEARSCAN",SWIG_From_int(static_cast< int >(3409)));
  SWIG_Python_SetConstant(d, "NET_DVR_DPC_CTRL",SWIG_From_int(static_cast< int >(3410)));
  SWIG_Python_SetConstant(d, "NET_DVR_FFC_MANUAL_CTRL",SWIG_From_int(static_cast< int >(3411)));
  SWIG_Python_SetConstant(d, "NET_DVR_FFC_BACKCOMP_CTRL",SWIG_From_int(static_cast< int >(3412)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FOCUSING_POSITION_STATE",SWIG_From_int(static_cast< int >(3413)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PRIVATE_PROTOCOL_CFG",SWIG_From_int(static_cast< int >(3414)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PRIVATE_PROTOCOL_CFG",SWIG_From_int(static_cast< int >(3415)));
  SWIG_Python_SetConstant(d, "NET_DVR_COMPLETE_RESTORE_CTRL",SWIG_From_int(static_cast< int >(3420)));
  SWIG_Python_SetConstant(d, "NET_DVR_CLOUDSTORAGE_SERVER_TEST",SWIG_From_int(static_cast< int >(3421)));
  SWIG_Python_SetConstant(d, "NET_DVR_PHONE_NUM_TEST",SWIG_From_int(static_cast< int >(3422)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REMOTECONTROL_STATUS",SWIG_From_int(static_cast< int >(3423)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MONITOR_LOCATION_INFO",SWIG_From_int(static_cast< int >(3424)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MONITOR_LOCATION_INFO",SWIG_From_int(static_cast< int >(3425)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SMART_CAPABILITIES",SWIG_From_int(static_cast< int >(3500)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EVENT_TRIGGERS_CAPABILITIES",SWIG_From_int(static_cast< int >(3501)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REGION_ENTRANCE_CAPABILITIES",SWIG_From_int(static_cast< int >(3502)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REGION_ENTR_DETECTION",SWIG_From_int(static_cast< int >(3503)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_REGION_ENTR_DETECTION",SWIG_From_int(static_cast< int >(3504)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REGION_ENTR_REGION",SWIG_From_int(static_cast< int >(3505)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_REGION_ENTR_REGION",SWIG_From_int(static_cast< int >(3506)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REGION_ENTR_TRIGGER",SWIG_From_int(static_cast< int >(3507)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_REGION_ENTR_TRIGGER",SWIG_From_int(static_cast< int >(3508)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REGION_ENTR_SCHEDULE",SWIG_From_int(static_cast< int >(3509)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_REGION_ENTR_SCHEDULE",SWIG_From_int(static_cast< int >(3510)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REGION_EXITINT_CAPABILITIES",SWIG_From_int(static_cast< int >(3511)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REGION_EXITING_DETECTION",SWIG_From_int(static_cast< int >(3512)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_REGION_EXITING_DETECTION",SWIG_From_int(static_cast< int >(3513)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REGION_EXITING_REGION",SWIG_From_int(static_cast< int >(3514)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_REGION_EXITING_REGION",SWIG_From_int(static_cast< int >(3515)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REGION_EXIT_TRIGGER",SWIG_From_int(static_cast< int >(3516)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_REGION_EXIT_TRIGGER",SWIG_From_int(static_cast< int >(3517)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REGION_EXIT_SCHEDULE",SWIG_From_int(static_cast< int >(3518)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_REGION_EXIT_SCHEDULE",SWIG_From_int(static_cast< int >(3519)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LOITERING_CAPABILITIES",SWIG_From_int(static_cast< int >(3520)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LOITERING_DETECTION",SWIG_From_int(static_cast< int >(3521)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LOITERING_DETECTION",SWIG_From_int(static_cast< int >(3522)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LOITERING_REGION",SWIG_From_int(static_cast< int >(3523)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LOITERING_REGION",SWIG_From_int(static_cast< int >(3524)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LOITERING_TRIGGER",SWIG_From_int(static_cast< int >(3525)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LOITERING_TRIGGER",SWIG_From_int(static_cast< int >(3526)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LOITERING_SCHEDULE",SWIG_From_int(static_cast< int >(3527)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LOITERING_SCHEDULE",SWIG_From_int(static_cast< int >(3528)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GROUPDETECTION_CAPABILITIES",SWIG_From_int(static_cast< int >(3529)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GROUP_DETECTION",SWIG_From_int(static_cast< int >(3530)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GROUP_DETECTION",SWIG_From_int(static_cast< int >(3531)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GROUPDETECTION_REGION",SWIG_From_int(static_cast< int >(3532)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GROUPDETECTION_REGION",SWIG_From_int(static_cast< int >(3533)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GROUPDETECTION_TRIGGER",SWIG_From_int(static_cast< int >(3534)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GROUPDETECTION_TRIGGER",SWIG_From_int(static_cast< int >(3535)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GROUPDETECTION_SCHEDULE",SWIG_From_int(static_cast< int >(3536)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GROUPDETECTION_SCHEDULE",SWIG_From_int(static_cast< int >(3537)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RAPIDMOVE_CAPABILITIES",SWIG_From_int(static_cast< int >(3538)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RAPIDMOVE_DETECTION",SWIG_From_int(static_cast< int >(3539)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RAPIDMOVE_DETECTION",SWIG_From_int(static_cast< int >(3540)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RAPIDMOVE_REGION",SWIG_From_int(static_cast< int >(3541)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RAPIDMOVE_REGION",SWIG_From_int(static_cast< int >(3542)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RAPIDMOVE_TRIGGER",SWIG_From_int(static_cast< int >(3543)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RAPIDMOVE_TRIGGER",SWIG_From_int(static_cast< int >(3544)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RAPIDMOVE_SCHEDULE",SWIG_From_int(static_cast< int >(3545)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RAPIDMOVE_SCHEDULE",SWIG_From_int(static_cast< int >(3546)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PATKING_CAPABILITIES",SWIG_From_int(static_cast< int >(3547)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PARKING_DETECTION",SWIG_From_int(static_cast< int >(3548)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PARKING_DETECTION",SWIG_From_int(static_cast< int >(3549)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PARKING_REGION",SWIG_From_int(static_cast< int >(3550)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PARKING_REGION",SWIG_From_int(static_cast< int >(3551)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PARKING_TRIGGER",SWIG_From_int(static_cast< int >(3552)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PARKING_TRIGGER",SWIG_From_int(static_cast< int >(3553)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PARKING_SCHEDULE",SWIG_From_int(static_cast< int >(3554)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PARKING_SCHEDULE",SWIG_From_int(static_cast< int >(3555)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_UNATTENDED_BAGGAGE_CAPABILITIES",SWIG_From_int(static_cast< int >(3556)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_UNATTENDED_BAGGAGE_DETECTION",SWIG_From_int(static_cast< int >(3557)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_UNATTENDED_BAGGAGE_DETECTION",SWIG_From_int(static_cast< int >(3558)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_UNATTENDED_BAGGAGE_REGION",SWIG_From_int(static_cast< int >(3559)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_UNATTENDED_BAGGAGE_REGION",SWIG_From_int(static_cast< int >(3560)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_UNATTENDED_BAGGAGE_TRIGGER",SWIG_From_int(static_cast< int >(3561)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_UNATTENDED_BAGGAGE_TRIGGER",SWIG_From_int(static_cast< int >(3562)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_UNATTENDED_BAGGAGE_SCHEDULE",SWIG_From_int(static_cast< int >(3563)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_UNATTENDED_BAGGAGE_SCHEDULE",SWIG_From_int(static_cast< int >(3564)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ATTENDEDBAGGAGE_CAPABILITIES",SWIG_From_int(static_cast< int >(3565)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ATTENDEDBAGGAGE_DETECTION",SWIG_From_int(static_cast< int >(3566)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ATTENDEDBAGGAGE_DETECTION",SWIG_From_int(static_cast< int >(3567)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ATTENDEDBAGGAGE_REGION",SWIG_From_int(static_cast< int >(3568)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ATTENDEDBAGGAGE_REGION",SWIG_From_int(static_cast< int >(3569)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ATTENDEDBAGGAGE_TRIGGER",SWIG_From_int(static_cast< int >(3570)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ATTENDEDBAGGAGE_TRIGGER",SWIG_From_int(static_cast< int >(3571)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ATTENDEDBAGGAGE_SCHEDULE",SWIG_From_int(static_cast< int >(3572)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ATTENDEDBAGGAGE_SCHEDULE",SWIG_From_int(static_cast< int >(3573)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REGIONCLIP_CAPABILITIES",SWIG_From_int(static_cast< int >(3574)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REGION_CLIP",SWIG_From_int(static_cast< int >(3575)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_REGION_CLIP",SWIG_From_int(static_cast< int >(3576)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NETWORK_CAPABILITIES",SWIG_From_int(static_cast< int >(3577)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIRELESS_DIAL",SWIG_From_int(static_cast< int >(3578)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WIRELESS_DIAL",SWIG_From_int(static_cast< int >(3579)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIRELESSDIAL_CAPABILITIES",SWIG_From_int(static_cast< int >(3580)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIRELESSDIAL_SCHEDULE",SWIG_From_int(static_cast< int >(3581)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WIRELESSDIAL_SCHEDULE",SWIG_From_int(static_cast< int >(3582)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIRELESSDIAL_STATUS",SWIG_From_int(static_cast< int >(3583)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REGION_ENTRANCE_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(3584)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REGION_EXITING_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(3585)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LOITERING_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(3586)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GROUP_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(3587)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RAPIDMOVE_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(3588)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PARKING_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(3589)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_UNATTENDEDBAGGAGE_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(3590)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ATTENDEDBAGGAGE_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(3591)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIRELESSDIAL_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(3592)));
  SWIG_Python_SetConstant(d, "NET_DVR_WIRELESSDIAL_CONNECT",SWIG_From_int(static_cast< int >(3593)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LITESTORAGE",SWIG_From_int(static_cast< int >(3594)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LITESTORAGE",SWIG_From_int(static_cast< int >(3595)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LITESTORAGE_CAPABILITIES",SWIG_From_int(static_cast< int >(3596)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VEHICLE_CAPABILITIES",SWIG_From_int(static_cast< int >(3597)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VEHICLE_CALIBRATION",SWIG_From_int(static_cast< int >(3598)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SLAVECAMERA_CAPABILITIES",SWIG_From_int(static_cast< int >(3599)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SLAVECAMERA",SWIG_From_int(static_cast< int >(3600)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SLAVECAMERA",SWIG_From_int(static_cast< int >(3601)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SLAVECAMERA_STATUS",SWIG_From_int(static_cast< int >(3602)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SLAVECAMERA_CALIB_CAPABILITIES",SWIG_From_int(static_cast< int >(3603)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SLAVECAMERA_CALIB",SWIG_From_int(static_cast< int >(3604)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SLAVECAMERA_CALIB",SWIG_From_int(static_cast< int >(3605)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PHY_RATIO",SWIG_From_int(static_cast< int >(3606)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PHY_RATIO",SWIG_From_int(static_cast< int >(3607)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MASTERSLAVETRACKING_CAPABILITIES",SWIG_From_int(static_cast< int >(3608)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TRACKINGRATIO",SWIG_From_int(static_cast< int >(3610)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRACKING",SWIG_From_int(static_cast< int >(3611)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TRACKING",SWIG_From_int(static_cast< int >(3612)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRACKING_CAPABILITIES",SWIG_From_int(static_cast< int >(3613)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SLAVECAMERA_CALIB_V50",SWIG_From_int(static_cast< int >(3614)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SLAVECAMERA_CALIB_V50",SWIG_From_int(static_cast< int >(3615)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TRACKINGRATIO_MANUAL",SWIG_From_int(static_cast< int >(3616)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRACKINGRATIO_MANUAL",SWIG_From_int(static_cast< int >(3617)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TRACK_INITPOSTION",SWIG_From_int(static_cast< int >(3618)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZ_CAPABILITIES",SWIG_From_int(static_cast< int >(3619)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMOMETRY_BASICPARAM_CAPABILITIES",SWIG_From_int(static_cast< int >(3620)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMOMETRY_BASICPARAM",SWIG_From_int(static_cast< int >(3621)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_THERMOMETRY_BASICPARAM",SWIG_From_int(static_cast< int >(3622)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMOMETRY_SCENE_CAPABILITIES",SWIG_From_int(static_cast< int >(3623)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMOMETRY_PRESETINFO",SWIG_From_int(static_cast< int >(3624)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_THERMOMETRY_PRESETINFO",SWIG_From_int(static_cast< int >(3625)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMOMETRY_ALARMRULE_CAPABILITIES",SWIG_From_int(static_cast< int >(3626)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMOMETRY_ALARMRULE",SWIG_From_int(static_cast< int >(3627)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_THERMOMETRY_ALARMRULE",SWIG_From_int(static_cast< int >(3628)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REALTIME_THERMOMETRY",SWIG_From_int(static_cast< int >(3629)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMOMETRY_DIFFCOMPARISON",SWIG_From_int(static_cast< int >(3630)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_THERMOMETRY_DIFFCOMPARISON",SWIG_From_int(static_cast< int >(3631)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMOMETRY_TRIGGER",SWIG_From_int(static_cast< int >(3632)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_THERMOMETRY_TRIGGER",SWIG_From_int(static_cast< int >(3633)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMAL_CAPABILITIES",SWIG_From_int(static_cast< int >(3634)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIREDETECTION_CAPABILITIES",SWIG_From_int(static_cast< int >(3635)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIREDETECTION",SWIG_From_int(static_cast< int >(3636)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FIREDETECTION",SWIG_From_int(static_cast< int >(3637)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIREDETECTION_TRIGGER",SWIG_From_int(static_cast< int >(3638)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FIREDETECTION_TRIGGER",SWIG_From_int(static_cast< int >(3639)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OIS_CAPABILITIES",SWIG_From_int(static_cast< int >(3640)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OIS_CFG",SWIG_From_int(static_cast< int >(3641)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OIS_CFG",SWIG_From_int(static_cast< int >(3642)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MACFILTER_CAPABILITIES",SWIG_From_int(static_cast< int >(3643)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MACFILTER_CFG",SWIG_From_int(static_cast< int >(3644)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MACFILTER_CFG",SWIG_From_int(static_cast< int >(3645)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EAGLEFOCUS_CALCFG_CAPABILITIES",SWIG_From_int(static_cast< int >(3646)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EAGLEFOCUSING_CALCFG",SWIG_From_int(static_cast< int >(3647)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EAGLEFOCUSING_CALCFG",SWIG_From_int(static_cast< int >(3648)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EAGLEFOCUSING_CFG_CAPABILITIES",SWIG_From_int(static_cast< int >(3649)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EAGLEFOCUSING_CTRL",SWIG_From_int(static_cast< int >(3650)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EAGLEFOCUSING_CTRL",SWIG_From_int(static_cast< int >(3651)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PXOFFLINE_CAPABILITIES",SWIG_From_int(static_cast< int >(3652)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PXOFFLINE_CFG",SWIG_From_int(static_cast< int >(3653)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PXOFFLINE_CFG",SWIG_From_int(static_cast< int >(3654)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PAPERCHARGEINFO_CAPABILITIES",SWIG_From_int(static_cast< int >(3655)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PAPERCHARGEINFO",SWIG_From_int(static_cast< int >(3656)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PARKINGSAPCE_CAPABILITIES",SWIG_From_int(static_cast< int >(3657)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PARKINGSAPCE_INFO",SWIG_From_int(static_cast< int >(3658)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PXMULTICTRL_CAPABILITIES",SWIG_From_int(static_cast< int >(3659)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CHARGEACCOUNT_CAPABILITIES",SWIG_From_int(static_cast< int >(3661)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CHARGE_ACCOUNTINFO",SWIG_From_int(static_cast< int >(3662)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PXMULTICTRL_CFG",SWIG_From_int(static_cast< int >(3663)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PXMULTICTRL_CFG",SWIG_From_int(static_cast< int >(3664)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TME_CHARGERULE",SWIG_From_int(static_cast< int >(3665)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TME_CHARGERULE",SWIG_From_int(static_cast< int >(3666)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TME_CHARGERULE_CAPABILITIES",SWIG_From_int(static_cast< int >(3667)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ILLEGALCARDFILTERING_CAPABILITIES",SWIG_From_int(static_cast< int >(3668)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ILLEGALCARDFILTERING_CFG",SWIG_From_int(static_cast< int >(3669)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ILLEGALCARDFILTERING_CFG",SWIG_From_int(static_cast< int >(3670)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LEDDISPLAY_CAPABILITIES",SWIG_From_int(static_cast< int >(3671)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LEDDISPLAY_CFG",SWIG_From_int(static_cast< int >(3672)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LEDDISPLAY_CFG",SWIG_From_int(static_cast< int >(3673)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VOICEBROADCAST_CAPABILITIES",SWIG_From_int(static_cast< int >(3674)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VOICEBROADCAST_CFG",SWIG_From_int(static_cast< int >(3675)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PAPERPRINTFORMAT_CAPABILITIES",SWIG_From_int(static_cast< int >(3676)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PAPERPRINTFORMAT_CFG",SWIG_From_int(static_cast< int >(3677)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PAPERPRINTFORMAT_CFG",SWIG_From_int(static_cast< int >(3678)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LOCkGATE_CAPABILITIES",SWIG_From_int(static_cast< int >(3679)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LOCKGATE_CFG",SWIG_From_int(static_cast< int >(3680)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LOCKGATE_CFG",SWIG_From_int(static_cast< int >(3681)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PARKING_DATASTATE",SWIG_From_int(static_cast< int >(3682)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PARKING_DATASTATE",SWIG_From_int(static_cast< int >(3683)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TME_CAPABILITIES",SWIG_From_int(static_cast< int >(3684)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TMEVOICE_CAPABILITIES",SWIG_From_int(static_cast< int >(3686)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TMEVOICE_CFG",SWIG_From_int(static_cast< int >(3687)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TMEVOICE_CFG",SWIG_From_int(static_cast< int >(3688)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_TMEVOICE_CFG",SWIG_From_int(static_cast< int >(3689)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POSITION",SWIG_From_int(static_cast< int >(3698)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_POSITION",SWIG_From_int(static_cast< int >(3699)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CENTRALIZEDCTRL_CAPABILITIES",SWIG_From_int(static_cast< int >(3700)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CENTRALIZEDCTRL",SWIG_From_int(static_cast< int >(3701)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CENTRALIZEDCTRL",SWIG_From_int(static_cast< int >(3702)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_COMPASS_CAPABILITIES",SWIG_From_int(static_cast< int >(3703)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VANDALPROOFALARM",SWIG_From_int(static_cast< int >(3704)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VANDALPROOFALARM",SWIG_From_int(static_cast< int >(3705)));
  SWIG_Python_SetConstant(d, "NET_DVR_COMPASS_CALIBRATE_CTRL",SWIG_From_int(static_cast< int >(3706)));
  SWIG_Python_SetConstant(d, "NET_DVR_COMPASS_NORTH_CTRL",SWIG_From_int(static_cast< int >(3707)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AZIMUTHINFO",SWIG_From_int(static_cast< int >(3708)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SATELLITETIME",SWIG_From_int(static_cast< int >(3709)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SATELLITETIME",SWIG_From_int(static_cast< int >(3710)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GISINFO",SWIG_From_int(static_cast< int >(3711)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STREAMING_CAPABILITIES",SWIG_From_int(static_cast< int >(3712)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REFRESHFRAME_CAPABILITIES",SWIG_From_int(static_cast< int >(3713)));
  SWIG_Python_SetConstant(d, "NET_DVR_STREAMING_REFRESH_FRAME",SWIG_From_int(static_cast< int >(3714)));
  SWIG_Python_SetConstant(d, "NET_DVR_FACECAPTURE_STATISTICS",SWIG_From_int(static_cast< int >(3715)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIRELESSSERVER_CAPABILITIES",SWIG_From_int(static_cast< int >(3716)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIRELESSSERVER",SWIG_From_int(static_cast< int >(3717)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WIRELESSSERVER",SWIG_From_int(static_cast< int >(3718)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CONNECT_LIST_CAPABILITIES",SWIG_From_int(static_cast< int >(3719)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THSCREEN_CAPABILITIES",SWIG_From_int(static_cast< int >(3720)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THSCREEN",SWIG_From_int(static_cast< int >(3721)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EXTERNALDEVICE_CAPABILITIES",SWIG_From_int(static_cast< int >(3722)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EXTERNALDEVICE",SWIG_From_int(static_cast< int >(3723)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EXTERNALDEVICE",SWIG_From_int(static_cast< int >(3724)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LEDDISPLAYINFO_CAPABILITIES",SWIG_From_int(static_cast< int >(3725)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LEDDISPLAYINFO",SWIG_From_int(static_cast< int >(3726)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SUPPLEMENTLIGHT_CAPABILITIES",SWIG_From_int(static_cast< int >(3727)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SUPPLEMENTLIGHT",SWIG_From_int(static_cast< int >(3728)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SUPPLEMENTLIGHT",SWIG_From_int(static_cast< int >(3729)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_THSCREEN",SWIG_From_int(static_cast< int >(3730)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LOWPOWER_CAPABILITIES",SWIG_From_int(static_cast< int >(3731)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LOWPOWER",SWIG_From_int(static_cast< int >(3732)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LOWPOWER",SWIG_From_int(static_cast< int >(3733)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ZOOMLINKAGE_CAPABILITIES",SWIG_From_int(static_cast< int >(3734)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ZOOMLINKAGE",SWIG_From_int(static_cast< int >(3735)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ZOOMLINKAGE",SWIG_From_int(static_cast< int >(3736)));
  SWIG_Python_SetConstant(d, "NET_DVR_THSCREEN_TIMING",SWIG_From_int(static_cast< int >(3737)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OSD_BATTERY_POWER_CFG",SWIG_From_int(static_cast< int >(3741)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OSD_BATTERY_POWER_CFG",SWIG_From_int(static_cast< int >(3742)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OSD_BATTERY_POWER_CFG_CAPABILITIES",SWIG_From_int(static_cast< int >(3743)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VANDALPROOFALARM_TRIGGER",SWIG_From_int(static_cast< int >(3744)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VANDALPROOFALARM_TRIGGER",SWIG_From_int(static_cast< int >(3745)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PANORAMAIMAGE_CAPABILITIES",SWIG_From_int(static_cast< int >(3746)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PANORAMAIMAGE",SWIG_From_int(static_cast< int >(3747)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PANORAMAIMAGE",SWIG_From_int(static_cast< int >(3748)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STREAMENCRYPTION",SWIG_From_int(static_cast< int >(3749)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STREAMENCRYPTION",SWIG_From_int(static_cast< int >(3750)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STREAMENCRYPTION_CAPABILITIES",SWIG_From_int(static_cast< int >(3751)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REVISE_GPS_CAPABILITIES",SWIG_From_int(static_cast< int >(3752)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REVISE_GPS",SWIG_From_int(static_cast< int >(3753)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_REVISE_GPS",SWIG_From_int(static_cast< int >(3754)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PDC_RECOMMEND",SWIG_From_int(static_cast< int >(3755)));
  SWIG_Python_SetConstant(d, "NET_DVR_REMOVE_FLASHSTORAGE",SWIG_From_int(static_cast< int >(3756)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_COUNTING_CAPABILITIES",SWIG_From_int(static_cast< int >(3757)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SENSOR_ADJUSTMENT",SWIG_From_int(static_cast< int >(3758)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SENSOR_ADJUSTMENT_CAPABILITIES",SWIG_From_int(static_cast< int >(3759)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIRELESSSERVER_FULLVERSION_CFG",SWIG_From_int(static_cast< int >(3760)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WIRELESSSERVER_FULLVERSION_CFG",SWIG_From_int(static_cast< int >(3761)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ONLINEUSER_INFO",SWIG_From_int(static_cast< int >(3762)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SENSOR_ADJUSTMENT_INFO",SWIG_From_int(static_cast< int >(3763)));
  SWIG_Python_SetConstant(d, "NET_DVR_SENSOR_RESET_CTRL",SWIG_From_int(static_cast< int >(3764)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POSTRADAR_CAPABILITIES",SWIG_From_int(static_cast< int >(3765)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POSTRADARSPEED_CFG",SWIG_From_int(static_cast< int >(3766)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_POSTRADARSPEED_CFG",SWIG_From_int(static_cast< int >(3767)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POSTRADARSPEED_RECOM_CFG",SWIG_From_int(static_cast< int >(3768)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POSTRADARPARAM_CFG",SWIG_From_int(static_cast< int >(3769)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_POSTRADARPARAM_CFG",SWIG_From_int(static_cast< int >(3770)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POSTRADARPARAM_RECOM_CFG",SWIG_From_int(static_cast< int >(3771)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ENCRYPT_DEVICE_INFO",SWIG_From_int(static_cast< int >(3772)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ANR_ARMING_HOST",SWIG_From_int(static_cast< int >(3773)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIRMWARE_VERSION",SWIG_From_int(static_cast< int >(3776)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FTP_CAPABILITIES",SWIG_From_int(static_cast< int >(3782)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FTPUPLOAD_CFG",SWIG_From_int(static_cast< int >(3783)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FTPUPLOAD_CFG",SWIG_From_int(static_cast< int >(3784)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VEHICLE_INFORMATION",SWIG_From_int(static_cast< int >(3785)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DDNS_COUNTRY_ABILITY",SWIG_From_int(static_cast< int >(3800)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEVICECFG_V50",SWIG_From_int(static_cast< int >(3801)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DEVICECFG_V50",SWIG_From_int(static_cast< int >(3802)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VEHICLE_RECOG_TASK_V50",SWIG_From_int(static_cast< int >(3851)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SMARTCALIBRATION_CAPABILITIES",SWIG_From_int(static_cast< int >(3900)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TEMPERATURE_TRIGGER",SWIG_From_int(static_cast< int >(3903)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TEMPERATURE_TRIGGER",SWIG_From_int(static_cast< int >(3904)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SMARTCALIBRATION_CFG",SWIG_From_int(static_cast< int >(3910)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SMARTCALIBRATION_CFG",SWIG_From_int(static_cast< int >(3911)));
  SWIG_Python_SetConstant(d, "NET_DVR_POST_SETUP_CALIB",SWIG_From_int(static_cast< int >(3912)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_POS_INFO_OVERLAY",SWIG_From_int(static_cast< int >(3913)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POS_INFO_OVERLAY",SWIG_From_int(static_cast< int >(3914)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CAMERA_WORK_MODE",SWIG_From_int(static_cast< int >(3915)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CAMERA_WORK_MODE",SWIG_From_int(static_cast< int >(3916)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RESOLUTION_SWITCH_CAPABILITIES",SWIG_From_int(static_cast< int >(3917)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RESOLUTION_SWITCH",SWIG_From_int(static_cast< int >(3918)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RESOLUTION_SWITCH",SWIG_From_int(static_cast< int >(3919)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CONFIRM_MECHANISM_CAPABILITIES",SWIG_From_int(static_cast< int >(3920)));
  SWIG_Python_SetConstant(d, "NET_DVR_CONFIRM_MECHANISM_CTRL",SWIG_From_int(static_cast< int >(3921)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VEHICLLE_RESULT_CAPABILITIES",SWIG_From_int(static_cast< int >(3951)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CALIB_CAPABILITIES",SWIG_From_int(static_cast< int >(3952)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POSINFO_OVERLAY_CAPABILITIES",SWIG_From_int(static_cast< int >(3953)));
  SWIG_Python_SetConstant(d, "NET_SDK_FINDMEDICALFILE",SWIG_From_int(static_cast< int >(3954)));
  SWIG_Python_SetConstant(d, "NET_SDK_FINDMEDICALPICTURE",SWIG_From_int(static_cast< int >(3955)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_POSINFO_OVERLAY",SWIG_From_int(static_cast< int >(3960)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POSINFO_OVERLAY",SWIG_From_int(static_cast< int >(3961)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACELIB_TRIGGER",SWIG_From_int(static_cast< int >(3962)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FACELIB_TRIGGER",SWIG_From_int(static_cast< int >(3963)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACECONTRAST_TRIGGER",SWIG_From_int(static_cast< int >(3965)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FACECONTRAST_TRIGGER",SWIG_From_int(static_cast< int >(3966)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACECONTRAST_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(3967)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACECONTRAST_SCHEDULE",SWIG_From_int(static_cast< int >(3968)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FACECONTRAST_SCHEDULE",SWIG_From_int(static_cast< int >(3969)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACELIB_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(3970)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VCA_VERSION_LIST",SWIG_From_int(static_cast< int >(3973)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SETUP_CALIB",SWIG_From_int(static_cast< int >(3974)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PANORAMA_LINKAGE",SWIG_From_int(static_cast< int >(3975)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PANORAMA_LINKAGE",SWIG_From_int(static_cast< int >(3976)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACELIB_SCHEDULE",SWIG_From_int(static_cast< int >(3977)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FACELIB_SCHEDULE",SWIG_From_int(static_cast< int >(3978)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SOFTWARE_SERVICE_CAPABILITIES",SWIG_From_int(static_cast< int >(3980)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SOFTWARE_SERVICE",SWIG_From_int(static_cast< int >(3981)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SOFTWARE_SERVICE",SWIG_From_int(static_cast< int >(3982)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PREVIEW_MODE_CAPABILITIES",SWIG_From_int(static_cast< int >(3983)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EAGLE_FOCUS_GOTOSCENE",SWIG_From_int(static_cast< int >(3984)));
  SWIG_Python_SetConstant(d, "NET_DVR_EAGLE_FOCUS_SCENE_DEL",SWIG_From_int(static_cast< int >(3985)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SAFETY_HELMET_TRIGGER",SWIG_From_int(static_cast< int >(3986)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SAFETY_HELMET_TRIGGER",SWIG_From_int(static_cast< int >(3987)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SAFETY_HELMET_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(3988)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SAFETY_HELMET_SCHEDULE",SWIG_From_int(static_cast< int >(3989)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SAFETY_HELMET_SCHEDULE",SWIG_From_int(static_cast< int >(3990)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SIGN_ABNORMAL_TRIGGER",SWIG_From_int(static_cast< int >(4150)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SIGN_ABNORMAL_TRIGGER",SWIG_From_int(static_cast< int >(4151)));
  SWIG_Python_SetConstant(d, "NET_DVR_ONE_KEY_CONFIG_SAN_V50",SWIG_From_int(static_cast< int >(4152)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HDCFG_V50",SWIG_From_int(static_cast< int >(4153)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HDCFG_V50",SWIG_From_int(static_cast< int >(4154)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HDVOLUME_CFG",SWIG_From_int(static_cast< int >(4155)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HDVOLUME_CFG",SWIG_From_int(static_cast< int >(4156)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POWER_SUPPLY_CABINET_TRIGGER",SWIG_From_int(static_cast< int >(4157)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_POWER_SUPPLY_CABINET_TRIGGER",SWIG_From_int(static_cast< int >(4158)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SENSOR_TRIGGER",SWIG_From_int(static_cast< int >(4159)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SENSOR_TRIGGER",SWIG_From_int(static_cast< int >(4160)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACESNAP_TRIGGER",SWIG_From_int(static_cast< int >(4161)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FACESNAP_TRIGGER",SWIG_From_int(static_cast< int >(4162)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACESNAP_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(4163)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACESNAP_SCHEDULE",SWIG_From_int(static_cast< int >(4164)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FACESNAP_SCHEDULE",SWIG_From_int(static_cast< int >(4165)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCREEN_SWITCH",SWIG_From_int(static_cast< int >(4171)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BV_CALIB_PIC",SWIG_From_int(static_cast< int >(4172)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BV_CALIB_RESULT",SWIG_From_int(static_cast< int >(4173)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BV_HCORRECTION",SWIG_From_int(static_cast< int >(4174)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_BV_CALIB_PIC",SWIG_From_int(static_cast< int >(4175)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TV_SCREEN_CFG",SWIG_From_int(static_cast< int >(4176)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TV_SCREEN_CFG",SWIG_From_int(static_cast< int >(4177)));
  SWIG_Python_SetConstant(d, "NET_DVR_ADJUST_BV_CALIB",SWIG_From_int(static_cast< int >(4178)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HUMAN_CALIB",SWIG_From_int(static_cast< int >(4179)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HUMAN_CALIB",SWIG_From_int(static_cast< int >(4180)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_USERCFG_V51",SWIG_From_int(static_cast< int >(4181)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_USERCFG_V51",SWIG_From_int(static_cast< int >(4182)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SOFTIO_TRIGGER",SWIG_From_int(static_cast< int >(4183)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SOFTIO_TRIGGER",SWIG_From_int(static_cast< int >(4184)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SOFTIO_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(4185)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SOFTIO_SCHEDULE",SWIG_From_int(static_cast< int >(4186)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SOFTIO_SCHEDULE",SWIG_From_int(static_cast< int >(4187)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HFPD_TRIGGER",SWIG_From_int(static_cast< int >(4188)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HFPD_TRIGGER",SWIG_From_int(static_cast< int >(4189)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HFPD_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(4190)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HFPD_SCHEDULE",SWIG_From_int(static_cast< int >(4191)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HFPD_SCHEDULE",SWIG_From_int(static_cast< int >(4192)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARM_INFO",SWIG_From_int(static_cast< int >(4193)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_USERCFG_V52",SWIG_From_int(static_cast< int >(4194)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_USERCFG_V52",SWIG_From_int(static_cast< int >(4195)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MUTEX_FUNCTION",SWIG_From_int(static_cast< int >(4353)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SINGLE_CHANNELINFO",SWIG_From_int(static_cast< int >(4360)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CHANNELINFO",SWIG_From_int(static_cast< int >(4361)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHECK_LOGIN_PASSWORDCFG",SWIG_From_int(static_cast< int >(4362)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SINGLE_SECURITY_QUESTION_CFG",SWIG_From_int(static_cast< int >(4363)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SINGLE_SECURITY_QUESTION_CFG",SWIG_From_int(static_cast< int >(4364)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SECURITY_QUESTION_CFG",SWIG_From_int(static_cast< int >(4365)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SECURITY_QUESTION_CFG",SWIG_From_int(static_cast< int >(4366)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ONLINEUSERLIST_SC",SWIG_From_int(static_cast< int >(4367)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BLACKLIST_FACECONTRAST_TRIGGER",SWIG_From_int(static_cast< int >(4368)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BLACKLIST_FACECONTRAST_TRIGGER",SWIG_From_int(static_cast< int >(4369)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WHITELIST_FACECONTRAST_TRIGGER",SWIG_From_int(static_cast< int >(4370)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WHITELIST_FACECONTRAST_TRIGGER",SWIG_From_int(static_cast< int >(4371)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BLACKLIST_FACECONTRAST_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(4372)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BLACKLIST_FACECONTRAST_SCHEDULE",SWIG_From_int(static_cast< int >(4373)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BLACKLIST_FACECONTRAST_SCHEDULE",SWIG_From_int(static_cast< int >(4374)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WHITELIST_FACECONTRAST_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(4375)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WHITELIST_FACECONTRAST_SCHEDULE",SWIG_From_int(static_cast< int >(4376)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WHITELIST_FACECONTRAST_SCHEDULE",SWIG_From_int(static_cast< int >(4377)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HUMAN_RECOGNITION_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(4378)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HUMAN_RECOGNITION_SCHEDULE",SWIG_From_int(static_cast< int >(4379)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HUMAN_RECOGNITION_SCHEDULE",SWIG_From_int(static_cast< int >(4380)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HUMAN_RECOGNITION_TRIGGER",SWIG_From_int(static_cast< int >(4381)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HUMAN_RECOGNITION_TRIGGER",SWIG_From_int(static_cast< int >(4382)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GBT28181_AUDIO_OUTPUT_CFG",SWIG_From_int(static_cast< int >(4383)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GBT28181_AUDIO_OUTPUT_CFG",SWIG_From_int(static_cast< int >(4384)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STUDENTS_STOODUP_TRIGGER",SWIG_From_int(static_cast< int >(4386)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STUDENTS_STOODUP_TRIGGER",SWIG_From_int(static_cast< int >(4387)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FRAMES_PEOPLE_COUNTING_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(4388)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FRAMES_PEOPLE_COUNTING_SCHEDULE",SWIG_From_int(static_cast< int >(4389)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FRAMES_PEOPLE_COUNTING_SCHEDULE",SWIG_From_int(static_cast< int >(4390)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FRAMES_PEOPLE_COUNTING_TRIGGER",SWIG_From_int(static_cast< int >(4391)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FRAMES_PEOPLE_COUNTING_TRIGGER",SWIG_From_int(static_cast< int >(4392)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PERSONDENSITY_TRIGGER",SWIG_From_int(static_cast< int >(4393)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PERSONDENSITY_TRIGGER",SWIG_From_int(static_cast< int >(4394)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PERSONDENSITY_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(4395)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PERSONDENSITY_SCHEDULE",SWIG_From_int(static_cast< int >(4396)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PERSONDENSITY_SCHEDULE",SWIG_From_int(static_cast< int >(4397)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STUDENTS_STOODUP_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(4398)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STUDENTS_STOODUP_SCHEDULE",SWIG_From_int(static_cast< int >(4399)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STUDENTS_STOODUP_SCHEDULE",SWIG_From_int(static_cast< int >(4400)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FACE_THERMOMETRY_TRIGGER",SWIG_From_int(static_cast< int >(4401)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACE_THERMOMETRY_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(4402)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACE_THERMOMETRY_SCHEDULE",SWIG_From_int(static_cast< int >(4403)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FACE_THERMOMETRY_SCHEDULE",SWIG_From_int(static_cast< int >(4404)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACE_THERMOMETRY_TRIGGER",SWIG_From_int(static_cast< int >(4405)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PERSONQUEUE_TRIGGER",SWIG_From_int(static_cast< int >(4406)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PERSONQUEUE_TRIGGER",SWIG_From_int(static_cast< int >(4407)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PERSONQUEUE_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(4408)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PERSONQUEUE_SCHEDULE",SWIG_From_int(static_cast< int >(4409)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PERSONQUEUE_SCHEDULE",SWIG_From_int(static_cast< int >(4410)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACESNAPCFG",SWIG_From_int(static_cast< int >(5001)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FACESNAPCFG",SWIG_From_int(static_cast< int >(5002)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEVACCESS_CFG",SWIG_From_int(static_cast< int >(5005)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DEVACCESS_CFG",SWIG_From_int(static_cast< int >(5006)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SAVE_PATH_CFG",SWIG_From_int(static_cast< int >(5007)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SAVE_PATH_CFG",SWIG_From_int(static_cast< int >(5008)));
  SWIG_Python_SetConstant(d, "NET_VCA_GET_RULECFG_V41",SWIG_From_int(static_cast< int >(5011)));
  SWIG_Python_SetConstant(d, "NET_VCA_SET_RULECFG_V41",SWIG_From_int(static_cast< int >(5012)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AID_RULECFG_V41",SWIG_From_int(static_cast< int >(5013)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AID_RULECFG_V41",SWIG_From_int(static_cast< int >(5014)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TPS_RULECFG_V41",SWIG_From_int(static_cast< int >(5015)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TPS_RULECFG_V41",SWIG_From_int(static_cast< int >(5016)));
  SWIG_Python_SetConstant(d, "NET_VCA_GET_FACEDETECT_RULECFG_V41",SWIG_From_int(static_cast< int >(5017)));
  SWIG_Python_SetConstant(d, "NET_VCA_SET_FACEDETECT_RULECFG_V41",SWIG_From_int(static_cast< int >(5018)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PDC_RULECFG_V41",SWIG_From_int(static_cast< int >(5019)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PDC_RULECFG_V41",SWIG_From_int(static_cast< int >(5020)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRIAL_VERSION_CFG",SWIG_From_int(static_cast< int >(5021)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VCA_CTRLINFO_CFG",SWIG_From_int(static_cast< int >(5022)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VCA_CTRLINFO_CFG",SWIG_From_int(static_cast< int >(5023)));
  SWIG_Python_SetConstant(d, "NET_DVR_SYN_CHANNEL_NAME",SWIG_From_int(static_cast< int >(5024)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RESET_COUNTER",SWIG_From_int(static_cast< int >(5025)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RESET_COUNTER",SWIG_From_int(static_cast< int >(5026)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OBJECT_COLOR",SWIG_From_int(static_cast< int >(5027)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OBJECT_COLOR",SWIG_From_int(static_cast< int >(5028)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUX_AREA",SWIG_From_int(static_cast< int >(5029)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AUX_AREA",SWIG_From_int(static_cast< int >(5030)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CHAN_WORKMODE",SWIG_From_int(static_cast< int >(5031)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CHAN_WORKMODE",SWIG_From_int(static_cast< int >(5032)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SLAVE_CHANNEL",SWIG_From_int(static_cast< int >(5033)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SLAVE_CHANNEL",SWIG_From_int(static_cast< int >(5034)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VQD_EVENT_RULE",SWIG_From_int(static_cast< int >(5035)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VQD_EVENT_RULE",SWIG_From_int(static_cast< int >(5036)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BASELINE_SCENE",SWIG_From_int(static_cast< int >(5037)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BASELINE_SCENE",SWIG_From_int(static_cast< int >(5038)));
  SWIG_Python_SetConstant(d, "NET_DVR_CONTROL_BASELINE_SCENE",SWIG_From_int(static_cast< int >(5039)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VCA_DETION_CFG",SWIG_From_int(static_cast< int >(5040)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VCA_DETION_CFG",SWIG_From_int(static_cast< int >(5041)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STREAM_ATTACHINFO_CFG",SWIG_From_int(static_cast< int >(5042)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STREAM_ATTACHINFO_CFG",SWIG_From_int(static_cast< int >(5043)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BV_CALIB_TYPE",SWIG_From_int(static_cast< int >(5044)));
  SWIG_Python_SetConstant(d, "NET_DVR_CONTROL_BV_SAMPLE_CALIB",SWIG_From_int(static_cast< int >(5045)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BV_SAMPLE_CALIB_CFG",SWIG_From_int(static_cast< int >(5046)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RULECFG_V42",SWIG_From_int(static_cast< int >(5049)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RULECFG_V42",SWIG_From_int(static_cast< int >(5050)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VCA_DETION_CFG_V40",SWIG_From_int(static_cast< int >(5051)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VCA_DETION_CFG_V40",SWIG_From_int(static_cast< int >(5052)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FLASH_CFG",SWIG_From_int(static_cast< int >(5110)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_T1TEST_CFG",SWIG_From_int(static_cast< int >(5053)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_T1TEST_CFG",SWIG_From_int(static_cast< int >(5054)));
  SWIG_Python_SetConstant(d, "NET_ITS_GET_OVERLAP_CFG_V50",SWIG_From_int(static_cast< int >(5055)));
  SWIG_Python_SetConstant(d, "NET_ITS_SET_OVERLAP_CFG_V50",SWIG_From_int(static_cast< int >(5056)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PARKLAMP_STATE",SWIG_From_int(static_cast< int >(5057)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CLOUDSTORAGE_CFG",SWIG_From_int(static_cast< int >(5058)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CLOUDSTORAGE_CFG",SWIG_From_int(static_cast< int >(5059)));
  SWIG_Python_SetConstant(d, "NET_ITS_GET_BASE_INFO",SWIG_From_int(static_cast< int >(5060)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SENSOR_INFO",SWIG_From_int(static_cast< int >(5061)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SENSOR_SWITCH",SWIG_From_int(static_cast< int >(5062)));
  SWIG_Python_SetConstant(d, "NET_ITS_GET_IMGMERGE_CFG",SWIG_From_int(static_cast< int >(5063)));
  SWIG_Python_SetConstant(d, "NET_ITS_SET_IMGMERGE_CFG",SWIG_From_int(static_cast< int >(5064)));
  SWIG_Python_SetConstant(d, "NET_ITS_GET_UPLOAD_CFG",SWIG_From_int(static_cast< int >(5065)));
  SWIG_Python_SetConstant(d, "NET_ITS_SET_UPLOAD_CFG",SWIG_From_int(static_cast< int >(5066)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SENSOR_PORT_CAPABILITIES",SWIG_From_int(static_cast< int >(5067)));
  SWIG_Python_SetConstant(d, "NET_ITS_GET_WORKSTATE",SWIG_From_int(static_cast< int >(5069)));
  SWIG_Python_SetConstant(d, "NET_ITS_GET_IPC_CHAN_CFG",SWIG_From_int(static_cast< int >(5070)));
  SWIG_Python_SetConstant(d, "NET_ITS_SET_IPC_CHAN_CFG",SWIG_From_int(static_cast< int >(5071)));
  SWIG_Python_SetConstant(d, "NET_ITS_GET_OVERLAP_CFG",SWIG_From_int(static_cast< int >(5072)));
  SWIG_Python_SetConstant(d, "NET_ITS_SET_OVERLAP_CFG",SWIG_From_int(static_cast< int >(5073)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRIGGEREX_CFG",SWIG_From_int(static_cast< int >(5074)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TRIGGEREX_CFG",SWIG_From_int(static_cast< int >(5075)));
  SWIG_Python_SetConstant(d, "NET_ITS_GET_ROAD_INFO",SWIG_From_int(static_cast< int >(5076)));
  SWIG_Python_SetConstant(d, "NET_ITS_REMOTE_DEVICE_CONTROL",SWIG_From_int(static_cast< int >(5077)));
  SWIG_Python_SetConstant(d, "NET_ITS_GET_GATEIPC_CHAN_CFG",SWIG_From_int(static_cast< int >(5078)));
  SWIG_Python_SetConstant(d, "NET_ITS_SET_GATEIPC_CHAN_CFG",SWIG_From_int(static_cast< int >(5079)));
  SWIG_Python_SetConstant(d, "NET_ITS_TRANSCHAN_START",SWIG_From_int(static_cast< int >(5080)));
  SWIG_Python_SetConstant(d, "NET_ITS_GET_ECTWORKSTATE",SWIG_From_int(static_cast< int >(5081)));
  SWIG_Python_SetConstant(d, "NET_ITS_GET_ECT_CHAN_INFO",SWIG_From_int(static_cast< int >(5082)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HEATMAP_RESULT",SWIG_From_int(static_cast< int >(5083)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ITS_EXDEVCFG",SWIG_From_int(static_cast< int >(5084)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ITS_EXDEVCFG",SWIG_From_int(static_cast< int >(5085)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ITS_EXDEVSTATUS",SWIG_From_int(static_cast< int >(5086)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ITS_ENDEVCMD",SWIG_From_int(static_cast< int >(5087)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ENISSUED_DATADEL",SWIG_From_int(static_cast< int >(5088)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PDC_RESULT",SWIG_From_int(static_cast< int >(5089)));
  SWIG_Python_SetConstant(d, "NET_ITS_GET_LAMP_CTRLCFG",SWIG_From_int(static_cast< int >(5090)));
  SWIG_Python_SetConstant(d, "NET_ITS_SET_LAMP_CTRLCFG",SWIG_From_int(static_cast< int >(5091)));
  SWIG_Python_SetConstant(d, "NET_ITS_GET_PARKSPACE_ATTRIBUTE_CFG",SWIG_From_int(static_cast< int >(5092)));
  SWIG_Python_SetConstant(d, "NET_ITS_SET_PARKSPACE_ATTRIBUTE_CFG",SWIG_From_int(static_cast< int >(5093)));
  SWIG_Python_SetConstant(d, "NET_ITS_SET_LAMP_EXTERNAL_CFG",SWIG_From_int(static_cast< int >(5095)));
  SWIG_Python_SetConstant(d, "NET_ITS_SET_COMPEL_CAPTURE",SWIG_From_int(static_cast< int >(5096)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TIMESIGN_CFG",SWIG_From_int(static_cast< int >(5097)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TIMESIGN_CFG",SWIG_From_int(static_cast< int >(5098)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SIGNALLAMP_STATUS",SWIG_From_int(static_cast< int >(5099)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MONITOR_PLAN_VQD",SWIG_From_int(static_cast< int >(5100)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MONITORID_VQD",SWIG_From_int(static_cast< int >(5101)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MONITOR_INFO",SWIG_From_int(static_cast< int >(5102)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_MONITOR_PLAN_VQD",SWIG_From_int(static_cast< int >(5103)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MONITOR_VQD_STATUS",SWIG_From_int(static_cast< int >(5104)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORD_INFO",SWIG_From_int(static_cast< int >(5105)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MONITOR_VQDCFG",SWIG_From_int(static_cast< int >(5106)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MONITOR_VQDCFG",SWIG_From_int(static_cast< int >(5107)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MONITOR_PLAN_VQDCFG",SWIG_From_int(static_cast< int >(5108)));
  SWIG_Python_SetConstant(d, "NET_DVR_SCENE_CHANGE_UPDATE",SWIG_From_int(static_cast< int >(5109)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CALIBRATE_POINT",SWIG_From_int(static_cast< int >(5153)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCENE_CFG",SWIG_From_int(static_cast< int >(5201)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCENE_CFG",SWIG_From_int(static_cast< int >(5202)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCENE_REFERENCE_REGION",SWIG_From_int(static_cast< int >(5203)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCENE_REFERENCE_REGION",SWIG_From_int(static_cast< int >(5204)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCENE_CALIBRATION",SWIG_From_int(static_cast< int >(5205)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCENE_CALIBRATION",SWIG_From_int(static_cast< int >(5206)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCENE_MASK_REGION",SWIG_From_int(static_cast< int >(5207)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCENE_MASK_REGION",SWIG_From_int(static_cast< int >(5208)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCENE_LANECFG",SWIG_From_int(static_cast< int >(5209)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCENE_LANECFG",SWIG_From_int(static_cast< int >(5210)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCENE_AID_RULECFG",SWIG_From_int(static_cast< int >(5211)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCENE_AID_RULECFG",SWIG_From_int(static_cast< int >(5212)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCENE_TPS_RULECFG",SWIG_From_int(static_cast< int >(5213)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCENE_TPS_RULECFG",SWIG_From_int(static_cast< int >(5214)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCENE_TIME_CFG",SWIG_From_int(static_cast< int >(5215)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCENE_TIME_CFG",SWIG_From_int(static_cast< int >(5216)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FORENSICS_MODE",SWIG_From_int(static_cast< int >(5217)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FORENSICS_MODE",SWIG_From_int(static_cast< int >(5218)));
  SWIG_Python_SetConstant(d, "NET_DVR_FORCESTOP_FORENSICS_CTRL",SWIG_From_int(static_cast< int >(5219)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARM_PROCESS_CFG",SWIG_From_int(static_cast< int >(5220)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARM_PROCESS_CFG",SWIG_From_int(static_cast< int >(5221)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BLACKLIST_ALARM_INFO",SWIG_From_int(static_cast< int >(5222)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STORAGE_RESOURCE_CFG",SWIG_From_int(static_cast< int >(5225)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STORAGE_RESOURCE_CFG",SWIG_From_int(static_cast< int >(5226)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_BLACKLIST_ALARM_RECORD",SWIG_From_int(static_cast< int >(5227)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BLACKLIST_GROUP_INFO",SWIG_From_int(static_cast< int >(5229)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_BLACKLIST_GROUP_INFO",SWIG_From_int(static_cast< int >(5230)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BLACKLIST_GROUP_INFO",SWIG_From_int(static_cast< int >(5231)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BLACKLIST_GROUP_RECORD_CFG",SWIG_From_int(static_cast< int >(5232)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BLACKLIST_GROUP_RECORD_CFG",SWIG_From_int(static_cast< int >(5234)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_BLACKLIST_GROUP_RECORD_CFG",SWIG_From_int(static_cast< int >(5235)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AREA_MONITOR_CFG",SWIG_From_int(static_cast< int >(5236)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AREA_MONITOR_CFG",SWIG_From_int(static_cast< int >(5237)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_AREA_MONITOR_CFG",SWIG_From_int(static_cast< int >(5238)));
  SWIG_Python_SetConstant(d, "NET_DVR_RETRIEVAL_SNAP_RECORD",SWIG_From_int(static_cast< int >(5240)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMLIST",SWIG_From_int(static_cast< int >(5241)));
  SWIG_Python_SetConstant(d, "NET_DVR_DETECT_IMAGE",SWIG_From_int(static_cast< int >(5242)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SNAP_RECORD",SWIG_From_int(static_cast< int >(5243)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_SNAP_RECORD",SWIG_From_int(static_cast< int >(5244)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACE_RECORD",SWIG_From_int(static_cast< int >(5245)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FACE_RECORD",SWIG_From_int(static_cast< int >(5246)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_FACE_RECORD",SWIG_From_int(static_cast< int >(5247)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FACE_DATABASE",SWIG_From_int(static_cast< int >(5248)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FACE_DATABASE",SWIG_From_int(static_cast< int >(5249)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_FACE_DATABASE",SWIG_From_int(static_cast< int >(5250)));
  SWIG_Python_SetConstant(d, "NET_DVR_RETRIEVAL_FACE_DATABASE",SWIG_From_int(static_cast< int >(5251)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BLACKLIST_REL_DEV_CFG",SWIG_From_int(static_cast< int >(5252)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_BLACKLIST_REL_DEV",SWIG_From_int(static_cast< int >(5253)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DISK_RAID_INFO",SWIG_From_int(static_cast< int >(6001)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DISK_RAID_INFO",SWIG_From_int(static_cast< int >(6002)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DVR_SYNCHRONOUS_IPC",SWIG_From_int(static_cast< int >(6005)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DVR_SYNCHRONOUS_IPC",SWIG_From_int(static_cast< int >(6006)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DVR_IPC_PASSWD",SWIG_From_int(static_cast< int >(6008)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEVICE_NET_USING_INFO",SWIG_From_int(static_cast< int >(6009)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DVR_IPC_NET",SWIG_From_int(static_cast< int >(6012)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORD_CHANNEL_INFO",SWIG_From_int(static_cast< int >(6013)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RECORD_CHANNEL_INFO",SWIG_From_int(static_cast< int >(6014)));
  SWIG_Python_SetConstant(d, "NET_DVR_MOUNT_DISK",SWIG_From_int(static_cast< int >(6015)));
  SWIG_Python_SetConstant(d, "NET_DVR_UNMOUNT_DISK",SWIG_From_int(static_cast< int >(6016)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STREAM_SRC_INFO",SWIG_From_int(static_cast< int >(6017)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STREAM_SRC_INFO",SWIG_From_int(static_cast< int >(6018)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STREAM_RECORD_INFO",SWIG_From_int(static_cast< int >(6019)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STREAM_RECORD_INFO",SWIG_From_int(static_cast< int >(6020)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STREAM_RECORD_STATUS",SWIG_From_int(static_cast< int >(6021)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STREAM_RECORD_STATUS",SWIG_From_int(static_cast< int >(6022)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STREAM_INFO",SWIG_From_int(static_cast< int >(6023)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STREAM_SRC_INFO_V40",SWIG_From_int(static_cast< int >(6024)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STREAM_SRC_INFO_V40",SWIG_From_int(static_cast< int >(6025)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RELOCATE_INFO",SWIG_From_int(static_cast< int >(6026)));
  SWIG_Python_SetConstant(d, "NET_DVR_START_GOP_INFO_PASSBACK",SWIG_From_int(static_cast< int >(6032)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CHANS_RECORD_STATUS_CFG",SWIG_From_int(static_cast< int >(6035)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CHANS_RECORD_STATUS_CFG",SWIG_From_int(static_cast< int >(6036)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IP_ALARM_GROUP_NUM",SWIG_From_int(static_cast< int >(6100)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IP_ALARM_IN",SWIG_From_int(static_cast< int >(6101)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IP_ALARM_OUT",SWIG_From_int(static_cast< int >(6102)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FTPCFG_SECOND",SWIG_From_int(static_cast< int >(6103)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FTPCFG_SECOND",SWIG_From_int(static_cast< int >(6104)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEFAULT_VIDEO_EFFECT",SWIG_From_int(static_cast< int >(6105)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEO_EFFECT",SWIG_From_int(static_cast< int >(6106)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_INVALID_DISK",SWIG_From_int(static_cast< int >(6107)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DRAWFRAME_DISK_QUOTA_CFG",SWIG_From_int(static_cast< int >(6109)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DRAWFRAME_DISK_QUOTA_CFG",SWIG_From_int(static_cast< int >(6110)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NAT_CFG",SWIG_From_int(static_cast< int >(6111)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_NAT_CFG",SWIG_From_int(static_cast< int >(6112)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AES_KEY",SWIG_From_int(static_cast< int >(6113)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POE_CFG",SWIG_From_int(static_cast< int >(6114)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_POE_CFG",SWIG_From_int(static_cast< int >(6115)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CUSTOM_PRO_CFG",SWIG_From_int(static_cast< int >(6116)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CUSTOM_PRO_CFG",SWIG_From_int(static_cast< int >(6117)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STREAM_CABAC",SWIG_From_int(static_cast< int >(6118)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STREAM_CABAC",SWIG_From_int(static_cast< int >(6119)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ESATA_MINISAS_USAGE_CFG",SWIG_From_int(static_cast< int >(6120)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ESATA_MINISAS_USAGE_CFG",SWIG_From_int(static_cast< int >(6121)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HDCFG_V40",SWIG_From_int(static_cast< int >(6122)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HDCFG_V40",SWIG_From_int(static_cast< int >(6123)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POE_CHANNEL_ADD_MODE",SWIG_From_int(static_cast< int >(6124)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_POE_CHANNEL_ADD_MODE",SWIG_From_int(static_cast< int >(6125)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DIGITAL_CHANNEL_STATE",SWIG_From_int(static_cast< int >(6126)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BONJOUR_CFG",SWIG_From_int(static_cast< int >(6127)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BONJOUR_CFG",SWIG_From_int(static_cast< int >(6128)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SOCKS_CFG",SWIG_From_int(static_cast< int >(6130)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SOCKS_CFG",SWIG_From_int(static_cast< int >(6131)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_QOS_CFG",SWIG_From_int(static_cast< int >(6132)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_QOS_CFG",SWIG_From_int(static_cast< int >(6133)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HTTPS_CFG",SWIG_From_int(static_cast< int >(6134)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HTTPS_CFG",SWIG_From_int(static_cast< int >(6135)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WD1_CFG",SWIG_From_int(static_cast< int >(6136)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WD1_CFG",SWIG_From_int(static_cast< int >(6137)));
  SWIG_Python_SetConstant(d, "NET_DVR_CREATE_CERT",SWIG_From_int(static_cast< int >(6138)));
  SWIG_Python_SetConstant(d, "NET_DVR_DELETE_CERT",SWIG_From_int(static_cast< int >(6139)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORD_LOCK_PERCENTAGE",SWIG_From_int(static_cast< int >(6140)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RECORD_LOCK_PERCENTAGE",SWIG_From_int(static_cast< int >(6141)));
  SWIG_Python_SetConstant(d, "NET_DVR_CMD_TRIGGER_PERIOD_RECORD",SWIG_From_int(static_cast< int >(6144)));
  SWIG_Python_SetConstant(d, "NET_DVR_UPLOAD_CERT",SWIG_From_int(static_cast< int >(6145)));
  SWIG_Python_SetConstant(d, "NET_DVR_DOWNLOAD_CERT",SWIG_From_int(static_cast< int >(6146)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CERT",SWIG_From_int(static_cast< int >(6147)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POS_FILTER_CFG",SWIG_From_int(static_cast< int >(6148)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_POS_FILTER_CFG",SWIG_From_int(static_cast< int >(6149)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CONNECT_POS_CFG",SWIG_From_int(static_cast< int >(6150)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CONNECT_POS_CFG",SWIG_From_int(static_cast< int >(6151)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CHAN_FILTER_CFG",SWIG_From_int(static_cast< int >(6152)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CHAN_FILTER_CFG",SWIG_From_int(static_cast< int >(6153)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FTPCFG_V40",SWIG_From_int(static_cast< int >(6162)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FTPCFG_V40",SWIG_From_int(static_cast< int >(6163)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MONTHLY_RECORD_DISTRIBUTION",SWIG_From_int(static_cast< int >(6164)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ACCESS_DEVICE_CHANNEL_INFO",SWIG_From_int(static_cast< int >(6165)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PREVIEW_SWITCH_CFG",SWIG_From_int(static_cast< int >(6166)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PREVIEW_SWITCH_CFG",SWIG_From_int(static_cast< int >(6167)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_N_PLUS_ONE_WORK_MODE",SWIG_From_int(static_cast< int >(6168)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_N_PLUS_ONE_WORK_MODE",SWIG_From_int(static_cast< int >(6169)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HD_STATUS",SWIG_From_int(static_cast< int >(6170)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HD_STATUS",SWIG_From_int(static_cast< int >(6171)));
  SWIG_Python_SetConstant(d, "NET_DVR_IMPORT_IPC_CFG_FILE",SWIG_From_int(static_cast< int >(6172)));
  SWIG_Python_SetConstant(d, "NET_DVR_EXPORT_IPC_CFG_FILE",SWIG_From_int(static_cast< int >(6173)));
  SWIG_Python_SetConstant(d, "NET_DVR_UPGRADE_IPC",SWIG_From_int(static_cast< int >(6174)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RAID_BACKGROUND_TASK_SPEED",SWIG_From_int(static_cast< int >(6175)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RAID_BACKGROUND_TASK_SPEED",SWIG_From_int(static_cast< int >(6176)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EXCEPTIONCFG_V40",SWIG_From_int(static_cast< int >(6177)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EXCEPTIONCFG_V40",SWIG_From_int(static_cast< int >(6178)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PICCFG_V40",SWIG_From_int(static_cast< int >(6179)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PICCFG_V40",SWIG_From_int(static_cast< int >(6180)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMINCFG_V40",SWIG_From_int(static_cast< int >(6181)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMINCFG_V40",SWIG_From_int(static_cast< int >(6182)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IPALARMINCFG_V40",SWIG_From_int(static_cast< int >(6183)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IPALARMOUTCFG_V40",SWIG_From_int(static_cast< int >(6185)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_USERCFG_V40",SWIG_From_int(static_cast< int >(6187)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_USERCFG_V40",SWIG_From_int(static_cast< int >(6188)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WORK_STATUS",SWIG_From_int(static_cast< int >(6189)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_JPEG_CAPTURE_CFG_V40",SWIG_From_int(static_cast< int >(6190)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_JPEG_CAPTURE_CFG_V40",SWIG_From_int(static_cast< int >(6191)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HDGROUP_CFG_V40",SWIG_From_int(static_cast< int >(6192)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HDGROUP_CFG_V40",SWIG_From_int(static_cast< int >(6193)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SMD_HOLIDAY_HANDLE",SWIG_From_int(static_cast< int >(6194)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SMD_HOLIDAY_HANDLE",SWIG_From_int(static_cast< int >(6195)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PIC_MODEL_CFG",SWIG_From_int(static_cast< int >(6196)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PIC_MODEL_CFG",SWIG_From_int(static_cast< int >(6197)));
  SWIG_Python_SetConstant(d, "NET_DVR_START_LOCAL_MOUSE_EVENT",SWIG_From_int(static_cast< int >(6198)));
  SWIG_Python_SetConstant(d, "NET_DVR_START_SIMULARE_MOUSE_EVENT",SWIG_From_int(static_cast< int >(6199)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WORK_STATUS_V50",SWIG_From_int(static_cast< int >(6200)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ACCESS_CAMERA_INFO",SWIG_From_int(static_cast< int >(6201)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ACCESS_CAMERA_INFO",SWIG_From_int(static_cast< int >(6202)));
  SWIG_Python_SetConstant(d, "NET_DVR_PULL_DISK",SWIG_From_int(static_cast< int >(6203)));
  SWIG_Python_SetConstant(d, "NET_DVR_SCAN_RAID",SWIG_From_int(static_cast< int >(6204)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_USER_RIGHT_CFG",SWIG_From_int(static_cast< int >(6210)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_USER_RIGHT_CFG",SWIG_From_int(static_cast< int >(6211)));
  SWIG_Python_SetConstant(d, "NET_DVR_ONE_KEY_CONFIG",SWIG_From_int(static_cast< int >(6212)));
  SWIG_Python_SetConstant(d, "NET_DVR_RESTART_SERVICE",SWIG_From_int(static_cast< int >(6213)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MAX_MACHINE_NUM_CFG",SWIG_From_int(static_cast< int >(6214)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MAX_MACHINE_NUM_CFG",SWIG_From_int(static_cast< int >(6215)));
  SWIG_Python_SetConstant(d, "NET_DVR_ADD_DEVICE",SWIG_From_int(static_cast< int >(6216)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_DEVICE",SWIG_From_int(static_cast< int >(6217)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DATA_CALLBACK_CFG",SWIG_From_int(static_cast< int >(6218)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DATA_CALLBACK_CFG",SWIG_From_int(static_cast< int >(6219)));
  SWIG_Python_SetConstant(d, "NET_DVR_CLONE_LUN",SWIG_From_int(static_cast< int >(6220)));
  SWIG_Python_SetConstant(d, "NET_DVR_EXPAND_LUN",SWIG_From_int(static_cast< int >(6221)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_N_PLUS_ONE_DEVICE_INFO",SWIG_From_int(static_cast< int >(6222)));
  SWIG_Python_SetConstant(d, "NET_DVR_MODIFY_DVR_NET_DISK",SWIG_From_int(static_cast< int >(6223)));
  SWIG_Python_SetConstant(d, "NET_DVR_CREATE_NAS",SWIG_From_int(static_cast< int >(6225)));
  SWIG_Python_SetConstant(d, "NET_DVR_DELETE_NAS",SWIG_From_int(static_cast< int >(6226)));
  SWIG_Python_SetConstant(d, "NET_DVR_OPEN_ISCSI",SWIG_From_int(static_cast< int >(6227)));
  SWIG_Python_SetConstant(d, "NET_DVR_CLOSE_ISCSI",SWIG_From_int(static_cast< int >(6228)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FC",SWIG_From_int(static_cast< int >(6229)));
  SWIG_Python_SetConstant(d, "NET_DVR_OPEN_FC",SWIG_From_int(static_cast< int >(6230)));
  SWIG_Python_SetConstant(d, "NET_DVR_CLOSE_FC",SWIG_From_int(static_cast< int >(6231)));
  SWIG_Python_SetConstant(d, "NET_DVR_ONE_KEY_CONFIG_SAN",SWIG_From_int(static_cast< int >(6232)));
  SWIG_Python_SetConstant(d, "NET_DVR_RECORD_CHECK",SWIG_From_int(static_cast< int >(6233)));
  SWIG_Python_SetConstant(d, "NET_DVR_ADD_RECORD_PASSBACK_TASK_MANUAL",SWIG_From_int(static_cast< int >(6234)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_RECORD_PASSBACK_TASK_MANUAL",SWIG_From_int(static_cast< int >(6235)));
  SWIG_Python_SetConstant(d, "NET_DVR_RECORD_PASSBACK_TASK_MANUAL_CTRL",SWIG_From_int(static_cast< int >(6236)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_RECORD_PASSBACK_TASK_MANUAL",SWIG_From_int(static_cast< int >(6237)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORD_PASSBACK_PLAN_CFG",SWIG_From_int(static_cast< int >(6238)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RECORD_PASSBACK_PLAN_CFG",SWIG_From_int(static_cast< int >(6239)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEV_STORAGE_CFG",SWIG_From_int(static_cast< int >(6240)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ONLINE_USER_CFG",SWIG_From_int(static_cast< int >(6241)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORD_SEGMENT_CFG",SWIG_From_int(static_cast< int >(6242)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_REC_PASSBACK_TASK_EXECUTABLE",SWIG_From_int(static_cast< int >(6243)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STREAM_MEDIA_CFG",SWIG_From_int(static_cast< int >(6244)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STREAM_MEDIA_CFG",SWIG_From_int(static_cast< int >(6245)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_USERCFG_V50",SWIG_From_int(static_cast< int >(6246)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_USERCFG_V50",SWIG_From_int(static_cast< int >(6247)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORD_PASSBACK_BASIC_CFG_CAP",SWIG_From_int(static_cast< int >(6248)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORD_PASSBACK_BASIC_CFG",SWIG_From_int(static_cast< int >(6249)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RECORD_PASSBACK_BASIC_CFG",SWIG_From_int(static_cast< int >(6250)));
  SWIG_Python_SetConstant(d, "NET_DVR_ONE_KEY_CONFIG_V50",SWIG_From_int(static_cast< int >(6251)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RACM_CAP",SWIG_From_int(static_cast< int >(6252)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THUMBNAILS",SWIG_From_int(static_cast< int >(6253)));
  SWIG_Python_SetConstant(d, "NET_DVR_ADD_RECORD_PASSBACK_TASK_MANUAL_V50",SWIG_From_int(static_cast< int >(6254)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORD_PASSBACK_HISTORY_PLAN_CFG_CAP",SWIG_From_int(static_cast< int >(6255)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORD_PASSBACK_HISTORY_PLAN_CFG",SWIG_From_int(static_cast< int >(6256)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RECORD_PASSBACK_HISTORY_PLAN_CFG",SWIG_From_int(static_cast< int >(6257)));
  SWIG_Python_SetConstant(d, "NET_DVR_ONE_KEY_CONFIG_V51",SWIG_From_int(static_cast< int >(6258)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORD_PACK",SWIG_From_int(static_cast< int >(6301)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RECORD_PACK",SWIG_From_int(static_cast< int >(6302)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CLOUD_STORAGE_CFG",SWIG_From_int(static_cast< int >(6303)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CLOUD_STORAGE_CFG",SWIG_From_int(static_cast< int >(6304)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GOP_INFO",SWIG_From_int(static_cast< int >(6305)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PHY_DISK_INFO",SWIG_From_int(static_cast< int >(6306)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORDING_AUTO_TRACK_CFG",SWIG_From_int(static_cast< int >(6307)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RECORDING_AUTO_TRACK_CFG",SWIG_From_int(static_cast< int >(6308)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORDING_PUBLISH_CFG",SWIG_From_int(static_cast< int >(6309)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RECORDING_PUBLISH_CFG",SWIG_From_int(static_cast< int >(6310)));
  SWIG_Python_SetConstant(d, "NET_DVR_RECORDING_ONEKEY_CONTROL",SWIG_From_int(static_cast< int >(6311)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORDING_END_TIME",SWIG_From_int(static_cast< int >(6312)));
  SWIG_Python_SetConstant(d, "NET_DVR_RECORDING_PUBLISH",SWIG_From_int(static_cast< int >(6313)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CURRICULUM_CFG",SWIG_From_int(static_cast< int >(6314)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CURRICULUM_CFG",SWIG_From_int(static_cast< int >(6315)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_COURSE_INDEX_CFG",SWIG_From_int(static_cast< int >(6316)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_COURSE_INDEX_CFG",SWIG_From_int(static_cast< int >(6317)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PPT_CHANNEL",SWIG_From_int(static_cast< int >(6318)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PPT_DETECT_CFG",SWIG_From_int(static_cast< int >(6319)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PPT_DETECT_CFG",SWIG_From_int(static_cast< int >(6320)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORDINGHOST_CFG",SWIG_From_int(static_cast< int >(6321)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RECORDINGHOST_CFG",SWIG_From_int(static_cast< int >(6322)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BACKUP_RECORD_CFG",SWIG_From_int(static_cast< int >(6323)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BACKUP_RECORD_CFG",SWIG_From_int(static_cast< int >(6324)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUDIO_ACTIVATION_CFG",SWIG_From_int(static_cast< int >(6326)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AUDIO_ACTIVATION_CFG",SWIG_From_int(static_cast< int >(6327)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DECODERCFG_V40",SWIG_From_int(static_cast< int >(6328)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DECODERCFG_V40",SWIG_From_int(static_cast< int >(6329)));
  SWIG_Python_SetConstant(d, "NET_DVR_INFRARED_OUTPUT_CONTROL",SWIG_From_int(static_cast< int >(6330)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_INFRARED_CMD_NAME_CFG",SWIG_From_int(static_cast< int >(6331)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_INFRARED_CMD_NAME_CFG",SWIG_From_int(static_cast< int >(6332)));
  SWIG_Python_SetConstant(d, "NET_DVR_START_INFRARED_LEARN",SWIG_From_int(static_cast< int >(6333)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRIAL_SYSTEM_CFG",SWIG_From_int(static_cast< int >(6334)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CASE_INFO",SWIG_From_int(static_cast< int >(6335)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRIAL_MICROPHONE_STATUS",SWIG_From_int(static_cast< int >(6336)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TRIAL_MICROPHONE_STATUS",SWIG_From_int(static_cast< int >(6337)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRIAL_HOST_STATUS",SWIG_From_int(static_cast< int >(6338)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LAMP_OUT",SWIG_From_int(static_cast< int >(6339)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LAMP_OUT",SWIG_From_int(static_cast< int >(6340)));
  SWIG_Python_SetConstant(d, "NET_DVR_LAMP_REMOTE_CONTROL",SWIG_From_int(static_cast< int >(6341)));
  SWIG_Python_SetConstant(d, "NET_DVR_REMOTE_CONTROL_PLAY",SWIG_From_int(static_cast< int >(6342)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LOCAL_INPUT_CFG",SWIG_From_int(static_cast< int >(6343)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LOCAL_INPUT_CFG",SWIG_From_int(static_cast< int >(6344)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CASE_INFO",SWIG_From_int(static_cast< int >(6345)));
  SWIG_Python_SetConstant(d, "NET_DVR_INQUEST_GET_CDW_STATUS",SWIG_From_int(static_cast< int >(6350)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MIX_AUDIOIN_CFG",SWIG_From_int(static_cast< int >(6351)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MIX_AUDIOIN_CFG",SWIG_From_int(static_cast< int >(6352)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MIX_AUDIOOUT_CFG",SWIG_From_int(static_cast< int >(6353)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MIX_AUDIOOUT_CFG",SWIG_From_int(static_cast< int >(6354)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUDIOIN_VOLUME_CFG",SWIG_From_int(static_cast< int >(6355)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AUDIOIN_VOLUME_CFG",SWIG_From_int(static_cast< int >(6356)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AREA_MASK_CFG",SWIG_From_int(static_cast< int >(6357)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AREA_MASK_CFG",SWIG_From_int(static_cast< int >(6358)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUDIO_DIACRITICAL_CFG",SWIG_From_int(static_cast< int >(6359)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AUDIO_DIACRITICAL_CFG",SWIG_From_int(static_cast< int >(6360)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIFI_DHCP_ADDR_CFG",SWIG_From_int(static_cast< int >(6361)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WIFI_DHCP_ADDR_CFG",SWIG_From_int(static_cast< int >(6362)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIFI_CLIENT_LIST_INFO",SWIG_From_int(static_cast< int >(6363)));
  SWIG_Python_SetConstant(d, "NET_DVR_REMOTECONTROL_POWER_ON",SWIG_From_int(static_cast< int >(6364)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MULTISTREAM_RELATION_CHAN_CFG",SWIG_From_int(static_cast< int >(6365)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MULTISTREAM_RELATION_CHAN_CFG",SWIG_From_int(static_cast< int >(6366)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEOOUT_RESOLUTION_CFG",SWIG_From_int(static_cast< int >(6367)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEOOUT_RESOLUTION_CFG",SWIG_From_int(static_cast< int >(6368)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUDIOOUT_VOLUME_CFG",SWIG_From_int(static_cast< int >(6369)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AUDIOOUT_VOLUME_CFG",SWIG_From_int(static_cast< int >(6370)));
  SWIG_Python_SetConstant(d, "NET_DVR_INQUEST_PAUSE_CDW",SWIG_From_int(static_cast< int >(6371)));
  SWIG_Python_SetConstant(d, "NET_DVR_INQUEST_RESUME_CDW",SWIG_From_int(static_cast< int >(6372)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_INPUT_CHAN_CFG",SWIG_From_int(static_cast< int >(6373)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_INPUT_CHAN_CFG",SWIG_From_int(static_cast< int >(6374)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_INQUEST_MIX_AUDIOIN_CFG",SWIG_From_int(static_cast< int >(6375)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_INQUEST_MIX_AUDIOIN_CFG",SWIG_From_int(static_cast< int >(6376)));
  SWIG_Python_SetConstant(d, "NET_DVR_CASE_INFO_CTRL",SWIG_From_int(static_cast< int >(6377)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_INQUEST_USER_RIGHT",SWIG_From_int(static_cast< int >(6378)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_INQUEST_USER_RIGHT",SWIG_From_int(static_cast< int >(6379)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_INQUEST_CASE_INFO",SWIG_From_int(static_cast< int >(6380)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_INQUEST_CASE_INFO",SWIG_From_int(static_cast< int >(6381)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FILM_MODE_CFG",SWIG_From_int(static_cast< int >(6387)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FILM_MODE_CFG",SWIG_From_int(static_cast< int >(6388)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FILM_MODE_CFG_CAP",SWIG_From_int(static_cast< int >(6389)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DIRECTED_STRATEGY_CFG",SWIG_From_int(static_cast< int >(6390)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DIRECTED_STRATEGY_CFG",SWIG_From_int(static_cast< int >(6391)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DIRECTED_STRATEGY_CFG_CAP",SWIG_From_int(static_cast< int >(6392)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FRAME_CFG",SWIG_From_int(static_cast< int >(6393)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FRAME_CFG",SWIG_From_int(static_cast< int >(6394)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FRAME_CFG_CAP",SWIG_From_int(static_cast< int >(6395)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUDIO_EFFECTIVE_CFG",SWIG_From_int(static_cast< int >(6396)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AUDIO_EFFECTIVE_CFG",SWIG_From_int(static_cast< int >(6397)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUDIO_EFFECTIVE_CFG_CAP",SWIG_From_int(static_cast< int >(6398)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORD_VIDEO_CFG",SWIG_From_int(static_cast< int >(6399)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RECORD_VIDEO_CFG",SWIG_From_int(static_cast< int >(6400)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OUTPUT_CFG",SWIG_From_int(static_cast< int >(6401)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OUTPUT_CFG",SWIG_From_int(static_cast< int >(6402)));
  SWIG_Python_SetConstant(d, "NET_DVR_CODER_DISPLAY_START",SWIG_From_int(static_cast< int >(6403)));
  SWIG_Python_SetConstant(d, "NET_DVR_CODER_DISPLAY_STOP",SWIG_From_int(static_cast< int >(6404)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WINDOW_STATUS",SWIG_From_int(static_cast< int >(6405)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VQD_LOOP_DIAGNOSE_CFG",SWIG_From_int(static_cast< int >(6406)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VQD_LOOP_DIAGNOSE_CFG",SWIG_From_int(static_cast< int >(6407)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VQD_DIAGNOSE_INFO",SWIG_From_int(static_cast< int >(6408)));
  SWIG_Python_SetConstant(d, "NET_DVR_RECORDING_PUBLISH_FILE",SWIG_From_int(static_cast< int >(6421)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORDING_PUBLISH_FILE_CAP",SWIG_From_int(static_cast< int >(6422)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PUBLISH_PROGRESS",SWIG_From_int(static_cast< int >(6423)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORD_VIDEO_CFG_CAP",SWIG_From_int(static_cast< int >(6424)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RTMP_CFG",SWIG_From_int(static_cast< int >(6425)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RTMP_CFG",SWIG_From_int(static_cast< int >(6426)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RTMP_CFG_CAP",SWIG_From_int(static_cast< int >(6427)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_BACKGROUND_PIC",SWIG_From_int(static_cast< int >(6428)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BACKGROUND_PIC_CFG",SWIG_From_int(static_cast< int >(6429)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BACKGROUND_PIC_INFO",SWIG_From_int(static_cast< int >(6430)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BACKGROUND_PIC_INFO",SWIG_From_int(static_cast< int >(6431)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BACKGROUND_PIC_INFO_CAP",SWIG_From_int(static_cast< int >(6432)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORD_HOST_CAP",SWIG_From_int(static_cast< int >(6433)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_COURSE_LIST",SWIG_From_int(static_cast< int >(6434)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORD_STATUS",SWIG_From_int(static_cast< int >(6435)));
  SWIG_Python_SetConstant(d, "NET_DVR_MANUAL_CURRICULUM_CONTROL",SWIG_From_int(static_cast< int >(6436)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IMAGE_DIFF_DETECTION_CFG",SWIG_From_int(static_cast< int >(6437)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IMAGE_DIFF_DETECTION_CFG",SWIG_From_int(static_cast< int >(6438)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IMAGE_DIFF_DETECTION_CFG_CAP",SWIG_From_int(static_cast< int >(6439)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORDING_PUBLISH_FILE_INFO",SWIG_From_int(static_cast< int >(6440)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RECORDING_PUBLISH_FILE_INFO",SWIG_From_int(static_cast< int >(6441)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECORDING_PUBLISH_FILE_INFO_CAP",SWIG_From_int(static_cast< int >(6442)));
  SWIG_Python_SetConstant(d, "NET_DVR_MANUAL_CURRICULUM_CONTROL_CAP",SWIG_From_int(static_cast< int >(6443)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STATISTIC_DATA_LIST",SWIG_From_int(static_cast< int >(6444)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEVICE_LAN_ENCODE",SWIG_From_int(static_cast< int >(6501)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GBT28181_SERVICE_CFG",SWIG_From_int(static_cast< int >(6503)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GBT28181_SERVICE_CFG",SWIG_From_int(static_cast< int >(6504)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GBT28181_SERVICE_CAPABILITIES",SWIG_From_int(static_cast< int >(6505)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CLOUD_URL",SWIG_From_int(static_cast< int >(6506)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CLOUD_URL_CAP",SWIG_From_int(static_cast< int >(6507)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CLOUD_CFG",SWIG_From_int(static_cast< int >(6508)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CLOUD_CFG",SWIG_From_int(static_cast< int >(6509)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CLOUD_CFG_CAP",SWIG_From_int(static_cast< int >(6510)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CLOUD_UPLOADSTRATEGY",SWIG_From_int(static_cast< int >(6511)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CLOUD_UPLOADSTRATEGY",SWIG_From_int(static_cast< int >(6512)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CLOUDSTORAGE_UPLOADSTRATEGY_CAP",SWIG_From_int(static_cast< int >(6513)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEO_IMAGE_DB_CFG",SWIG_From_int(static_cast< int >(6601)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEO_IMAGE_DB_CFG",SWIG_From_int(static_cast< int >(6602)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEO_IMAGE_DB_CFG_CAP",SWIG_From_int(static_cast< int >(6603)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FILE_INFO_BY_ID",SWIG_From_int(static_cast< int >(6604)));
  SWIG_Python_SetConstant(d, "NET_DVR_QUERY_FILE_INFO_CAP",SWIG_From_int(static_cast< int >(6605)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_FILE_FROM_DB",SWIG_From_int(static_cast< int >(6606)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEO_IMAGE_DB_CAP",SWIG_From_int(static_cast< int >(6607)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIGURE",SWIG_From_int(static_cast< int >(6610)));
  SWIG_Python_SetConstant(d, "NET_DVR_SYNC_IPC_PASSWD",SWIG_From_int(static_cast< int >(6621)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VEHICLE_BLACKLST_SCHEDULE",SWIG_From_int(static_cast< int >(6622)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VEHICLE_BLACKLST_SCHEDULE",SWIG_From_int(static_cast< int >(6623)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VEHICLE_WHITELST_SCHEDULE",SWIG_From_int(static_cast< int >(6624)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VEHICLE_WHITELST_SCHEDULE",SWIG_From_int(static_cast< int >(6625)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VEHICLE_BLACKLIST_EVENT_TRIGGER",SWIG_From_int(static_cast< int >(6626)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VEHICLE_BLACKLIST_EVENT_TRIGGER",SWIG_From_int(static_cast< int >(6627)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VEHICLE_WHITELIST_EVENT_TRIGGER",SWIG_From_int(static_cast< int >(6628)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VEHICLE_WHITELIST_EVENT_TRIGGER",SWIG_From_int(static_cast< int >(6629)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TRAFFIC_CAP",SWIG_From_int(static_cast< int >(6630)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VEHICLE_ALLLIST_EVENT_TRIGGER",SWIG_From_int(static_cast< int >(6631)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VEHICLE_ALLLIST_EVENT_TRIGGER",SWIG_From_int(static_cast< int >(6632)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VEHICLE_OTHERLIST_EVENT_TRIGGER",SWIG_From_int(static_cast< int >(6633)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VEHICLE_OTHERLIST_EVENT_TRIGGER",SWIG_From_int(static_cast< int >(6634)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STORAGEDETECTION_EVENT_TRIGGER",SWIG_From_int(static_cast< int >(6635)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STORAGEDETECTION_EVENT_TRIGGER",SWIG_From_int(static_cast< int >(6636)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STORAGEDETECTION_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(6637)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STORAGEDETECTION_SCHEDULE",SWIG_From_int(static_cast< int >(6638)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STORAGEDETECTION_SCHEDULE",SWIG_From_int(static_cast< int >(6639)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STORAGEDETECTION_STATE",SWIG_From_int(static_cast< int >(6640)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STORAGEDETECTION_RWLOCK",SWIG_From_int(static_cast< int >(6646)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STORAGEDETECTION_RWLOCK_CAPABILITIES",SWIG_From_int(static_cast< int >(6647)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STORAGEDETECTION_RWLOCK",SWIG_From_int(static_cast< int >(6648)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZTRACKSTATUS",SWIG_From_int(static_cast< int >(6649)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STORAGEDETECTION_UNLOCK",SWIG_From_int(static_cast< int >(6653)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STORAGEDETECTION_UNLOCK_CAPABILITIES",SWIG_From_int(static_cast< int >(6654)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SHIPSDETECTION_CFG",SWIG_From_int(static_cast< int >(6655)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SHIPSDETECTION_CFG",SWIG_From_int(static_cast< int >(6656)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SHIPSDETECTION_CAPABILITIES",SWIG_From_int(static_cast< int >(6657)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SHIPSDETECTION_COUNT",SWIG_From_int(static_cast< int >(6658)));
  SWIG_Python_SetConstant(d, "NET_DVR_SHIPSCOUNT_DELETE_CTRL",SWIG_From_int(static_cast< int >(6659)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BAREDATAOVERLAY_CAPABILITIES",SWIG_From_int(static_cast< int >(6660)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BAREDATAOVERLAY_CFG",SWIG_From_int(static_cast< int >(6661)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BAREDATAOVERLAY_CFG",SWIG_From_int(static_cast< int >(6662)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SHIPSDETECTION_SCHEDULE",SWIG_From_int(static_cast< int >(6663)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SHIPSDETECTION_SCHEDULE",SWIG_From_int(static_cast< int >(6664)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SHIPSDETECTION_EVENT_TRIGGER",SWIG_From_int(static_cast< int >(6665)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SHIPSDETECTION_EVENT_TRIGGER",SWIG_From_int(static_cast< int >(6666)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SHIPSDETECTION_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(6667)));
  SWIG_Python_SetConstant(d, "NET_DVR_FIRE_FOCUSZOOM_CTRL",SWIG_From_int(static_cast< int >(6670)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIREDETECTION_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(6671)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIREDETECTION_SCHEDULE",SWIG_From_int(static_cast< int >(6672)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FIREDETECTION_SCHEDULE",SWIG_From_int(static_cast< int >(6673)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MANUALRANGING_CAPABILITIES",SWIG_From_int(static_cast< int >(6675)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MANUALRANGING",SWIG_From_int(static_cast< int >(6677)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MANUALDEICING_CAPABILITIES",SWIG_From_int(static_cast< int >(6678)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MANUALDEICING",SWIG_From_int(static_cast< int >(6679)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MANUALDEICING",SWIG_From_int(static_cast< int >(6680)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMALPOWER_CAPABILITIES",SWIG_From_int(static_cast< int >(6689)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMALPOWER",SWIG_From_int(static_cast< int >(6690)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_THERMALPOWER",SWIG_From_int(static_cast< int >(6691)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZABSOLUTEEX_CAPABILITIES",SWIG_From_int(static_cast< int >(6695)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZABSOLUTEEX",SWIG_From_int(static_cast< int >(6696)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PTZABSOLUTEEX",SWIG_From_int(static_cast< int >(6697)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CRUISE_CAPABILITIES",SWIG_From_int(static_cast< int >(6698)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CRUISE_INFO",SWIG_From_int(static_cast< int >(6699)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TEMP_HUMI_CAPABILITIES",SWIG_From_int(static_cast< int >(6700)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TEMP_HUMI_INFO",SWIG_From_int(static_cast< int >(6701)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MANUALTHERM_INFO",SWIG_From_int(static_cast< int >(6706)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MANUALTHERM_CAPABILITIES",SWIG_From_int(static_cast< int >(6707)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MANUALTHERM",SWIG_From_int(static_cast< int >(6708)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ACCESSORY_CARD_INFO_CAPABILITIES",SWIG_From_int(static_cast< int >(6709)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ACCESSORY_CARD_INFO",SWIG_From_int(static_cast< int >(6710)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMINTELL_CAPABILITIES",SWIG_From_int(static_cast< int >(6711)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMINTELL",SWIG_From_int(static_cast< int >(6712)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_THERMINTELL",SWIG_From_int(static_cast< int >(6713)));
  SWIG_Python_SetConstant(d, "NET_GET_CRUISEPOINT_V50",SWIG_From_int(static_cast< int >(6714)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MANUALTHERM_BASIC_CAPABILITIES",SWIG_From_int(static_cast< int >(6715)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MANUALTHERM_BASICPARAM",SWIG_From_int(static_cast< int >(6716)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MANUALTHERM_BASICPARAM",SWIG_From_int(static_cast< int >(6717)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIRESHIELDMASK_CAPABILITIES",SWIG_From_int(static_cast< int >(6718)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HIDDEN_INFORMATION_CAPABILITIES",SWIG_From_int(static_cast< int >(6720)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_HIDDEN_INFORMATION",SWIG_From_int(static_cast< int >(6721)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_HIDDEN_INFORMATION",SWIG_From_int(static_cast< int >(6722)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FIRESHIELDMASK_CFG",SWIG_From_int(static_cast< int >(6723)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIRESHIELDMASK_CFG",SWIG_From_int(static_cast< int >(6724)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SMOKESHIELDMASK_CAPABILITIES",SWIG_From_int(static_cast< int >(6725)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SMOKESHIELDMASK_CFG",SWIG_From_int(static_cast< int >(6726)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SMOKESHIELDMASK_CFG",SWIG_From_int(static_cast< int >(6727)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AREASCAN_CAPABILITIES",SWIG_From_int(static_cast< int >(6728)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AREASCAN_CFG",SWIG_From_int(static_cast< int >(6730)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_AREASCAN_CFG",SWIG_From_int(static_cast< int >(6731)));
  SWIG_Python_SetConstant(d, "NET_DVR_AREASCAN_INIT_CTRL",SWIG_From_int(static_cast< int >(6732)));
  SWIG_Python_SetConstant(d, "NET_DVR_AREASCAN_CONFIRM_CTRL",SWIG_From_int(static_cast< int >(6733)));
  SWIG_Python_SetConstant(d, "NET_DVR_AREASCAN_STOP_CTRL",SWIG_From_int(static_cast< int >(6734)));
  SWIG_Python_SetConstant(d, "NET_DVR_SAVE_SCANZOOM_CTRL",SWIG_From_int(static_cast< int >(6735)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCANZOOM_CTRL",SWIG_From_int(static_cast< int >(6736)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_FIRESHIELDMASK_CTRL",SWIG_From_int(static_cast< int >(6737)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_SMOKESHIELDMASK_CTRL",SWIG_From_int(static_cast< int >(6738)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DENSEFOG_EVENT_TRIGGER",SWIG_From_int(static_cast< int >(6740)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DENSEFOG_EVENT_TRIGGER",SWIG_From_int(static_cast< int >(6741)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DENSEFOGDETECTION_CFG",SWIG_From_int(static_cast< int >(6742)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DENSEFOGDETECTION_CFG",SWIG_From_int(static_cast< int >(6743)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DENSEFOGDETECTION_CAPABILITIES",SWIG_From_int(static_cast< int >(6744)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMOMETRY_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(6750)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMOMETRY_SCHEDULE",SWIG_From_int(static_cast< int >(6751)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_THERMOMETRY_SCHEDULE",SWIG_From_int(static_cast< int >(6752)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TEMPERTURE_SCHEDULE_CAPABILITIES",SWIG_From_int(static_cast< int >(6753)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TEMPERTURE_SCHEDULE",SWIG_From_int(static_cast< int >(6754)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TEMPERTURE_SCHEDULE",SWIG_From_int(static_cast< int >(6755)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SEARCH_LOG_CAPABILITIES",SWIG_From_int(static_cast< int >(6756)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VEHICLEFLOW",SWIG_From_int(static_cast< int >(6758)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IPADDR_FILTERCFG_V50",SWIG_From_int(static_cast< int >(6759)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IPADDR_FILTERCFG_V50",SWIG_From_int(static_cast< int >(6760)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TEMPHUMSENSOR_CAPABILITIES",SWIG_From_int(static_cast< int >(6761)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TEMPHUMSENSOR",SWIG_From_int(static_cast< int >(6762)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TEMPHUMSENSOR",SWIG_From_int(static_cast< int >(6763)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMOMETRY_MODE_CAPABILITIES",SWIG_From_int(static_cast< int >(6764)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMOMETRY_MODE",SWIG_From_int(static_cast< int >(6765)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_THERMOMETRY_MODE",SWIG_From_int(static_cast< int >(6766)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMAL_PIP_CAPABILITIES",SWIG_From_int(static_cast< int >(6767)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMAL_PIP",SWIG_From_int(static_cast< int >(6768)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_THERMAL_PIP",SWIG_From_int(static_cast< int >(6769)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMAL_INTELRULEDISPLAY_CAPABILITIES",SWIG_From_int(static_cast< int >(6770)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMAL_INTELRULE_DISPLAY",SWIG_From_int(static_cast< int >(6771)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_THERMAL_INTELRULE_DISPLAY",SWIG_From_int(static_cast< int >(6772)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMAL_ALGVERSION",SWIG_From_int(static_cast< int >(6773)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CURRENT_LOCK_CAPABILITIES",SWIG_From_int(static_cast< int >(6774)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CURRENT_LOCK",SWIG_From_int(static_cast< int >(6775)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CURRENT_LOCK",SWIG_From_int(static_cast< int >(6776)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_MANUALTHERM_RULE",SWIG_From_int(static_cast< int >(6778)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_UPGRADE_INFO",SWIG_From_int(static_cast< int >(6779)));
  SWIG_Python_SetConstant(d, "NET_DVR_SWITCH_TRANSFER",SWIG_From_int(static_cast< int >(7000)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MB_POWERCTRLPARA",SWIG_From_int(static_cast< int >(8000)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MB_POWERCTRLPARA",SWIG_From_int(static_cast< int >(8001)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUTOBACKUPPARA",SWIG_From_int(static_cast< int >(8002)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AUTOBACKUPPARA",SWIG_From_int(static_cast< int >(8003)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MB_GPSPARA",SWIG_From_int(static_cast< int >(8004)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MB_GPSPARA",SWIG_From_int(static_cast< int >(8005)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MB_SENSORINPARA",SWIG_From_int(static_cast< int >(8006)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MB_SENSORINPARA",SWIG_From_int(static_cast< int >(8007)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GSENSORPARA",SWIG_From_int(static_cast< int >(8008)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GSENSORPARA",SWIG_From_int(static_cast< int >(8009)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MB_DOWNLOADSVRPARA",SWIG_From_int(static_cast< int >(8010)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MB_DOWNLOADSVRPARA",SWIG_From_int(static_cast< int >(8011)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PLATERECOG_PARA",SWIG_From_int(static_cast< int >(8012)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PLATERECOG_PARA",SWIG_From_int(static_cast< int >(8013)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ENFORCESYS_PARA",SWIG_From_int(static_cast< int >(8014)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ENFORCESYS_PARA",SWIG_From_int(static_cast< int >(8015)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_GPS_DATA",SWIG_From_int(static_cast< int >(8016)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ANALOG_ALARMINCFG",SWIG_From_int(static_cast< int >(8017)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ANALOG_ALARMINCFG",SWIG_From_int(static_cast< int >(8018)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SYSTEM_CAPABILITIES",SWIG_From_int(static_cast< int >(8100)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EAGLEEYE_CAPABILITIES",SWIG_From_int(static_cast< int >(8101)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SLAVECAMERA_CALIB_V51",SWIG_From_int(static_cast< int >(8102)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SLAVECAMERA_CALIB_V51",SWIG_From_int(static_cast< int >(8103)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_GOTOSCENE",SWIG_From_int(static_cast< int >(8105)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PTZ_NOTIFICATION",SWIG_From_int(static_cast< int >(8201)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PTZ_NOTIFICATION",SWIG_From_int(static_cast< int >(8202)));
  SWIG_Python_SetConstant(d, "NET_DVR_MATRIX_WALL_SET",SWIG_From_int(static_cast< int >(9001)));
  SWIG_Python_SetConstant(d, "NET_DVR_MATRIX_WALL_GET",SWIG_From_int(static_cast< int >(9002)));
  SWIG_Python_SetConstant(d, "NET_DVR_WALLWIN_GET",SWIG_From_int(static_cast< int >(9003)));
  SWIG_Python_SetConstant(d, "NET_DVR_WALLWIN_SET",SWIG_From_int(static_cast< int >(9004)));
  SWIG_Python_SetConstant(d, "NET_DVR_WALLWINPARAM_SET",SWIG_From_int(static_cast< int >(9005)));
  SWIG_Python_SetConstant(d, "NET_DVR_WALLWINPARAM_GET",SWIG_From_int(static_cast< int >(9006)));
  SWIG_Python_SetConstant(d, "NET_DVR_WALLSCENEPARAM_GET",SWIG_From_int(static_cast< int >(9007)));
  SWIG_Python_SetConstant(d, "NET_DVR_WALLSCENEPARAM_SET",SWIG_From_int(static_cast< int >(9008)));
  SWIG_Python_SetConstant(d, "NET_DVR_MATRIX_GETWINSTATUS",SWIG_From_int(static_cast< int >(9009)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WINASSOCIATEDDEVINFO",SWIG_From_int(static_cast< int >(9010)));
  SWIG_Python_SetConstant(d, "NET_DVR_WALLOUTPUT_GET",SWIG_From_int(static_cast< int >(9011)));
  SWIG_Python_SetConstant(d, "NET_DVR_WALLOUTPUT_SET",SWIG_From_int(static_cast< int >(9012)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_UNITEDMATRIXSYSTEM",SWIG_From_int(static_cast< int >(9013)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WALL_CFG",SWIG_From_int(static_cast< int >(9014)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WALL_CFG",SWIG_From_int(static_cast< int >(9015)));
  SWIG_Python_SetConstant(d, "NET_DVR_CLOSE_ALL_WND",SWIG_From_int(static_cast< int >(9016)));
  SWIG_Python_SetConstant(d, "NET_DVR_SWITCH_WIN_TOP",SWIG_From_int(static_cast< int >(9017)));
  SWIG_Python_SetConstant(d, "NET_DVR_SWITCH_WIN_BOTTOM",SWIG_From_int(static_cast< int >(9018)));
  SWIG_Python_SetConstant(d, "NET_DVR_CLOSE_ALL_WND_V41",SWIG_From_int(static_cast< int >(9019)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WALL_WINDOW_V41",SWIG_From_int(static_cast< int >(9020)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WALL_WINDOW_V41",SWIG_From_int(static_cast< int >(9021)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CURRENT_SCENE_V41",SWIG_From_int(static_cast< int >(9022)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WALL_SCENE_PARAM_V41",SWIG_From_int(static_cast< int >(9023)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WALL_SCENE_PARAM_V41",SWIG_From_int(static_cast< int >(9024)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MATRIX_LOGO_CFG",SWIG_From_int(static_cast< int >(9025)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MATRIX_LOGO_CFG",SWIG_From_int(static_cast< int >(9026)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIN_LOGO_CFG",SWIG_From_int(static_cast< int >(9027)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WIN_LOGO_CFG",SWIG_From_int(static_cast< int >(9028)));
  SWIG_Python_SetConstant(d, "NET_DVR_DELETE_LOGO",SWIG_From_int(static_cast< int >(9029)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DISPLAY_EFFECT_CFG",SWIG_From_int(static_cast< int >(9030)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DISPLAY_EFFECT_CFG",SWIG_From_int(static_cast< int >(9031)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEC_PLAY_REMOTE_FILE",SWIG_From_int(static_cast< int >(9032)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEC_PLAY_REMOTE_FILE_V50",SWIG_From_int(static_cast< int >(9314)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIN_ZOOM_STATUS",SWIG_From_int(static_cast< int >(9033)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_MATRIX_LOGOCFG",SWIG_From_int(static_cast< int >(9034)));
  SWIG_Python_SetConstant(d, "NET_DVR_SIMULATE_REMOTE_CONTROL",SWIG_From_int(static_cast< int >(9035)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCREEN_SIGNAL_CFG",SWIG_From_int(static_cast< int >(9036)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCREEN_SIGNAL_CFG",SWIG_From_int(static_cast< int >(9037)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCREEN_SPLICE_CFG",SWIG_From_int(static_cast< int >(9038)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCREEN_SPLICE_CFG",SWIG_From_int(static_cast< int >(9039)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCREEN_FAN_WORK_MODE",SWIG_From_int(static_cast< int >(9040)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCREEN_FAN_WORK_MODE",SWIG_From_int(static_cast< int >(9041)));
  SWIG_Python_SetConstant(d, "NET_DVR_SHOW_SCREEN_WORK_STATUS",SWIG_From_int(static_cast< int >(9044)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VGA_CFG",SWIG_From_int(static_cast< int >(9045)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VGA_CFG",SWIG_From_int(static_cast< int >(9046)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCREEN_MENU_CFG",SWIG_From_int(static_cast< int >(9048)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCREEN_MENU_CFG",SWIG_From_int(static_cast< int >(9049)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCREEN_DISPLAY_CFG",SWIG_From_int(static_cast< int >(9050)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCREEN_DISPLAY_CFG",SWIG_From_int(static_cast< int >(9051)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FUSION_CFG",SWIG_From_int(static_cast< int >(9052)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FUSION_CFG",SWIG_From_int(static_cast< int >(9053)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PIP_CFG",SWIG_From_int(static_cast< int >(9060)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PIP_CFG",SWIG_From_int(static_cast< int >(9061)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DEFOG_LCD",SWIG_From_int(static_cast< int >(9073)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEFOG_LCD",SWIG_From_int(static_cast< int >(9074)));
  SWIG_Python_SetConstant(d, "NET_DVR_SHOW_IP",SWIG_From_int(static_cast< int >(9075)));
  SWIG_Python_SetConstant(d, "NET_DVR_SCREEN_MAINTENANCE_WALL",SWIG_From_int(static_cast< int >(9076)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCREEN_POS",SWIG_From_int(static_cast< int >(9077)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCREEN_POS",SWIG_From_int(static_cast< int >(9078)));
  SWIG_Python_SetConstant(d, "NET_DVR_SCREEN_INDEX_SET",SWIG_From_int(static_cast< int >(9079)));
  SWIG_Python_SetConstant(d, "NET_DVR_SCREEN_INDEX_GET",SWIG_From_int(static_cast< int >(9080)));
  SWIG_Python_SetConstant(d, "NET_DVR_SCREEN_SPLICE_SET",SWIG_From_int(static_cast< int >(9081)));
  SWIG_Python_SetConstant(d, "NET_DVR_SCREEN_SPLICE_GET",SWIG_From_int(static_cast< int >(9082)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCREEN_PARAM",SWIG_From_int(static_cast< int >(9083)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCREEN_PARAM",SWIG_From_int(static_cast< int >(9084)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SWITCH_CFG",SWIG_From_int(static_cast< int >(9085)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SWITCH_CFG",SWIG_From_int(static_cast< int >(9086)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_POWERON_DELAY_CFG",SWIG_From_int(static_cast< int >(9087)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_POWERON_DELAY_CFG",SWIG_From_int(static_cast< int >(9088)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCREEN_POSITION",SWIG_From_int(static_cast< int >(9089)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCREEN_POSITION",SWIG_From_int(static_cast< int >(9090)));
  SWIG_Python_SetConstant(d, "NET_DVR_SCREEN_SCENE_CONTROL",SWIG_From_int(static_cast< int >(9091)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CURRENT_SCREEN_SCENE",SWIG_From_int(static_cast< int >(9092)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCREEN_SCENE_PARAM",SWIG_From_int(static_cast< int >(9093)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCREEN_SCENE_PARAM",SWIG_From_int(static_cast< int >(9094)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EXTERNAL_MATRIX_RELATION",SWIG_From_int(static_cast< int >(9095)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LCD_AUDIO_CFG",SWIG_From_int(static_cast< int >(9096)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LCD_AUDIO_CFG",SWIG_From_int(static_cast< int >(9097)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LCD_WORK_STATE",SWIG_From_int(static_cast< int >(9098)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BOOT_LOGO_CFG",SWIG_From_int(static_cast< int >(9099)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BOOT_LOGO_CFG",SWIG_From_int(static_cast< int >(9100)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STREAM_DST_COMPRESSIONINFO",SWIG_From_int(static_cast< int >(9101)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_STREAM_DST_COMPRESSIONINFO",SWIG_From_int(static_cast< int >(9102)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_STREAM_TRANS_STATUS",SWIG_From_int(static_cast< int >(9103)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEVICE_TRANS_STATUS",SWIG_From_int(static_cast< int >(9104)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALLSTREAM_SRC_INFO",SWIG_From_int(static_cast< int >(9105)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BIG_SCREEN_AUDIO",SWIG_From_int(static_cast< int >(9106)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BIG_SCREEN_AUDIO",SWIG_From_int(static_cast< int >(9107)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEV_WORK_MODE",SWIG_From_int(static_cast< int >(9108)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DEV_WORK_MODE",SWIG_From_int(static_cast< int >(9109)));
  SWIG_Python_SetConstant(d, "NET_DVR_APPLY_TRANS_CHAN",SWIG_From_int(static_cast< int >(9110)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DISPCHAN_CFG",SWIG_From_int(static_cast< int >(9111)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DISPCHAN_CFG",SWIG_From_int(static_cast< int >(9112)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEC_CHAN_STATUS",SWIG_From_int(static_cast< int >(9113)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DISP_CHAN_STATUS",SWIG_From_int(static_cast< int >(9114)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMIN_STATUS",SWIG_From_int(static_cast< int >(9115)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMOUT_STATUS",SWIG_From_int(static_cast< int >(9116)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUDIO_CHAN_STATUS",SWIG_From_int(static_cast< int >(9117)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEO_AUDIOIN_CFG",SWIG_From_int(static_cast< int >(9118)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEO_AUDIOIN_CFG",SWIG_From_int(static_cast< int >(9119)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BASEMAP_CFG",SWIG_From_int(static_cast< int >(9120)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BASEMAP_CFG",SWIG_From_int(static_cast< int >(9121)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIRTUAL_SCREEN_CFG",SWIG_From_int(static_cast< int >(9122)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIRTUAL_SCREEN_CFG",SWIG_From_int(static_cast< int >(9123)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BASEMAP_WIN_CFG",SWIG_From_int(static_cast< int >(9124)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BASEMAP_WIN_CFG",SWIG_From_int(static_cast< int >(9125)));
  SWIG_Python_SetConstant(d, "NET_DVR_DELETE_PICTURE",SWIG_From_int(static_cast< int >(9126)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BASEMAP_PIC_INFO",SWIG_From_int(static_cast< int >(9127)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BASEMAP_WIN_CFG_V40",SWIG_From_int(static_cast< int >(9128)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BASEMAP_WIN_CFG_V40",SWIG_From_int(static_cast< int >(9129)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEC_VCA_CFG",SWIG_From_int(static_cast< int >(9130)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DEC_VCA_CFG",SWIG_From_int(static_cast< int >(9131)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VS_INPUT_CHAN_INIT_ALL",SWIG_From_int(static_cast< int >(9132)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VS_INPUT_CHAN_INIT_ALL",SWIG_From_int(static_cast< int >(9133)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VS_INPUT_CHAN_INIT",SWIG_From_int(static_cast< int >(9134)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VS_INPUT_CHAN_CFG",SWIG_From_int(static_cast< int >(9135)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TERMINAL_CONFERENCE_STATUS",SWIG_From_int(static_cast< int >(9136)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TERMINAL_INPUT_CFG_CAP",SWIG_From_int(static_cast< int >(9137)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TERMINAL_INPUT_CFG",SWIG_From_int(static_cast< int >(9138)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TERMINAL_INPUT_CFG",SWIG_From_int(static_cast< int >(9139)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CONFERENCE_REGION_CAP",SWIG_From_int(static_cast< int >(9140)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CONFERENCE_REGION",SWIG_From_int(static_cast< int >(9141)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CONFERENCE_REGION",SWIG_From_int(static_cast< int >(9142)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TERMINAL_CALL_CFG_CAP",SWIG_From_int(static_cast< int >(9143)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TERMINAL_CALL_CFG",SWIG_From_int(static_cast< int >(9144)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TERMINAL_CALL_CFG",SWIG_From_int(static_cast< int >(9145)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TERMINAL_CTRL_CAP",SWIG_From_int(static_cast< int >(9146)));
  SWIG_Python_SetConstant(d, "NET_DVR_TERMINAL_CTRL",SWIG_From_int(static_cast< int >(9147)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CALL_QUERY_CAP",SWIG_From_int(static_cast< int >(9148)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CALLINFO_BY_COND",SWIG_From_int(static_cast< int >(9149)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FUSION_SCALE",SWIG_From_int(static_cast< int >(9150)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FUSION_SCALE",SWIG_From_int(static_cast< int >(9151)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VCS_CAP",SWIG_From_int(static_cast< int >(9152)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TERMINAL_GK_CFG_CAP",SWIG_From_int(static_cast< int >(9153)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TERMINAL_GK_CFG",SWIG_From_int(static_cast< int >(9154)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TERMINAL_GK_CFG",SWIG_From_int(static_cast< int >(9155)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MCU_CONFERENCESEARCH_CAP",SWIG_From_int(static_cast< int >(9156)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VS_INPUT_CHAN_CFG",SWIG_From_int(static_cast< int >(9157)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VS_NETSRC_CFG",SWIG_From_int(static_cast< int >(9158)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VS_NETSRC_CFG",SWIG_From_int(static_cast< int >(9159)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LLDP_CFG",SWIG_From_int(static_cast< int >(9160)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LLDP_CFG",SWIG_From_int(static_cast< int >(9161)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LLDP_CAP",SWIG_From_int(static_cast< int >(9162)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIBER_CONVERT_BASIC_INFO",SWIG_From_int(static_cast< int >(9163)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIBER_CONVERT_WORK_STATE",SWIG_From_int(static_cast< int >(9164)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIBER_CONVERT_TOPOLOGY",SWIG_From_int(static_cast< int >(9165)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FC_PORT_REMARKS",SWIG_From_int(static_cast< int >(9166)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_FC_PORT_REMARKS",SWIG_From_int(static_cast< int >(9167)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PORT_REMARKS_CAP",SWIG_From_int(static_cast< int >(9168)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MCU_CONFERENCECONTROL_CAP",SWIG_From_int(static_cast< int >(9169)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MCU_TERMINALCONTROL_CAP",SWIG_From_int(static_cast< int >(9170)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MCU_TERIMINALGROUP_CAP",SWIG_From_int(static_cast< int >(9171)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MCU_TERMINAL_CAP",SWIG_From_int(static_cast< int >(9174)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MCU_CONFERENCE_CAP",SWIG_From_int(static_cast< int >(9175)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MCU_GK_CFG_CAP",SWIG_From_int(static_cast< int >(9176)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MCU_GK_SERVER_CAP",SWIG_From_int(static_cast< int >(9177)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EDID_CFG_FILE_INFO",SWIG_From_int(static_cast< int >(9178)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EDID_CFG_FILE_INFO_LIST",SWIG_From_int(static_cast< int >(9179)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_EDID_CFG_FILE_INFO",SWIG_From_int(static_cast< int >(9180)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEL_EDID_CFG_FILE_INFO",SWIG_From_int(static_cast< int >(9181)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_EDID_CFG_FILE_INFO_CAP",SWIG_From_int(static_cast< int >(9182)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SUBWND_DECODE_OSD",SWIG_From_int(static_cast< int >(9183)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SUBWND_DECODE_OSD_ALL",SWIG_From_int(static_cast< int >(9184)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SUBWND_DECODE_OSD",SWIG_From_int(static_cast< int >(9185)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SUBWND_DECODE_OSD_CAP",SWIG_From_int(static_cast< int >(9186)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DECODE_CHANNEL_OSD",SWIG_From_int(static_cast< int >(9187)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DECODE_CHANNEL_OSD",SWIG_From_int(static_cast< int >(9188)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OUTPUT_PIC_INFO",SWIG_From_int(static_cast< int >(9200)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OUTPUT_PIC_INFO",SWIG_From_int(static_cast< int >(9201)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OUTPUT_PIC_WIN_CFG",SWIG_From_int(static_cast< int >(9202)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OUTPUT_PIC_WIN_CFG",SWIG_From_int(static_cast< int >(9203)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OUTPUT_ALL_PIC_WIN_CFG",SWIG_From_int(static_cast< int >(9204)));
  SWIG_Python_SetConstant(d, "NET_DVR_DELETE_OUPUT_PIC",SWIG_From_int(static_cast< int >(9205)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OUTPUT_OSD_CFG",SWIG_From_int(static_cast< int >(9206)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OUTPUT_OSD_CFG",SWIG_From_int(static_cast< int >(9207)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OUTPUT_ALL_OSD_CFG",SWIG_From_int(static_cast< int >(9208)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CHAN_RELATION",SWIG_From_int(static_cast< int >(9209)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CHAN_RELATION",SWIG_From_int(static_cast< int >(9210)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_CHAN_RELATION",SWIG_From_int(static_cast< int >(9211)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NS_RING_CFG",SWIG_From_int(static_cast< int >(9212)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_NS_RING_CFG",SWIG_From_int(static_cast< int >(9213)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NS_RING_STATUS",SWIG_From_int(static_cast< int >(9214)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OPTICAL_PORT_INFO",SWIG_From_int(static_cast< int >(9220)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OPTICAL_PORT_INFO",SWIG_From_int(static_cast< int >(9221)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OPTICAL_CHAN_RELATE_CFG",SWIG_From_int(static_cast< int >(9222)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OPTICAL_CHAN_RELATE_CFG",SWIG_From_int(static_cast< int >(9223)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WIN_ROAM_SWITCH_CFG",SWIG_From_int(static_cast< int >(9224)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WIN_ROAM_SWITCH_CFG",SWIG_From_int(static_cast< int >(9225)));
  SWIG_Python_SetConstant(d, "NET_DVR_START_SCREEN_CRTL",SWIG_From_int(static_cast< int >(9226)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCREEN_FLIE_LIST",SWIG_From_int(static_cast< int >(9227)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCREEN_FILEINFO",SWIG_From_int(static_cast< int >(9228)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCREEN_FILEINFO",SWIG_From_int(static_cast< int >(9229)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_OUTPUT_CFG",SWIG_From_int(static_cast< int >(9230)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_OUTPUT_CFG",SWIG_From_int(static_cast< int >(9231)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_OUTPUT_PORT_CFG",SWIG_From_int(static_cast< int >(9232)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_OUTPUT_PORT_CFG",SWIG_From_int(static_cast< int >(9233)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_DISPLAY_AREA_CFG",SWIG_From_int(static_cast< int >(9234)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_DISPLAY_AREA_CFG",SWIG_From_int(static_cast< int >(9235)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_PORT_CFG",SWIG_From_int(static_cast< int >(9236)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_PORT_CFG",SWIG_From_int(static_cast< int >(9237)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_DISPLAY_CFG",SWIG_From_int(static_cast< int >(9238)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_DISPLAY_CFG",SWIG_From_int(static_cast< int >(9239)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALL_LED_PORT_CFG",SWIG_From_int(static_cast< int >(9240)));
  SWIG_Python_SetConstant(d, "NET_DVR_SAVE_LED_CONFIGURATION",SWIG_From_int(static_cast< int >(9241)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_TEST_SIGNAL_CFG",SWIG_From_int(static_cast< int >(9242)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_TEST_SIGNAL_CFG",SWIG_From_int(static_cast< int >(9243)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_NOSIGNAL_CFG",SWIG_From_int(static_cast< int >(9244)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_NOSIGNAL_CFG",SWIG_From_int(static_cast< int >(9245)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_INPUT_CFG",SWIG_From_int(static_cast< int >(9246)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_INPUT_CFG",SWIG_From_int(static_cast< int >(9247)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_RECV_GAMMA_CFG",SWIG_From_int(static_cast< int >(9248)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_RECV_GAMMA_CFG",SWIG_From_int(static_cast< int >(9249)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_RECV_CFG",SWIG_From_int(static_cast< int >(9250)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_RECV_CFG",SWIG_From_int(static_cast< int >(9251)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_RECV_ADVANCED_CFG",SWIG_From_int(static_cast< int >(9252)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_RECV_ADVANCED_CFG",SWIG_From_int(static_cast< int >(9253)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_SCREEN_DISPLAY_CFG",SWIG_From_int(static_cast< int >(9254)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_LED_SCREEN_DISPLAY_CFG",SWIG_From_int(static_cast< int >(9255)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_INSERTPLAY_PROGRESS",SWIG_From_int(static_cast< int >(9273)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCREEN_CONFIG",SWIG_From_int(static_cast< int >(9260)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SCREEN_CONFIG",SWIG_From_int(static_cast< int >(9261)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCREEN_CONFIG_CAP",SWIG_From_int(static_cast< int >(9262)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SCHEDULE_PUBLISH_PROGRESS",SWIG_From_int(static_cast< int >(9271)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_PUBLISH_UPGRADE_PROGRESS",SWIG_From_int(static_cast< int >(9272)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_INPUT_BOARD_CFG",SWIG_From_int(static_cast< int >(9281)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_INPUT_BOARD_CFG_LIST",SWIG_From_int(static_cast< int >(9282)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_INPUT_BOARD_CFG",SWIG_From_int(static_cast< int >(9283)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_INPUT_SOURCE_TEXT_CAP",SWIG_From_int(static_cast< int >(9284)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_INPUT_SOURCE_TEXT_CFG",SWIG_From_int(static_cast< int >(9285)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_INPUT_SOURCE_TEXT_CFG_LSIT",SWIG_From_int(static_cast< int >(9286)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_INPUT_SOURCE_TEXT_CFG",SWIG_From_int(static_cast< int >(9287)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_INPUT_SOURCE_TEXT_CFG_LIST",SWIG_From_int(static_cast< int >(9288)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_INPUT_SOURCE_RESOLUTION_CAP",SWIG_From_int(static_cast< int >(9289)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_INPUT_SOURCE_RESOLUTION_CFG",SWIG_From_int(static_cast< int >(9290)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_INPUT_SOURCE_RESOLUTION_CFG_LIST",SWIG_From_int(static_cast< int >(9291)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_INPUT_SOURCE_RESOLUTION_CFG",SWIG_From_int(static_cast< int >(9292)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_INPUT_SOURCE_RESOLUTION_CFG_LIST",SWIG_From_int(static_cast< int >(9293)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_LED_AREA_INFO_LIST",SWIG_From_int(static_cast< int >(9295)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DISPINPUT_CFG",SWIG_From_int(static_cast< int >(9296)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DISPINPUT_CFG_LIST",SWIG_From_int(static_cast< int >(9297)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_DISPINPUT_CFG",SWIG_From_int(static_cast< int >(9298)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DISPINPUT_CFG_CAP",SWIG_From_int(static_cast< int >(9299)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CURRENT_VALID_PORT",SWIG_From_int(static_cast< int >(9300)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ONLINE_UPGRADE",SWIG_From_int(static_cast< int >(9301)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ONLINEUPGRADE_PROGRESS",SWIG_From_int(static_cast< int >(9302)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIRMWARECODE",SWIG_From_int(static_cast< int >(9303)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ONLINEUPGRADE_SERVER",SWIG_From_int(static_cast< int >(9304)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ONLINEUPGRADE_VERSION",SWIG_From_int(static_cast< int >(9305)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RECOMMEN_VERSION",SWIG_From_int(static_cast< int >(9306)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ONLINEUPGRADE_ABILITY",SWIG_From_int(static_cast< int >(9309)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIBER_CONVERT_BASIC_INFO_V50",SWIG_From_int(static_cast< int >(9310)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_FIBER_CONVERT_WORK_STATE_V50",SWIG_From_int(static_cast< int >(9311)));
  SWIG_Python_SetConstant(d, "NET_SDK_LED_SCREEN_CHECK",SWIG_From_int(static_cast< int >(9312)));
  SWIG_Python_SetConstant(d, "NET_SDK_GENERATE_OUTPUT_CONTROL",SWIG_From_int(static_cast< int >(9315)));
  SWIG_Python_SetConstant(d, "NET_SDK_GET_MATRIX_STATUS_V51",SWIG_From_int(static_cast< int >(9313)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARM_LINKAGE_CFG",SWIG_From_int(static_cast< int >(9316)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARM_LINKAGE_CFG",SWIG_From_int(static_cast< int >(9317)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RS485_WORK_MODE",SWIG_From_int(static_cast< int >(10001)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_RS485_WORK_MODE",SWIG_From_int(static_cast< int >(10002)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SPLITTER_TRANS_CHAN_CFG",SWIG_From_int(static_cast< int >(10003)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SPLITTER_TRANS_CHAN_CFG",SWIG_From_int(static_cast< int >(10004)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RS485_PROTOCOL_VERSION",SWIG_From_int(static_cast< int >(10301)));
  SWIG_Python_SetConstant(d, "NET_DVR_ALARMHOST_REGISTER_DETECTOR",SWIG_From_int(static_cast< int >(10302)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SIP_CFG",SWIG_From_int(static_cast< int >(11001)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SIP_CFG",SWIG_From_int(static_cast< int >(11002)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IP_VIEW_DEVCFG",SWIG_From_int(static_cast< int >(11003)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IP_VIEW_DEVCFG",SWIG_From_int(static_cast< int >(11004)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IP_VIEW_AUDIO_CFG",SWIG_From_int(static_cast< int >(11005)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IP_VIEW_AUDIO_CFG",SWIG_From_int(static_cast< int >(11006)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_IP_VIEW_CALL_CFG",SWIG_From_int(static_cast< int >(11007)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IP_VIEW_CALL_CFG",SWIG_From_int(static_cast< int >(11008)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_AUDIO_LIMIT_ALARM_CFG",SWIG_From_int(static_cast< int >(11009)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AUDIO_LIMIT_ALARM_CFG",SWIG_From_int(static_cast< int >(11010)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_BUTTON_DOWN_ALARM_CFG",SWIG_From_int(static_cast< int >(11011)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_BUTTON_DOWN_ALARM_CFG",SWIG_From_int(static_cast< int >(11012)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ISCSI_CFG",SWIG_From_int(static_cast< int >(11070)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ISCSI_CFG",SWIG_From_int(static_cast< int >(11071)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SECURITYMODE",SWIG_From_int(static_cast< int >(12004)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TEMP_HUMI",SWIG_From_int(static_cast< int >(12005)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ALARMSOUNDMODE",SWIG_From_int(static_cast< int >(12006)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ALARMSOUNDMODE",SWIG_From_int(static_cast< int >(12007)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_IPDEVICE_ACTIVATED",SWIG_From_int(static_cast< int >(13000)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DIGITAL_CHAN_SECURITY_STATUS",SWIG_From_int(static_cast< int >(13001)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ACTIVATE_IPC_ABILITY",SWIG_From_int(static_cast< int >(13003)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEO_INTERCOM_DEVICEID_CFG",SWIG_From_int(static_cast< int >(16001)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEO_INTERCOM_DEVICEID_CFG",SWIG_From_int(static_cast< int >(16002)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_PRIVILEGE_PASSWORD",SWIG_From_int(static_cast< int >(16003)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_OPERATION_TIME_CFG",SWIG_From_int(static_cast< int >(16004)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_OPERATION_TIME_CFG",SWIG_From_int(static_cast< int >(16005)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEO_INTERCOM_RELATEDEV_CFG",SWIG_From_int(static_cast< int >(16006)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEO_INTERCOM_RELATEDEV_CFG",SWIG_From_int(static_cast< int >(16007)));
  SWIG_Python_SetConstant(d, "NET_DVR_REMOTECONTROL_NOTICE_DATA",SWIG_From_int(static_cast< int >(16008)));
  SWIG_Python_SetConstant(d, "NET_DVR_REMOTECONTROL_GATEWAY",SWIG_From_int(static_cast< int >(16009)));
  SWIG_Python_SetConstant(d, "NET_DVR_REMOTECONTROL_OPERATION_AUTH",SWIG_From_int(static_cast< int >(16010)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEO_INTERCOM_IOIN_CFG",SWIG_From_int(static_cast< int >(16016)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEO_INTERCOM_IOIN_CFG",SWIG_From_int(static_cast< int >(16017)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEO_INTERCOM_IOOUT_CFG",SWIG_From_int(static_cast< int >(16018)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEO_INTERCOM_IOOUT_CFG",SWIG_From_int(static_cast< int >(16019)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ELEVATORCONTROL_CFG",SWIG_From_int(static_cast< int >(16020)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ELEVATORCONTROL_CFG",SWIG_From_int(static_cast< int >(16021)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEOINTERCOM_STREAM",SWIG_From_int(static_cast< int >(16022)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEOINTERCOM_STREAM",SWIG_From_int(static_cast< int >(16023)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_WDR_CFG",SWIG_From_int(static_cast< int >(16024)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_WDR_CFG",SWIG_From_int(static_cast< int >(16025)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIS_DEVINFO",SWIG_From_int(static_cast< int >(16026)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIS_REGISTER_INFO",SWIG_From_int(static_cast< int >(16027)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ELEVATORCONTROL_CFG_V40",SWIG_From_int(static_cast< int >(16028)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ELEVATORCONTROL_CFG_V40",SWIG_From_int(static_cast< int >(16029)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CALL_ROOM_CFG",SWIG_From_int(static_cast< int >(16030)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CALL_ROOM_CFG",SWIG_From_int(static_cast< int >(16031)));
  SWIG_Python_SetConstant(d, "NET_DVR_VIDEO_CALL_SIGNAL_PROCESS",SWIG_From_int(static_cast< int >(16032)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CALLER_INFO",SWIG_From_int(static_cast< int >(16033)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_CALL_STATUS",SWIG_From_int(static_cast< int >(16034)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SERVER_DEVICE_INFO",SWIG_From_int(static_cast< int >(16035)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_CALL_SIGNAL",SWIG_From_int(static_cast< int >(16036)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_VIDEO_INTERCOM_ALARM_CFG",SWIG_From_int(static_cast< int >(16037)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_VIDEO_INTERCOM_ALARM_CFG",SWIG_From_int(static_cast< int >(16038)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_RING_LIST",SWIG_From_int(static_cast< int >(16039)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ROOM_CUSTOM_CFG",SWIG_From_int(static_cast< int >(16040)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ROOM_CUSTOM_CFG",SWIG_From_int(static_cast< int >(16041)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ELEVATORCONTROL_CFG_V50",SWIG_From_int(static_cast< int >(16042)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_ELEVATORCONTROL_CFG_V50",SWIG_From_int(static_cast< int >(16043)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SIP_CFG_V50",SWIG_From_int(static_cast< int >(16044)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_SIP_CFG_V50",SWIG_From_int(static_cast< int >(16045)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_NOTICE_VIDEO_DATA",SWIG_From_int(static_cast< int >(16050)));
  SWIG_Python_SetConstant(d, "NET_DVR_DEBUGINFO_START",SWIG_From_int(static_cast< int >(18000)));
  SWIG_Python_SetConstant(d, "NET_DVR_AUTO_TEST_START",SWIG_From_int(static_cast< int >(18001)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_SELFCHECK_RESULT",SWIG_From_int(static_cast< int >(20000)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TEST_COMMAND",SWIG_From_int(static_cast< int >(20001)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TEST_DEVMODULE",SWIG_From_int(static_cast< int >(20002)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TEST_DEVMODULE",SWIG_From_int(static_cast< int >(20003)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AUTOFOCUS_TEST",SWIG_From_int(static_cast< int >(20004)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHECK_USER_STATUS",SWIG_From_int(static_cast< int >(20005)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TEST_COMMAND",SWIG_From_int(static_cast< int >(20010)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DIAL_SWITCH_CFG",SWIG_From_int(static_cast< int >(20200)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_AGING_TRICK_SCAN",SWIG_From_int(static_cast< int >(20201)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_ECCENTRIC_CORRECT_STATE",SWIG_From_int(static_cast< int >(20202)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_THERMOMETRYRULE_TEMPERATURE_INFO",SWIG_From_int(static_cast< int >(23001)));
  SWIG_Python_SetConstant(d, "NET_DVR_T1_TEST_CMD",SWIG_From_int(static_cast< int >(131073)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_MEMU_OUTPUT_MODE",SWIG_From_int(static_cast< int >(155649)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_MEMU_OUTPUT_MODE",SWIG_From_int(static_cast< int >(155650)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_DEV_LOGIN_RET_INFO",SWIG_From_int(static_cast< int >(16777200)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TEST_VERSION_HEAD",SWIG_From_int(static_cast< int >(268435441)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TEST_VERSION_HEAD",SWIG_From_int(static_cast< int >(268435442)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TEST_VERSION_HEAD_V1",SWIG_From_int(static_cast< int >(268435443)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TEST_VERSION_HEAD_V1",SWIG_From_int(static_cast< int >(268435444)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TEST_VERSION_HEAD_V2",SWIG_From_int(static_cast< int >(268435445)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TEST_VERSION_HEAD_V2",SWIG_From_int(static_cast< int >(268435446)));
  SWIG_Python_SetConstant(d, "NET_DVR_GET_TEST_VERSION_HEAD_ONLY_0",SWIG_From_int(static_cast< int >(268435447)));
  SWIG_Python_SetConstant(d, "NET_DVR_SET_TEST_VERSION_HEAD_ONLY_0",SWIG_From_int(static_cast< int >(268435448)));
  SWIG_Python_SetConstant(d, "MAX_LOCAL_ADDR_LEN",SWIG_From_int(static_cast< int >(96)));
  SWIG_Python_SetConstant(d, "MAX_COUNTRY_NAME_LEN",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "MAJOR_ALARM",SWIG_From_int(static_cast< int >(0x1)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_IN",SWIG_From_int(static_cast< int >(0x1)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_OUT",SWIG_From_int(static_cast< int >(0x2)));
  SWIG_Python_SetConstant(d, "MINOR_MOTDET_START",SWIG_From_int(static_cast< int >(0x3)));
  SWIG_Python_SetConstant(d, "MINOR_MOTDET_STOP",SWIG_From_int(static_cast< int >(0x4)));
  SWIG_Python_SetConstant(d, "MINOR_HIDE_ALARM_START",SWIG_From_int(static_cast< int >(0x5)));
  SWIG_Python_SetConstant(d, "MINOR_HIDE_ALARM_STOP",SWIG_From_int(static_cast< int >(0x6)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ALARM_START",SWIG_From_int(static_cast< int >(0x7)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ALARM_STOP",SWIG_From_int(static_cast< int >(0x8)));
  SWIG_Python_SetConstant(d, "MINOR_ITS_ALARM_START",SWIG_From_int(static_cast< int >(0x09)));
  SWIG_Python_SetConstant(d, "MINOR_ITS_ALARM_STOP",SWIG_From_int(static_cast< int >(0x0A)));
  SWIG_Python_SetConstant(d, "MINOR_NETALARM_START",SWIG_From_int(static_cast< int >(0x0b)));
  SWIG_Python_SetConstant(d, "MINOR_NETALARM_STOP",SWIG_From_int(static_cast< int >(0x0c)));
  SWIG_Python_SetConstant(d, "MINOR_NETALARM_RESUME",SWIG_From_int(static_cast< int >(0x0d)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_ALARM_START",SWIG_From_int(static_cast< int >(0x0e)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_ALARM_STOP",SWIG_From_int(static_cast< int >(0x0f)));
  SWIG_Python_SetConstant(d, "MINOR_PIR_ALARM_START",SWIG_From_int(static_cast< int >(0x10)));
  SWIG_Python_SetConstant(d, "MINOR_PIR_ALARM_STOP",SWIG_From_int(static_cast< int >(0x11)));
  SWIG_Python_SetConstant(d, "MINOR_CALLHELP_ALARM_START",SWIG_From_int(static_cast< int >(0x12)));
  SWIG_Python_SetConstant(d, "MINOR_CALLHELP_ALARM_STOP",SWIG_From_int(static_cast< int >(0x13)));
  SWIG_Python_SetConstant(d, "MINOR_IPCHANNEL_ALARMIN_START",SWIG_From_int(static_cast< int >(0x14)));
  SWIG_Python_SetConstant(d, "MINOR_IPCHANNEL_ALARMIN_STOP",SWIG_From_int(static_cast< int >(0x15)));
  SWIG_Python_SetConstant(d, "MINOR_DETECTFACE_ALARM_START",SWIG_From_int(static_cast< int >(0x16)));
  SWIG_Python_SetConstant(d, "MINOR_DETECTFACE_ALARM_STOP",SWIG_From_int(static_cast< int >(0x17)));
  SWIG_Python_SetConstant(d, "MINOR_VQD_ALARM_START",SWIG_From_int(static_cast< int >(0x18)));
  SWIG_Python_SetConstant(d, "MINOR_VQD_ALARM_STOP",SWIG_From_int(static_cast< int >(0x19)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_SECNECHANGE_DETECTION",SWIG_From_int(static_cast< int >(0x1a)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_REGION_EXITING_BEGIN",SWIG_From_int(static_cast< int >(0x1b)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_REGION_EXITING_END",SWIG_From_int(static_cast< int >(0x1c)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_LOITERING_BEGIN",SWIG_From_int(static_cast< int >(0x1d)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_LOITERING_END",SWIG_From_int(static_cast< int >(0x1e)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ALARM_LINE_DETECTION_BEGIN",SWIG_From_int(static_cast< int >(0x20)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ALARM_LINE_DETECTION_END",SWIG_From_int(static_cast< int >(0x21)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ALARM_INTRUDE_BEGIN",SWIG_From_int(static_cast< int >(0x22)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ALARM_INTRUDE_END",SWIG_From_int(static_cast< int >(0x23)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ALARM_AUDIOINPUT",SWIG_From_int(static_cast< int >(0x24)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ALARM_AUDIOABNORMAL",SWIG_From_int(static_cast< int >(0x25)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_DEFOCUS_DETECTION_BEGIN",SWIG_From_int(static_cast< int >(0x26)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_DEFOCUS_DETECTION_END",SWIG_From_int(static_cast< int >(0x27)));
  SWIG_Python_SetConstant(d, "MINOR_EXT_ALARM",SWIG_From_int(static_cast< int >(0x28)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_FACE_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x29)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_REGION_ENTRANCE_BEGIN",SWIG_From_int(static_cast< int >(0x2a)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_REGION_ENTRANCE_END",SWIG_From_int(static_cast< int >(0x2b)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_PEOPLE_GATHERING_BEGIN",SWIG_From_int(static_cast< int >(0x2c)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_PEOPLE_GATHERING_END",SWIG_From_int(static_cast< int >(0x2d)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_FAST_MOVING_BEGIN",SWIG_From_int(static_cast< int >(0x2e)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_FAST_MOVING_END",SWIG_From_int(static_cast< int >(0x2f)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_FACE_ALARM_END",SWIG_From_int(static_cast< int >(0x30)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_SCENE_CHANGE_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x31)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_SCENE_CHANGE_ALARM_END",SWIG_From_int(static_cast< int >(0x32)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ALARM_AUDIOINPUT_BEGIN",SWIG_From_int(static_cast< int >(0x33)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ALARM_AUDIOINPUT_END",SWIG_From_int(static_cast< int >(0x34)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ALARM_AUDIOABNORMAL_BEGIN",SWIG_From_int(static_cast< int >(0x35)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ALARM_AUDIOABNORMAL_END",SWIG_From_int(static_cast< int >(0x36)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_LECTURE_DETECTION_BEGIN",SWIG_From_int(static_cast< int >(0x37)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_LECTURE_DETECTION_END",SWIG_From_int(static_cast< int >(0x38)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ALARM_AUDIOSTEEPDROP",SWIG_From_int(static_cast< int >(0x39)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ANSWER_DETECTION_BEGIN",SWIG_From_int(static_cast< int >(0x3a)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ANSWER_DETECTION_END",SWIG_From_int(static_cast< int >(0x3b)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_PARKING_BEGIN",SWIG_From_int(static_cast< int >(0x3c)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_PARKING_END",SWIG_From_int(static_cast< int >(0x3d)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_UNATTENDED_BAGGAGE_BEGIN",SWIG_From_int(static_cast< int >(0x3e)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_UNATTENDED_BAGGAGE_END",SWIG_From_int(static_cast< int >(0x3f)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_OBJECT_REMOVAL_BEGIN",SWIG_From_int(static_cast< int >(0x40)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_OBJECT_REMOVAL_END",SWIG_From_int(static_cast< int >(0x41)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_VEHICLE_ALARM_START",SWIG_From_int(static_cast< int >(0x46)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_VEHICLE_ALARM_STOP",SWIG_From_int(static_cast< int >(0x47)));
  SWIG_Python_SetConstant(d, "MINOR_THERMAL_FIREDETECTION",SWIG_From_int(static_cast< int >(0x48)));
  SWIG_Python_SetConstant(d, "MINOR_THERMAL_FIREDETECTION_END",SWIG_From_int(static_cast< int >(0x49)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_VANDALPROOF_BEGIN",SWIG_From_int(static_cast< int >(0x50)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_VANDALPROOF_END",SWIG_From_int(static_cast< int >(0x51)));
  SWIG_Python_SetConstant(d, "MINOR_FACESNAP_MATCH_ALARM_START",SWIG_From_int(static_cast< int >(0x55)));
  SWIG_Python_SetConstant(d, "MINOR_FACESNAP_MATCH_ALARM_STOP",SWIG_From_int(static_cast< int >(0x56)));
  SWIG_Python_SetConstant(d, "MINOR_WHITELIST_FACESNAP_MATCH_ALARM_START",SWIG_From_int(static_cast< int >(0x57)));
  SWIG_Python_SetConstant(d, "MINOR_WHITELIST_FACESNAP_MATCH_ALARM_STOP",SWIG_From_int(static_cast< int >(0x58)));
  SWIG_Python_SetConstant(d, "MINOR_THERMAL_SHIPSDETECTION",SWIG_From_int(static_cast< int >(0x5a)));
  SWIG_Python_SetConstant(d, "MINOR_THERMAL_THERMOMETRY_EARLYWARNING_BEGIN",SWIG_From_int(static_cast< int >(0x5b)));
  SWIG_Python_SetConstant(d, "MINOR_THERMAL_THERMOMETRY_EARLYWARNING_END",SWIG_From_int(static_cast< int >(0x5c)));
  SWIG_Python_SetConstant(d, "MINOR_THERMAL_THERMOMETRY_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x5d)));
  SWIG_Python_SetConstant(d, "MINOR_THERMAL_THERMOMETRY_ALARM_END",SWIG_From_int(static_cast< int >(0x5e)));
  SWIG_Python_SetConstant(d, "MINOR_THERMAL_THERMOMETRY_DIFF_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x5f)));
  SWIG_Python_SetConstant(d, "MINOR_THERMAL_THERMOMETRY_DIFF_ALARM_END",SWIG_From_int(static_cast< int >(0x60)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_THERMOMETRY_ALARM",SWIG_From_int(static_cast< int >(0x63)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_DENSEFOGDETECTION_BEGIN",SWIG_From_int(static_cast< int >(0x6e)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_DENSEFOGDETECTION_END",SWIG_From_int(static_cast< int >(0x6f)));
  SWIG_Python_SetConstant(d, "MINOR_RUNNING_ALARM",SWIG_From_int(static_cast< int >(0x70)));
  SWIG_Python_SetConstant(d, "MINOR_RETENTION_ALARM",SWIG_From_int(static_cast< int >(0x71)));
  SWIG_Python_SetConstant(d, "MINOR_SAFETY_HELMET_ALARM_START",SWIG_From_int(static_cast< int >(0x72)));
  SWIG_Python_SetConstant(d, "MINOR_SAFETY_HELMET_ALARM_STOP",SWIG_From_int(static_cast< int >(0x73)));
  SWIG_Python_SetConstant(d, "MINOR_HFPD_ALARM_START",SWIG_From_int(static_cast< int >(0x74)));
  SWIG_Python_SetConstant(d, "MINOR_HFPD_ALARM_STOP",SWIG_From_int(static_cast< int >(0x75)));
  SWIG_Python_SetConstant(d, "MINOR_MIXED_TARGET_ALARM_START",SWIG_From_int(static_cast< int >(0x76)));
  SWIG_Python_SetConstant(d, "MINOR_MIXED_TARGET_ALARM_STOP",SWIG_From_int(static_cast< int >(0x77)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_PLAY_CELLPHONE_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x78)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_PLAY_CELLPHONE_ALARM_END",SWIG_From_int(static_cast< int >(0x79)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_GET_UP_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x80)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_GET_UP_ALARM_END",SWIG_From_int(static_cast< int >(0x81)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ADV_REACH_HEIGHT_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x82)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ADV_REACH_HEIGHT_ALARM_END",SWIG_From_int(static_cast< int >(0x83)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_TOILET_TARRY_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x84)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_TOILET_TARRY_ALARM_END",SWIG_From_int(static_cast< int >(0x85)));
  SWIG_Python_SetConstant(d, "MINOR_HUMAN_RECOGNITION_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x86)));
  SWIG_Python_SetConstant(d, "MINOR_HUMAN_RECOGNITION_ALARM_END",SWIG_From_int(static_cast< int >(0x87)));
  SWIG_Python_SetConstant(d, "MINOR_STUDENTS_STOODUP_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x88)));
  SWIG_Python_SetConstant(d, "MINOR_STUDENTS_STOODUP_ALARM_END",SWIG_From_int(static_cast< int >(0x89)));
  SWIG_Python_SetConstant(d, "MINOR_FRAMES_PEOPLE_COUNTING_ALARM",SWIG_From_int(static_cast< int >(0x8a)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_SNAP_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x8b)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_SNAP_ALARM_END",SWIG_From_int(static_cast< int >(0x8c)));
  SWIG_Python_SetConstant(d, "MINOR_TEACHER_BEHAVIOR_DETECT_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x8d)));
  SWIG_Python_SetConstant(d, "MINOR_TEACHER_BEHAVIOR_DETECT_ALARM_END",SWIG_From_int(static_cast< int >(0x8e)));
  SWIG_Python_SetConstant(d, "MINOR_PERIMETER_CAPTURE_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x8f)));
  SWIG_Python_SetConstant(d, "MINOR_PERIMETER_CAPTURE_ALARM_END",SWIG_From_int(static_cast< int >(0x90)));
  SWIG_Python_SetConstant(d, "MINOR_UNREGISTERED_STREET_VENDOR_ALARM",SWIG_From_int(static_cast< int >(0x91)));
  SWIG_Python_SetConstant(d, "MINOR_PERSON_QUEUE_TIME_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x92)));
  SWIG_Python_SetConstant(d, "MINOR_PERSON_QUEUE_TIME_ALARM_END",SWIG_From_int(static_cast< int >(0x93)));
  SWIG_Python_SetConstant(d, "MINOR_PERSON_QUEUE_COUNTING_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x94)));
  SWIG_Python_SetConstant(d, "MINOR_PERSON_QUEUE_COUNTING_ALARM_END",SWIG_From_int(static_cast< int >(0x95)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_SNAP_MATCH_FAILURE_ALARM_START",SWIG_From_int(static_cast< int >(0x96)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_SNAP_MATCH_FAILURE_ALARM_END",SWIG_From_int(static_cast< int >(0x97)));
  SWIG_Python_SetConstant(d, "MINOR_ACCESS_CONTROLLER_EVENT",SWIG_From_int(static_cast< int >(0x100)));
  SWIG_Python_SetConstant(d, "MINOR_VIDEO_INTERCOM_EVENT",SWIG_From_int(static_cast< int >(0x101)));
  SWIG_Python_SetConstant(d, "MINOR_GJD_EVENT",SWIG_From_int(static_cast< int >(0x102)));
  SWIG_Python_SetConstant(d, "MINOR_LUMINITE_EVENT",SWIG_From_int(static_cast< int >(0x103)));
  SWIG_Python_SetConstant(d, "MINOR_OPTEX_EVENT",SWIG_From_int(static_cast< int >(0x104)));
  SWIG_Python_SetConstant(d, "MINOR_CAMERA_DETECTOR_EVENT",SWIG_From_int(static_cast< int >(0x105)));
  SWIG_Python_SetConstant(d, "MINOR_SECURITY_CONTROL_PANEL_EVENT",SWIG_From_int(static_cast< int >(0x106)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_SPACE_CHANGE_START",SWIG_From_int(static_cast< int >(0x10c)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_SPACE_CHANGE_STOP",SWIG_From_int(static_cast< int >(0x10d)));
  SWIG_Python_SetConstant(d, "MINOR_MANUAL_ALARM",SWIG_From_int(static_cast< int >(0x10e)));
  SWIG_Python_SetConstant(d, "MINOR_DETECTOR_ALARM",SWIG_From_int(static_cast< int >(0x10f)));
  SWIG_Python_SetConstant(d, "MINOR_LINKAGE_ALARM",SWIG_From_int(static_cast< int >(0x110)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_SITUATION_ANALYSIS_START",SWIG_From_int(static_cast< int >(0x111)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_SITUATION_ANALYSIS_STOP",SWIG_From_int(static_cast< int >(0x112)));
  SWIG_Python_SetConstant(d, "MINOR_FIRE_ALARM",SWIG_From_int(static_cast< int >(0x113)));
  SWIG_Python_SetConstant(d, "MINOR_SUPERVISE_ALARM",SWIG_From_int(static_cast< int >(0x114)));
  SWIG_Python_SetConstant(d, "MINOR_SHIELD_ALARM",SWIG_From_int(static_cast< int >(0x115)));
  SWIG_Python_SetConstant(d, "MINOR_ABNORMAL_ALARM",SWIG_From_int(static_cast< int >(0x116)));
  SWIG_Python_SetConstant(d, "MINOR_RESIDUAL_CURRENT_ALARM",SWIG_From_int(static_cast< int >(0x117)));
  SWIG_Python_SetConstant(d, "MINOR_TEMPERATURE_ALARM",SWIG_From_int(static_cast< int >(0x118)));
  SWIG_Python_SetConstant(d, "MINOR_ARC_ALARM",SWIG_From_int(static_cast< int >(0x119)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_YARD_TARRY_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x11a)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_YARD_TARRY_ALARM_END",SWIG_From_int(static_cast< int >(0x11b)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_KEY_PERSON_GET_UP_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x11c)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_KEY_PERSON_GET_UP_ALARM_END",SWIG_From_int(static_cast< int >(0x11d)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_SIT_QUIETLY_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x11e)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_SIT_QUIETLY_ALARM_END",SWIG_From_int(static_cast< int >(0x11f)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_STAND_UP_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x120)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_STAND_UP_ALARM_END",SWIG_From_int(static_cast< int >(0x121)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_REACH_HIGHT_ALARM_BEGIN",SWIG_From_int(static_cast< int >(0x122)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_REACH_HIGHT_ALARM_END",SWIG_From_int(static_cast< int >(0x123)));
  SWIG_Python_SetConstant(d, "MINOR_LFPD_ALARM_START",SWIG_From_int(static_cast< int >(0x124)));
  SWIG_Python_SetConstant(d, "MINOR_LFPD_ALARM_STOP",SWIG_From_int(static_cast< int >(0x125)));
  SWIG_Python_SetConstant(d, "MINOR_DREDGERDETECTION_ALARM",SWIG_From_int(static_cast< int >(0x126)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMIN_SHORT_CIRCUIT",SWIG_From_int(static_cast< int >(0x400)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMIN_BROKEN_CIRCUIT",SWIG_From_int(static_cast< int >(0x401)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMIN_EXCEPTION",SWIG_From_int(static_cast< int >(0x402)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMIN_RESUME",SWIG_From_int(static_cast< int >(0x403)));
  SWIG_Python_SetConstant(d, "MINOR_HOST_DESMANTLE_ALARM",SWIG_From_int(static_cast< int >(0x404)));
  SWIG_Python_SetConstant(d, "MINOR_HOST_DESMANTLE_RESUME",SWIG_From_int(static_cast< int >(0x405)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_READER_DESMANTLE_ALARM",SWIG_From_int(static_cast< int >(0x406)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_READER_DESMANTLE_RESUME",SWIG_From_int(static_cast< int >(0x407)));
  SWIG_Python_SetConstant(d, "MINOR_CASE_SENSOR_ALARM",SWIG_From_int(static_cast< int >(0x408)));
  SWIG_Python_SetConstant(d, "MINOR_CASE_SENSOR_RESUME",SWIG_From_int(static_cast< int >(0x409)));
  SWIG_Python_SetConstant(d, "MINOR_STRESS_ALARM",SWIG_From_int(static_cast< int >(0x40a)));
  SWIG_Python_SetConstant(d, "MINOR_OFFLINE_ECENT_NEARLY_FULL",SWIG_From_int(static_cast< int >(0x40b)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_MAX_AUTHENTICATE_FAIL",SWIG_From_int(static_cast< int >(0x40c)));
  SWIG_Python_SetConstant(d, "MINOR_SD_CARD_FULL",SWIG_From_int(static_cast< int >(0x40d)));
  SWIG_Python_SetConstant(d, "MINOR_LINKAGE_CAPTURE_PIC",SWIG_From_int(static_cast< int >(0x40e)));
  SWIG_Python_SetConstant(d, "MINOR_SECURITY_MODULE_DESMANTLE_ALARM",SWIG_From_int(static_cast< int >(0x40f)));
  SWIG_Python_SetConstant(d, "MINOR_SECURITY_MODULE_DESMANTLE_RESUME",SWIG_From_int(static_cast< int >(0x410)));
  SWIG_Python_SetConstant(d, "MINOR_POS_START_ALARM",SWIG_From_int(static_cast< int >(0x411)));
  SWIG_Python_SetConstant(d, "MINOR_POS_END_ALARM",SWIG_From_int(static_cast< int >(0x412)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_IMAGE_QUALITY_LOW",SWIG_From_int(static_cast< int >(0x413)));
  SWIG_Python_SetConstant(d, "MINOR_FINGE_RPRINT_QUALITY_LOW",SWIG_From_int(static_cast< int >(0x414)));
  SWIG_Python_SetConstant(d, "MINOR_FIRE_IMPORT_SHORT_CIRCUIT",SWIG_From_int(static_cast< int >(0x415)));
  SWIG_Python_SetConstant(d, "MINOR_FIRE_IMPORT_BROKEN_CIRCUIT",SWIG_From_int(static_cast< int >(0x416)));
  SWIG_Python_SetConstant(d, "MINOR_FIRE_IMPORT_RESUME",SWIG_From_int(static_cast< int >(0x417)));
  SWIG_Python_SetConstant(d, "MINOR_FIRE_BUTTON_TRIGGER",SWIG_From_int(static_cast< int >(0x418)));
  SWIG_Python_SetConstant(d, "MINOR_FIRE_BUTTON_RESUME",SWIG_From_int(static_cast< int >(0x419)));
  SWIG_Python_SetConstant(d, "MINOR_MAINTENANCE_BUTTON_TRIGGER",SWIG_From_int(static_cast< int >(0x41a)));
  SWIG_Python_SetConstant(d, "MINOR_MAINTENANCE_BUTTON_RESUME",SWIG_From_int(static_cast< int >(0x41b)));
  SWIG_Python_SetConstant(d, "MINOR_EMERGENCY_BUTTON_TRIGGER",SWIG_From_int(static_cast< int >(0x41c)));
  SWIG_Python_SetConstant(d, "MINOR_EMERGENCY_BUTTON_RESUME",SWIG_From_int(static_cast< int >(0x41d)));
  SWIG_Python_SetConstant(d, "MINOR_DISTRACT_CONTROLLER_ALARM",SWIG_From_int(static_cast< int >(0x41e)));
  SWIG_Python_SetConstant(d, "MINOR_DISTRACT_CONTROLLER_RESUME",SWIG_From_int(static_cast< int >(0x41f)));
  SWIG_Python_SetConstant(d, "MINOR_PERSON_DENSITY_DETECTION_START",SWIG_From_int(static_cast< int >(0x420)));
  SWIG_Python_SetConstant(d, "MINOR_PERSON_DENSITY_DETECTION_END",SWIG_From_int(static_cast< int >(0x421)));
  SWIG_Python_SetConstant(d, "MINOR_CHANNEL_CONTROLLER_DESMANTLE_ALARM",SWIG_From_int(static_cast< int >(0x422)));
  SWIG_Python_SetConstant(d, "MINOR_CHANNEL_CONTROLLER_DESMANTLE_RESUME",SWIG_From_int(static_cast< int >(0x423)));
  SWIG_Python_SetConstant(d, "MINOR_CHANNEL_CONTROLLER_FIRE_IMPORT_ALARM",SWIG_From_int(static_cast< int >(0x424)));
  SWIG_Python_SetConstant(d, "MINOR_CHANNEL_CONTROLLER_FIRE_IMPORT_RESUME",SWIG_From_int(static_cast< int >(0x425)));
  SWIG_Python_SetConstant(d, "MINOR_HEART_RATE_ABNORMAL_BEGIN",SWIG_From_int(static_cast< int >(0x426)));
  SWIG_Python_SetConstant(d, "MINOR_HEART_RATE_ABNORMAL_END",SWIG_From_int(static_cast< int >(0x427)));
  SWIG_Python_SetConstant(d, "MINOR_BLOOD_OXYGEN_ABNORMAL_BEGIN",SWIG_From_int(static_cast< int >(0x428)));
  SWIG_Python_SetConstant(d, "MINOR_BLOOD_OXYGEN_ABNORMAL_END",SWIG_From_int(static_cast< int >(0x429)));
  SWIG_Python_SetConstant(d, "MINOR_SYSTOLIC_BLOOD_PRESSURE_ABNORMAL_BEGIN",SWIG_From_int(static_cast< int >(0x42a)));
  SWIG_Python_SetConstant(d, "MINOR_SYSTOLIC_BLOOD_PRESSURE_ABNORMAL_END",SWIG_From_int(static_cast< int >(0x42b)));
  SWIG_Python_SetConstant(d, "MINOR_DIASTOLIC_BLOOD_PRESSURE_ABNORMAL_BEGIN",SWIG_From_int(static_cast< int >(0x42c)));
  SWIG_Python_SetConstant(d, "MINOR_DIASTOLIC_BLOOD_PRESSURE_ABNORMAL_END",SWIG_From_int(static_cast< int >(0x42d)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_LEAVE_POSITION_START",SWIG_From_int(static_cast< int >(0x42e)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_LEAVE_POSITION_STOP",SWIG_From_int(static_cast< int >(0x42f)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_STOOODUP_START",SWIG_From_int(static_cast< int >(0x430)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_STOOODUP_STOP",SWIG_From_int(static_cast< int >(0x431)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_PEOPLENUM_CHANGE_START",SWIG_From_int(static_cast< int >(0x434)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_PEOPLENUM_CHANGE_STOP",SWIG_From_int(static_cast< int >(0x435)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_RUNNING_START",SWIG_From_int(static_cast< int >(0x438)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_RUNNING_STOP",SWIG_From_int(static_cast< int >(0x439)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_VIOLENT_MOTION_START",SWIG_From_int(static_cast< int >(0x43a)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_VIOLENT_MOTION_STOP",SWIG_From_int(static_cast< int >(0x43b)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_FAIL_DOWN_START",SWIG_From_int(static_cast< int >(0x43c)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_FAIL_DOWN_STOP",SWIG_From_int(static_cast< int >(0x43d)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_RETENTION_START",SWIG_From_int(static_cast< int >(0x43e)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_RETENTION_STOP",SWIG_From_int(static_cast< int >(0x43f)));
  SWIG_Python_SetConstant(d, "MINOR_PRINTER_OUT_OF_PAPER",SWIG_From_int(static_cast< int >(0x440)));
  SWIG_Python_SetConstant(d, "MINOR_LEGAL_EVENT_NEARLY_FULL",SWIG_From_int(static_cast< int >(0x442)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM1",SWIG_From_int(static_cast< int >(0x900)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM2",SWIG_From_int(static_cast< int >(0x901)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM3",SWIG_From_int(static_cast< int >(0x902)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM4",SWIG_From_int(static_cast< int >(0x903)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM5",SWIG_From_int(static_cast< int >(0x904)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM6",SWIG_From_int(static_cast< int >(0x905)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM7",SWIG_From_int(static_cast< int >(0x906)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM8",SWIG_From_int(static_cast< int >(0x907)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM9",SWIG_From_int(static_cast< int >(0x908)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM10",SWIG_From_int(static_cast< int >(0x909)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM11",SWIG_From_int(static_cast< int >(0x90a)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM12",SWIG_From_int(static_cast< int >(0x90b)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM13",SWIG_From_int(static_cast< int >(0x90c)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM14",SWIG_From_int(static_cast< int >(0x90d)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM15",SWIG_From_int(static_cast< int >(0x90e)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM16",SWIG_From_int(static_cast< int >(0x90f)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM17",SWIG_From_int(static_cast< int >(0x910)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM18",SWIG_From_int(static_cast< int >(0x911)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM19",SWIG_From_int(static_cast< int >(0x912)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM20",SWIG_From_int(static_cast< int >(0x913)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM21",SWIG_From_int(static_cast< int >(0x914)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM22",SWIG_From_int(static_cast< int >(0x915)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM23",SWIG_From_int(static_cast< int >(0x916)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM24",SWIG_From_int(static_cast< int >(0x917)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM25",SWIG_From_int(static_cast< int >(0x918)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM26",SWIG_From_int(static_cast< int >(0x919)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM27",SWIG_From_int(static_cast< int >(0x91a)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM28",SWIG_From_int(static_cast< int >(0x91b)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM29",SWIG_From_int(static_cast< int >(0x91c)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM30",SWIG_From_int(static_cast< int >(0x91d)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM31",SWIG_From_int(static_cast< int >(0x91e)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM32",SWIG_From_int(static_cast< int >(0x91f)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM33",SWIG_From_int(static_cast< int >(0x920)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM34",SWIG_From_int(static_cast< int >(0x921)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM35",SWIG_From_int(static_cast< int >(0x922)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM36",SWIG_From_int(static_cast< int >(0x923)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM37",SWIG_From_int(static_cast< int >(0x924)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM38",SWIG_From_int(static_cast< int >(0x925)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM39",SWIG_From_int(static_cast< int >(0x926)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM40",SWIG_From_int(static_cast< int >(0x927)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM41",SWIG_From_int(static_cast< int >(0x928)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM42",SWIG_From_int(static_cast< int >(0x929)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM43",SWIG_From_int(static_cast< int >(0x92a)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM44",SWIG_From_int(static_cast< int >(0x92b)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM45",SWIG_From_int(static_cast< int >(0x92c)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM46",SWIG_From_int(static_cast< int >(0x92d)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM47",SWIG_From_int(static_cast< int >(0x92e)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM48",SWIG_From_int(static_cast< int >(0x92f)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM49",SWIG_From_int(static_cast< int >(0x930)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM50",SWIG_From_int(static_cast< int >(0x931)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM51",SWIG_From_int(static_cast< int >(0x932)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM52",SWIG_From_int(static_cast< int >(0x933)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM53",SWIG_From_int(static_cast< int >(0x934)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM54",SWIG_From_int(static_cast< int >(0x935)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM55",SWIG_From_int(static_cast< int >(0x936)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM56",SWIG_From_int(static_cast< int >(0x937)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM57",SWIG_From_int(static_cast< int >(0x938)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM58",SWIG_From_int(static_cast< int >(0x939)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM59",SWIG_From_int(static_cast< int >(0x93a)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM60",SWIG_From_int(static_cast< int >(0x93b)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM61",SWIG_From_int(static_cast< int >(0x93c)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM62",SWIG_From_int(static_cast< int >(0x93d)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM63",SWIG_From_int(static_cast< int >(0x93e)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_CUSTOM64",SWIG_From_int(static_cast< int >(0x93f)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_HIJIACK_FINGER_ALARM",SWIG_From_int(static_cast< int >(0x950)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_HIJIACK_PASSWORD_ALARM",SWIG_From_int(static_cast< int >(0x951)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_PRY_DOOR_ALARM",SWIG_From_int(static_cast< int >(0x952)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_LOCKED_ALARM",SWIG_From_int(static_cast< int >(0x953)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_BATTERLOW_ALARM",SWIG_From_int(static_cast< int >(0x954)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_BLACKLIST_DOOR_ALARM",SWIG_From_int(static_cast< int >(0x955)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_OFFLINE_ALARM",SWIG_From_int(static_cast< int >(0x956)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_UNCLOSED_ALARM",SWIG_From_int(static_cast< int >(0x957)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_NO_HOME_ALARM",SWIG_From_int(static_cast< int >(0x958)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_MAGNETOMETER_ALARM",SWIG_From_int(static_cast< int >(0x959)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_IR_DETECTOR_ALARM",SWIG_From_int(static_cast< int >(0x95a)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_FP_LOCKED_ALARM",SWIG_From_int(static_cast< int >(0x95b)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_PASSWORD_LOCKED_ALARM",SWIG_From_int(static_cast< int >(0x95c)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_HIJIACK_ALARM",SWIG_From_int(static_cast< int >(0x95d)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SHORT_CIRCUIT",SWIG_From_int(static_cast< int >(0x1001)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_BROKEN_CIRCUIT",SWIG_From_int(static_cast< int >(0x1002)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_RESET",SWIG_From_int(static_cast< int >(0x1003)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_NORMAL",SWIG_From_int(static_cast< int >(0x1004)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_PASSWORD_ERROR",SWIG_From_int(static_cast< int >(0x1005)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ID_CARD_ILLEGALLY",SWIG_From_int(static_cast< int >(0x1006)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_KEYPAD_REMOVE",SWIG_From_int(static_cast< int >(0x1007)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_KEYPAD_REMOVE_RESTORE",SWIG_From_int(static_cast< int >(0x1008)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_BELOW_ALARM_LIMIT1",SWIG_From_int(static_cast< int >(0x1011)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_BELOW_ALARM_LIMIT2",SWIG_From_int(static_cast< int >(0x1012)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_BELOW_ALARM_LIMIT3",SWIG_From_int(static_cast< int >(0x1013)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_BELOW_ALARM_LIMIT4",SWIG_From_int(static_cast< int >(0x1014)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ABOVE_ALARM_LIMIT1",SWIG_From_int(static_cast< int >(0x1015)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ABOVE_ALARM_LIMIT2",SWIG_From_int(static_cast< int >(0x1016)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ABOVE_ALARM_LIMIT3",SWIG_From_int(static_cast< int >(0x1017)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ABOVE_ALARM_LIMIT4",SWIG_From_int(static_cast< int >(0x1018)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_VIRTUAL_DEFENCE_BANDIT",SWIG_From_int(static_cast< int >(0x1021)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_VIRTUAL_DEFENCE_FIRE",SWIG_From_int(static_cast< int >(0x1022)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_VIRTUAL_DEFENCE_URGENT",SWIG_From_int(static_cast< int >(0x1023)));
  SWIG_Python_SetConstant(d, "MINOR_UPS_ALARM",SWIG_From_int(static_cast< int >(0x1028)));
  SWIG_Python_SetConstant(d, "MINOR_ELECTRICITY_METER_ALARM",SWIG_From_int(static_cast< int >(0x1029)));
  SWIG_Python_SetConstant(d, "MINOR_SWITCH_POWER_ALARM",SWIG_From_int(static_cast< int >(0x1030)));
  SWIG_Python_SetConstant(d, "MINOR_GAS_DETECT_SYS_ALARM",SWIG_From_int(static_cast< int >(0x1031)));
  SWIG_Python_SetConstant(d, "MINOR_TRANSFORMER_TEMPRATURE_ALARM",SWIG_From_int(static_cast< int >(0x1032)));
  SWIG_Python_SetConstant(d, "MINOR_TEMP_HUMI_ALARM",SWIG_From_int(static_cast< int >(0x1033)));
  SWIG_Python_SetConstant(d, "MINOR_UPS_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1034)));
  SWIG_Python_SetConstant(d, "MINOR_ELECTRICITY_METER_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1035)));
  SWIG_Python_SetConstant(d, "MINOR_SWITCH_POWER_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1036)));
  SWIG_Python_SetConstant(d, "MINOR_GAS_DETECT_SYS_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1037)));
  SWIG_Python_SetConstant(d, "MINOR_TRANSFORMER_TEMPRATURE_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1038)));
  SWIG_Python_SetConstant(d, "MINOR_TEMP_HUMI_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1039)));
  SWIG_Python_SetConstant(d, "MINOR_WATER_LEVEL_SENSOR_ALARM",SWIG_From_int(static_cast< int >(0x1040)));
  SWIG_Python_SetConstant(d, "MINOR_WATER_LEVEL_SENSOR_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1041)));
  SWIG_Python_SetConstant(d, "MINOR_DUST_NOISE_ALARM",SWIG_From_int(static_cast< int >(0x1042)));
  SWIG_Python_SetConstant(d, "MINOR_DUST_NOISE_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1043)));
  SWIG_Python_SetConstant(d, "MINOR_ENVIRONMENTAL_LOGGER_ALARM",SWIG_From_int(static_cast< int >(0x1044)));
  SWIG_Python_SetConstant(d, "MINOR_ENVIRONMENTAL_LOGGER_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1045)));
  SWIG_Python_SetConstant(d, "MINOR_TRIGGER_TAMPER",SWIG_From_int(static_cast< int >(0x1046)));
  SWIG_Python_SetConstant(d, "MINOR_TRIGGER_TAMPER_RESTORE",SWIG_From_int(static_cast< int >(0x1047)));
  SWIG_Python_SetConstant(d, "MINOR_EMERGENCY_CALL_HELP_ALARM",SWIG_From_int(static_cast< int >(0x1048)));
  SWIG_Python_SetConstant(d, "MINOR_EMERGENCY_CALL_HELP_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1049)));
  SWIG_Python_SetConstant(d, "MINOR_CONSULTING_ALARM",SWIG_From_int(static_cast< int >(0x1050)));
  SWIG_Python_SetConstant(d, "MINOR_CONSULTING_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1051)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ZONE_MODULE_REMOVE",SWIG_From_int(static_cast< int >(0x1052)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ZONE_MODULE_RESET",SWIG_From_int(static_cast< int >(0x1053)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_WIND_SPEED_ALARM",SWIG_From_int(static_cast< int >(0x1054)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_WIND_SPEED_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1055)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_GENERATE_OUTPUT_ALARM",SWIG_From_int(static_cast< int >(0x1056)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_GENERATE_OUTPUT_RESTORE",SWIG_From_int(static_cast< int >(0x1057)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_SOAK_ALARM",SWIG_From_int(static_cast< int >(0x1058)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_SOAK_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1059)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_SOLAR_POWER_ALARM",SWIG_From_int(static_cast< int >(0x1060)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_SOLAR_POWER_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1061)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_SF6_ALARM",SWIG_From_int(static_cast< int >(0x1062)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_SF6_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1063)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_WEIGHT_ALARM",SWIG_From_int(static_cast< int >(0x1064)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_WEIGHT_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1065)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_WEATHER_ALARM",SWIG_From_int(static_cast< int >(0x1066)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_WEATHER_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1067)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_FUEL_GAS_ALARM",SWIG_From_int(static_cast< int >(0x1068)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_FUEL_GAS_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1069)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_FIRE_ALARM",SWIG_From_int(static_cast< int >(0x1070)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_FIRE_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1071)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_OUTPUT_MODULE_REMOVE",SWIG_From_int(static_cast< int >(0x1072)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_OUTPUT_MODULE_RESET",SWIG_From_int(static_cast< int >(0x1073)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_REPEATER_MODULE_REMOVE",SWIG_From_int(static_cast< int >(0x1074)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_SIREN_MODULE_REMOVE",SWIG_From_int(static_cast< int >(0x1075)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_SIREN_MODULE_RESET",SWIG_From_int(static_cast< int >(0x1076)));
  SWIG_Python_SetConstant(d, "MINOR_RS485_DEV_ALARM",SWIG_From_int(static_cast< int >(0x1077)));
  SWIG_Python_SetConstant(d, "MINOR_RS485_DEV_RESTORE",SWIG_From_int(static_cast< int >(0x1078)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_HOST_ALARM",SWIG_From_int(static_cast< int >(0x1079)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_HOST_RESTORE",SWIG_From_int(static_cast< int >(0x107a)));
  SWIG_Python_SetConstant(d, "MINOR_AIR_CONDITION_DEV_ALARM",SWIG_From_int(static_cast< int >(0x107b)));
  SWIG_Python_SetConstant(d, "MINOR_AIR_CONDITION_DEV_RESTORE",SWIG_From_int(static_cast< int >(0x107c)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_REPEATER_MODULE_RESET",SWIG_From_int(static_cast< int >(0x107d)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_ELEVATOR_BREAKDOWN",SWIG_From_int(static_cast< int >(0x107e)));
  SWIG_Python_SetConstant(d, "MINOR_WATER_PRESSURE_SENSOR_ALARM",SWIG_From_int(static_cast< int >(0x107f)));
  SWIG_Python_SetConstant(d, "MINOR_FLOW_SENSOR_ALARM",SWIG_From_int(static_cast< int >(0x1080)));
  SWIG_Python_SetConstant(d, "MINOR_SENSOR_LINKAGE_ALARM",SWIG_From_int(static_cast< int >(0x1081)));
  SWIG_Python_SetConstant(d, "MINOR_SENSOR_LINKAGE_ALARM_RESTORE",SWIG_From_int(static_cast< int >(0x1082)));
  SWIG_Python_SetConstant(d, "MAJOR_EXCEPTION",SWIG_From_int(static_cast< int >(0x2)));
  SWIG_Python_SetConstant(d, "MINOR_SUBSYSTEM_ERROR",SWIG_From_int(static_cast< int >(0x0a)));
  SWIG_Python_SetConstant(d, "MINOR_RAID_ERROR",SWIG_From_int(static_cast< int >(0x20)));
  SWIG_Python_SetConstant(d, "MINOR_VI_LOST",SWIG_From_int(static_cast< int >(0x21)));
  SWIG_Python_SetConstant(d, "MINOR_ILLEGAL_ACCESS",SWIG_From_int(static_cast< int >(0x22)));
  SWIG_Python_SetConstant(d, "MINOR_HD_FULL",SWIG_From_int(static_cast< int >(0x23)));
  SWIG_Python_SetConstant(d, "MINOR_HD_ERROR",SWIG_From_int(static_cast< int >(0x24)));
  SWIG_Python_SetConstant(d, "MINOR_DCD_LOST",SWIG_From_int(static_cast< int >(0x25)));
  SWIG_Python_SetConstant(d, "MINOR_IP_CONFLICT",SWIG_From_int(static_cast< int >(0x26)));
  SWIG_Python_SetConstant(d, "MINOR_NET_BROKEN",SWIG_From_int(static_cast< int >(0x27)));
  SWIG_Python_SetConstant(d, "MINOR_REC_ERROR",SWIG_From_int(static_cast< int >(0x28)));
  SWIG_Python_SetConstant(d, "MINOR_IPC_NO_LINK",SWIG_From_int(static_cast< int >(0x29)));
  SWIG_Python_SetConstant(d, "MINOR_VI_EXCEPTION",SWIG_From_int(static_cast< int >(0x2a)));
  SWIG_Python_SetConstant(d, "MINOR_IPC_IP_CONFLICT",SWIG_From_int(static_cast< int >(0x2b)));
  SWIG_Python_SetConstant(d, "MINOR_SENCE_EXCEPTION",SWIG_From_int(static_cast< int >(0x2c)));
  SWIG_Python_SetConstant(d, "MINOR_PIC_REC_ERROR",SWIG_From_int(static_cast< int >(0x2d)));
  SWIG_Python_SetConstant(d, "MINOR_VI_MISMATCH",SWIG_From_int(static_cast< int >(0x2e)));
  SWIG_Python_SetConstant(d, "MINOR_RESOLUTION_MISMATCH",SWIG_From_int(static_cast< int >(0x2f)));
  SWIG_Python_SetConstant(d, "MINOR_FANABNORMAL",SWIG_From_int(static_cast< int >(0x31)));
  SWIG_Python_SetConstant(d, "MINOR_FANRESUME",SWIG_From_int(static_cast< int >(0x32)));
  SWIG_Python_SetConstant(d, "MINOR_SUBSYSTEM_ABNORMALREBOOT",SWIG_From_int(static_cast< int >(0x33)));
  SWIG_Python_SetConstant(d, "MINOR_MATRIX_STARTBUZZER",SWIG_From_int(static_cast< int >(0x34)));
  SWIG_Python_SetConstant(d, "MINOR_NET_ABNORMAL",SWIG_From_int(static_cast< int >(0x35)));
  SWIG_Python_SetConstant(d, "MINOR_MEM_ABNORMAL",SWIG_From_int(static_cast< int >(0x36)));
  SWIG_Python_SetConstant(d, "MINOR_FILE_ABNORMAL",SWIG_From_int(static_cast< int >(0x37)));
  SWIG_Python_SetConstant(d, "MINOR_PANEL_ABNORMAL",SWIG_From_int(static_cast< int >(0x38)));
  SWIG_Python_SetConstant(d, "MINOR_PANEL_RESUME",SWIG_From_int(static_cast< int >(0x39)));
  SWIG_Python_SetConstant(d, "MINOR_RS485_DEVICE_ABNORMAL",SWIG_From_int(static_cast< int >(0x3a)));
  SWIG_Python_SetConstant(d, "MINOR_RS485_DEVICE_REVERT",SWIG_From_int(static_cast< int >(0x3b)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_SUBSYSTEM_ABNORMALREBOOT",SWIG_From_int(static_cast< int >(0x3c)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_SUBSYSTEM_ABNORMALINSERT",SWIG_From_int(static_cast< int >(0x3d)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_SUBSYSTEM_ABNORMALPULLOUT",SWIG_From_int(static_cast< int >(0x3e)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_ABNARMALTEMPERATURE",SWIG_From_int(static_cast< int >(0x3f)));
  SWIG_Python_SetConstant(d, "MINOR_HIGH_TEMPERATURE_PROTECT",SWIG_From_int(static_cast< int >(0x40)));
  SWIG_Python_SetConstant(d, "MINOR_RECORD_OVERFLOW",SWIG_From_int(static_cast< int >(0x41)));
  SWIG_Python_SetConstant(d, "MINOR_DSP_ABNORMAL",SWIG_From_int(static_cast< int >(0x42)));
  SWIG_Python_SetConstant(d, "MINOR_ANR_RECORD_FAIED",SWIG_From_int(static_cast< int >(0x43)));
  SWIG_Python_SetConstant(d, "MINOR_SPARE_WORK_DEVICE_EXCEPT",SWIG_From_int(static_cast< int >(0x44)));
  SWIG_Python_SetConstant(d, "MINOR_START_IPC_MAS_FAILED",SWIG_From_int(static_cast< int >(0x45)));
  SWIG_Python_SetConstant(d, "MINOR_IPCM_CRASH",SWIG_From_int(static_cast< int >(0x46)));
  SWIG_Python_SetConstant(d, "MINOR_POE_POWER_EXCEPTION",SWIG_From_int(static_cast< int >(0x47)));
  SWIG_Python_SetConstant(d, "MINOR_UPLOAD_DATA_CS_EXCEPTION",SWIG_From_int(static_cast< int >(0x48)));
  SWIG_Python_SetConstant(d, "MINOR_DIAL_EXCEPTION",SWIG_From_int(static_cast< int >(0x49)));
  SWIG_Python_SetConstant(d, "MINOR_DEV_EXCEPTION_OFFLINE",SWIG_From_int(static_cast< int >(0x50)));
  SWIG_Python_SetConstant(d, "MINOR_UPGRADEFAIL",SWIG_From_int(static_cast< int >(0x51)));
  SWIG_Python_SetConstant(d, "MINOR_AI_LOST",SWIG_From_int(static_cast< int >(0x52)));
  SWIG_Python_SetConstant(d, "MINOR_SYNC_IPC_PASSWD",SWIG_From_int(static_cast< int >(0x53)));
  SWIG_Python_SetConstant(d, "MINOR_EZVIZ_OFFLINE",SWIG_From_int(static_cast< int >(0x54)));
  SWIG_Python_SetConstant(d, "MINOR_VQD_ABNORMAL",SWIG_From_int(static_cast< int >(0x55)));
  SWIG_Python_SetConstant(d, "MINOR_ACCESSORIES_PLATE",SWIG_From_int(static_cast< int >(0x57)));
  SWIG_Python_SetConstant(d, "MINOR_KMS_EXPAMSION_DISK_LOST",SWIG_From_int(static_cast< int >(0x58)));
  SWIG_Python_SetConstant(d, "MINOR_ABNORMAL_PORT",SWIG_From_int(static_cast< int >(0x59)));
  SWIG_Python_SetConstant(d, "MINOR_CAMERA_ANGLE_ANOMALY",SWIG_From_int(static_cast< int >(0x60)));
  SWIG_Python_SetConstant(d, "MINOR_DATA_DISK_ERROE",SWIG_From_int(static_cast< int >(0x61)));
  SWIG_Python_SetConstant(d, "MINOR_INTELLIGENT_SYSTEM_RUNNING_ERROR",SWIG_From_int(static_cast< int >(0x62)));
  SWIG_Python_SetConstant(d, "MINOR_FACESNAP_RESOLUTION_OVERFLOW",SWIG_From_int(static_cast< int >(0x63)));
  SWIG_Python_SetConstant(d, "MINOR_SMD_RESOLUTION_OVERFLOW",SWIG_From_int(static_cast< int >(0x64)));
  SWIG_Python_SetConstant(d, "MINOR_AUDIO_LOSS_EXCEPTION",SWIG_From_int(static_cast< int >(0x65)));
  SWIG_Python_SetConstant(d, "MINOR_SAFETY_HELMET_EXCEPTION",SWIG_From_int(static_cast< int >(0x66)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_PIC_LENGTH_OVERFLOW",SWIG_From_int(static_cast< int >(0x67)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_MODEL_EXCEPTION",SWIG_From_int(static_cast< int >(0x68)));
  SWIG_Python_SetConstant(d, "MINOR_SSD_EXCEPTION",SWIG_From_int(static_cast< int >(0x69)));
  SWIG_Python_SetConstant(d, "MINOR_CLUSTER_DEVICE_OFFLINE",SWIG_From_int(static_cast< int >(0x70)));
  SWIG_Python_SetConstant(d, "MINOR_CLUSTER_CONFIG_FAILED",SWIG_From_int(static_cast< int >(0x71)));
  SWIG_Python_SetConstant(d, "MINOR_CLUSTER_DISASTER_TOLERANCE_EXCEPT",SWIG_From_int(static_cast< int >(0x72)));
  SWIG_Python_SetConstant(d, "MINOR_CLUSTER_STORFULL_EXCEPTION",SWIG_From_int(static_cast< int >(0x73)));
  SWIG_Python_SetConstant(d, "MINOR_CLUSTER_VERSION_EXCEPTION",SWIG_From_int(static_cast< int >(0x74)));
  SWIG_Python_SetConstant(d, "MINOR_CLUSTER_OFFLINENODE_EXCEPTION",SWIG_From_int(static_cast< int >(0x75)));
  SWIG_Python_SetConstant(d, "MINOR_CLUSTER_RECORDCYCLE_EXCEPTION",SWIG_From_int(static_cast< int >(0x76)));
  SWIG_Python_SetConstant(d, "MINOR_CLUSTER_IPCTRANSFER_EXCEPTION",SWIG_From_int(static_cast< int >(0x77)));
  SWIG_Python_SetConstant(d, "MINOR_CLUSTER_IPCONFLICT_EXCEPTION",SWIG_From_int(static_cast< int >(0x78)));
  SWIG_Python_SetConstant(d, "MINOR_GET_SUB_STREAM_FAILURE",SWIG_From_int(static_cast< int >(0x79)));
  SWIG_Python_SetConstant(d, "MINOR_HDD_SHM_DETECT_EXCEPTION",SWIG_From_int(static_cast< int >(0x7a)));
  SWIG_Python_SetConstant(d, "MINOR_DEVICE_FORTIFY_FAILURE",SWIG_From_int(static_cast< int >(0x7b)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_UPLOAD_EXCEPTION",SWIG_From_int(static_cast< int >(0x7c)));
  SWIG_Python_SetConstant(d, "MINOR_LORA_EXCEPTION",SWIG_From_int(static_cast< int >(0x7d)));
  SWIG_Python_SetConstant(d, "MINOR_AK_OR_SK_IS_EMPTY",SWIG_From_int(static_cast< int >(0x7e)));
  SWIG_Python_SetConstant(d, "MINOR_HIGH_HD_TEMPERATURE",SWIG_From_int(static_cast< int >(0x80)));
  SWIG_Python_SetConstant(d, "MINOR_LOW_HD_TEMPERATURE",SWIG_From_int(static_cast< int >(0x81)));
  SWIG_Python_SetConstant(d, "MINOR_HD_IMPACT",SWIG_From_int(static_cast< int >(0x82)));
  SWIG_Python_SetConstant(d, "MINOR_HD_BAD_BLOCK",SWIG_From_int(static_cast< int >(0x83)));
  SWIG_Python_SetConstant(d, "MINOR_SEVERE_HD_FAILURE",SWIG_From_int(static_cast< int >(0x84)));
  SWIG_Python_SetConstant(d, "MINOR_RELEASE_FAILED",SWIG_From_int(static_cast< int >(0x85)));
  SWIG_Python_SetConstant(d, "MINOR_PORT_CONFLICT",SWIG_From_int(static_cast< int >(0x86)));
  SWIG_Python_SetConstant(d, "MINOR_MODULE_STARTUP_FAILED",SWIG_From_int(static_cast< int >(0x87)));
  SWIG_Python_SetConstant(d, "MINOR_DEV_POWER_ON",SWIG_From_int(static_cast< int >(0x400)));
  SWIG_Python_SetConstant(d, "MINOR_DEV_POWER_OFF",SWIG_From_int(static_cast< int >(0x401)));
  SWIG_Python_SetConstant(d, "MINOR_WATCH_DOG_RESET",SWIG_From_int(static_cast< int >(0x402)));
  SWIG_Python_SetConstant(d, "MINOR_LOW_BATTERY",SWIG_From_int(static_cast< int >(0x403)));
  SWIG_Python_SetConstant(d, "MINOR_BATTERY_RESUME",SWIG_From_int(static_cast< int >(0x404)));
  SWIG_Python_SetConstant(d, "MINOR_AC_OFF",SWIG_From_int(static_cast< int >(0x405)));
  SWIG_Python_SetConstant(d, "MINOR_AC_RESUME",SWIG_From_int(static_cast< int >(0x406)));
  SWIG_Python_SetConstant(d, "MINOR_NET_RESUME",SWIG_From_int(static_cast< int >(0x407)));
  SWIG_Python_SetConstant(d, "MINOR_FLASH_ABNORMAL",SWIG_From_int(static_cast< int >(0x408)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_READER_OFFLINE",SWIG_From_int(static_cast< int >(0x409)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_READER_RESUME",SWIG_From_int(static_cast< int >(0x40a)));
  SWIG_Python_SetConstant(d, "MINOR_INDICATOR_LIGHT_OFF",SWIG_From_int(static_cast< int >(0x40b)));
  SWIG_Python_SetConstant(d, "MINOR_INDICATOR_LIGHT_RESUME",SWIG_From_int(static_cast< int >(0x40c)));
  SWIG_Python_SetConstant(d, "MINOR_CHANNEL_CONTROLLER_OFF",SWIG_From_int(static_cast< int >(0x40d)));
  SWIG_Python_SetConstant(d, "MINOR_CHANNEL_CONTROLLER_RESUME",SWIG_From_int(static_cast< int >(0x40e)));
  SWIG_Python_SetConstant(d, "MINOR_SECURITY_MODULE_OFF",SWIG_From_int(static_cast< int >(0x40f)));
  SWIG_Python_SetConstant(d, "MINOR_SECURITY_MODULE_RESUME",SWIG_From_int(static_cast< int >(0x410)));
  SWIG_Python_SetConstant(d, "MINOR_BATTERY_ELECTRIC_LOW",SWIG_From_int(static_cast< int >(0x411)));
  SWIG_Python_SetConstant(d, "MINOR_BATTERY_ELECTRIC_RESUME",SWIG_From_int(static_cast< int >(0x412)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CONTROL_NET_BROKEN",SWIG_From_int(static_cast< int >(0x413)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CONTROL_NET_RSUME",SWIG_From_int(static_cast< int >(0x414)));
  SWIG_Python_SetConstant(d, "MINOR_MASTER_RS485_LOOPNODE_BROKEN",SWIG_From_int(static_cast< int >(0x415)));
  SWIG_Python_SetConstant(d, "MINOR_MASTER_RS485_LOOPNODE_RESUME",SWIG_From_int(static_cast< int >(0x416)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CONTROL_OFFLINE",SWIG_From_int(static_cast< int >(0x417)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CONTROL_RESUME",SWIG_From_int(static_cast< int >(0x418)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DOWNSIDE_RS485_LOOPNODE_BROKEN",SWIG_From_int(static_cast< int >(0x419)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DOWNSIDE_RS485_LOOPNODE_RESUME",SWIG_From_int(static_cast< int >(0x41a)));
  SWIG_Python_SetConstant(d, "MINOR_DISTRACT_CONTROLLER_ONLINE",SWIG_From_int(static_cast< int >(0x41b)));
  SWIG_Python_SetConstant(d, "MINOR_DISTRACT_CONTROLLER_OFFLINE",SWIG_From_int(static_cast< int >(0x41c)));
  SWIG_Python_SetConstant(d, "MINOR_ID_CARD_READER_NOT_CONNECT",SWIG_From_int(static_cast< int >(0x41d)));
  SWIG_Python_SetConstant(d, "MINOR_ID_CARD_READER_RESUME",SWIG_From_int(static_cast< int >(0x41e)));
  SWIG_Python_SetConstant(d, "MINOR_FINGER_PRINT_MODULE_NOT_CONNECT",SWIG_From_int(static_cast< int >(0x41f)));
  SWIG_Python_SetConstant(d, "MINOR_FINGER_PRINT_MODULE_RESUME",SWIG_From_int(static_cast< int >(0x420)));
  SWIG_Python_SetConstant(d, "MINOR_CAMERA_NOT_CONNECT",SWIG_From_int(static_cast< int >(0x421)));
  SWIG_Python_SetConstant(d, "MINOR_CAMERA_RESUME",SWIG_From_int(static_cast< int >(0x422)));
  SWIG_Python_SetConstant(d, "MINOR_COM_NOT_CONNECT",SWIG_From_int(static_cast< int >(0x423)));
  SWIG_Python_SetConstant(d, "MINOR_COM_RESUME",SWIG_From_int(static_cast< int >(0x424)));
  SWIG_Python_SetConstant(d, "MINOR_DEVICE_NOT_AUTHORIZE",SWIG_From_int(static_cast< int >(0x425)));
  SWIG_Python_SetConstant(d, "MINOR_PEOPLE_AND_ID_CARD_DEVICE_ONLINE",SWIG_From_int(static_cast< int >(0x426)));
  SWIG_Python_SetConstant(d, "MINOR_PEOPLE_AND_ID_CARD_DEVICE_OFFLINE",SWIG_From_int(static_cast< int >(0x427)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_LOGIN_LOCK",SWIG_From_int(static_cast< int >(0x428)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_LOGIN_UNLOCK",SWIG_From_int(static_cast< int >(0x429)));
  SWIG_Python_SetConstant(d, "MINOR_SUBMARINEBACK_COMM_BREAK",SWIG_From_int(static_cast< int >(0x42a)));
  SWIG_Python_SetConstant(d, "MINOR_SUBMARINEBACK_COMM_RESUME",SWIG_From_int(static_cast< int >(0x42b)));
  SWIG_Python_SetConstant(d, "MINOR_MOTOR_SENSOR_EXCEPTION",SWIG_From_int(static_cast< int >(0x42c)));
  SWIG_Python_SetConstant(d, "MINOR_CAN_BUS_EXCEPTION",SWIG_From_int(static_cast< int >(0x42d)));
  SWIG_Python_SetConstant(d, "MINOR_CAN_BUS_RESUME",SWIG_From_int(static_cast< int >(0x42e)));
  SWIG_Python_SetConstant(d, "MINOR_GATE_TEMPERATURE_OVERRUN",SWIG_From_int(static_cast< int >(0x42f)));
  SWIG_Python_SetConstant(d, "MINOR_IR_EMITTER_EXCEPTION",SWIG_From_int(static_cast< int >(0x430)));
  SWIG_Python_SetConstant(d, "MINOR_IR_EMITTER_RESUME",SWIG_From_int(static_cast< int >(0x431)));
  SWIG_Python_SetConstant(d, "MINOR_LAMP_BOARD_COMM_EXCEPTION",SWIG_From_int(static_cast< int >(0x432)));
  SWIG_Python_SetConstant(d, "MINOR_LAMP_BOARD_COMM_RESUME",SWIG_From_int(static_cast< int >(0x433)));
  SWIG_Python_SetConstant(d, "MINOR_IR_ADAPTOR_COMM_EXCEPTION",SWIG_From_int(static_cast< int >(0x434)));
  SWIG_Python_SetConstant(d, "MINOR_IR_ADAPTOR_COMM_RESUME",SWIG_From_int(static_cast< int >(0x435)));
  SWIG_Python_SetConstant(d, "MINOR_PRINTER_ONLINE",SWIG_From_int(static_cast< int >(0x436)));
  SWIG_Python_SetConstant(d, "MINOR_PRINTER_OFFLINE",SWIG_From_int(static_cast< int >(0x437)));
  SWIG_Python_SetConstant(d, "MINOR_4G_MOUDLE_ONLINE",SWIG_From_int(static_cast< int >(0x438)));
  SWIG_Python_SetConstant(d, "MINOR_4G_MOUDLE_OFFLINE",SWIG_From_int(static_cast< int >(0x439)));
  SWIG_Python_SetConstant(d, "MINOR_DSP_START_FAILED",SWIG_From_int(static_cast< int >(0x43a)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_REGULATION_NOT_ALLOWED",SWIG_From_int(static_cast< int >(0x43b)));
  SWIG_Python_SetConstant(d, "MINOR_AUXILIARY_BOARD_OFFLINE",SWIG_From_int(static_cast< int >(0x43c)));
  SWIG_Python_SetConstant(d, "MINOR_AUXILIARY_BOARD_RESUME",SWIG_From_int(static_cast< int >(0x43d)));
  SWIG_Python_SetConstant(d, "MINOR_IDCARD_SECURITY_MOUDLE_EXCEPTION",SWIG_From_int(static_cast< int >(0x43e)));
  SWIG_Python_SetConstant(d, "MINOR_IDCARD_SECURITY_MOUDLE_RESUME",SWIG_From_int(static_cast< int >(0x43f)));
  SWIG_Python_SetConstant(d, "MINOR_FP_PERIPHERAL_EXCEPTION",SWIG_From_int(static_cast< int >(0x440)));
  SWIG_Python_SetConstant(d, "MINOR_FP_PERIPHERAL_RESUME",SWIG_From_int(static_cast< int >(0x441)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM1",SWIG_From_int(static_cast< int >(0x900)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM2",SWIG_From_int(static_cast< int >(0x901)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM3",SWIG_From_int(static_cast< int >(0x902)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM4",SWIG_From_int(static_cast< int >(0x903)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM5",SWIG_From_int(static_cast< int >(0x904)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM6",SWIG_From_int(static_cast< int >(0x905)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM7",SWIG_From_int(static_cast< int >(0x906)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM8",SWIG_From_int(static_cast< int >(0x907)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM9",SWIG_From_int(static_cast< int >(0x908)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM10",SWIG_From_int(static_cast< int >(0x909)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM11",SWIG_From_int(static_cast< int >(0x90a)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM12",SWIG_From_int(static_cast< int >(0x90b)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM13",SWIG_From_int(static_cast< int >(0x90c)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM14",SWIG_From_int(static_cast< int >(0x90d)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM15",SWIG_From_int(static_cast< int >(0x90e)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM16",SWIG_From_int(static_cast< int >(0x90f)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM17",SWIG_From_int(static_cast< int >(0x910)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM18",SWIG_From_int(static_cast< int >(0x911)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM19",SWIG_From_int(static_cast< int >(0x912)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM20",SWIG_From_int(static_cast< int >(0x913)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM21",SWIG_From_int(static_cast< int >(0x914)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM22",SWIG_From_int(static_cast< int >(0x915)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM23",SWIG_From_int(static_cast< int >(0x916)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM24",SWIG_From_int(static_cast< int >(0x917)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM25",SWIG_From_int(static_cast< int >(0x918)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM26",SWIG_From_int(static_cast< int >(0x919)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM27",SWIG_From_int(static_cast< int >(0x91a)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM28",SWIG_From_int(static_cast< int >(0x91b)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM29",SWIG_From_int(static_cast< int >(0x91c)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM30",SWIG_From_int(static_cast< int >(0x91d)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM31",SWIG_From_int(static_cast< int >(0x91e)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM32",SWIG_From_int(static_cast< int >(0x91f)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM33",SWIG_From_int(static_cast< int >(0x920)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM34",SWIG_From_int(static_cast< int >(0x921)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM35",SWIG_From_int(static_cast< int >(0x922)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM36",SWIG_From_int(static_cast< int >(0x923)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM37",SWIG_From_int(static_cast< int >(0x924)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM38",SWIG_From_int(static_cast< int >(0x925)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM39",SWIG_From_int(static_cast< int >(0x926)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM40",SWIG_From_int(static_cast< int >(0x927)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM41",SWIG_From_int(static_cast< int >(0x928)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM42",SWIG_From_int(static_cast< int >(0x929)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM43",SWIG_From_int(static_cast< int >(0x92a)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM44",SWIG_From_int(static_cast< int >(0x92b)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM45",SWIG_From_int(static_cast< int >(0x92c)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM46",SWIG_From_int(static_cast< int >(0x92d)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM47",SWIG_From_int(static_cast< int >(0x92e)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM48",SWIG_From_int(static_cast< int >(0x92f)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM49",SWIG_From_int(static_cast< int >(0x930)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM50",SWIG_From_int(static_cast< int >(0x931)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM51",SWIG_From_int(static_cast< int >(0x932)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM52",SWIG_From_int(static_cast< int >(0x933)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM53",SWIG_From_int(static_cast< int >(0x934)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM54",SWIG_From_int(static_cast< int >(0x935)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM55",SWIG_From_int(static_cast< int >(0x936)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM56",SWIG_From_int(static_cast< int >(0x937)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM57",SWIG_From_int(static_cast< int >(0x938)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM58",SWIG_From_int(static_cast< int >(0x939)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM59",SWIG_From_int(static_cast< int >(0x93a)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM60",SWIG_From_int(static_cast< int >(0x93b)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM61",SWIG_From_int(static_cast< int >(0x93c)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM62",SWIG_From_int(static_cast< int >(0x93d)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM63",SWIG_From_int(static_cast< int >(0x93e)));
  SWIG_Python_SetConstant(d, "MINOR_EXCEPTION_CUSTOM64",SWIG_From_int(static_cast< int >(0x93f)));
  SWIG_Python_SetConstant(d, "MINOR_SWITCH_WIRED_NETWORK",SWIG_From_int(static_cast< int >(0x950)));
  SWIG_Python_SetConstant(d, "MINOR_SWITCH_WIRELESS_NETWORK",SWIG_From_int(static_cast< int >(0x951)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_ONLINE_RESUME",SWIG_From_int(static_cast< int >(0x952)));
  SWIG_Python_SetConstant(d, "MINOR_SUBSYSTEM_IP_CONFLICT",SWIG_From_int(static_cast< int >(0x4000)));
  SWIG_Python_SetConstant(d, "MINOR_SUBSYSTEM_NET_BROKEN",SWIG_From_int(static_cast< int >(0x4001)));
  SWIG_Python_SetConstant(d, "MINOR_FAN_ABNORMAL",SWIG_From_int(static_cast< int >(0x4002)));
  SWIG_Python_SetConstant(d, "MINOR_BACKPANEL_TEMPERATURE_ABNORMAL",SWIG_From_int(static_cast< int >(0x4003)));
  SWIG_Python_SetConstant(d, "MINOR_SDCARD_ABNORMAL",SWIG_From_int(static_cast< int >(0x4004)));
  SWIG_Python_SetConstant(d, "MINOR_SDCARD_DAMAGE",SWIG_From_int(static_cast< int >(0x4005)));
  SWIG_Python_SetConstant(d, "MINOR_POC_ABNORMAL",SWIG_From_int(static_cast< int >(0x4006)));
  SWIG_Python_SetConstant(d, "MINOR_MAIN_POWER_FAULT",SWIG_From_int(static_cast< int >(0x4007)));
  SWIG_Python_SetConstant(d, "MINOR_BACK_UP_POWER_FAULT",SWIG_From_int(static_cast< int >(0x4008)));
  SWIG_Python_SetConstant(d, "MINOR_TAMPER_FAULT",SWIG_From_int(static_cast< int >(0x4009)));
  SWIG_Python_SetConstant(d, "MINOR_RS232_FAULT",SWIG_From_int(static_cast< int >(0x400a)));
  SWIG_Python_SetConstant(d, "MINOR_RS485_FAULT",SWIG_From_int(static_cast< int >(0x400b)));
  SWIG_Python_SetConstant(d, "MINOR_LAN_STATUS_FAULT",SWIG_From_int(static_cast< int >(0x400c)));
  SWIG_Python_SetConstant(d, "MINOR_LAN_LINK1_FAULT",SWIG_From_int(static_cast< int >(0x400d)));
  SWIG_Python_SetConstant(d, "MINOR_LAN_LINK2_FAULT",SWIG_From_int(static_cast< int >(0x400e)));
  SWIG_Python_SetConstant(d, "MINOR_SIM_CARD_STATUS_FAULT",SWIG_From_int(static_cast< int >(0x400f)));
  SWIG_Python_SetConstant(d, "MINOR_4G_LINK1_FAULT",SWIG_From_int(static_cast< int >(0x4010)));
  SWIG_Python_SetConstant(d, "MINOR_4G_LINK2_FAULT",SWIG_From_int(static_cast< int >(0x4011)));
  SWIG_Python_SetConstant(d, "MINOR_OTHER_FAULT",SWIG_From_int(static_cast< int >(0x4012)));
  SWIG_Python_SetConstant(d, "MINOR_FIRE_CONTROL_CONNECT_FAULT",SWIG_From_int(static_cast< int >(0x4013)));
  SWIG_Python_SetConstant(d, "MINOR_SENSOR_SHORT_CIRCUIT",SWIG_From_int(static_cast< int >(0x4014)));
  SWIG_Python_SetConstant(d, "MINOR_SENSOR_OPEN_CIRCUIT",SWIG_From_int(static_cast< int >(0x4015)));
  SWIG_Python_SetConstant(d, "MINOR_SENSOR_MIS_CONNECT",SWIG_From_int(static_cast< int >(0x4016)));
  SWIG_Python_SetConstant(d, "MINOR_SENSOR_FAULT_RESTORE",SWIG_From_int(static_cast< int >(0x4017)));
  SWIG_Python_SetConstant(d, "MINOR_DEVICE_FAULT",SWIG_From_int(static_cast< int >(0x4018)));
  SWIG_Python_SetConstant(d, "MINOR_OVERVOLTAGE",SWIG_From_int(static_cast< int >(0X4019)));
  SWIG_Python_SetConstant(d, "MINOR_UNDERVOLTAGE",SWIG_From_int(static_cast< int >(0X401a)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WDT_RESET",SWIG_From_int(static_cast< int >(0x1003)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_RTC_EXCEPTION",SWIG_From_int(static_cast< int >(0x1007)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TEL_LINE_CONNECT_FAILURE",SWIG_From_int(static_cast< int >(0x100a)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TEL_LINE_CONNECT_RESTORE",SWIG_From_int(static_cast< int >(0x100b)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_EXPANDER_BUS_LOSS",SWIG_From_int(static_cast< int >(0x100c)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_EXPANDER_BUS_RESTORE",SWIG_From_int(static_cast< int >(0x100d)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_KEYPAD_BUS_LOSS",SWIG_From_int(static_cast< int >(0x100e)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_KEYPAD_BUS_RESTORE",SWIG_From_int(static_cast< int >(0x100f)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SENSOR_FAILURE",SWIG_From_int(static_cast< int >(0x1010)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SENSOR_RESTORE",SWIG_From_int(static_cast< int >(0x1011)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_RS485_CONNECT_FAILURE",SWIG_From_int(static_cast< int >(0x1012)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_RS485_CONNECT_RESTORE",SWIG_From_int(static_cast< int >(0x1013)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRED_NETWORK_ABNORMAL",SWIG_From_int(static_cast< int >(0x1015)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRED_NETWORK_RESTORE",SWIG_From_int(static_cast< int >(0x1016)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_GPRS_ABNORMAL",SWIG_From_int(static_cast< int >(0x1017)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_GPRS_RESTORE",SWIG_From_int(static_cast< int >(0x1018)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_3G_ABNORMAL",SWIG_From_int(static_cast< int >(0x1019)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_3G_RESTORE",SWIG_From_int(static_cast< int >(0x101a)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SIM_CARD_ABNORMAL",SWIG_From_int(static_cast< int >(0x101b)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SIM_CARD_RESTORE",SWIG_From_int(static_cast< int >(0x101c)));
  SWIG_Python_SetConstant(d, "MINOR_FORMAT_HDD_ERROR",SWIG_From_int(static_cast< int >(0x1026)));
  SWIG_Python_SetConstant(d, "MINOR_USB_ERROR",SWIG_From_int(static_cast< int >(0x1027)));
  SWIG_Python_SetConstant(d, "MINOR_USB_RESTORE",SWIG_From_int(static_cast< int >(0x1028)));
  SWIG_Python_SetConstant(d, "MINOR_PRINT_ERROR",SWIG_From_int(static_cast< int >(0x1029)));
  SWIG_Python_SetConstant(d, "MINOR_PRINT_RESTORE",SWIG_From_int(static_cast< int >(0x1030)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SUBSYSTEM_COMMUNICATION_ERROR",SWIG_From_int(static_cast< int >(0x1031)));
  SWIG_Python_SetConstant(d, "MINOR_MCU_RESTART",SWIG_From_int(static_cast< int >(0x1035)));
  SWIG_Python_SetConstant(d, "MINOR_GPRS_MODULE_FAULT",SWIG_From_int(static_cast< int >(0x1036)));
  SWIG_Python_SetConstant(d, "MINOR_TELEPHONE_MODULE_FAULT",SWIG_From_int(static_cast< int >(0x1037)));
  SWIG_Python_SetConstant(d, "MINOR_WIFI_ABNORMAL",SWIG_From_int(static_cast< int >(0x1038)));
  SWIG_Python_SetConstant(d, "MINOR_WIFI_RESTORE",SWIG_From_int(static_cast< int >(0x1039)));
  SWIG_Python_SetConstant(d, "MINOR_RF_ABNORMAL",SWIG_From_int(static_cast< int >(0x103a)));
  SWIG_Python_SetConstant(d, "MINOR_RF_RESTORE",SWIG_From_int(static_cast< int >(0x103b)));
  SWIG_Python_SetConstant(d, "MINOR_DETECTOR_ONLINE",SWIG_From_int(static_cast< int >(0x103c)));
  SWIG_Python_SetConstant(d, "MINOR_DETECTOR_OFFLINE",SWIG_From_int(static_cast< int >(0x103d)));
  SWIG_Python_SetConstant(d, "MINOR_DETECTOR_BATTERY_NORMAL",SWIG_From_int(static_cast< int >(0x103e)));
  SWIG_Python_SetConstant(d, "MINOR_DETECTOR_BATTERY_LOW",SWIG_From_int(static_cast< int >(0x103f)));
  SWIG_Python_SetConstant(d, "MINOR_DATA_TRAFFIC_OVERFLOW",SWIG_From_int(static_cast< int >(0x1040)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ZONE_MODULE_LOSS",SWIG_From_int(static_cast< int >(0x1041)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ZONE_MODULE_RESTORE",SWIG_From_int(static_cast< int >(0x1042)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_OUTPUT_LOSS",SWIG_From_int(static_cast< int >(0x1043)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_OUTPUT_RESTORE",SWIG_From_int(static_cast< int >(0x1044)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_REPEATER_LOSS",SWIG_From_int(static_cast< int >(0x1045)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_REPEATER_RESTORE",SWIG_From_int(static_cast< int >(0x1046)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TRIGGER_MODULE_LOSS",SWIG_From_int(static_cast< int >(0x1047)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TRIGGER_MODULE_RESTORE",SWIG_From_int(static_cast< int >(0x1048)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_SIREN_LOSS",SWIG_From_int(static_cast< int >(0x1049)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_SIREN_RESTORE",SWIG_From_int(static_cast< int >(0x104a)));
  SWIG_Python_SetConstant(d, "MINOR_TX1_SUB_SYSTEM_EXCEPTION",SWIG_From_int(static_cast< int >(0x1050)));
  SWIG_Python_SetConstant(d, "MINOR_TX1_REBOOT_EXCEPTION",SWIG_From_int(static_cast< int >(0x1051)));
  SWIG_Python_SetConstant(d, "MINOR_TX1_SUB_SYSTEM_LOSS",SWIG_From_int(static_cast< int >(0x1052)));
  SWIG_Python_SetConstant(d, "MINOR_TX1_SUB_SYSTEM_RESTORE",SWIG_From_int(static_cast< int >(0x1053)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_SPEED_EXCEPTION",SWIG_From_int(static_cast< int >(0x1054)));
  SWIG_Python_SetConstant(d, "MAJOR_OPERATION",SWIG_From_int(static_cast< int >(0x3)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_MOTIONEXCEPTION",SWIG_From_int(static_cast< int >(0x29)));
  SWIG_Python_SetConstant(d, "MINOR_START_DVR",SWIG_From_int(static_cast< int >(0x41)));
  SWIG_Python_SetConstant(d, "MINOR_STOP_DVR",SWIG_From_int(static_cast< int >(0x42)));
  SWIG_Python_SetConstant(d, "MINOR_STOP_ABNORMAL",SWIG_From_int(static_cast< int >(0x43)));
  SWIG_Python_SetConstant(d, "MINOR_REBOOT_DVR",SWIG_From_int(static_cast< int >(0x44)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_LOGIN",SWIG_From_int(static_cast< int >(0x50)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_LOGOUT",SWIG_From_int(static_cast< int >(0x51)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CFG_PARM",SWIG_From_int(static_cast< int >(0x52)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_PLAYBYFILE",SWIG_From_int(static_cast< int >(0x53)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_PLAYBYTIME",SWIG_From_int(static_cast< int >(0x54)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_START_REC",SWIG_From_int(static_cast< int >(0x55)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_STOP_REC",SWIG_From_int(static_cast< int >(0x56)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_PTZCTRL",SWIG_From_int(static_cast< int >(0x57)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_PREVIEW",SWIG_From_int(static_cast< int >(0x58)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_MODIFY_TIME",SWIG_From_int(static_cast< int >(0x59)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_UPGRADE",SWIG_From_int(static_cast< int >(0x5a)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_RECFILE_OUTPUT",SWIG_From_int(static_cast< int >(0x5b)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FORMAT_HDD",SWIG_From_int(static_cast< int >(0x5c)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CFGFILE_OUTPUT",SWIG_From_int(static_cast< int >(0x5d)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CFGFILE_INPUT",SWIG_From_int(static_cast< int >(0x5e)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_COPYFILE",SWIG_From_int(static_cast< int >(0x5f)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_LOCKFILE",SWIG_From_int(static_cast< int >(0x60)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_UNLOCKFILE",SWIG_From_int(static_cast< int >(0x61)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DVR_ALARM",SWIG_From_int(static_cast< int >(0x62)));
  SWIG_Python_SetConstant(d, "MINOR_IPC_ADD",SWIG_From_int(static_cast< int >(0x63)));
  SWIG_Python_SetConstant(d, "MINOR_IPC_DEL",SWIG_From_int(static_cast< int >(0x64)));
  SWIG_Python_SetConstant(d, "MINOR_IPC_SET",SWIG_From_int(static_cast< int >(0x65)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_START_BACKUP",SWIG_From_int(static_cast< int >(0x66)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_STOP_BACKUP",SWIG_From_int(static_cast< int >(0x67)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_COPYFILE_START_TIME",SWIG_From_int(static_cast< int >(0x68)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_COPYFILE_END_TIME",SWIG_From_int(static_cast< int >(0x69)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_ADD_NAS",SWIG_From_int(static_cast< int >(0x6a)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DEL_NAS",SWIG_From_int(static_cast< int >(0x6b)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SET_NAS",SWIG_From_int(static_cast< int >(0x6c)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_RESET_PASSWD",SWIG_From_int(static_cast< int >(0x6d)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_LOGIN",SWIG_From_int(static_cast< int >(0x70)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_LOGOUT",SWIG_From_int(static_cast< int >(0x71)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_START_REC",SWIG_From_int(static_cast< int >(0x72)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_STOP_REC",SWIG_From_int(static_cast< int >(0x73)));
  SWIG_Python_SetConstant(d, "MINOR_START_TRANS_CHAN",SWIG_From_int(static_cast< int >(0x74)));
  SWIG_Python_SetConstant(d, "MINOR_STOP_TRANS_CHAN",SWIG_From_int(static_cast< int >(0x75)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GET_PARM",SWIG_From_int(static_cast< int >(0x76)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CFG_PARM",SWIG_From_int(static_cast< int >(0x77)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GET_STATUS",SWIG_From_int(static_cast< int >(0x78)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ARM",SWIG_From_int(static_cast< int >(0x79)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DISARM",SWIG_From_int(static_cast< int >(0x7a)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_REBOOT",SWIG_From_int(static_cast< int >(0x7b)));
  SWIG_Python_SetConstant(d, "MINOR_START_VT",SWIG_From_int(static_cast< int >(0x7c)));
  SWIG_Python_SetConstant(d, "MINOR_STOP_VT",SWIG_From_int(static_cast< int >(0x7d)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_UPGRADE",SWIG_From_int(static_cast< int >(0x7e)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_PLAYBYFILE",SWIG_From_int(static_cast< int >(0x7f)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_PLAYBYTIME",SWIG_From_int(static_cast< int >(0x80)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_PTZCTRL",SWIG_From_int(static_cast< int >(0x81)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_FORMAT_HDD",SWIG_From_int(static_cast< int >(0x82)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_STOP",SWIG_From_int(static_cast< int >(0x83)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_LOCKFILE",SWIG_From_int(static_cast< int >(0x84)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_UNLOCKFILE",SWIG_From_int(static_cast< int >(0x85)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CFGFILE_OUTPUT",SWIG_From_int(static_cast< int >(0x86)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CFGFILE_INTPUT",SWIG_From_int(static_cast< int >(0x87)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_RECFILE_OUTPUT",SWIG_From_int(static_cast< int >(0x88)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DVR_ALARM",SWIG_From_int(static_cast< int >(0x89)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_IPC_ADD",SWIG_From_int(static_cast< int >(0x8a)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_IPC_DEL",SWIG_From_int(static_cast< int >(0x8b)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_IPC_SET",SWIG_From_int(static_cast< int >(0x8c)));
  SWIG_Python_SetConstant(d, "MINOR_REBOOT_VCA_LIB",SWIG_From_int(static_cast< int >(0x8d)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ADD_NAS",SWIG_From_int(static_cast< int >(0x8e)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DEL_NAS",SWIG_From_int(static_cast< int >(0x8f)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SET_NAS",SWIG_From_int(static_cast< int >(0x90)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_OPERATE_LOCK",SWIG_From_int(static_cast< int >(0x9d)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_OPERATE_UNLOCK",SWIG_From_int(static_cast< int >(0x9e)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DELETE_HDISK",SWIG_From_int(static_cast< int >(0x9a)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_LOAD_HDISK",SWIG_From_int(static_cast< int >(0x9b)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_UNLOAD_HDISK",SWIG_From_int(static_cast< int >(0x9c)));
  SWIG_Python_SetConstant(d, "MINOR_SCHEDULE_ANGLECALIBRATION",SWIG_From_int(static_cast< int >(0x139)));
  SWIG_Python_SetConstant(d, "MINOR_OTHER_OPERATE",SWIG_From_int(static_cast< int >(0x200)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_START_REC_CDRW",SWIG_From_int(static_cast< int >(0x91)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_STOP_REC_CDRW",SWIG_From_int(static_cast< int >(0x92)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_START_REC_CDRW",SWIG_From_int(static_cast< int >(0x93)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_STOP_REC_CDRW",SWIG_From_int(static_cast< int >(0x94)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_PIC_OUTPUT",SWIG_From_int(static_cast< int >(0x95)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_PIC_OUTPUT",SWIG_From_int(static_cast< int >(0x96)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_INQUEST_RESUME",SWIG_From_int(static_cast< int >(0x97)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_INQUEST_RESUME",SWIG_From_int(static_cast< int >(0x98)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_ADD_FILE",SWIG_From_int(static_cast< int >(0x99)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DEL_FILE",SWIG_From_int(static_cast< int >(0x9f)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_INQUEST_ADD_FILE",SWIG_From_int(static_cast< int >(0x100)));
  SWIG_Python_SetConstant(d, "MINOR_SUBSYSTEMREBOOT",SWIG_From_int(static_cast< int >(0xa0)));
  SWIG_Python_SetConstant(d, "MINOR_MATRIX_STARTTRANSFERVIDEO",SWIG_From_int(static_cast< int >(0xa1)));
  SWIG_Python_SetConstant(d, "MINOR_MATRIX_STOPTRANSFERVIDEO",SWIG_From_int(static_cast< int >(0xa2)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SET_ALLSUBSYSTEM",SWIG_From_int(static_cast< int >(0xa3)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GET_ALLSUBSYSTEM",SWIG_From_int(static_cast< int >(0xa4)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SET_PLANARRAY",SWIG_From_int(static_cast< int >(0xa5)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GET_PLANARRAY",SWIG_From_int(static_cast< int >(0xa6)));
  SWIG_Python_SetConstant(d, "MINOR_MATRIX_STARTTRANSFERAUDIO",SWIG_From_int(static_cast< int >(0xa7)));
  SWIG_Python_SetConstant(d, "MINOR_MATRIX_STOPRANSFERAUDIO",SWIG_From_int(static_cast< int >(0xa8)));
  SWIG_Python_SetConstant(d, "MINOR_LOGON_CODESPITTER",SWIG_From_int(static_cast< int >(0xa9)));
  SWIG_Python_SetConstant(d, "MINOR_LOGOFF_CODESPITTER",SWIG_From_int(static_cast< int >(0xaa)));
  SWIG_Python_SetConstant(d, "MINOR_START_DYNAMIC_DECODE",SWIG_From_int(static_cast< int >(0xb0)));
  SWIG_Python_SetConstant(d, "MINOR_STOP_DYNAMIC_DECODE",SWIG_From_int(static_cast< int >(0xb1)));
  SWIG_Python_SetConstant(d, "MINOR_GET_CYC_CFG",SWIG_From_int(static_cast< int >(0xb2)));
  SWIG_Python_SetConstant(d, "MINOR_SET_CYC_CFG",SWIG_From_int(static_cast< int >(0xb3)));
  SWIG_Python_SetConstant(d, "MINOR_START_CYC_DECODE",SWIG_From_int(static_cast< int >(0xb4)));
  SWIG_Python_SetConstant(d, "MINOR_STOP_CYC_DECODE",SWIG_From_int(static_cast< int >(0xb5)));
  SWIG_Python_SetConstant(d, "MINOR_GET_DECCHAN_STATUS",SWIG_From_int(static_cast< int >(0xb6)));
  SWIG_Python_SetConstant(d, "MINOR_GET_DECCHAN_INFO",SWIG_From_int(static_cast< int >(0xb7)));
  SWIG_Python_SetConstant(d, "MINOR_START_PASSIVE_DEC",SWIG_From_int(static_cast< int >(0xb8)));
  SWIG_Python_SetConstant(d, "MINOR_STOP_PASSIVE_DEC",SWIG_From_int(static_cast< int >(0xb9)));
  SWIG_Python_SetConstant(d, "MINOR_CTRL_PASSIVE_DEC",SWIG_From_int(static_cast< int >(0xba)));
  SWIG_Python_SetConstant(d, "MINOR_RECON_PASSIVE_DEC",SWIG_From_int(static_cast< int >(0xbb)));
  SWIG_Python_SetConstant(d, "MINOR_GET_DEC_CHAN_SW",SWIG_From_int(static_cast< int >(0xbc)));
  SWIG_Python_SetConstant(d, "MINOR_SET_DEC_CHAN_SW",SWIG_From_int(static_cast< int >(0xbd)));
  SWIG_Python_SetConstant(d, "MINOR_CTRL_DEC_CHAN_SCALE",SWIG_From_int(static_cast< int >(0xbe)));
  SWIG_Python_SetConstant(d, "MINOR_SET_REMOTE_REPLAY",SWIG_From_int(static_cast< int >(0xbf)));
  SWIG_Python_SetConstant(d, "MINOR_GET_REMOTE_REPLAY",SWIG_From_int(static_cast< int >(0xc0)));
  SWIG_Python_SetConstant(d, "MINOR_CTRL_REMOTE_REPLAY",SWIG_From_int(static_cast< int >(0xc1)));
  SWIG_Python_SetConstant(d, "MINOR_SET_DISP_CFG",SWIG_From_int(static_cast< int >(0xc2)));
  SWIG_Python_SetConstant(d, "MINOR_GET_DISP_CFG",SWIG_From_int(static_cast< int >(0xc3)));
  SWIG_Python_SetConstant(d, "MINOR_SET_PLANTABLE",SWIG_From_int(static_cast< int >(0xc4)));
  SWIG_Python_SetConstant(d, "MINOR_GET_PLANTABLE",SWIG_From_int(static_cast< int >(0xc5)));
  SWIG_Python_SetConstant(d, "MINOR_START_PPPPOE",SWIG_From_int(static_cast< int >(0xc6)));
  SWIG_Python_SetConstant(d, "MINOR_STOP_PPPPOE",SWIG_From_int(static_cast< int >(0xc7)));
  SWIG_Python_SetConstant(d, "MINOR_UPLOAD_LOGO",SWIG_From_int(static_cast< int >(0xc8)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_PIN",SWIG_From_int(static_cast< int >(0xc9)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DIAL",SWIG_From_int(static_cast< int >(0xca)));
  SWIG_Python_SetConstant(d, "MINOR_SMS_CONTROL",SWIG_From_int(static_cast< int >(0xcb)));
  SWIG_Python_SetConstant(d, "MINOR_CALL_ONLINE",SWIG_From_int(static_cast< int >(0xcc)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_PIN",SWIG_From_int(static_cast< int >(0xcd)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_BYPASS",SWIG_From_int(static_cast< int >(0xd0)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_UNBYPASS",SWIG_From_int(static_cast< int >(0xd1)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SET_ALARMIN_CFG",SWIG_From_int(static_cast< int >(0xd2)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GET_ALARMIN_CFG",SWIG_From_int(static_cast< int >(0xd3)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SET_ALARMOUT_CFG",SWIG_From_int(static_cast< int >(0xd4)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GET_ALARMOUT_CFG",SWIG_From_int(static_cast< int >(0xd5)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ALARMOUT_OPEN_MAN",SWIG_From_int(static_cast< int >(0xd6)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ALARMOUT_CLOSE_MAN",SWIG_From_int(static_cast< int >(0xd7)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ALARM_ENABLE_CFG",SWIG_From_int(static_cast< int >(0xd8)));
  SWIG_Python_SetConstant(d, "MINOR_DBDATA_OUTPUT",SWIG_From_int(static_cast< int >(0xd9)));
  SWIG_Python_SetConstant(d, "MINOR_DBDATA_INPUT",SWIG_From_int(static_cast< int >(0xda)));
  SWIG_Python_SetConstant(d, "MINOR_MU_SWITCH",SWIG_From_int(static_cast< int >(0xdb)));
  SWIG_Python_SetConstant(d, "MINOR_MU_PTZ",SWIG_From_int(static_cast< int >(0xdc)));
  SWIG_Python_SetConstant(d, "MINOR_DELETE_LOGO",SWIG_From_int(static_cast< int >(0xdd)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_INQUEST_DEL_FILE",SWIG_From_int(static_cast< int >(0xde)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CONF_REB_RAID",SWIG_From_int(static_cast< int >(0x101)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CONF_SPARE",SWIG_From_int(static_cast< int >(0x102)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_ADD_RAID",SWIG_From_int(static_cast< int >(0x103)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DEL_RAID",SWIG_From_int(static_cast< int >(0x104)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_MIG_RAID",SWIG_From_int(static_cast< int >(0x105)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_REB_RAID",SWIG_From_int(static_cast< int >(0x106)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_QUICK_CONF_RAID",SWIG_From_int(static_cast< int >(0x107)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_ADD_VD",SWIG_From_int(static_cast< int >(0x108)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DEL_VD",SWIG_From_int(static_cast< int >(0x109)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_RP_VD",SWIG_From_int(static_cast< int >(0x10a)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FORMAT_EXPANDVD",SWIG_From_int(static_cast< int >(0X10b)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_RAID_UPGRADE",SWIG_From_int(static_cast< int >(0X10c)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_STOP_RAID",SWIG_From_int(static_cast< int >(0x10d)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CONF_REB_RAID",SWIG_From_int(static_cast< int >(0x111)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CONF_SPARE",SWIG_From_int(static_cast< int >(0x112)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ADD_RAID",SWIG_From_int(static_cast< int >(0x113)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DEL_RAID",SWIG_From_int(static_cast< int >(0x114)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_MIG_RAID",SWIG_From_int(static_cast< int >(0x115)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_REB_RAID",SWIG_From_int(static_cast< int >(0x116)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_QUICK_CONF_RAID",SWIG_From_int(static_cast< int >(0x117)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ADD_VD",SWIG_From_int(static_cast< int >(0x118)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DEL_VD",SWIG_From_int(static_cast< int >(0x119)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_RP_VD",SWIG_From_int(static_cast< int >(0x11a)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_FORMAT_EXPANDVD",SWIG_From_int(static_cast< int >(0X11b)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_RAID_UPGRADE",SWIG_From_int(static_cast< int >(0X11c)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_STOP_RAID",SWIG_From_int(static_cast< int >(0x11d)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_START_PIC_REC",SWIG_From_int(static_cast< int >(0x121)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_STOP_PIC_REC",SWIG_From_int(static_cast< int >(0x122)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SET_SNMP",SWIG_From_int(static_cast< int >(0x125)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_TAG_OPT",SWIG_From_int(static_cast< int >(0x126)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_START_PIC_REC",SWIG_From_int(static_cast< int >(0x131)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_STOP_PIC_REC",SWIG_From_int(static_cast< int >(0x132)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SET_SNMP",SWIG_From_int(static_cast< int >(0x135)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_TAG_OPT",SWIG_From_int(static_cast< int >(0x136)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_LOGIN_LOCK",SWIG_From_int(static_cast< int >(0x137)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_LOGIN_UNLOCK",SWIG_From_int(static_cast< int >(0x138)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_VOUT_SWITCH",SWIG_From_int(static_cast< int >(0x140)));
  SWIG_Python_SetConstant(d, "MINOR_STREAM_CABAC",SWIG_From_int(static_cast< int >(0x141)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SPARE_OPT",SWIG_From_int(static_cast< int >(0x142)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SPARE_OPT",SWIG_From_int(static_cast< int >(0x143)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_IPCCFGFILE_OUTPUT",SWIG_From_int(static_cast< int >(0x144)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_IPCCFGFILE_INPUT",SWIG_From_int(static_cast< int >(0x145)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_IPC_UPGRADE",SWIG_From_int(static_cast< int >(0x146)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_IPCCFGFILE_OUTPUT",SWIG_From_int(static_cast< int >(0x147)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_IPCCFGFILE_INPUT",SWIG_From_int(static_cast< int >(0x148)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_IPC_UPGRADE",SWIG_From_int(static_cast< int >(0x149)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_UNLOAD_HDISK",SWIG_From_int(static_cast< int >(0x150)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_AUDIO_MIX",SWIG_From_int(static_cast< int >(0x151)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AUDIO_MIX",SWIG_From_int(static_cast< int >(0x152)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_TRIAL_PAUSE",SWIG_From_int(static_cast< int >(0x153)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_TRIAL_RESUME",SWIG_From_int(static_cast< int >(0x154)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_TRIAL_PAUSE",SWIG_From_int(static_cast< int >(0x155)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_TRIAL_RESUME",SWIG_From_int(static_cast< int >(0x156)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_MODIFY_VERIFICATION_CODE",SWIG_From_int(static_cast< int >(0x157)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_MAKECALL",SWIG_From_int(static_cast< int >(0x180)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_REJECTCALL",SWIG_From_int(static_cast< int >(0x181)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_ANSWERCALL",SWIG_From_int(static_cast< int >(0x182)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_HANGUPCALL",SWIG_From_int(static_cast< int >(0x183)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_MAKECALL",SWIG_From_int(static_cast< int >(0x188)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_REJECTCALL",SWIG_From_int(static_cast< int >(0x189)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ANSWERCALL",SWIG_From_int(static_cast< int >(0x18a)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_HANGUPCALL",SWIG_From_int(static_cast< int >(0x18b)));
  SWIG_Python_SetConstant(d, "MINOR_SET_MULTI_MASTER",SWIG_From_int(static_cast< int >(0x201)));
  SWIG_Python_SetConstant(d, "MINOR_SET_MULTI_SLAVE",SWIG_From_int(static_cast< int >(0x202)));
  SWIG_Python_SetConstant(d, "MINOR_CANCEL_MULTI_MASTER",SWIG_From_int(static_cast< int >(0x203)));
  SWIG_Python_SetConstant(d, "MINOR_CANCEL_MULTI_SLAVE",SWIG_From_int(static_cast< int >(0x204)));
  SWIG_Python_SetConstant(d, "MINOR_DISPLAY_LOGO",SWIG_From_int(static_cast< int >(0x205)));
  SWIG_Python_SetConstant(d, "MINOR_HIDE_LOGO",SWIG_From_int(static_cast< int >(0x206)));
  SWIG_Python_SetConstant(d, "MINOR_SET_DEC_DELAY_LEVEL",SWIG_From_int(static_cast< int >(0x207)));
  SWIG_Python_SetConstant(d, "MINOR_SET_BIGSCREEN_DIPLAY_AREA",SWIG_From_int(static_cast< int >(0x208)));
  SWIG_Python_SetConstant(d, "MINOR_CUT_VIDEO_SOURCE",SWIG_From_int(static_cast< int >(0x209)));
  SWIG_Python_SetConstant(d, "MINOR_SET_BASEMAP_AREA",SWIG_From_int(static_cast< int >(0x210)));
  SWIG_Python_SetConstant(d, "MINOR_DOWNLOAD_BASEMAP",SWIG_From_int(static_cast< int >(0x211)));
  SWIG_Python_SetConstant(d, "MINOR_CUT_BASEMAP",SWIG_From_int(static_cast< int >(0x212)));
  SWIG_Python_SetConstant(d, "MINOR_CONTROL_ELEC_ENLARGE",SWIG_From_int(static_cast< int >(0x213)));
  SWIG_Python_SetConstant(d, "MINOR_SET_OUTPUT_RESOLUTION",SWIG_From_int(static_cast< int >(0x214)));
  SWIG_Python_SetConstant(d, "MINOR_SET_TRANCSPARENCY",SWIG_From_int(static_cast< int >(0X215)));
  SWIG_Python_SetConstant(d, "MINOR_SET_OSD",SWIG_From_int(static_cast< int >(0x216)));
  SWIG_Python_SetConstant(d, "MINOR_RESTORE_DEC_STATUS",SWIG_From_int(static_cast< int >(0x217)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_OPEN_SCREEN",SWIG_From_int(static_cast< int >(0x218)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_CLOSE_SCREEN",SWIG_From_int(static_cast< int >(0x219)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_SWITCH_SIGNAL",SWIG_From_int(static_cast< int >(0x21a)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_MODIFY_NETWORK",SWIG_From_int(static_cast< int >(0x21b)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_MODIFY_LEDRES",SWIG_From_int(static_cast< int >(0x21c)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_SHOW_NORMAL",SWIG_From_int(static_cast< int >(0x21d)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_SHOW_TILE",SWIG_From_int(static_cast< int >(0x21e)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_DEC_NORMAL",SWIG_From_int(static_cast< int >(0x21f)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_DEC_LOWLATENCY",SWIG_From_int(static_cast< int >(0x220)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_MODIFY_SELFRES",SWIG_From_int(static_cast< int >(0x221)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_OUTPUT_POSITION",SWIG_From_int(static_cast< int >(0x222)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_IMAGE_ENHANCE",SWIG_From_int(static_cast< int >(0x223)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_JOIN_SIGNAL",SWIG_From_int(static_cast< int >(0x224)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_SIGNAL_OSD",SWIG_From_int(static_cast< int >(0x225)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_ASSOCIATED_INTERACTION",SWIG_From_int(static_cast< int >(0x226)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_MODIFY_MATRIX",SWIG_From_int(static_cast< int >(0x227)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_WND_TOP_KEEP",SWIG_From_int(static_cast< int >(0x228)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_WND_OPEN_KEEP",SWIG_From_int(static_cast< int >(0x229)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_WALL_MIRROR",SWIG_From_int(static_cast< int >(0x22a)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_UPLOAD_BASEMAP",SWIG_From_int(static_cast< int >(0x22b)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_SHOW_BASEMAP",SWIG_From_int(static_cast< int >(0x22c)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_HIDE_BASEMAP",SWIG_From_int(static_cast< int >(0x22d)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_MODIFY_SERIAL",SWIG_From_int(static_cast< int >(0x22e)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_SET_INPUT",SWIG_From_int(static_cast< int >(0x251)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_SET_OUTPUT",SWIG_From_int(static_cast< int >(0x252)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_SET_OSD",SWIG_From_int(static_cast< int >(0x253)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_SET_LOGO",SWIG_From_int(static_cast< int >(0x254)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_SET_LAYOUT",SWIG_From_int(static_cast< int >(0x255)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_PICTUREPREVIEW",SWIG_From_int(static_cast< int >(0x256)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_GET_OSD",SWIG_From_int(static_cast< int >(0x257)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_GET_LAYOUT",SWIG_From_int(static_cast< int >(0x258)));
  SWIG_Python_SetConstant(d, "MINOR_SCREEN_LAYOUT_CTRL",SWIG_From_int(static_cast< int >(0x259)));
  SWIG_Python_SetConstant(d, "MINOR_GET_ALL_VALID_WND",SWIG_From_int(static_cast< int >(0x260)));
  SWIG_Python_SetConstant(d, "MINOR_GET_SIGNAL_WND",SWIG_From_int(static_cast< int >(0x261)));
  SWIG_Python_SetConstant(d, "MINOR_WINDOW_CTRL",SWIG_From_int(static_cast< int >(0x262)));
  SWIG_Python_SetConstant(d, "MINOR_GET_LAYOUT_LIST",SWIG_From_int(static_cast< int >(0x263)));
  SWIG_Python_SetConstant(d, "MINOR_LAYOUT_CTRL",SWIG_From_int(static_cast< int >(0x264)));
  SWIG_Python_SetConstant(d, "MINOR_SET_LAYOUT",SWIG_From_int(static_cast< int >(0x265)));
  SWIG_Python_SetConstant(d, "MINOR_GET_SIGNAL_LIST",SWIG_From_int(static_cast< int >(0x266)));
  SWIG_Python_SetConstant(d, "MINOR_GET_PLAN_LIST",SWIG_From_int(static_cast< int >(0x267)));
  SWIG_Python_SetConstant(d, "MINOR_SET_PLAN",SWIG_From_int(static_cast< int >(0x268)));
  SWIG_Python_SetConstant(d, "MINOR_CTRL_PLAN",SWIG_From_int(static_cast< int >(0x269)));
  SWIG_Python_SetConstant(d, "MINOR_CTRL_SCREEN",SWIG_From_int(static_cast< int >(0x270)));
  SWIG_Python_SetConstant(d, "MINOR_ADD_NETSIG",SWIG_From_int(static_cast< int >(0x271)));
  SWIG_Python_SetConstant(d, "MINOR_SET_NETSIG",SWIG_From_int(static_cast< int >(0x272)));
  SWIG_Python_SetConstant(d, "MINOR_SET_DECBDCFG",SWIG_From_int(static_cast< int >(0x273)));
  SWIG_Python_SetConstant(d, "MINOR_GET_DECBDCFG",SWIG_From_int(static_cast< int >(0x274)));
  SWIG_Python_SetConstant(d, "MINOR_GET_DEVICE_STATUS",SWIG_From_int(static_cast< int >(0x275)));
  SWIG_Python_SetConstant(d, "MINOR_UPLOAD_PICTURE",SWIG_From_int(static_cast< int >(0x276)));
  SWIG_Python_SetConstant(d, "MINOR_SET_USERPWD",SWIG_From_int(static_cast< int >(0x277)));
  SWIG_Python_SetConstant(d, "MINOR_ADD_LAYOUT",SWIG_From_int(static_cast< int >(0x278)));
  SWIG_Python_SetConstant(d, "MINOR_DEL_LAYOUT",SWIG_From_int(static_cast< int >(0x279)));
  SWIG_Python_SetConstant(d, "MINOR_DEL_NETSIG",SWIG_From_int(static_cast< int >(0x280)));
  SWIG_Python_SetConstant(d, "MINOR_ADD_PLAN",SWIG_From_int(static_cast< int >(0x281)));
  SWIG_Python_SetConstant(d, "MINOR_DEL_PLAN",SWIG_From_int(static_cast< int >(0x282)));
  SWIG_Python_SetConstant(d, "MINOR_GET_EXTERNAL_MATRIX_CFG",SWIG_From_int(static_cast< int >(0x283)));
  SWIG_Python_SetConstant(d, "MINOR_SET_EXTERNAL_MATRIX_CFG",SWIG_From_int(static_cast< int >(0x284)));
  SWIG_Python_SetConstant(d, "MINOR_GET_USER_CFG",SWIG_From_int(static_cast< int >(0x285)));
  SWIG_Python_SetConstant(d, "MINOR_SET_USER_CFG",SWIG_From_int(static_cast< int >(0x286)));
  SWIG_Python_SetConstant(d, "MINOR_GET_DISPLAY_PANEL_LINK_CFG",SWIG_From_int(static_cast< int >(0x287)));
  SWIG_Python_SetConstant(d, "MINOR_SET_DISPLAY_PANEL_LINK_CFG",SWIG_From_int(static_cast< int >(0x288)));
  SWIG_Python_SetConstant(d, "MINOR_GET_WALLSCENE_PARAM",SWIG_From_int(static_cast< int >(0x289)));
  SWIG_Python_SetConstant(d, "MINOR_SET_WALLSCENE_PARAM",SWIG_From_int(static_cast< int >(0x28a)));
  SWIG_Python_SetConstant(d, "MINOR_GET_CURRENT_WALLSCENE",SWIG_From_int(static_cast< int >(0x28b)));
  SWIG_Python_SetConstant(d, "MINOR_SWITCH_WALLSCENE",SWIG_From_int(static_cast< int >(0x28c)));
  SWIG_Python_SetConstant(d, "MINOR_SIP_LOGIN",SWIG_From_int(static_cast< int >(0x28d)));
  SWIG_Python_SetConstant(d, "MINOR_VOIP_START",SWIG_From_int(static_cast< int >(0x28e)));
  SWIG_Python_SetConstant(d, "MINOR_VOIP_STOP",SWIG_From_int(static_cast< int >(0x28f)));
  SWIG_Python_SetConstant(d, "MINOR_WIN_TOP",SWIG_From_int(static_cast< int >(0x290)));
  SWIG_Python_SetConstant(d, "MINOR_WIN_BOTTOM",SWIG_From_int(static_cast< int >(0x291)));
  SWIG_Python_SetConstant(d, "MINOR_SET_USER_ADD_CFG",SWIG_From_int(static_cast< int >(0x292)));
  SWIG_Python_SetConstant(d, "MINOR_SET_USER_MODF_CFG",SWIG_From_int(static_cast< int >(0x293)));
  SWIG_Python_SetConstant(d, "MINOR_SET_USER_DEL_CFG",SWIG_From_int(static_cast< int >(0x294)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_LOAD_HDISK",SWIG_From_int(static_cast< int >(0x300)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DELETE_HDISK",SWIG_From_int(static_cast< int >(0x301)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_MAIN_AUXILIARY_PORT_SWITCH",SWIG_From_int(static_cast< int >(0X302)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_HARD_DISK_CHECK",SWIG_From_int(static_cast< int >(0x303)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CFG_DEVICE_TYPE",SWIG_From_int(static_cast< int >(0x310)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CFG_DEVICE_TYPE",SWIG_From_int(static_cast< int >(0x311)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CFG_WORK_HOT_SERVER",SWIG_From_int(static_cast< int >(0x312)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CFG_WORK_HOT_SERVER",SWIG_From_int(static_cast< int >(0x313)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DELETE_WORK",SWIG_From_int(static_cast< int >(0x314)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DELETE_WORK",SWIG_From_int(static_cast< int >(0x315)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_ADD_WORK",SWIG_From_int(static_cast< int >(0x316)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ADD_WORK",SWIG_From_int(static_cast< int >(0x317)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_IPCHEATMAP_OUTPUT",SWIG_From_int(static_cast< int >(0x318)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_IPCHEATFLOW_OUTPUT",SWIG_From_int(static_cast< int >(0x319)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SMS_SEND",SWIG_From_int(static_cast< int >(0x350)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SMS_SEND",SWIG_From_int(static_cast< int >(0x351)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_SMS_SEND",SWIG_From_int(static_cast< int >(0x352)));
  SWIG_Python_SetConstant(d, "MINOR_SMS_RECV",SWIG_From_int(static_cast< int >(0x353)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SMS_SEARCH",SWIG_From_int(static_cast< int >(0x354)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SMS_SEARCH",SWIG_From_int(static_cast< int >(0x355)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SMS_READ",SWIG_From_int(static_cast< int >(0x356)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SMS_READ",SWIG_From_int(static_cast< int >(0x357)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DIAL_CONNECT",SWIG_From_int(static_cast< int >(0x358)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DIAL_DISCONN",SWIG_From_int(static_cast< int >(0x359)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_WHITELIST_SET",SWIG_From_int(static_cast< int >(0x35A)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_WHITELIST_SET",SWIG_From_int(static_cast< int >(0x35B)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DIAL_PARA_SET",SWIG_From_int(static_cast< int >(0x35C)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DIAL_PARA_SET",SWIG_From_int(static_cast< int >(0x35D)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DIAL_SCHEDULE_SET",SWIG_From_int(static_cast< int >(0x35E)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DIAL_SCHEDULE_SET",SWIG_From_int(static_cast< int >(0x35F)));
  SWIG_Python_SetConstant(d, "MINOR_PLAT_OPER",SWIG_From_int(static_cast< int >(0x360)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CFG_POE_WORK_MODE",SWIG_From_int(static_cast< int >(0x361)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CFG_POE_WORK_MODE",SWIG_From_int(static_cast< int >(0x362)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CFG_FACE_CONTRAST",SWIG_From_int(static_cast< int >(0x363)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CFG_FACE_CONTRAST",SWIG_From_int(static_cast< int >(0x364)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CFG_WHITELIST_FACE_CONTRAST",SWIG_From_int(static_cast< int >(0x365)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CFG_WHITELIST_FACE_CONTRAST",SWIG_From_int(static_cast< int >(0x366)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CHECK_TIME",SWIG_From_int(static_cast< int >(0x367)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ONEKEY_EXPORT_PICTURE",SWIG_From_int(static_cast< int >(0x368)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ONEKEY_DELETE_PICTURE",SWIG_From_int(static_cast< int >(0x369)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ONEKEY_EXPORT_VIDEO",SWIG_From_int(static_cast< int >(0x36a)));
  SWIG_Python_SetConstant(d, "MINOR_VCA_ONEKEY_DELETE_VIDEO",SWIG_From_int(static_cast< int >(0x36b)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CFG_WIRELESS_DIALPARAM",SWIG_From_int(static_cast< int >(0x36c)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CFG_WIRELESS_DIALPARAM",SWIG_From_int(static_cast< int >(0x36d)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CFG_WIRELESS_SMSPARAM",SWIG_From_int(static_cast< int >(0x36e)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CFG_WIRELESS_SMSPARAM",SWIG_From_int(static_cast< int >(0x36f)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CFG_WIRELESS_SMSSElFHELP",SWIG_From_int(static_cast< int >(0x370)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CFG_WIRELESS_SMSSElFHELP",SWIG_From_int(static_cast< int >(0x371)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CFG_WIRELESS_NETFLOWPARAM",SWIG_From_int(static_cast< int >(0x372)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CFG_WIRELESS_NETFLOWPARAM",SWIG_From_int(static_cast< int >(0x373)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_OPEN_DOOR",SWIG_From_int(static_cast< int >(0x400)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CLOSE_DOOR",SWIG_From_int(static_cast< int >(0x401)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ALWAYS_OPEN",SWIG_From_int(static_cast< int >(0x402)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ALWAYS_CLOSE",SWIG_From_int(static_cast< int >(0x403)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CHECK_TIME",SWIG_From_int(static_cast< int >(0x404)));
  SWIG_Python_SetConstant(d, "MINOR_NTP_CHECK_TIME",SWIG_From_int(static_cast< int >(0x405)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CLEAR_CARD",SWIG_From_int(static_cast< int >(0x406)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_RESTORE_CFG",SWIG_From_int(static_cast< int >(0x407)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMIN_ARM",SWIG_From_int(static_cast< int >(0x408)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMIN_DISARM",SWIG_From_int(static_cast< int >(0x409)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_RESTORE_CFG",SWIG_From_int(static_cast< int >(0x40a)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CAPTURE_PIC",SWIG_From_int(static_cast< int >(0x40b)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_NET_REPORT_CFG",SWIG_From_int(static_cast< int >(0x40c)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_GPRS_REPORT_PARAM",SWIG_From_int(static_cast< int >(0x40d)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_REPORT_GROUP_PARAM",SWIG_From_int(static_cast< int >(0x40e)));
  SWIG_Python_SetConstant(d, "MINOR_UNLOCK_PASSWORD_OPEN_DOOR",SWIG_From_int(static_cast< int >(0x40f)));
  SWIG_Python_SetConstant(d, "MINOR_AUTO_RENUMBER",SWIG_From_int(static_cast< int >(0x410)));
  SWIG_Python_SetConstant(d, "MINOR_AUTO_COMPLEMENT_NUMBER",SWIG_From_int(static_cast< int >(0x411)));
  SWIG_Python_SetConstant(d, "MINOR_NORMAL_CFGFILE_INPUT",SWIG_From_int(static_cast< int >(0x412)));
  SWIG_Python_SetConstant(d, "MINOR_NORMAL_CFGFILE_OUTTPUT",SWIG_From_int(static_cast< int >(0x413)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_RIGHT_INPUT",SWIG_From_int(static_cast< int >(0x414)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_RIGHT_OUTTPUT",SWIG_From_int(static_cast< int >(0x415)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_USB_UPGRADE",SWIG_From_int(static_cast< int >(0x416)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_VISITOR_CALL_LADDER",SWIG_From_int(static_cast< int >(0x417)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_HOUSEHOLD_CALL_LADDER",SWIG_From_int(static_cast< int >(0x418)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ACTUAL_GUARD",SWIG_From_int(static_cast< int >(0x419)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ACTUAL_UNGUARD",SWIG_From_int(static_cast< int >(0x41a)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CONTROL_NOT_CODE_OPER_FAILED",SWIG_From_int(static_cast< int >(0x41b)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CONTROL_CLOSE_DOOR",SWIG_From_int(static_cast< int >(0x41c)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CONTROL_OPEN_DOOR",SWIG_From_int(static_cast< int >(0x41d)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CONTROL_ALWAYS_OPEN_DOOR",SWIG_From_int(static_cast< int >(0x41e)));
  SWIG_Python_SetConstant(d, "MINOR_M1_CARD_ENCRYPT_VERIFY_OPEN",SWIG_From_int(static_cast< int >(0x41f)));
  SWIG_Python_SetConstant(d, "MINOR_M1_CARD_ENCRYPT_VERIFY_CLOSE",SWIG_From_int(static_cast< int >(0x420)));
  SWIG_Python_SetConstant(d, "MINOR_NFC_FUNCTION_OPEN",SWIG_From_int(static_cast< int >(0x421)));
  SWIG_Python_SetConstant(d, "MINOR_NFC_FUNCTION_CLOSE",SWIG_From_int(static_cast< int >(0x422)));
  SWIG_Python_SetConstant(d, "MINOR_OFFLINE_DATA_OUTPUT",SWIG_From_int(static_cast< int >(0x423)));
  SWIG_Python_SetConstant(d, "MINOR_CREATE_SSH_LINK",SWIG_From_int(static_cast< int >(0x42d)));
  SWIG_Python_SetConstant(d, "MINOR_CLOSE_SSH_LINK",SWIG_From_int(static_cast< int >(0x42e)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM1",SWIG_From_int(static_cast< int >(0x900)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM2",SWIG_From_int(static_cast< int >(0x901)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM3",SWIG_From_int(static_cast< int >(0x902)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM4",SWIG_From_int(static_cast< int >(0x903)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM5",SWIG_From_int(static_cast< int >(0x904)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM6",SWIG_From_int(static_cast< int >(0x905)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM7",SWIG_From_int(static_cast< int >(0x906)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM8",SWIG_From_int(static_cast< int >(0x907)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM9",SWIG_From_int(static_cast< int >(0x908)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM10",SWIG_From_int(static_cast< int >(0x909)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM11",SWIG_From_int(static_cast< int >(0x90a)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM12",SWIG_From_int(static_cast< int >(0x90b)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM13",SWIG_From_int(static_cast< int >(0x90c)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM14",SWIG_From_int(static_cast< int >(0x90d)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM15",SWIG_From_int(static_cast< int >(0x90e)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM16",SWIG_From_int(static_cast< int >(0x90f)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM17",SWIG_From_int(static_cast< int >(0x910)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM18",SWIG_From_int(static_cast< int >(0x911)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM19",SWIG_From_int(static_cast< int >(0x912)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM20",SWIG_From_int(static_cast< int >(0x913)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM21",SWIG_From_int(static_cast< int >(0x914)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM22",SWIG_From_int(static_cast< int >(0x915)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM23",SWIG_From_int(static_cast< int >(0x916)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM24",SWIG_From_int(static_cast< int >(0x917)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM25",SWIG_From_int(static_cast< int >(0x918)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM26",SWIG_From_int(static_cast< int >(0x919)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM27",SWIG_From_int(static_cast< int >(0x91a)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM28",SWIG_From_int(static_cast< int >(0x91b)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM29",SWIG_From_int(static_cast< int >(0x91c)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM30",SWIG_From_int(static_cast< int >(0x91d)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM31",SWIG_From_int(static_cast< int >(0x91e)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM32",SWIG_From_int(static_cast< int >(0x91f)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM33",SWIG_From_int(static_cast< int >(0x920)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM34",SWIG_From_int(static_cast< int >(0x921)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM35",SWIG_From_int(static_cast< int >(0x922)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM36",SWIG_From_int(static_cast< int >(0x923)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM37",SWIG_From_int(static_cast< int >(0x924)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM38",SWIG_From_int(static_cast< int >(0x925)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM39",SWIG_From_int(static_cast< int >(0x926)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM40",SWIG_From_int(static_cast< int >(0x927)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM41",SWIG_From_int(static_cast< int >(0x928)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM42",SWIG_From_int(static_cast< int >(0x929)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM43",SWIG_From_int(static_cast< int >(0x92a)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM44",SWIG_From_int(static_cast< int >(0x92b)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM45",SWIG_From_int(static_cast< int >(0x92c)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM46",SWIG_From_int(static_cast< int >(0x92d)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM47",SWIG_From_int(static_cast< int >(0x92e)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM48",SWIG_From_int(static_cast< int >(0x92f)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM49",SWIG_From_int(static_cast< int >(0x930)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM50",SWIG_From_int(static_cast< int >(0x931)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM51",SWIG_From_int(static_cast< int >(0x932)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM52",SWIG_From_int(static_cast< int >(0x933)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM53",SWIG_From_int(static_cast< int >(0x934)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM54",SWIG_From_int(static_cast< int >(0x935)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM55",SWIG_From_int(static_cast< int >(0x936)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM56",SWIG_From_int(static_cast< int >(0x937)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM57",SWIG_From_int(static_cast< int >(0x938)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM58",SWIG_From_int(static_cast< int >(0x939)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM59",SWIG_From_int(static_cast< int >(0x93a)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM60",SWIG_From_int(static_cast< int >(0x93b)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM61",SWIG_From_int(static_cast< int >(0x93c)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM62",SWIG_From_int(static_cast< int >(0x93d)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM63",SWIG_From_int(static_cast< int >(0x93e)));
  SWIG_Python_SetConstant(d, "MINOR_OPERATION_CUSTOM64",SWIG_From_int(static_cast< int >(0x93f)));
  SWIG_Python_SetConstant(d, "MINOR_SET_WIFI_PARAMETER",SWIG_From_int(static_cast< int >(0x950)));
  SWIG_Python_SetConstant(d, "MINOR_EZVIZ_LOGIN",SWIG_From_int(static_cast< int >(0x951)));
  SWIG_Python_SetConstant(d, "MINOR_EZVIZ_LOGINOUT",SWIG_From_int(static_cast< int >(0x952)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_ADD",SWIG_From_int(static_cast< int >(0x953)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_DELETE",SWIG_From_int(static_cast< int >(0x954)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_GET_STATUS",SWIG_From_int(static_cast< int >(0x955)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_SET_TMP_PASSWORD",SWIG_From_int(static_cast< int >(0x956)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_SET_SILENT_MODE",SWIG_From_int(static_cast< int >(0x957)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_SET_LATE_WARNING",SWIG_From_int(static_cast< int >(0x958)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_IPC_ADD",SWIG_From_int(static_cast< int >(0x959)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_IPC_REMOVE",SWIG_From_int(static_cast< int >(0x95a)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_DETECTOR_ADD",SWIG_From_int(static_cast< int >(0x95b)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_DETECTOR_REMOVE",SWIG_From_int(static_cast< int >(0x95c)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_MESSAGE_REMINDING_OPEN",SWIG_From_int(static_cast< int >(0x95d)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_MESSAGE_REMINDING_CLOSE",SWIG_From_int(static_cast< int >(0x95e)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_SET_HEART_BEAT",SWIG_From_int(static_cast< int >(0x95f)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_REBOOT",SWIG_From_int(static_cast< int >(0x960)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CLEAR_USER",SWIG_From_int(static_cast< int >(0x961)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_FORMAT",SWIG_From_int(static_cast< int >(0x962)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_FINGER_CHANGE",SWIG_From_int(static_cast< int >(0x963)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_PASSWORD_CHANGE",SWIG_From_int(static_cast< int >(0x964)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CARD_CHANGE",SWIG_From_int(static_cast< int >(0x965)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_USER_CHANGE",SWIG_From_int(static_cast< int >(0x966)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_SYSTEM_CHANGE",SWIG_From_int(static_cast< int >(0x967)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CHANGE_ADD_UESR",SWIG_From_int(static_cast< int >(0x968)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CHANGE_DEL_UESR",SWIG_From_int(static_cast< int >(0x969)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CHANGE_CUSTOM_USER_NAME",SWIG_From_int(static_cast< int >(0x96a)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CHANGE_REMOTE_DEVICE",SWIG_From_int(static_cast< int >(0x96b)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CHANGE_ADD_FP",SWIG_From_int(static_cast< int >(0x96c)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CHANGE_DEL_FP",SWIG_From_int(static_cast< int >(0x96d)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CHANGE_ADD_PASSWORD",SWIG_From_int(static_cast< int >(0x96e)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CHANGE_DEL_PASSWORD",SWIG_From_int(static_cast< int >(0x96f)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CHANGE_ADD_CARD",SWIG_From_int(static_cast< int >(0x970)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CHANGE_DEL_CARD",SWIG_From_int(static_cast< int >(0x971)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_NETWORK_SWITCH",SWIG_From_int(static_cast< int >(0x972)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CLEAR_NETWORK_DATA",SWIG_From_int(static_cast< int >(0x973)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CLEAR_HOST_USER",SWIG_From_int(static_cast< int >(0x974)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CLEAR_GUEST_USER",SWIG_From_int(static_cast< int >(0x975)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CLEAN_ALL_REMOTE_DEVICE",SWIG_From_int(static_cast< int >(0x976)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CLEAN_NORMAL_USER_FINGRT",SWIG_From_int(static_cast< int >(0x977)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CLEAN_ALL_CARD",SWIG_From_int(static_cast< int >(0x978)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CLEAN_ALL_PASSWORD",SWIG_From_int(static_cast< int >(0x979)));
  SWIG_Python_SetConstant(d, "MINOR_START_WIRELESSSERVER",SWIG_From_int(static_cast< int >(0x97a)));
  SWIG_Python_SetConstant(d, "MINOR_STOP_WIRELESSSERVER",SWIG_From_int(static_cast< int >(0x97b)));
  SWIG_Python_SetConstant(d, "MINOR_EMERGENCY_CARD_AUTH_NORMAL_CARD",SWIG_From_int(static_cast< int >(0x97c)));
  SWIG_Python_SetConstant(d, "MINOR_CHANGE_ALWAYS_OPEN_RIGHT",SWIG_From_int(static_cast< int >(0x97d)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_DOOR_BELL_EVENT",SWIG_From_int(static_cast< int >(0x97e)));
  SWIG_Python_SetConstant(d, "MINOR_SET_TRIGGERMODE_CFG",SWIG_From_int(static_cast< int >(0x1001)));
  SWIG_Python_SetConstant(d, "MINOR_GET_TRIGGERMODE_CFG",SWIG_From_int(static_cast< int >(0x1002)));
  SWIG_Python_SetConstant(d, "MINOR_SET_IOOUT_CFG",SWIG_From_int(static_cast< int >(0x1003)));
  SWIG_Python_SetConstant(d, "MINOR_GET_IOOUT_CFG",SWIG_From_int(static_cast< int >(0x1004)));
  SWIG_Python_SetConstant(d, "MINOR_GET_TRIGGERMODE_DEFAULT",SWIG_From_int(static_cast< int >(0x1005)));
  SWIG_Python_SetConstant(d, "MINOR_GET_ITCSTATUS",SWIG_From_int(static_cast< int >(0x1006)));
  SWIG_Python_SetConstant(d, "MINOR_SET_STATUS_DETECT_CFG",SWIG_From_int(static_cast< int >(0x1007)));
  SWIG_Python_SetConstant(d, "MINOR_GET_STATUS_DETECT_CFG",SWIG_From_int(static_cast< int >(0x1008)));
  SWIG_Python_SetConstant(d, "MINOR_SET_VIDEO_TRIGGERMODE_CFG",SWIG_From_int(static_cast< int >(0x1009)));
  SWIG_Python_SetConstant(d, "MINOR_GET_VIDEO_TRIGGERMODE_CFG",SWIG_From_int(static_cast< int >(0x100a)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_GUARD",SWIG_From_int(static_cast< int >(0x1010)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_UNGUARD",SWIG_From_int(static_cast< int >(0x1011)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_BYPASS",SWIG_From_int(static_cast< int >(0x1012)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DURESS_ACCESS",SWIG_From_int(static_cast< int >(0x1013)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_RS485_PARAM",SWIG_From_int(static_cast< int >(0x1018)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARM_OUTPUT",SWIG_From_int(static_cast< int >(0x1019)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ACCESS_OPEN",SWIG_From_int(static_cast< int >(0x101a)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ACCESS_CLOSE",SWIG_From_int(static_cast< int >(0x101b)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SIREN_OPEN",SWIG_From_int(static_cast< int >(0x101c)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SIREN_CLOSE",SWIG_From_int(static_cast< int >(0x101d)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOD_ZONE_CONFIG",SWIG_From_int(static_cast< int >(0x101e)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOD_ALARMOUT_CONIFG",SWIG_From_int(static_cast< int >(0x101f)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOD_ANALOG_CONFIG",SWIG_From_int(static_cast< int >(0x1020)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_RS485_CONFIG",SWIG_From_int(static_cast< int >(0x1021)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_PHONE_CONFIG",SWIG_From_int(static_cast< int >(0x1022)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ADD_ADMIN",SWIG_From_int(static_cast< int >(0x1023)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOD_ADMIN_PARAM",SWIG_From_int(static_cast< int >(0x1024)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DEL_ADMIN",SWIG_From_int(static_cast< int >(0x1025)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ADD_NETUSER",SWIG_From_int(static_cast< int >(0x1026)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOD_NETUSER_PARAM",SWIG_From_int(static_cast< int >(0x1027)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DEL_NETUSER",SWIG_From_int(static_cast< int >(0x1028)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ADD_OPERATORUSER",SWIG_From_int(static_cast< int >(0x1029)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOD_OPERATORUSER_PW",SWIG_From_int(static_cast< int >(0x102a)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DEL_OPERATORUSER",SWIG_From_int(static_cast< int >(0x102b)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ADD_KEYPADUSER",SWIG_From_int(static_cast< int >(0x102c)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DEL_KEYPADUSER",SWIG_From_int(static_cast< int >(0x102d)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOD_HOST_CONFIG",SWIG_From_int(static_cast< int >(0x1032)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_RESTORE_BYPASS",SWIG_From_int(static_cast< int >(0x1033)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARMOUT_OPEN",SWIG_From_int(static_cast< int >(0x1034)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ALARMOUT_CLOSE",SWIG_From_int(static_cast< int >(0x1035)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOD_SUBSYSTEM_PARAM",SWIG_From_int(static_cast< int >(0x1036)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_GROUP_BYPASS",SWIG_From_int(static_cast< int >(0x1037)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_RESTORE_GROUP_BYPASS",SWIG_From_int(static_cast< int >(0x1038)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOD_GRPS_PARAM",SWIG_From_int(static_cast< int >(0x1039)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOD_REPORT_MOD",SWIG_From_int(static_cast< int >(0x103b)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOD_GATEWAY_PARAM",SWIG_From_int(static_cast< int >(0x103c)));
  SWIG_Python_SetConstant(d, "MINOR_STAY_ARM",SWIG_From_int(static_cast< int >(0x104c)));
  SWIG_Python_SetConstant(d, "MINOR_QUICK_ARM",SWIG_From_int(static_cast< int >(0x104d)));
  SWIG_Python_SetConstant(d, "MINOR_AUTOMATIC_ARM",SWIG_From_int(static_cast< int >(0x104e)));
  SWIG_Python_SetConstant(d, "MINOR_AUTOMATIC_DISARM",SWIG_From_int(static_cast< int >(0x104f)));
  SWIG_Python_SetConstant(d, "MINOR_KEYSWITCH_ARM",SWIG_From_int(static_cast< int >(0x1050)));
  SWIG_Python_SetConstant(d, "MINOR_KEYSWITCH_DISARM",SWIG_From_int(static_cast< int >(0x1051)));
  SWIG_Python_SetConstant(d, "MINOR_CLEAR_ALARM",SWIG_From_int(static_cast< int >(0x1052)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_FAULT_CFG",SWIG_From_int(static_cast< int >(0x1053)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_EVENT_TRIGGER_ALARMOUT_CFG",SWIG_From_int(static_cast< int >(0x1054)));
  SWIG_Python_SetConstant(d, "MINOR_SEARCH_EXTERNAL_MODULE",SWIG_From_int(static_cast< int >(0x1055)));
  SWIG_Python_SetConstant(d, "MINOR_REGISTER_EXTERNAL_MODULE",SWIG_From_int(static_cast< int >(0x1056)));
  SWIG_Python_SetConstant(d, "MINOR_CLOSE_KEYBOARD_ALARM",SWIG_From_int(static_cast< int >(0x1057)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_3G_PARAM",SWIG_From_int(static_cast< int >(0x1058)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_PRINT_PARAM",SWIG_From_int(static_cast< int >(0x1059)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SD_CARD_FORMAT",SWIG_From_int(static_cast< int >(0x1060)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SUBSYSTEM_UPGRADE",SWIG_From_int(static_cast< int >(0x1061)));
  SWIG_Python_SetConstant(d, "MINOR_PLAN_ARM_CFG",SWIG_From_int(static_cast< int >(0x1062)));
  SWIG_Python_SetConstant(d, "MINOR_PHONE_ARM",SWIG_From_int(static_cast< int >(0x1063)));
  SWIG_Python_SetConstant(d, "MINOR_PHONE_STAY_ARM",SWIG_From_int(static_cast< int >(0x1064)));
  SWIG_Python_SetConstant(d, "MINOR_PHONE_QUICK_ARM",SWIG_From_int(static_cast< int >(0x1065)));
  SWIG_Python_SetConstant(d, "MINOR_PHONE_DISARM",SWIG_From_int(static_cast< int >(0x1066)));
  SWIG_Python_SetConstant(d, "MINOR_PHONE_CLEAR_ALARM",SWIG_From_int(static_cast< int >(0x1067)));
  SWIG_Python_SetConstant(d, "MINOR_WHITELIST_CFG",SWIG_From_int(static_cast< int >(0x1068)));
  SWIG_Python_SetConstant(d, "MINOR_TIME_TRIGGER_CFG",SWIG_From_int(static_cast< int >(0x1069)));
  SWIG_Python_SetConstant(d, "MINOR_CAPTRUE_CFG",SWIG_From_int(static_cast< int >(0x106a)));
  SWIG_Python_SetConstant(d, "MINOR_TAMPER_CFG",SWIG_From_int(static_cast< int >(0x106b)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_KEYPAD_UPGRADE",SWIG_From_int(static_cast< int >(0x106c)));
  SWIG_Python_SetConstant(d, "MINOR_ONETOUCH_AWAY_ARMING",SWIG_From_int(static_cast< int >(0x106d)));
  SWIG_Python_SetConstant(d, "MINOR_ONETOUCH_STAY_ARMING",SWIG_From_int(static_cast< int >(0x106e)));
  SWIG_Python_SetConstant(d, "MINOR_SINGLE_PARTITION_ARMING_OR_DISARMING",SWIG_From_int(static_cast< int >(0x106f)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_CONFIGURATION",SWIG_From_int(static_cast< int >(0x1070)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_ARMING_OR_DISARMING",SWIG_From_int(static_cast< int >(0x1071)));
  SWIG_Python_SetConstant(d, "MINOR_EXPENDING_NETCENTER_CONFIGURATION",SWIG_From_int(static_cast< int >(0x1072)));
  SWIG_Python_SetConstant(d, "MINOR_NETCARD_CONFIGURATION",SWIG_From_int(static_cast< int >(0x1073)));
  SWIG_Python_SetConstant(d, "MINOR_DDNS_CONFIGURATION",SWIG_From_int(static_cast< int >(0x1074)));
  SWIG_Python_SetConstant(d, "MINOR_RS485BUS_CONFIGURATION",SWIG_From_int(static_cast< int >(0x1075)));
  SWIG_Python_SetConstant(d, "MINOR_RS485BUS_RE_REGISTRATION",SWIG_From_int(static_cast< int >(0x1076)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_OPEN_ELECTRIC_LOCK",SWIG_From_int(static_cast< int >(0x1077)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CLOSE_ELECTRIC_LOCK",SWIG_From_int(static_cast< int >(0x1078)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_OPEN_ELECTRIC_LOCK",SWIG_From_int(static_cast< int >(0x1079)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CLOSE_ELECTRIC_LOCK",SWIG_From_int(static_cast< int >(0x107a)));
  SWIG_Python_SetConstant(d, "MINOR_OPEN_ALARM_LAMP",SWIG_From_int(static_cast< int >(0x107b)));
  SWIG_Python_SetConstant(d, "MINOR_CLOSE_ALARM_LAMP",SWIG_From_int(static_cast< int >(0x107c)));
  SWIG_Python_SetConstant(d, "MINOR_TEMPORARY_PASSWORD",SWIG_From_int(static_cast< int >(0x107d)));
  SWIG_Python_SetConstant(d, "MINOR_HIDDNS_CONFIG",SWIG_From_int(static_cast< int >(0x1082)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_KEYBOARD_UPDATA",SWIG_From_int(static_cast< int >(0x1083)));
  SWIG_Python_SetConstant(d, "MINOR_ZONE_ADD_DETECTOR",SWIG_From_int(static_cast< int >(0x1084)));
  SWIG_Python_SetConstant(d, "MINOR_ZONE_DELETE_DETECTOR",SWIG_From_int(static_cast< int >(0x1085)));
  SWIG_Python_SetConstant(d, "MINOR_QUERY_DETECTOR_SIGNAL",SWIG_From_int(static_cast< int >(0x1086)));
  SWIG_Python_SetConstant(d, "MINOR_QUERY_DETECTOR_BATTERY",SWIG_From_int(static_cast< int >(0x1087)));
  SWIG_Python_SetConstant(d, "MINOR_SET_DETECTOR_GUARD",SWIG_From_int(static_cast< int >(0x1088)));
  SWIG_Python_SetConstant(d, "MINOR_SET_DETECTOR_UNGUARD",SWIG_From_int(static_cast< int >(0x1089)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_CONFIGURATION",SWIG_From_int(static_cast< int >(0x108a)));
  SWIG_Python_SetConstant(d, "MINOR_OPEN_VOICE",SWIG_From_int(static_cast< int >(0x108b)));
  SWIG_Python_SetConstant(d, "MINOR_CLOSE_VOICE",SWIG_From_int(static_cast< int >(0x108c)));
  SWIG_Python_SetConstant(d, "MINOR_ENABLE_FUNCTION_KEY",SWIG_From_int(static_cast< int >(0x108d)));
  SWIG_Python_SetConstant(d, "MINOR_DISABLE_FUNCTION_KEY",SWIG_From_int(static_cast< int >(0x108e)));
  SWIG_Python_SetConstant(d, "MINOR_READ_CARD",SWIG_From_int(static_cast< int >(0x108f)));
  SWIG_Python_SetConstant(d, "MINOR_START_BROADCAST",SWIG_From_int(static_cast< int >(0x1090)));
  SWIG_Python_SetConstant(d, "MINOR_STOP_BROADCAST",SWIG_From_int(static_cast< int >(0x1091)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ZONE_MODULE_UPGRADE",SWIG_From_int(static_cast< int >(0x1092)));
  SWIG_Python_SetConstant(d, "MINOR_NETWORK_MODULE_EXTEND",SWIG_From_int(static_cast< int >(0x1093)));
  SWIG_Python_SetConstant(d, "MINOR_ADD_CONTROLLER",SWIG_From_int(static_cast< int >(0x1094)));
  SWIG_Python_SetConstant(d, "MINOR_DELETE_CONTORLLER",SWIG_From_int(static_cast< int >(0x1095)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_NETWORKMODULE_UPGRADE",SWIG_From_int(static_cast< int >(0x1096)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_OUTPUT_ADD",SWIG_From_int(static_cast< int >(0x1097)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_OUTPUT_DEL",SWIG_From_int(static_cast< int >(0x1098)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_REPEATER_ADD",SWIG_From_int(static_cast< int >(0x1099)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_REPEATER_DEL",SWIG_From_int(static_cast< int >(0x109a)));
  SWIG_Python_SetConstant(d, "MINOR_PHONELIST_CFG",SWIG_From_int(static_cast< int >(0x109b)));
  SWIG_Python_SetConstant(d, "MINOR_RF_SIGNAL_CHECK",SWIG_From_int(static_cast< int >(0x109c)));
  SWIG_Python_SetConstant(d, "MINOR_USB_UPGRADE",SWIG_From_int(static_cast< int >(0x109d)));
  SWIG_Python_SetConstant(d, "MINOR_DOOR_TIME_REMINDER_CFG",SWIG_From_int(static_cast< int >(0x109f)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_SIREN_ADD",SWIG_From_int(static_cast< int >(0x1100)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_SIREN_DEL",SWIG_From_int(static_cast< int >(0x1101)));
  SWIG_Python_SetConstant(d, "MINOR_OUT_SCALE_OPEN",SWIG_From_int(static_cast< int >(0x1102)));
  SWIG_Python_SetConstant(d, "MINOR_OUT_SCALE_CLOSE",SWIG_From_int(static_cast< int >(0x1103)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_4G_MODULS_START",SWIG_From_int(static_cast< int >(0x1108)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_4G_MODULS_STOP",SWIG_From_int(static_cast< int >(0x1109)));
  SWIG_Python_SetConstant(d, "MINOR_EZVIZ_CLOUD_START",SWIG_From_int(static_cast< int >(0x1110)));
  SWIG_Python_SetConstant(d, "MINOR_EZVIZ_CLOUD_STOP",SWIG_From_int(static_cast< int >(0x1111)));
  SWIG_Python_SetConstant(d, "MINOR_SIPUA_GRID_START",SWIG_From_int(static_cast< int >(0x1112)));
  SWIG_Python_SetConstant(d, "MINOR_SIPUA_GRID_STOP",SWIG_From_int(static_cast< int >(0x1113)));
  SWIG_Python_SetConstant(d, "MINOR_MODBUS_FILE_DOWNLOAD",SWIG_From_int(static_cast< int >(0x1114)));
  SWIG_Python_SetConstant(d, "MINOR_MODBUS_FILE_UPLOAD",SWIG_From_int(static_cast< int >(0x1115)));
  SWIG_Python_SetConstant(d, "MINOR_RS485_DLL_FILE_DOWNLOAD",SWIG_From_int(static_cast< int >(0x1116)));
  SWIG_Python_SetConstant(d, "MINOR_RS485_DLL_FLIE_UPLOAD",SWIG_From_int(static_cast< int >(0x1117)));
  SWIG_Python_SetConstant(d, "MINOR_TX1_REBOOT",SWIG_From_int(static_cast< int >(0x1118)));
  SWIG_Python_SetConstant(d, "MINOR_LORA_PARAM",SWIG_From_int(static_cast< int >(0x1119)));
  SWIG_Python_SetConstant(d, "MINOR_GB28181_PLATE_CFG_PARAM",SWIG_From_int(static_cast< int >(0x111a)));
  SWIG_Python_SetConstant(d, "MINOR_GB28181_SERVER_START",SWIG_From_int(static_cast< int >(0x111b)));
  SWIG_Python_SetConstant(d, "MINOR_GB28181_SERVER_STOP",SWIG_From_int(static_cast< int >(0x111c)));
  SWIG_Python_SetConstant(d, "MINOR_WEB_AUTHENTICATION",SWIG_From_int(static_cast< int >(0x111d)));
  SWIG_Python_SetConstant(d, "MINOR_SADP_ENABLED",SWIG_From_int(static_cast< int >(0x111e)));
  SWIG_Python_SetConstant(d, "MINOR_HTTPS_ENABLED",SWIG_From_int(static_cast< int >(0x111f)));
  SWIG_Python_SetConstant(d, "MINOR_EZVIZ_PARAM_CFG",SWIG_From_int(static_cast< int >(0x1120)));
  SWIG_Python_SetConstant(d, "MINOR_SET_MOTION_DETECTION_CFG",SWIG_From_int(static_cast< int >(0x1121)));
  SWIG_Python_SetConstant(d, "MINOR_GET_MOTION_DETECTION_CFG",SWIG_From_int(static_cast< int >(0x1122)));
  SWIG_Python_SetConstant(d, "MINOR_SET_SHELTER_ALARM_CFG",SWIG_From_int(static_cast< int >(0x1123)));
  SWIG_Python_SetConstant(d, "MINOR_GET_SHELTER_ALARM_CFG",SWIG_From_int(static_cast< int >(0x1124)));
  SWIG_Python_SetConstant(d, "MINOR_SET_VIDEO_LOSS_CFG",SWIG_From_int(static_cast< int >(0x1125)));
  SWIG_Python_SetConstant(d, "MINOR_GET_VIDEO_LOSS_CFG",SWIG_From_int(static_cast< int >(0x1126)));
  SWIG_Python_SetConstant(d, "MINOR_SET_ABNORMAL_CFG",SWIG_From_int(static_cast< int >(0x1127)));
  SWIG_Python_SetConstant(d, "MINOR_GET_ABNORMAL_CFG",SWIG_From_int(static_cast< int >(0x1128)));
  SWIG_Python_SetConstant(d, "MINOR_SET_ALARM_LINKAGE_CFG",SWIG_From_int(static_cast< int >(0x1129)));
  SWIG_Python_SetConstant(d, "MINOR_GET_ALARM_LINKAGE_CFG",SWIG_From_int(static_cast< int >(0x112a)));
  SWIG_Python_SetConstant(d, "MINOR_SET_NETWORK_CFG",SWIG_From_int(static_cast< int >(0x112b)));
  SWIG_Python_SetConstant(d, "MINOR_GET_NETWORK_CFG",SWIG_From_int(static_cast< int >(0x112c)));
  SWIG_Python_SetConstant(d, "MINOR_SET_VIDEO_MASK_CFG",SWIG_From_int(static_cast< int >(0x112d)));
  SWIG_Python_SetConstant(d, "MINOR_GET_VIDEO_MASK_CFG",SWIG_From_int(static_cast< int >(0x112e)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_ADD_CAR_INFO",SWIG_From_int(static_cast< int >(0x2001)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_MOD_CAR_INFO",SWIG_From_int(static_cast< int >(0x2002)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DEL_CAR_INFO",SWIG_From_int(static_cast< int >(0x2003)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FIND_CAR_INFO",SWIG_From_int(static_cast< int >(0x2004)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_ADD_MONITOR_INFO",SWIG_From_int(static_cast< int >(0x2005)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_MOD_MONITOR_INFO",SWIG_From_int(static_cast< int >(0x2006)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DEL_MONITOR_INFO",SWIG_From_int(static_cast< int >(0x2007)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FIND_MONITOR_INFO",SWIG_From_int(static_cast< int >(0x2008)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FIND_NORMAL_PASS_INFO",SWIG_From_int(static_cast< int >(0x2009)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FIND_ABNORMAL_PASS_INFO",SWIG_From_int(static_cast< int >(0x200a)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FIND_PEDESTRIAN_PASS_INFO",SWIG_From_int(static_cast< int >(0x200b)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_PIC_PREVIEW",SWIG_From_int(static_cast< int >(0x200c)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SET_GATE_PARM_CFG",SWIG_From_int(static_cast< int >(0x200d)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_GET_GATE_PARM_CFG",SWIG_From_int(static_cast< int >(0x200e)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SET_DATAUPLOAD_PARM_CFG",SWIG_From_int(static_cast< int >(0x200f)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_GET_DATAUPLOAD_PARM_CFG",SWIG_From_int(static_cast< int >(0x2010)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DEVICE_CONTROL",SWIG_From_int(static_cast< int >(0x2011)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_ADD_EXTERNAL_DEVICE_INFO",SWIG_From_int(static_cast< int >(0x2012)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_MOD_EXTERNAL_DEVICE_INFO",SWIG_From_int(static_cast< int >(0x2013)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DEL_EXTERNAL_DEVICE_INFO",SWIG_From_int(static_cast< int >(0x2014)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FIND_EXTERNAL_DEVICE_INFO",SWIG_From_int(static_cast< int >(0x2015)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_ADD_CHARGE_RULE",SWIG_From_int(static_cast< int >(0x2016)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_MOD_CHARGE_RULE",SWIG_From_int(static_cast< int >(0x2017)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DEL_CHARGE_RULE",SWIG_From_int(static_cast< int >(0x2018)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FIND_CHARGE_RULE",SWIG_From_int(static_cast< int >(0x2019)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_COUNT_NORMAL_CURRENTINFO",SWIG_From_int(static_cast< int >(0x2020)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_EXPORT_NORMAL_CURRENTINFO_REPORT",SWIG_From_int(static_cast< int >(0x2021)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_COUNT_ABNORMAL_CURRENTINFO",SWIG_From_int(static_cast< int >(0x2022)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_EXPORT_ABNORMAL_CURRENTINFO_REPORT",SWIG_From_int(static_cast< int >(0x2023)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_COUNT_PEDESTRIAN_CURRENTINFO",SWIG_From_int(static_cast< int >(0x2024)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_EXPORT_PEDESTRIAN_CURRENTINFO_REPORT",SWIG_From_int(static_cast< int >(0x2025)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FIND_CAR_CHARGEINFO",SWIG_From_int(static_cast< int >(0x2026)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_COUNT_CAR_CHARGEINFO",SWIG_From_int(static_cast< int >(0x2027)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_EXPORT_CAR_CHARGEINFO_REPORT",SWIG_From_int(static_cast< int >(0x2028)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FIND_SHIFTINFO",SWIG_From_int(static_cast< int >(0x2029)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FIND_CARDINFO",SWIG_From_int(static_cast< int >(0x2030)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_ADD_RELIEF_RULE",SWIG_From_int(static_cast< int >(0x2031)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_MOD_RELIEF_RULE",SWIG_From_int(static_cast< int >(0x2032)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DEL_RELIEF_RULE",SWIG_From_int(static_cast< int >(0x2033)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FIND_RELIEF_RULE",SWIG_From_int(static_cast< int >(0x2034)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_GET_ENDETCFG",SWIG_From_int(static_cast< int >(0x2035)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SET_ENDETCFG",SWIG_From_int(static_cast< int >(0x2036)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SET_ENDEV_ISSUEDDATA",SWIG_From_int(static_cast< int >(0x2037)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_DEL_ENDEV_ISSUEDDATA",SWIG_From_int(static_cast< int >(0x2038)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DEVICE_CONTROL",SWIG_From_int(static_cast< int >(0x2101)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SET_GATE_PARM_CFG",SWIG_From_int(static_cast< int >(0x2102)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GET_GATE_PARM_CFG",SWIG_From_int(static_cast< int >(0x2103)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SET_DATAUPLOAD_PARM_CFG",SWIG_From_int(static_cast< int >(0x2104)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GET_DATAUPLOAD_PARM_CFG",SWIG_From_int(static_cast< int >(0x2105)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GET_BASE_INFO",SWIG_From_int(static_cast< int >(0x2106)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GET_OVERLAP_CFG",SWIG_From_int(static_cast< int >(0x2107)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SET_OVERLAP_CFG",SWIG_From_int(static_cast< int >(0x2108)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GET_ROAD_INFO",SWIG_From_int(static_cast< int >(0x2109)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_START_TRANSCHAN",SWIG_From_int(static_cast< int >(0x210a)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GET_ECTWORKSTATE",SWIG_From_int(static_cast< int >(0x210b)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GET_ECTCHANINFO",SWIG_From_int(static_cast< int >(0x210c)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ADD_EXTERNAL_DEVICE_INFO",SWIG_From_int(static_cast< int >(0x210d)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_MOD_EXTERNAL_DEVICE_INFO",SWIG_From_int(static_cast< int >(0x210e)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GET_ENDETCFG",SWIG_From_int(static_cast< int >(0x210f)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SET_ENDETCFG",SWIG_From_int(static_cast< int >(0x2110)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ENDEV_ISSUEDDATA",SWIG_From_int(static_cast< int >(0x2111)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DEL_ENDEV_ISSUEDDATA",SWIG_From_int(static_cast< int >(0x2112)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ON_CTRL_LAMP",SWIG_From_int(static_cast< int >(0x2115)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_OFF_CTRL_LAMP",SWIG_From_int(static_cast< int >(0x2116)));
  SWIG_Python_SetConstant(d, "MINOR_SET_VOICE_LEVEL_PARAM",SWIG_From_int(static_cast< int >(0x2117)));
  SWIG_Python_SetConstant(d, "MINOR_SET_VOICE_INTERCOM_PARAM",SWIG_From_int(static_cast< int >(0x2118)));
  SWIG_Python_SetConstant(d, "MINOR_SET_INTELLIGENT_PARAM",SWIG_From_int(static_cast< int >(0x2119)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SET_RAID_SPEED",SWIG_From_int(static_cast< int >(0x211a)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SET_RAID_SPEED",SWIG_From_int(static_cast< int >(0x211b)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CREATE_STORAGE_POOL",SWIG_From_int(static_cast< int >(0x211c)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DEL_STORAGE_POOL",SWIG_From_int(static_cast< int >(0x211d)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DEL_PIC",SWIG_From_int(static_cast< int >(0x2120)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DEL_RECORD",SWIG_From_int(static_cast< int >(0x2121)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CLOUD_ENABLE",SWIG_From_int(static_cast< int >(0x2123)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CLOUD_DISABLE",SWIG_From_int(static_cast< int >(0x2124)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CLOUD_MODIFY_PARAM",SWIG_From_int(static_cast< int >(0x2125)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CLOUD_MODIFY_VOLUME",SWIG_From_int(static_cast< int >(0x2126)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GET_GB28181_SERVICE_PARAM",SWIG_From_int(static_cast< int >(0x2127)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SET_GB28181_SERVICE_PARAM",SWIG_From_int(static_cast< int >(0x2128)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_GET_GB28181_SERVICE_PARAM",SWIG_From_int(static_cast< int >(0x2129)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SET_GB28181_SERVICE_PARAM",SWIG_From_int(static_cast< int >(0x212a)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SET_SIP_SERVER",SWIG_From_int(static_cast< int >(0x212b)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SET_SIP_SERVER",SWIG_From_int(static_cast< int >(0x212c)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_BLACKWHITEFILE_OUTPUT",SWIG_From_int(static_cast< int >(0x212d)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_BLACKWHITEFILE_INPUT",SWIG_From_int(static_cast< int >(0x212e)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_BALCKWHITECFGFILE_OUTPUT",SWIG_From_int(static_cast< int >(0x212f)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_BALCKWHITECFGFILE_INPUT",SWIG_From_int(static_cast< int >(0x2130)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CREATE_MOD_VIEWLIB_SPACE",SWIG_From_int(static_cast< int >(0x2200)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DELETE_VIEWLIB_FILE",SWIG_From_int(static_cast< int >(0x2201)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_DOWNLOAD_VIEWLIB_FILE",SWIG_From_int(static_cast< int >(0x2202)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_UPLOAD_VIEWLIB_FILE",SWIG_From_int(static_cast< int >(0x2203)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CREATE_MOD_VIEWLIB_SPACE",SWIG_From_int(static_cast< int >(0x2204)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SET_DEVICE_ACTIVE",SWIG_From_int(static_cast< int >(0x3000)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SET_DEVICE_ACTIVE",SWIG_From_int(static_cast< int >(0x3001)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_PARA_FACTORY_DEFAULT",SWIG_From_int(static_cast< int >(0x3002)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_PARA_FACTORY_DEFAULT",SWIG_From_int(static_cast< int >(0x3003)));
  SWIG_Python_SetConstant(d, "MINOR_UPLAOD_STATIC_MATERIAL",SWIG_From_int(static_cast< int >(0x2401)));
  SWIG_Python_SetConstant(d, "MINOR_UPLOAD_DYNAMIC_MATERIAL",SWIG_From_int(static_cast< int >(0x2402)));
  SWIG_Python_SetConstant(d, "MINOR_DELETE_MATERIAL",SWIG_From_int(static_cast< int >(0x2403)));
  SWIG_Python_SetConstant(d, "MINOR_DOWNLOAD_STATIC_MATERIAL",SWIG_From_int(static_cast< int >(0x2404)));
  SWIG_Python_SetConstant(d, "MINOR_COVER_STATIC_MATERIAL",SWIG_From_int(static_cast< int >(0x2405)));
  SWIG_Python_SetConstant(d, "MINOR_APPROVE_MATERIAL",SWIG_From_int(static_cast< int >(0x2406)));
  SWIG_Python_SetConstant(d, "MINOR_UPLAOD_PROGRAM",SWIG_From_int(static_cast< int >(0x2407)));
  SWIG_Python_SetConstant(d, "MINOR_DOWNLOAD_PROGRAM",SWIG_From_int(static_cast< int >(0x2408)));
  SWIG_Python_SetConstant(d, "MINOR_DELETE_PROGRAM",SWIG_From_int(static_cast< int >(0x2409)));
  SWIG_Python_SetConstant(d, "MINOR_MODIFY_PROGRAM",SWIG_From_int(static_cast< int >(0x240a)));
  SWIG_Python_SetConstant(d, "MINOR_APPROVE_PRAGRAM",SWIG_From_int(static_cast< int >(0x240b)));
  SWIG_Python_SetConstant(d, "MINOR_UPLAOD_SCHEDULE",SWIG_From_int(static_cast< int >(0x240c)));
  SWIG_Python_SetConstant(d, "MINOR_DOWNLOAD_SCHEDULE",SWIG_From_int(static_cast< int >(0x240d)));
  SWIG_Python_SetConstant(d, "MINOR_DELETE_SCHEDULE",SWIG_From_int(static_cast< int >(0x240e)));
  SWIG_Python_SetConstant(d, "MINOR_MODIFY_SCHEDULE",SWIG_From_int(static_cast< int >(0x240f)));
  SWIG_Python_SetConstant(d, "MINOR_RELEASE_SCHEDULE",SWIG_From_int(static_cast< int >(0x2410)));
  SWIG_Python_SetConstant(d, "MINOR_ADD_TERMINAL",SWIG_From_int(static_cast< int >(0x2411)));
  SWIG_Python_SetConstant(d, "MINOR_DELETE_TERMINAL",SWIG_From_int(static_cast< int >(0x2412)));
  SWIG_Python_SetConstant(d, "MINOR_MODIFY_TERMIANL_PARAM",SWIG_From_int(static_cast< int >(0x2413)));
  SWIG_Python_SetConstant(d, "MINOR_MODIFY_TERMIANL_PLAY_PARAM",SWIG_From_int(static_cast< int >(0x2414)));
  SWIG_Python_SetConstant(d, "MINOR_ADD_TERMIANL_GROUP",SWIG_From_int(static_cast< int >(0x2415)));
  SWIG_Python_SetConstant(d, "MINOR_MODIFY_TERMINAL_GROUP_PARAM",SWIG_From_int(static_cast< int >(0x2416)));
  SWIG_Python_SetConstant(d, "MINOR_DELETE_TERMIANL_GROUP",SWIG_From_int(static_cast< int >(0x2417)));
  SWIG_Python_SetConstant(d, "MINOR_TERMINAL_PLAY_CONTROL",SWIG_From_int(static_cast< int >(0x2418)));
  SWIG_Python_SetConstant(d, "MINOR_TERMINAL_ON_OFF_LINE",SWIG_From_int(static_cast< int >(0x2419)));
  SWIG_Python_SetConstant(d, "MINOR_SET_SWITCH_PLAN",SWIG_From_int(static_cast< int >(0x241a)));
  SWIG_Python_SetConstant(d, "MINOR_SET_VOLUME_PLAN",SWIG_From_int(static_cast< int >(0x241b)));
  SWIG_Python_SetConstant(d, "MINOR_TERMINAL_SCREENSHOT",SWIG_From_int(static_cast< int >(0x241c)));
  SWIG_Python_SetConstant(d, "MINOR_SYSTEM_TIME_CFG",SWIG_From_int(static_cast< int >(0x241d)));
  SWIG_Python_SetConstant(d, "MINOR_ADD_USER_CFG",SWIG_From_int(static_cast< int >(0x241e)));
  SWIG_Python_SetConstant(d, "MINOR_DEL_USER_CFG",SWIG_From_int(static_cast< int >(0x241f)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_MANAGE_HDD",SWIG_From_int(static_cast< int >(0x2420)));
  SWIG_Python_SetConstant(d, "MINOR_TERMINAL_UPDATE_START",SWIG_From_int(static_cast< int >(0x2421)));
  SWIG_Python_SetConstant(d, "MINOR_SVR_RESTORE_DEFAULT_PARAM",SWIG_From_int(static_cast< int >(0x2422)));
  SWIG_Python_SetConstant(d, "MINOR_SVR_REMOTE_RESTORE_FACTORY",SWIG_From_int(static_cast< int >(0x2423)));
  SWIG_Python_SetConstant(d, "MINOR_SVR_REMOTE_REBOOT",SWIG_From_int(static_cast< int >(0x2424)));
  SWIG_Python_SetConstant(d, "MINOR_SVR_MODIFY_NETWORK_PARAM",SWIG_From_int(static_cast< int >(0x2425)));
  SWIG_Python_SetConstant(d, "MINOR_SVR_SOFTWARE_UPGRADE",SWIG_From_int(static_cast< int >(0x2426)));
  SWIG_Python_SetConstant(d, "MINOR_BACKUP_DATA",SWIG_From_int(static_cast< int >(0xc41)));
  SWIG_Python_SetConstant(d, "MINOR_TRANSFER_DATA",SWIG_From_int(static_cast< int >(0xc42)));
  SWIG_Python_SetConstant(d, "MINOR_RESTORE_DATA",SWIG_From_int(static_cast< int >(0xc43)));
  SWIG_Python_SetConstant(d, "MINOR_SET_INPUT_PLAN",SWIG_From_int(static_cast< int >(0xc44)));
  SWIG_Python_SetConstant(d, "MINOR_TERMINAL_ADB",SWIG_From_int(static_cast< int >(0xc45)));
  SWIG_Python_SetConstant(d, "MINOR_TERMINAL_VOLUME",SWIG_From_int(static_cast< int >(0xc46)));
  SWIG_Python_SetConstant(d, "MINOR_TERMINAL_LOGO",SWIG_From_int(static_cast< int >(0xc47)));
  SWIG_Python_SetConstant(d, "MINOR_TERMINAL_DEFAULT_SCHEDULE",SWIG_From_int(static_cast< int >(0xc48)));
  SWIG_Python_SetConstant(d, "MINOR_TERMINAL_PASSWORD",SWIG_From_int(static_cast< int >(0xc49)));
  SWIG_Python_SetConstant(d, "MINOR_TERMINAL_IP",SWIG_From_int(static_cast< int >(0xc4a)));
  SWIG_Python_SetConstant(d, "MINOR_TERMINAL_RELATE_IPC",SWIG_From_int(static_cast< int >(0xc4b)));
  SWIG_Python_SetConstant(d, "MINOR_TERMINAL_SERVER",SWIG_From_int(static_cast< int >(0xc4c)));
  SWIG_Python_SetConstant(d, "MINOR_TERMINAL_SADP",SWIG_From_int(static_cast< int >(0xc4d)));
  SWIG_Python_SetConstant(d, "MINOR_TERMINAL_TIMEZONE",SWIG_From_int(static_cast< int >(0xc4e)));
  SWIG_Python_SetConstant(d, "MINOR_TERMINAL_TEMP_PROTECT",SWIG_From_int(static_cast< int >(0xc4f)));
  SWIG_Python_SetConstant(d, "MINOR_ADD_ORGANIZATION",SWIG_From_int(static_cast< int >(0xc50)));
  SWIG_Python_SetConstant(d, "MINOR_DELETE_ORGANIZATION",SWIG_From_int(static_cast< int >(0xc51)));
  SWIG_Python_SetConstant(d, "MINOR_MODIFY_ORGANIZATION",SWIG_From_int(static_cast< int >(0xc52)));
  SWIG_Python_SetConstant(d, "MINOR_WEATHER_FACTORY",SWIG_From_int(static_cast< int >(0xc53)));
  SWIG_Python_SetConstant(d, "MINOR_SADP_ENABLE",SWIG_From_int(static_cast< int >(0xc54)));
  SWIG_Python_SetConstant(d, "MINOR_SSH_ENABLE",SWIG_From_int(static_cast< int >(0xc55)));
  SWIG_Python_SetConstant(d, "MINOR_MODIFY_MATERIAL",SWIG_From_int(static_cast< int >(0xc56)));
  SWIG_Python_SetConstant(d, "MINOR_INSERT_CHARACTER",SWIG_From_int(static_cast< int >(0xc57)));
  SWIG_Python_SetConstant(d, "MINOR_TERMINAL_BACKLIGHT",SWIG_From_int(static_cast< int >(0xc58)));
  SWIG_Python_SetConstant(d, "MINOR_DOWNLOAD_MATERIAL_THUMBNAIL",SWIG_From_int(static_cast< int >(0xc59)));
  SWIG_Python_SetConstant(d, "MINOR_UPLOAD_PROGRAM_THUMBNAIL",SWIG_From_int(static_cast< int >(0xc5a)));
  SWIG_Python_SetConstant(d, "MINOR_TDOWNLOAD_PROGRAM_THUMBNAIL",SWIG_From_int(static_cast< int >(0xc5b)));
  SWIG_Python_SetConstant(d, "MINOR_BATCH_DELETE_SCHEDULE_PLAN",SWIG_From_int(static_cast< int >(0xc5c)));
  SWIG_Python_SetConstant(d, "MINOR_REPUBLISH",SWIG_From_int(static_cast< int >(0xc5d)));
  SWIG_Python_SetConstant(d, "MINOR_CLEAR_TERMINAL_PLAY_INFO",SWIG_From_int(static_cast< int >(0xc5e)));
  SWIG_Python_SetConstant(d, "MINOR_GET_TERMINAL_RESOLUTION",SWIG_From_int(static_cast< int >(0xc5f)));
  SWIG_Python_SetConstant(d, "MINOR_SET_TERMINAL_RESOLUTION",SWIG_From_int(static_cast< int >(0xc60)));
  SWIG_Python_SetConstant(d, "MINOR_GET_BATCH_TERMINAL_UPGRATE_PROGRESS",SWIG_From_int(static_cast< int >(0xc61)));
  SWIG_Python_SetConstant(d, "MINOR_GET_BATCH_PROGRESS",SWIG_From_int(static_cast< int >(0xc62)));
  SWIG_Python_SetConstant(d, "MINOR_GET_TEMPLATE",SWIG_From_int(static_cast< int >(0xc64)));
  SWIG_Python_SetConstant(d, "MINOR_INIT_TEMPLATE",SWIG_From_int(static_cast< int >(0xc65)));
  SWIG_Python_SetConstant(d, "MINOR_GET_TERMINAL_NTP_SERVERS",SWIG_From_int(static_cast< int >(0xc66)));
  SWIG_Python_SetConstant(d, "MINOR_SET_TERMINAL_NTP_SERVERS",SWIG_From_int(static_cast< int >(0xc67)));
  SWIG_Python_SetConstant(d, "MINOR_GET_RELEASE_DETAILS",SWIG_From_int(static_cast< int >(0xc68)));
  SWIG_Python_SetConstant(d, "MINOR_UPLOAD_TEMPLATE_THUMBNAIL",SWIG_From_int(static_cast< int >(0xc69)));
  SWIG_Python_SetConstant(d, "MINOR_DOWNLOAD_TEMPLATE_THUMBNAIL",SWIG_From_int(static_cast< int >(0xc6a)));
  SWIG_Python_SetConstant(d, "MINOR_ADD_TEMPLATE",SWIG_From_int(static_cast< int >(0xc6b)));
  SWIG_Python_SetConstant(d, "MINOR_DELETE_TEMPLATE",SWIG_From_int(static_cast< int >(0xc6c)));
  SWIG_Python_SetConstant(d, "MINOR_MODIFY_TEMPLATE",SWIG_From_int(static_cast< int >(0xc6d)));
  SWIG_Python_SetConstant(d, "MINOR_ADD_SCHEDULE_PLAN",SWIG_From_int(static_cast< int >(0xc6e)));
  SWIG_Python_SetConstant(d, "MINOR_MODIFY_SCHEDULE_PLAN",SWIG_From_int(static_cast< int >(0xc6f)));
  SWIG_Python_SetConstant(d, "MINOR_CANCEL_SCHEDULE_RELEASE",SWIG_From_int(static_cast< int >(0xc70)));
  SWIG_Python_SetConstant(d, "MINOR_GET_SCHEDULE",SWIG_From_int(static_cast< int >(0xc71)));
  SWIG_Python_SetConstant(d, "MINOR_ADD_INSERT",SWIG_From_int(static_cast< int >(0xc72)));
  SWIG_Python_SetConstant(d, "MINOR_CANCEL_INSERT",SWIG_From_int(static_cast< int >(0xc73)));
  SWIG_Python_SetConstant(d, "MINOR_SWITCH_LANGUAGE",SWIG_From_int(static_cast< int >(0xc74)));
  SWIG_Python_SetConstant(d, "MINOR_SET_ADMIN_INITIAL_PASSWORD",SWIG_From_int(static_cast< int >(0xc75)));
  SWIG_Python_SetConstant(d, "MINOR_MODIFY_PORT",SWIG_From_int(static_cast< int >(0xc76)));
  SWIG_Python_SetConstant(d, "MINOR_MODIFY_STORAGE_PATH",SWIG_From_int(static_cast< int >(0xc77)));
  SWIG_Python_SetConstant(d, "MINOR_EXIT_PROGRAM",SWIG_From_int(static_cast< int >(0xc78)));
  SWIG_Python_SetConstant(d, "MINOR_MODULE_STARTUP_SUCCESS",SWIG_From_int(static_cast< int >(0xc79)));
  SWIG_Python_SetConstant(d, "MINOR_APPROVE_SCHEDULE",SWIG_From_int(static_cast< int >(0xc80)));
  SWIG_Python_SetConstant(d, "MINOR_GENERAL_DATA_SEND",SWIG_From_int(static_cast< int >(0xc81)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CONFERENCE_CONFIG",SWIG_From_int(static_cast< int >(0x2501)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_TERMINAL_CONFIG",SWIG_From_int(static_cast< int >(0x2502)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GROUP_CONFIG",SWIG_From_int(static_cast< int >(0x2503)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CONFERENCE_CTRL",SWIG_From_int(static_cast< int >(0x2504)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_TERMINAL_CTRL",SWIG_From_int(static_cast< int >(0x2505)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_RESET_LOGIN_PASSWORD",SWIG_From_int(static_cast< int >(0x2600)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_RESET_LOGIN_PASSWORD",SWIG_From_int(static_cast< int >(0x2601)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FACE_BASE_CREATE",SWIG_From_int(static_cast< int >(0x2602)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_FACE_BASE_CREATE",SWIG_From_int(static_cast< int >(0x2603)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FACE_BASE_MODIFY",SWIG_From_int(static_cast< int >(0x2604)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_FACE_BASE_MODIFY",SWIG_From_int(static_cast< int >(0x2605)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FACE_BASE_DELETE",SWIG_From_int(static_cast< int >(0x2606)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_FACE_BASE_DELETE",SWIG_From_int(static_cast< int >(0x2607)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FACE_DATA_APPEND",SWIG_From_int(static_cast< int >(0x2608)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_FACE_DATA_APPEND",SWIG_From_int(static_cast< int >(0x2609)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FACE_DATA_SEARCH",SWIG_From_int(static_cast< int >(0x2610)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_FACE_DATA_SEARCH",SWIG_From_int(static_cast< int >(0x2611)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FACE_DATA_ANALYSIS",SWIG_From_int(static_cast< int >(0x2612)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_FACE_DATA_ANALYSIS",SWIG_From_int(static_cast< int >(0x2613)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FACE_DATA_EDIT",SWIG_From_int(static_cast< int >(0x2614)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_FACE_DATA_EDIT",SWIG_From_int(static_cast< int >(0x2615)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FACE_DATA_DELETE",SWIG_From_int(static_cast< int >(0x2616)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_FACE_DATA_DELET",SWIG_From_int(static_cast< int >(0x2617)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_VCA_ANALYSIS_CFG",SWIG_From_int(static_cast< int >(0x2618)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_VCA_ANALYSIS_CFG",SWIG_From_int(static_cast< int >(0x2619)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FACE_BASE_IMPORT",SWIG_From_int(static_cast< int >(0x261a)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FACE_BASE_EXPORT",SWIG_From_int(static_cast< int >(0x261b)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CLUSTER_MODE_CONFIG",SWIG_From_int(static_cast< int >(0x261c)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CLUSTER_MODE_CONFIG",SWIG_From_int(static_cast< int >(0x261d)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CLUSTER_NETWORK_CONFIG",SWIG_From_int(static_cast< int >(0x261e)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CLUSTER_NETWORK_CONFIG",SWIG_From_int(static_cast< int >(0x261f)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CLUSTER_ADD_DEVICE",SWIG_From_int(static_cast< int >(0x2620)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CLUSTER_ADD_DEVICE",SWIG_From_int(static_cast< int >(0x2621)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_CLUSTER_DEL_DEVICE",SWIG_From_int(static_cast< int >(0x2622)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_CLUSTER_DEL_DEVICE",SWIG_From_int(static_cast< int >(0x2623)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_HFPD_CFG",SWIG_From_int(static_cast< int >(0x2624)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_FACE_CONTRAST_TASK",SWIG_From_int(static_cast< int >(0x2625)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_LFPD_CFG",SWIG_From_int(static_cast< int >(0x2626)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_IOTCFGFILE_INPUT",SWIG_From_int(static_cast< int >(0x2627)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_IOTCFGFILE_OUTPUT",SWIG_From_int(static_cast< int >(0x2628)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_IOT_ADD",SWIG_From_int(static_cast< int >(0x2629)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_IOT_ADD",SWIG_From_int(static_cast< int >(0x262a)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_IOT_DEL",SWIG_From_int(static_cast< int >(0x262b)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_IOT_DEL",SWIG_From_int(static_cast< int >(0x262c)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_IOT_SET",SWIG_From_int(static_cast< int >(0x262d)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_IOT_SET",SWIG_From_int(static_cast< int >(0x262e)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_IOTCFGFILE_INPUT",SWIG_From_int(static_cast< int >(0x262f)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_IOTCFGFILE_OUTPUT",SWIG_From_int(static_cast< int >(0x2630)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_VAD_CFG",SWIG_From_int(static_cast< int >(0x2631)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_VAD_CFG",SWIG_From_int(static_cast< int >(0x2632)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_ADDRESS_FILTER_CONFIG",SWIG_From_int(static_cast< int >(0x2633)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_ADDRESS_FILTER_CONFIG",SWIG_From_int(static_cast< int >(0x2634)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_POE_CFG",SWIG_From_int(static_cast< int >(0x2635)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_POE_CFG",SWIG_From_int(static_cast< int >(0x2636)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_RESET_CHANNEL_PASSWORD",SWIG_From_int(static_cast< int >(0x2637)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_RESET_CHANNEL_PASSWORD",SWIG_From_int(static_cast< int >(0x2638)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SSD_UPGRADE_START",SWIG_From_int(static_cast< int >(0x2639)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SSD_UPGRADE_STOP",SWIG_From_int(static_cast< int >(0x2640)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SSD_UPGRADE_START",SWIG_From_int(static_cast< int >(0x2641)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SSD_UPGRADE_STOP",SWIG_From_int(static_cast< int >(0x2642)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SSD_FORMAT_START",SWIG_From_int(static_cast< int >(0x2643)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SSD_FORMAT_STOP",SWIG_From_int(static_cast< int >(0x2644)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SSD_FORMAT_START",SWIG_From_int(static_cast< int >(0x2645)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SSD_FORMAT_STOP",SWIG_From_int(static_cast< int >(0x2646)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_AUTO_SWITCH_CONFIG",SWIG_From_int(static_cast< int >(0x2647)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AUTO_SWITCH_CONFIG",SWIG_From_int(static_cast< int >(0x2648)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SSD_INITIALIZATION_START",SWIG_From_int(static_cast< int >(0x264a)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_SSD_INITIALIZATION_END",SWIG_From_int(static_cast< int >(0x264b)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SSD_INITIALIZATION_START",SWIG_From_int(static_cast< int >(0x264c)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_SSD_INITIALIZATION_END",SWIG_From_int(static_cast< int >(0x264d)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_MODEL_ADD",SWIG_From_int(static_cast< int >(0x2650)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_MODEL_QUERY",SWIG_From_int(static_cast< int >(0x2651)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_MODEL_DELETE",SWIG_From_int(static_cast< int >(0x2652)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_MODEL_UPDATE",SWIG_From_int(static_cast< int >(0x2653)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_PICTURE_POLLING_TASK_ADD",SWIG_From_int(static_cast< int >(0x2654)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_PICTURE_POLLING_TASK_QUERY",SWIG_From_int(static_cast< int >(0x2655)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_PICTURE_POLLING_TASK_DELETE",SWIG_From_int(static_cast< int >(0x2656)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_PICTURE_POLLING_TASK_MODIFY",SWIG_From_int(static_cast< int >(0x2657)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_VIDEO_POLLING_TASK_ADD",SWIG_From_int(static_cast< int >(0x2658)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_VIDEO_POLLING_TASK_QUERY",SWIG_From_int(static_cast< int >(0x2659)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_VIDEO_POLLING_TASK_DELETE",SWIG_From_int(static_cast< int >(0x265A)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_VIDEO_POLLING_TASK_MODIFY",SWIG_From_int(static_cast< int >(0x265B)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_PICTURE_TASK_ADD",SWIG_From_int(static_cast< int >(0x265C)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_PICTURE_TASK_QUERY",SWIG_From_int(static_cast< int >(0x265D)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_PICTURE_TASK_DELETE",SWIG_From_int(static_cast< int >(0x265E)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_PICTURE_TASK_MODIFY",SWIG_From_int(static_cast< int >(0x265F)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_VIDEO_TASK_ADD",SWIG_From_int(static_cast< int >(0x2660)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_VIDEO_TASK_QUERY",SWIG_From_int(static_cast< int >(0x2661)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_VIDEO_TASK_DELETE",SWIG_From_int(static_cast< int >(0x2662)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_VIDEO_TASK_MODIFY",SWIG_From_int(static_cast< int >(0x2663)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_AI_RULE_CONFIG",SWIG_From_int(static_cast< int >(0x2664)));
  SWIG_Python_SetConstant(d, "MINOR_STOP_SOUND",SWIG_From_int(static_cast< int >(0x2700)));
  SWIG_Python_SetConstant(d, "MINOR_SELF_CHECK",SWIG_From_int(static_cast< int >(0x2701)));
  SWIG_Python_SetConstant(d, "MINOR_DUTY_CHECK",SWIG_From_int(static_cast< int >(0x2702)));
  SWIG_Python_SetConstant(d, "MINOR_SWITCH_SIMPLE_WORKMODE",SWIG_From_int(static_cast< int >(0x2703)));
  SWIG_Python_SetConstant(d, "MINOR_SWITCH_NORMAL_WORKMODE",SWIG_From_int(static_cast< int >(0x2704)));
  SWIG_Python_SetConstant(d, "MAJOR_INFORMATION",SWIG_From_int(static_cast< int >(0x4)));
  SWIG_Python_SetConstant(d, "MINOR_HDD_INFO",SWIG_From_int(static_cast< int >(0xa1)));
  SWIG_Python_SetConstant(d, "MINOR_SMART_INFO",SWIG_From_int(static_cast< int >(0xa2)));
  SWIG_Python_SetConstant(d, "MINOR_REC_START",SWIG_From_int(static_cast< int >(0xa3)));
  SWIG_Python_SetConstant(d, "MINOR_REC_STOP",SWIG_From_int(static_cast< int >(0xa4)));
  SWIG_Python_SetConstant(d, "MINOR_REC_OVERDUE",SWIG_From_int(static_cast< int >(0xa5)));
  SWIG_Python_SetConstant(d, "MINOR_LINK_START",SWIG_From_int(static_cast< int >(0xa6)));
  SWIG_Python_SetConstant(d, "MINOR_LINK_STOP",SWIG_From_int(static_cast< int >(0xa7)));
  SWIG_Python_SetConstant(d, "MINOR_NET_DISK_INFO",SWIG_From_int(static_cast< int >(0xa8)));
  SWIG_Python_SetConstant(d, "MINOR_RAID_INFO",SWIG_From_int(static_cast< int >(0xa9)));
  SWIG_Python_SetConstant(d, "MINOR_RUN_STATUS_INFO",SWIG_From_int(static_cast< int >(0xaa)));
  SWIG_Python_SetConstant(d, "MINOR_SPARE_START_BACKUP",SWIG_From_int(static_cast< int >(0xab)));
  SWIG_Python_SetConstant(d, "MINOR_SPARE_STOP_BACKUP",SWIG_From_int(static_cast< int >(0xac)));
  SWIG_Python_SetConstant(d, "MINOR_SPARE_CLIENT_INFO",SWIG_From_int(static_cast< int >(0xad)));
  SWIG_Python_SetConstant(d, "MINOR_ANR_RECORD_START",SWIG_From_int(static_cast< int >(0xae)));
  SWIG_Python_SetConstant(d, "MINOR_ANR_RECORD_END",SWIG_From_int(static_cast< int >(0xaf)));
  SWIG_Python_SetConstant(d, "MINOR_ANR_ADD_TIME_QUANTUM",SWIG_From_int(static_cast< int >(0xb0)));
  SWIG_Python_SetConstant(d, "MINOR_ANR_DEL_TIME_QUANTUM",SWIG_From_int(static_cast< int >(0xb1)));
  SWIG_Python_SetConstant(d, "MINOR_PIC_REC_START",SWIG_From_int(static_cast< int >(0xb3)));
  SWIG_Python_SetConstant(d, "MINOR_PIC_REC_STOP",SWIG_From_int(static_cast< int >(0xb4)));
  SWIG_Python_SetConstant(d, "MINOR_PIC_REC_OVERDUE",SWIG_From_int(static_cast< int >(0xb5)));
  SWIG_Python_SetConstant(d, "MINOR_CLIENT_LOGIN",SWIG_From_int(static_cast< int >(0xb6)));
  SWIG_Python_SetConstant(d, "MINOR_CLIENT_RELOGIN",SWIG_From_int(static_cast< int >(0xb7)));
  SWIG_Python_SetConstant(d, "MINOR_CLIENT_LOGOUT",SWIG_From_int(static_cast< int >(0xb8)));
  SWIG_Python_SetConstant(d, "MINOR_CLIENT_SYNC_START",SWIG_From_int(static_cast< int >(0xb9)));
  SWIG_Python_SetConstant(d, "MINOR_CLIENT_SYNC_STOP",SWIG_From_int(static_cast< int >(0xba)));
  SWIG_Python_SetConstant(d, "MINOR_CLIENT_SYNC_SUCC",SWIG_From_int(static_cast< int >(0xbb)));
  SWIG_Python_SetConstant(d, "MINOR_CLIENT_SYNC_EXCP",SWIG_From_int(static_cast< int >(0xbc)));
  SWIG_Python_SetConstant(d, "MINOR_GLOBAL_RECORD_ERR_INFO",SWIG_From_int(static_cast< int >(0xbd)));
  SWIG_Python_SetConstant(d, "MINOR_BUFFER_STATE",SWIG_From_int(static_cast< int >(0xbe)));
  SWIG_Python_SetConstant(d, "MINOR_DISK_ERRORINFO_V2",SWIG_From_int(static_cast< int >(0xbf)));
  SWIG_Python_SetConstant(d, "MINOR_CS_DATA_EXPIRED",SWIG_From_int(static_cast< int >(0xc0)));
  SWIG_Python_SetConstant(d, "MINOR_PLAT_INFO",SWIG_From_int(static_cast< int >(0xc1)));
  SWIG_Python_SetConstant(d, "MINOR_DIAL_STAT",SWIG_From_int(static_cast< int >(0xc2)));
  SWIG_Python_SetConstant(d, "MINOR_UNLOCK_RECORD",SWIG_From_int(static_cast< int >(0xc3)));
  SWIG_Python_SetConstant(d, "MINOR_VIS_ALARM",SWIG_From_int(static_cast< int >(0xc4)));
  SWIG_Python_SetConstant(d, "MINOR_TALK_RECORD",SWIG_From_int(static_cast< int >(0xc5)));
  SWIG_Python_SetConstant(d, "MINOR_ACCESSORIES_MESSAGE",SWIG_From_int(static_cast< int >(0xc6)));
  SWIG_Python_SetConstant(d, "MINOR_KMS_EXPAMSION_DISK_INSERT",SWIG_From_int(static_cast< int >(0xc7)));
  SWIG_Python_SetConstant(d, "MINOR_IPC_CONNECT",SWIG_From_int(static_cast< int >(0xc8)));
  SWIG_Python_SetConstant(d, "MINOR_INTELLIGENT_BOARD_STATUS",SWIG_From_int(static_cast< int >(0xc9)));
  SWIG_Python_SetConstant(d, "MINOR_IPC_CONNECT_STATUS",SWIG_From_int(static_cast< int >(0xca)));
  SWIG_Python_SetConstant(d, "MINOR_AUTO_TIMING",SWIG_From_int(static_cast< int >(0xcb)));
  SWIG_Python_SetConstant(d, "MINOR_EZVIZ_OPERATION",SWIG_From_int(static_cast< int >(0xcc)));
  SWIG_Python_SetConstant(d, "MINOR_CLUSTER_DEVICE_ONLINE",SWIG_From_int(static_cast< int >(0xcd)));
  SWIG_Python_SetConstant(d, "MINOR_CLUSTER_MGR_SERVICE_STARTUP",SWIG_From_int(static_cast< int >(0xce)));
  SWIG_Python_SetConstant(d, "MINOR_CLUSTER_BUSINESS_TRANSFER",SWIG_From_int(static_cast< int >(0xcf)));
  SWIG_Python_SetConstant(d, "MINOR_CLUSTER_STATUS",SWIG_From_int(static_cast< int >(0xd0)));
  SWIG_Python_SetConstant(d, "MINOR_CLUSTER_CS_STATUS",SWIG_From_int(static_cast< int >(0xd1)));
  SWIG_Python_SetConstant(d, "MINOR_CLUSTER_CM_STATUS",SWIG_From_int(static_cast< int >(0xd2)));
  SWIG_Python_SetConstant(d, "MINOR_VOICE_START_DETECTED",SWIG_From_int(static_cast< int >(0xd3)));
  SWIG_Python_SetConstant(d, "MINOR_VOICE_END_DETECTED",SWIG_From_int(static_cast< int >(0xd4)));
  SWIG_Python_SetConstant(d, "MINOR_DOUBLE_VERIFICATION_PASS",SWIG_From_int(static_cast< int >(0xd5)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_RUNNING_STATUS",SWIG_From_int(static_cast< int >(0xd6)));
  SWIG_Python_SetConstant(d, "MINOR_SYSTEM_DATA_SYNCHRONIZATION",SWIG_From_int(static_cast< int >(0xd7)));
  SWIG_Python_SetConstant(d, "MINOR_HD_FORMAT_START",SWIG_From_int(static_cast< int >(0xd8)));
  SWIG_Python_SetConstant(d, "MINOR_HD_FORMAT_STOP",SWIG_From_int(static_cast< int >(0xd9)));
  SWIG_Python_SetConstant(d, "MINOR_LIVE_DETECT_OPEN",SWIG_From_int(static_cast< int >(0x400)));
  SWIG_Python_SetConstant(d, "MINOR_LIVE_DETECT_CLOSE",SWIG_From_int(static_cast< int >(0x401)));
  SWIG_Python_SetConstant(d, "MINOR_CLEAR_DATA_COLLECTION",SWIG_From_int(static_cast< int >(0x402)));
  SWIG_Python_SetConstant(d, "MINOR_DELETE_DATA_COLLECTION",SWIG_From_int(static_cast< int >(0x403)));
  SWIG_Python_SetConstant(d, "MINOR_EXPORT_DATA_COLLECTION",SWIG_From_int(static_cast< int >(0x404)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_LEN_CONFIG",SWIG_From_int(static_cast< int >(0x405)));
  SWIG_Python_SetConstant(d, "MINOR_DATA_BASE_INIT_FAILED",SWIG_From_int(static_cast< int >(0x406)));
  SWIG_Python_SetConstant(d, "MINOR_DATA_BASE_PATCH_UPDATE",SWIG_From_int(static_cast< int >(0x407)));
  SWIG_Python_SetConstant(d, "MINOR_PSAM_CARD_INSERT",SWIG_From_int(static_cast< int >(0x408)));
  SWIG_Python_SetConstant(d, "MINOR_PSAM_CARD_REMOVE",SWIG_From_int(static_cast< int >(0x409)));
  SWIG_Python_SetConstant(d, "MINOR_HARD_FAULT_REBOOT",SWIG_From_int(static_cast< int >(0x40a)));
  SWIG_Python_SetConstant(d, "MINOR_PSAM_CARD_OCP",SWIG_From_int(static_cast< int >(0x40b)));
  SWIG_Python_SetConstant(d, "MINOR_STACK_OVERFLOW",SWIG_From_int(static_cast< int >(0x40c)));
  SWIG_Python_SetConstant(d, "MINOR_PARM_CFG",SWIG_From_int(static_cast< int >(0x40d)));
  SWIG_Python_SetConstant(d, "MAJOR_EVENT",SWIG_From_int(static_cast< int >(0x5)));
  SWIG_Python_SetConstant(d, "MINOR_LEGAL_CARD_PASS",SWIG_From_int(static_cast< int >(0x01)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_AND_PSW_PASS",SWIG_From_int(static_cast< int >(0x02)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_AND_PSW_FAIL",SWIG_From_int(static_cast< int >(0x03)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_AND_PSW_TIMEOUT",SWIG_From_int(static_cast< int >(0x04)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_AND_PSW_OVER_TIME",SWIG_From_int(static_cast< int >(0x05)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_NO_RIGHT",SWIG_From_int(static_cast< int >(0x06)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_INVALID_PERIOD",SWIG_From_int(static_cast< int >(0x07)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_OUT_OF_DATE",SWIG_From_int(static_cast< int >(0x08)));
  SWIG_Python_SetConstant(d, "MINOR_INVALID_CARD",SWIG_From_int(static_cast< int >(0x09)));
  SWIG_Python_SetConstant(d, "MINOR_ANTI_SNEAK_FAIL",SWIG_From_int(static_cast< int >(0x0a)));
  SWIG_Python_SetConstant(d, "MINOR_INTERLOCK_DOOR_NOT_CLOSE",SWIG_From_int(static_cast< int >(0x0b)));
  SWIG_Python_SetConstant(d, "MINOR_NOT_BELONG_MULTI_GROUP",SWIG_From_int(static_cast< int >(0x0c)));
  SWIG_Python_SetConstant(d, "MINOR_INVALID_MULTI_VERIFY_PERIOD",SWIG_From_int(static_cast< int >(0x0d)));
  SWIG_Python_SetConstant(d, "MINOR_MULTI_VERIFY_SUPER_RIGHT_FAIL",SWIG_From_int(static_cast< int >(0x0e)));
  SWIG_Python_SetConstant(d, "MINOR_MULTI_VERIFY_REMOTE_RIGHT_FAIL",SWIG_From_int(static_cast< int >(0x0f)));
  SWIG_Python_SetConstant(d, "MINOR_MULTI_VERIFY_SUCCESS",SWIG_From_int(static_cast< int >(0x10)));
  SWIG_Python_SetConstant(d, "MINOR_LEADER_CARD_OPEN_BEGIN",SWIG_From_int(static_cast< int >(0x11)));
  SWIG_Python_SetConstant(d, "MINOR_LEADER_CARD_OPEN_END",SWIG_From_int(static_cast< int >(0x12)));
  SWIG_Python_SetConstant(d, "MINOR_ALWAYS_OPEN_BEGIN",SWIG_From_int(static_cast< int >(0x13)));
  SWIG_Python_SetConstant(d, "MINOR_ALWAYS_OPEN_END",SWIG_From_int(static_cast< int >(0x14)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_OPEN",SWIG_From_int(static_cast< int >(0x15)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CLOSE",SWIG_From_int(static_cast< int >(0x16)));
  SWIG_Python_SetConstant(d, "MINOR_DOOR_BUTTON_PRESS",SWIG_From_int(static_cast< int >(0x17)));
  SWIG_Python_SetConstant(d, "MINOR_DOOR_BUTTON_RELEASE",SWIG_From_int(static_cast< int >(0x18)));
  SWIG_Python_SetConstant(d, "MINOR_DOOR_OPEN_NORMAL",SWIG_From_int(static_cast< int >(0x19)));
  SWIG_Python_SetConstant(d, "MINOR_DOOR_CLOSE_NORMAL",SWIG_From_int(static_cast< int >(0x1a)));
  SWIG_Python_SetConstant(d, "MINOR_DOOR_OPEN_ABNORMAL",SWIG_From_int(static_cast< int >(0x1b)));
  SWIG_Python_SetConstant(d, "MINOR_DOOR_OPEN_TIMEOUT",SWIG_From_int(static_cast< int >(0x1c)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMOUT_ON",SWIG_From_int(static_cast< int >(0x1d)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMOUT_OFF",SWIG_From_int(static_cast< int >(0x1e)));
  SWIG_Python_SetConstant(d, "MINOR_ALWAYS_CLOSE_BEGIN",SWIG_From_int(static_cast< int >(0x1f)));
  SWIG_Python_SetConstant(d, "MINOR_ALWAYS_CLOSE_END",SWIG_From_int(static_cast< int >(0x20)));
  SWIG_Python_SetConstant(d, "MINOR_MULTI_VERIFY_NEED_REMOTE_OPEN",SWIG_From_int(static_cast< int >(0x21)));
  SWIG_Python_SetConstant(d, "MINOR_MULTI_VERIFY_SUPERPASSWD_VERIFY_SUCCESS",SWIG_From_int(static_cast< int >(0x22)));
  SWIG_Python_SetConstant(d, "MINOR_MULTI_VERIFY_REPEAT_VERIFY",SWIG_From_int(static_cast< int >(0x23)));
  SWIG_Python_SetConstant(d, "MINOR_MULTI_VERIFY_TIMEOUT",SWIG_From_int(static_cast< int >(0x24)));
  SWIG_Python_SetConstant(d, "MINOR_DOORBELL_RINGING",SWIG_From_int(static_cast< int >(0x25)));
  SWIG_Python_SetConstant(d, "MINOR_FINGERPRINT_COMPARE_PASS",SWIG_From_int(static_cast< int >(0x26)));
  SWIG_Python_SetConstant(d, "MINOR_FINGERPRINT_COMPARE_FAIL",SWIG_From_int(static_cast< int >(0x27)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_FINGERPRINT_VERIFY_PASS",SWIG_From_int(static_cast< int >(0x28)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_FINGERPRINT_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0x29)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_FINGERPRINT_VERIFY_TIMEOUT",SWIG_From_int(static_cast< int >(0x2a)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_FINGERPRINT_PASSWD_VERIFY_PASS",SWIG_From_int(static_cast< int >(0x2b)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_FINGERPRINT_PASSWD_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0x2c)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_FINGERPRINT_PASSWD_VERIFY_TIMEOUT",SWIG_From_int(static_cast< int >(0x2d)));
  SWIG_Python_SetConstant(d, "MINOR_FINGERPRINT_PASSWD_VERIFY_PASS",SWIG_From_int(static_cast< int >(0x2e)));
  SWIG_Python_SetConstant(d, "MINOR_FINGERPRINT_PASSWD_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0x2f)));
  SWIG_Python_SetConstant(d, "MINOR_FINGERPRINT_PASSWD_VERIFY_TIMEOUT",SWIG_From_int(static_cast< int >(0x30)));
  SWIG_Python_SetConstant(d, "MINOR_FINGERPRINT_INEXISTENCE",SWIG_From_int(static_cast< int >(0x31)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_PLATFORM_VERIFY",SWIG_From_int(static_cast< int >(0x32)));
  SWIG_Python_SetConstant(d, "MINOR_CALL_CENTER",SWIG_From_int(static_cast< int >(0x33)));
  SWIG_Python_SetConstant(d, "MINOR_FIRE_RELAY_TURN_ON_DOOR_ALWAYS_OPEN",SWIG_From_int(static_cast< int >(0x34)));
  SWIG_Python_SetConstant(d, "MINOR_FIRE_RELAY_RECOVER_DOOR_RECOVER_NORMAL",SWIG_From_int(static_cast< int >(0x35)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_AND_FP_VERIFY_PASS",SWIG_From_int(static_cast< int >(0x36)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_AND_FP_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0x37)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_AND_FP_VERIFY_TIMEOUT",SWIG_From_int(static_cast< int >(0x38)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_AND_PW_VERIFY_PASS",SWIG_From_int(static_cast< int >(0x39)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_AND_PW_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0x3a)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_AND_PW_VERIFY_TIMEOUT",SWIG_From_int(static_cast< int >(0x3b)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_AND_CARD_VERIFY_PASS",SWIG_From_int(static_cast< int >(0x3c)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_AND_CARD_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0x3d)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_AND_CARD_VERIFY_TIMEOUT",SWIG_From_int(static_cast< int >(0x3e)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_AND_PW_AND_FP_VERIFY_PASS",SWIG_From_int(static_cast< int >(0x3f)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_AND_PW_AND_FP_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0x40)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_AND_PW_AND_FP_VERIFY_TIMEOUT",SWIG_From_int(static_cast< int >(0x41)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_CARD_AND_FP_VERIFY_PASS",SWIG_From_int(static_cast< int >(0x42)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_CARD_AND_FP_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0x43)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_CARD_AND_FP_VERIFY_TIMEOUT",SWIG_From_int(static_cast< int >(0x44)));
  SWIG_Python_SetConstant(d, "MINOR_EMPLOYEENO_AND_FP_VERIFY_PASS",SWIG_From_int(static_cast< int >(0x45)));
  SWIG_Python_SetConstant(d, "MINOR_EMPLOYEENO_AND_FP_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0x46)));
  SWIG_Python_SetConstant(d, "MINOR_EMPLOYEENO_AND_FP_VERIFY_TIMEOUT",SWIG_From_int(static_cast< int >(0x47)));
  SWIG_Python_SetConstant(d, "MINOR_EMPLOYEENO_AND_FP_AND_PW_VERIFY_PASS",SWIG_From_int(static_cast< int >(0x48)));
  SWIG_Python_SetConstant(d, "MINOR_EMPLOYEENO_AND_FP_AND_PW_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0x49)));
  SWIG_Python_SetConstant(d, "MINOR_EMPLOYEENO_AND_FP_AND_PW_VERIFY_TIMEOUT",SWIG_From_int(static_cast< int >(0x4a)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_VERIFY_PASS",SWIG_From_int(static_cast< int >(0x4b)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0x4c)));
  SWIG_Python_SetConstant(d, "MINOR_EMPLOYEENO_AND_FACE_VERIFY_PASS",SWIG_From_int(static_cast< int >(0x4d)));
  SWIG_Python_SetConstant(d, "MINOR_EMPLOYEENO_AND_FACE_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0x4e)));
  SWIG_Python_SetConstant(d, "MINOR_EMPLOYEENO_AND_FACE_VERIFY_TIMEOUT",SWIG_From_int(static_cast< int >(0x4f)));
  SWIG_Python_SetConstant(d, "MINOR_FACE_RECOGNIZE_FAIL",SWIG_From_int(static_cast< int >(0x50)));
  SWIG_Python_SetConstant(d, "MINOR_FIRSTCARD_AUTHORIZE_BEGIN",SWIG_From_int(static_cast< int >(0x51)));
  SWIG_Python_SetConstant(d, "MINOR_FIRSTCARD_AUTHORIZE_END",SWIG_From_int(static_cast< int >(0x52)));
  SWIG_Python_SetConstant(d, "MINOR_DOORLOCK_INPUT_SHORT_CIRCUIT",SWIG_From_int(static_cast< int >(0x53)));
  SWIG_Python_SetConstant(d, "MINOR_DOORLOCK_INPUT_BROKEN_CIRCUIT",SWIG_From_int(static_cast< int >(0x54)));
  SWIG_Python_SetConstant(d, "MINOR_DOORLOCK_INPUT_EXCEPTION",SWIG_From_int(static_cast< int >(0x55)));
  SWIG_Python_SetConstant(d, "MINOR_DOORCONTACT_INPUT_SHORT_CIRCUIT",SWIG_From_int(static_cast< int >(0x56)));
  SWIG_Python_SetConstant(d, "MINOR_DOORCONTACT_INPUT_BROKEN_CIRCUIT",SWIG_From_int(static_cast< int >(0x57)));
  SWIG_Python_SetConstant(d, "MINOR_DOORCONTACT_INPUT_EXCEPTION",SWIG_From_int(static_cast< int >(0x58)));
  SWIG_Python_SetConstant(d, "MINOR_OPENBUTTON_INPUT_SHORT_CIRCUIT",SWIG_From_int(static_cast< int >(0x59)));
  SWIG_Python_SetConstant(d, "MINOR_OPENBUTTON_INPUT_BROKEN_CIRCUIT",SWIG_From_int(static_cast< int >(0x5a)));
  SWIG_Python_SetConstant(d, "MINOR_OPENBUTTON_INPUT_EXCEPTION",SWIG_From_int(static_cast< int >(0x5b)));
  SWIG_Python_SetConstant(d, "MINOR_DOORLOCK_OPEN_EXCEPTION",SWIG_From_int(static_cast< int >(0x5c)));
  SWIG_Python_SetConstant(d, "MINOR_DOORLOCK_OPEN_TIMEOUT",SWIG_From_int(static_cast< int >(0x5d)));
  SWIG_Python_SetConstant(d, "MINOR_FIRSTCARD_OPEN_WITHOUT_AUTHORIZE",SWIG_From_int(static_cast< int >(0x5e)));
  SWIG_Python_SetConstant(d, "MINOR_CALL_LADDER_RELAY_BREAK",SWIG_From_int(static_cast< int >(0x5f)));
  SWIG_Python_SetConstant(d, "MINOR_CALL_LADDER_RELAY_CLOSE",SWIG_From_int(static_cast< int >(0x60)));
  SWIG_Python_SetConstant(d, "MINOR_AUTO_KEY_RELAY_BREAK",SWIG_From_int(static_cast< int >(0x61)));
  SWIG_Python_SetConstant(d, "MINOR_AUTO_KEY_RELAY_CLOSE",SWIG_From_int(static_cast< int >(0x62)));
  SWIG_Python_SetConstant(d, "MINOR_KEY_CONTROL_RELAY_BREAK",SWIG_From_int(static_cast< int >(0x63)));
  SWIG_Python_SetConstant(d, "MINOR_KEY_CONTROL_RELAY_CLOSE",SWIG_From_int(static_cast< int >(0x64)));
  SWIG_Python_SetConstant(d, "MINOR_EMPLOYEENO_AND_PW_PASS",SWIG_From_int(static_cast< int >(0x65)));
  SWIG_Python_SetConstant(d, "MINOR_EMPLOYEENO_AND_PW_FAIL",SWIG_From_int(static_cast< int >(0x66)));
  SWIG_Python_SetConstant(d, "MINOR_EMPLOYEENO_AND_PW_TIMEOUT",SWIG_From_int(static_cast< int >(0x67)));
  SWIG_Python_SetConstant(d, "MINOR_HUMAN_DETECT_FAIL",SWIG_From_int(static_cast< int >(0x68)));
  SWIG_Python_SetConstant(d, "MINOR_PEOPLE_AND_ID_CARD_COMPARE_PASS",SWIG_From_int(static_cast< int >(0x69)));
  SWIG_Python_SetConstant(d, "MINOR_PEOPLE_AND_ID_CARD_COMPARE_FAIL",SWIG_From_int(static_cast< int >(0x70)));
  SWIG_Python_SetConstant(d, "MINOR_CERTIFICATE_BLACK_LIST",SWIG_From_int(static_cast< int >(0x71)));
  SWIG_Python_SetConstant(d, "MINOR_LEGAL_MESSAGE",SWIG_From_int(static_cast< int >(0x72)));
  SWIG_Python_SetConstant(d, "MINOR_ILLEGAL_MESSAGE",SWIG_From_int(static_cast< int >(0x73)));
  SWIG_Python_SetConstant(d, "MINOR_DOOR_OPEN_OR_DORMANT_FAIL",SWIG_From_int(static_cast< int >(0x75)));
  SWIG_Python_SetConstant(d, "MINOR_AUTH_PLAN_DORMANT_FAIL",SWIG_From_int(static_cast< int >(0x76)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_ENCRYPT_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0x77)));
  SWIG_Python_SetConstant(d, "MINOR_SUBMARINEBACK_REPLY_FAIL",SWIG_From_int(static_cast< int >(0x78)));
  SWIG_Python_SetConstant(d, "MINOR_DOOR_OPEN_OR_DORMANT_OPEN_FAIL",SWIG_From_int(static_cast< int >(0x82)));
  SWIG_Python_SetConstant(d, "MINOR_HEART_BEAT",SWIG_From_int(static_cast< int >(0x83)));
  SWIG_Python_SetConstant(d, "MINOR_DOOR_OPEN_OR_DORMANT_LINKAGE_OPEN_FAIL",SWIG_From_int(static_cast< int >(0x84)));
  SWIG_Python_SetConstant(d, "MINOR_TRAILING",SWIG_From_int(static_cast< int >(0x85)));
  SWIG_Python_SetConstant(d, "MINOR_REVERSE_ACCESS",SWIG_From_int(static_cast< int >(0x86)));
  SWIG_Python_SetConstant(d, "MINOR_FORCE_ACCESS",SWIG_From_int(static_cast< int >(0x87)));
  SWIG_Python_SetConstant(d, "MINOR_CLIMBING_OVER_GATE",SWIG_From_int(static_cast< int >(0x88)));
  SWIG_Python_SetConstant(d, "MINOR_PASSING_TIMEOUT",SWIG_From_int(static_cast< int >(0x89)));
  SWIG_Python_SetConstant(d, "MINOR_INTRUSION_ALARM",SWIG_From_int(static_cast< int >(0x8a)));
  SWIG_Python_SetConstant(d, "MINOR_FREE_GATE_PASS_NOT_AUTH",SWIG_From_int(static_cast< int >(0x8b)));
  SWIG_Python_SetConstant(d, "MINOR_DROP_ARM_BLOCK",SWIG_From_int(static_cast< int >(0x8c)));
  SWIG_Python_SetConstant(d, "MINOR_DROP_ARM_BLOCK_RESUME",SWIG_From_int(static_cast< int >(0x8d)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_FACE_MODELING_FAIL",SWIG_From_int(static_cast< int >(0x8e)));
  SWIG_Python_SetConstant(d, "MINOR_STAY_EVENT",SWIG_From_int(static_cast< int >(0x8f)));
  SWIG_Python_SetConstant(d, "MINOR_PASSWORD_MISMATCH",SWIG_From_int(static_cast< int >(0x97)));
  SWIG_Python_SetConstant(d, "MINOR_EMPLOYEE_NO_NOT_EXIST",SWIG_From_int(static_cast< int >(0x98)));
  SWIG_Python_SetConstant(d, "MINOR_COMBINED_VERIFY_PASS",SWIG_From_int(static_cast< int >(0x99)));
  SWIG_Python_SetConstant(d, "MINOR_COMBINED_VERIFY_TIMEOUT",SWIG_From_int(static_cast< int >(0x9a)));
  SWIG_Python_SetConstant(d, "MINOR_VERIFY_MODE_MISMATCH",SWIG_From_int(static_cast< int >(0x9b)));
  SWIG_Python_SetConstant(d, "MINOR_PASSPORT_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0xa1)));
  SWIG_Python_SetConstant(d, "MINOR_INFORMAL_MIFARE_CARD_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0xa2)));
  SWIG_Python_SetConstant(d, "MINOR_CPU_CARD_ENCRYPT_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0xa3)));
  SWIG_Python_SetConstant(d, "MINOR_NFC_DISABLE_VERIFY_FAIL",SWIG_From_int(static_cast< int >(0xa4)));
  SWIG_Python_SetConstant(d, "MINOR_LORA_MODULE_ONLINE",SWIG_From_int(static_cast< int >(0xa5)));
  SWIG_Python_SetConstant(d, "MINOR_LORA_MODULE_OFFLINE",SWIG_From_int(static_cast< int >(0xa6)));
  SWIG_Python_SetConstant(d, "MINOR_MQTT_STATUS",SWIG_From_int(static_cast< int >(0xa7)));
  SWIG_Python_SetConstant(d, "MINOR_EM_CARD_RECOGNIZE_NOT_ENABLED",SWIG_From_int(static_cast< int >(0xa8)));
  SWIG_Python_SetConstant(d, "MINOR_M1_CARD_RECOGNIZE_NOT_ENABLED",SWIG_From_int(static_cast< int >(0xa9)));
  SWIG_Python_SetConstant(d, "MINOR_CPU_CARD_RECOGNIZE_NOT_ENABLED",SWIG_From_int(static_cast< int >(0xaa)));
  SWIG_Python_SetConstant(d, "MINOR_ID_CARD_RECOGNIZE_NOT_ENABLED",SWIG_From_int(static_cast< int >(0xab)));
  SWIG_Python_SetConstant(d, "MINOR_CARD_SET_SECRET_KEY_FAIL",SWIG_From_int(static_cast< int >(0xac)));
  SWIG_Python_SetConstant(d, "MINOR_LOCAL_UPGRADE_FAIL",SWIG_From_int(static_cast< int >(0xad)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_UPGRADE_FAIL",SWIG_From_int(static_cast< int >(0xae)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_EXTEND_MODULE_UPGRADE_SUCC",SWIG_From_int(static_cast< int >(0xaf)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_EXTEND_MODULE_UPGRADE_FAIL",SWIG_From_int(static_cast< int >(0xb0)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_FINGER_PRINT_MODULE_UPGRADE_SUCC",SWIG_From_int(static_cast< int >(0xb1)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_FINGER_PRINT_MODULE_UPGRADE_FAIL",SWIG_From_int(static_cast< int >(0xb2)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM1",SWIG_From_int(static_cast< int >(0x500)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM2",SWIG_From_int(static_cast< int >(0x501)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM3",SWIG_From_int(static_cast< int >(0x502)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM4",SWIG_From_int(static_cast< int >(0x503)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM5",SWIG_From_int(static_cast< int >(0x504)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM6",SWIG_From_int(static_cast< int >(0x505)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM7",SWIG_From_int(static_cast< int >(0x506)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM8",SWIG_From_int(static_cast< int >(0x507)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM9",SWIG_From_int(static_cast< int >(0x508)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM10",SWIG_From_int(static_cast< int >(0x509)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM11",SWIG_From_int(static_cast< int >(0x50a)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM12",SWIG_From_int(static_cast< int >(0x50b)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM13",SWIG_From_int(static_cast< int >(0x50c)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM14",SWIG_From_int(static_cast< int >(0x50d)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM15",SWIG_From_int(static_cast< int >(0x50e)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM16",SWIG_From_int(static_cast< int >(0x50f)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM17",SWIG_From_int(static_cast< int >(0x510)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM18",SWIG_From_int(static_cast< int >(0x511)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM19",SWIG_From_int(static_cast< int >(0x512)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM20",SWIG_From_int(static_cast< int >(0x513)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM21",SWIG_From_int(static_cast< int >(0x514)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM22",SWIG_From_int(static_cast< int >(0x515)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM23",SWIG_From_int(static_cast< int >(0x516)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM24",SWIG_From_int(static_cast< int >(0x517)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM25",SWIG_From_int(static_cast< int >(0x518)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM26",SWIG_From_int(static_cast< int >(0x519)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM27",SWIG_From_int(static_cast< int >(0x51a)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM28",SWIG_From_int(static_cast< int >(0x51b)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM29",SWIG_From_int(static_cast< int >(0x51c)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM30",SWIG_From_int(static_cast< int >(0x51d)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM31",SWIG_From_int(static_cast< int >(0x51e)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM32",SWIG_From_int(static_cast< int >(0x51f)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM33",SWIG_From_int(static_cast< int >(0x520)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM34",SWIG_From_int(static_cast< int >(0x521)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM35",SWIG_From_int(static_cast< int >(0x522)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM36",SWIG_From_int(static_cast< int >(0x523)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM37",SWIG_From_int(static_cast< int >(0x524)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM38",SWIG_From_int(static_cast< int >(0x525)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM39",SWIG_From_int(static_cast< int >(0x526)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM40",SWIG_From_int(static_cast< int >(0x527)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM41",SWIG_From_int(static_cast< int >(0x528)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM42",SWIG_From_int(static_cast< int >(0x529)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM43",SWIG_From_int(static_cast< int >(0x52a)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM44",SWIG_From_int(static_cast< int >(0x52b)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM45",SWIG_From_int(static_cast< int >(0x52c)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM46",SWIG_From_int(static_cast< int >(0x52d)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM47",SWIG_From_int(static_cast< int >(0x52e)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM48",SWIG_From_int(static_cast< int >(0x52f)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM49",SWIG_From_int(static_cast< int >(0x530)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM50",SWIG_From_int(static_cast< int >(0x531)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM51",SWIG_From_int(static_cast< int >(0x532)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM52",SWIG_From_int(static_cast< int >(0x533)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM53",SWIG_From_int(static_cast< int >(0x534)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM54",SWIG_From_int(static_cast< int >(0x535)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM55",SWIG_From_int(static_cast< int >(0x536)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM56",SWIG_From_int(static_cast< int >(0x537)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM57",SWIG_From_int(static_cast< int >(0x538)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM58",SWIG_From_int(static_cast< int >(0x539)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM59",SWIG_From_int(static_cast< int >(0x53a)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM60",SWIG_From_int(static_cast< int >(0x53b)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM61",SWIG_From_int(static_cast< int >(0x53c)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM62",SWIG_From_int(static_cast< int >(0x53d)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM63",SWIG_From_int(static_cast< int >(0x53e)));
  SWIG_Python_SetConstant(d, "MINOR_EVENT_CUSTOM64",SWIG_From_int(static_cast< int >(0x53f)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_FINGER_OPEN_DOOR",SWIG_From_int(static_cast< int >(0x600)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_PASSWORD_OPEN_DOOR",SWIG_From_int(static_cast< int >(0x601)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CARD_OPEN_DOOR",SWIG_From_int(static_cast< int >(0x602)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_CENTER_OPEN_DOOR",SWIG_From_int(static_cast< int >(0x603)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_APP_OPEN_DOOR",SWIG_From_int(static_cast< int >(0x604)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_KEY_OPEN_DOOR",SWIG_From_int(static_cast< int >(0x605)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_REMOTE_DEVICE_OPEN_DOOR",SWIG_From_int(static_cast< int >(0x606)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_TMP_PASSWORD_OPEN_DOOR",SWIG_From_int(static_cast< int >(0x607)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_BLUETOOTH_OPEN_DOOR",SWIG_From_int(static_cast< int >(0x608)));
  SWIG_Python_SetConstant(d, "MINOR_LOCK_MULTI_OPEN_DOOR",SWIG_From_int(static_cast< int >(0x609)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SCHOOLTIME_IRGI_B",SWIG_From_int(static_cast< int >(0x1001)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SCHOOLTIME_SDK",SWIG_From_int(static_cast< int >(0x1002)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SCHOOLTIME_SELFTEST",SWIG_From_int(static_cast< int >(0x1003)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SUBSYSTEM_ABNORMALINSERT",SWIG_From_int(static_cast< int >(0x1004)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SUBSYSTEM_ABNORMALPULLOUT",SWIG_From_int(static_cast< int >(0x1005)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_AUTO_ARM",SWIG_From_int(static_cast< int >(0x1006)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_AUTO_DISARM",SWIG_From_int(static_cast< int >(0x1007)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TIME_TIGGER_ON",SWIG_From_int(static_cast< int >(0x1008)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TIME_TIGGER_OFF",SWIG_From_int(static_cast< int >(0x1009)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_AUTO_ARM_FAILD",SWIG_From_int(static_cast< int >(0x100a)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_AUTO_DISARM_FAILD",SWIG_From_int(static_cast< int >(0x100b)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TIME_TIGGER_ON_FAILD",SWIG_From_int(static_cast< int >(0x100c)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TIME_TIGGER_OFF_FAILD",SWIG_From_int(static_cast< int >(0x100d)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MANDATORY_ALARM",SWIG_From_int(static_cast< int >(0x100e)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_KEYPAD_LOCKED",SWIG_From_int(static_cast< int >(0x100f)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_USB_INSERT",SWIG_From_int(static_cast< int >(0x1010)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_USB_PULLOUT",SWIG_From_int(static_cast< int >(0x1011)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_4G_MODULS_ONLINE",SWIG_From_int(static_cast< int >(0x1012)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_4G_MODULS_OFFLINE",SWIG_From_int(static_cast< int >(0x1013)));
  SWIG_Python_SetConstant(d, "MINOR_EZVIZ_CLOUD_ONLINE",SWIG_From_int(static_cast< int >(0x1014)));
  SWIG_Python_SetConstant(d, "MINOR_EZVIZ_CLOUD_OFFLINE",SWIG_From_int(static_cast< int >(0x1015)));
  SWIG_Python_SetConstant(d, "MINOR_SIPUA_GRID_ONLINE",SWIG_From_int(static_cast< int >(0x1016)));
  SWIG_Python_SetConstant(d, "MINOR_SIPUA_GRID_OFFLINE",SWIG_From_int(static_cast< int >(0x1017)));
  SWIG_Python_SetConstant(d, "MINOR_INTERNET_ACCESS_CONNECTED",SWIG_From_int(static_cast< int >(0x1018)));
  SWIG_Python_SetConstant(d, "MINOR_INTERNET_ACCESS_BREAK",SWIG_From_int(static_cast< int >(0x1019)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_CONNECTED",SWIG_From_int(static_cast< int >(0x101a)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_BREAK",SWIG_From_int(static_cast< int >(0x101b)));
  SWIG_Python_SetConstant(d, "MINOR_PORT_LINK_DOWN",SWIG_From_int(static_cast< int >(0x101c)));
  SWIG_Python_SetConstant(d, "MINOR_PORT_LINK_UP",SWIG_From_int(static_cast< int >(0x101d)));
  SWIG_Python_SetConstant(d, "MINOR_POE_PORT_POWER_ON",SWIG_From_int(static_cast< int >(0x101e)));
  SWIG_Python_SetConstant(d, "MINOR_POE_PORT_POWER_OFF",SWIG_From_int(static_cast< int >(0x101f)));
  SWIG_Python_SetConstant(d, "MINOR_POE_TOTAL_POWER_MAX",SWIG_From_int(static_cast< int >(0x1020)));
  SWIG_Python_SetConstant(d, "MINNOR_POE_TOTAL_POWER_RESUME",SWIG_From_int(static_cast< int >(0x1021)));
  SWIG_Python_SetConstant(d, "MAJOR_ALARMHOST_ALARM",SWIG_From_int(static_cast< int >(MAJOR_ALARMHOST_ALARM)));
  SWIG_Python_SetConstant(d, "MAJOR_ALARMHOST_EXCEPTION",SWIG_From_int(static_cast< int >(MAJOR_ALARMHOST_EXCEPTION)));
  SWIG_Python_SetConstant(d, "MAJOR_ALARMHOST_OPERATION",SWIG_From_int(static_cast< int >(MAJOR_ALARMHOST_OPERATION)));
  SWIG_Python_SetConstant(d, "MAJ0R_ALARMHOST_EVENT",SWIG_From_int(static_cast< int >(MAJ0R_ALARMHOST_EVENT)));
  SWIG_Python_SetConstant(d, "MINOR_SHORT_CIRCUIT",SWIG_From_int(static_cast< int >(MINOR_SHORT_CIRCUIT)));
  SWIG_Python_SetConstant(d, "MINOR_BROKEN_CIRCUIT",SWIG_From_int(static_cast< int >(MINOR_BROKEN_CIRCUIT)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_RESET",SWIG_From_int(static_cast< int >(MINOR_ALARM_RESET)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_NORMAL",SWIG_From_int(static_cast< int >(MINOR_ALARM_NORMAL)));
  SWIG_Python_SetConstant(d, "MINOR_PASSWORD_ERROR",SWIG_From_int(static_cast< int >(MINOR_PASSWORD_ERROR)));
  SWIG_Python_SetConstant(d, "MINOR_ID_CARD_ILLEGALLY",SWIG_From_int(static_cast< int >(MINOR_ID_CARD_ILLEGALLY)));
  SWIG_Python_SetConstant(d, "MINOR_KEYPAD_REMOVE",SWIG_From_int(static_cast< int >(MINOR_KEYPAD_REMOVE)));
  SWIG_Python_SetConstant(d, "MINOR_KEYPAD_REMOVE_RESTORE",SWIG_From_int(static_cast< int >(MINOR_KEYPAD_REMOVE_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_DEV_REMOVE",SWIG_From_int(static_cast< int >(MINOR_DEV_REMOVE)));
  SWIG_Python_SetConstant(d, "MINOR_DEV_REMOVE_RESTORE",SWIG_From_int(static_cast< int >(MINOR_DEV_REMOVE_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_BELOW_ALARM_LIMIT1",SWIG_From_int(static_cast< int >(MINOR_BELOW_ALARM_LIMIT1)));
  SWIG_Python_SetConstant(d, "MINOR_BELOW_ALARM_LIMIT2",SWIG_From_int(static_cast< int >(MINOR_BELOW_ALARM_LIMIT2)));
  SWIG_Python_SetConstant(d, "MINOR_BELOW_ALARM_LIMIT3",SWIG_From_int(static_cast< int >(MINOR_BELOW_ALARM_LIMIT3)));
  SWIG_Python_SetConstant(d, "MINOR_BELOW_ALARM_LIMIT4",SWIG_From_int(static_cast< int >(MINOR_BELOW_ALARM_LIMIT4)));
  SWIG_Python_SetConstant(d, "MINOR_ABOVE_ALARM_LIMIT1",SWIG_From_int(static_cast< int >(MINOR_ABOVE_ALARM_LIMIT1)));
  SWIG_Python_SetConstant(d, "MINOR_ABOVE_ALARM_LIMIT2",SWIG_From_int(static_cast< int >(MINOR_ABOVE_ALARM_LIMIT2)));
  SWIG_Python_SetConstant(d, "MINOR_ABOVE_ALARM_LIMIT3",SWIG_From_int(static_cast< int >(MINOR_ABOVE_ALARM_LIMIT3)));
  SWIG_Python_SetConstant(d, "MINOR_ABOVE_ALARM_LIMIT4",SWIG_From_int(static_cast< int >(MINOR_ABOVE_ALARM_LIMIT4)));
  SWIG_Python_SetConstant(d, "MINOR_URGENCYBTN_ON",SWIG_From_int(static_cast< int >(MINOR_URGENCYBTN_ON)));
  SWIG_Python_SetConstant(d, "MINOR_URGENCYBTN_OFF",SWIG_From_int(static_cast< int >(MINOR_URGENCYBTN_OFF)));
  SWIG_Python_SetConstant(d, "MINOR_VIRTUAL_DEFENCE_BANDIT",SWIG_From_int(static_cast< int >(MINOR_VIRTUAL_DEFENCE_BANDIT)));
  SWIG_Python_SetConstant(d, "MINOR_VIRTUAL_DEFENCE_FIRE",SWIG_From_int(static_cast< int >(MINOR_VIRTUAL_DEFENCE_FIRE)));
  SWIG_Python_SetConstant(d, "MINOR_VIRTUAL_DEFENCE_URGENT",SWIG_From_int(static_cast< int >(MINOR_VIRTUAL_DEFENCE_URGENT)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOTDET_START",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_MOTDET_START)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOTDET_STOP",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_MOTDET_STOP)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_HIDE_ALARM_START",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_HIDE_ALARM_START)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_HIDE_ALARM_STOP",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_HIDE_ALARM_STOP)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_UPS_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_UPS_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ELECTRICITY_METER_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_ELECTRICITY_METER_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SWITCH_POWER_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_SWITCH_POWER_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_GAS_DETECT_SYS_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_GAS_DETECT_SYS_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TRANSFORMER_TEMPRATURE_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_TRANSFORMER_TEMPRATURE_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TEMP_HUMI_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_TEMP_HUMI_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_UPS_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_UPS_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ELECTRICITY_METER_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_ELECTRICITY_METER_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SWITCH_POWER_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_SWITCH_POWER_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_GAS_DETECT_SYS_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_GAS_DETECT_SYS_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TRANSFORMER_TEMPRATURE_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_TRANSFORMER_TEMPRATURE_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TEMP_HUMI_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_TEMP_HUMI_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WATER_LEVEL_SENSOR_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WATER_LEVEL_SENSOR_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WATER_LEVEL_SENSOR_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WATER_LEVEL_SENSOR_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DUST_NOISE_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_DUST_NOISE_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DUST_NOISE_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_DUST_NOISE_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ENVIRONMENTAL_LOGGER_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_ENVIRONMENTAL_LOGGER_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ENVIRONMENTAL_LOGGER_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_ENVIRONMENTAL_LOGGER_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TRIGGER_TAMPER",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_TRIGGER_TAMPER)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TRIGGER_TAMPER_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_TRIGGER_TAMPER_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_EMERGENCY_CALL_HELP_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_EMERGENCY_CALL_HELP_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_EMERGENCY_CALL_HELP_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_EMERGENCY_CALL_HELP_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_CONSULTING_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_CONSULTING_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_CONSULTING_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_CONSULTING_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ZONE_MODULE_REMOVE",SWIG_From_int(static_cast< int >(MINOR_ZONE_MODULE_REMOVE)));
  SWIG_Python_SetConstant(d, "MINOR_ZONE_MODULE_RESET",SWIG_From_int(static_cast< int >(MINOR_ZONE_MODULE_RESET)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_WIND_SPEED_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARM_WIND_SPEED_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_WIND_SPEED_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARM_WIND_SPEED_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_GENERATE_OUTPUT_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARM_GENERATE_OUTPUT_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_GENERATE_OUTPUT_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARM_GENERATE_OUTPUT_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_SOAK_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARM_SOAK_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_SOAK_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARM_SOAK_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_SOLAR_POWER_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARM_SOLAR_POWER_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_SOLAR_POWER_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARM_SOLAR_POWER_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_SF6_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARM_SF6_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_SF6_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARM_SF6_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_WEIGHT_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARM_WEIGHT_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_WEIGHT_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARM_WEIGHT_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_WEATHER_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARM_WEATHER_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_WEATHER_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARM_WEATHER_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_FUEL_GAS_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARM_FUEL_GAS_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_FUEL_GAS_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARM_FUEL_GAS_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_FIRE_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARM_FIRE_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_FIRE_ALARM_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARM_FIRE_ALARM_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_OUTPUT_MODULE_REMOVE",SWIG_From_int(static_cast< int >(MINOR_WIRELESS_OUTPUT_MODULE_REMOVE)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_OUTPUT_MODULE_RESET",SWIG_From_int(static_cast< int >(MINOR_WIRELESS_OUTPUT_MODULE_RESET)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_REPEATER_MODULE_REMOVE",SWIG_From_int(static_cast< int >(MINOR_WIRELESS_REPEATER_MODULE_REMOVE)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_REPEATER_MODULE_RESET",SWIG_From_int(static_cast< int >(MINOR_WIRELESS_REPEATER_MODULE_RESET)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_SIREN_MODULE_REMOVE",SWIG_From_int(static_cast< int >(MINOR_WIRELESS_SIREN_MODULE_REMOVE)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_SIREN_MODULE_RESET",SWIG_From_int(static_cast< int >(MINOR_WIRELESS_SIREN_MODULE_RESET)));
  SWIG_Python_SetConstant(d, "MINOR_SOUND_INTENSITY_RISE",SWIG_From_int(static_cast< int >(MINOR_SOUND_INTENSITY_RISE)));
  SWIG_Python_SetConstant(d, "MINOR_SOUND_INTENSITY_RISE_RESET",SWIG_From_int(static_cast< int >(MINOR_SOUND_INTENSITY_RISE_RESET)));
  SWIG_Python_SetConstant(d, "MINOR_SOUND_INTENSITY_DROP",SWIG_From_int(static_cast< int >(MINOR_SOUND_INTENSITY_DROP)));
  SWIG_Python_SetConstant(d, "MINOR_SOUND_INTENSITY_DROP_RESET",SWIG_From_int(static_cast< int >(MINOR_SOUND_INTENSITY_DROP_RESET)));
  SWIG_Python_SetConstant(d, "MINOR_AUDIO_INPUT_EXCEPTION",SWIG_From_int(static_cast< int >(MINOR_AUDIO_INPUT_EXCEPTION)));
  SWIG_Python_SetConstant(d, "MINOR_AUDIO_INPUT_EXCEPTION_RESET",SWIG_From_int(static_cast< int >(MINOR_AUDIO_INPUT_EXCEPTION_RESET)));
  SWIG_Python_SetConstant(d, "MINOR_POWER_ON",SWIG_From_int(static_cast< int >(MINOR_POWER_ON)));
  SWIG_Python_SetConstant(d, "MINOR_POWER_OFF",SWIG_From_int(static_cast< int >(MINOR_POWER_OFF)));
  SWIG_Python_SetConstant(d, "MINOR_WDT_RESET",SWIG_From_int(static_cast< int >(MINOR_WDT_RESET)));
  SWIG_Python_SetConstant(d, "MINOR_LOW_BATTERY_VOLTAGE",SWIG_From_int(static_cast< int >(MINOR_LOW_BATTERY_VOLTAGE)));
  SWIG_Python_SetConstant(d, "MINOR_AC_LOSS",SWIG_From_int(static_cast< int >(MINOR_AC_LOSS)));
  SWIG_Python_SetConstant(d, "MINOR_AC_RESTORE",SWIG_From_int(static_cast< int >(MINOR_AC_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_RTC_EXCEPTION",SWIG_From_int(static_cast< int >(MINOR_RTC_EXCEPTION)));
  SWIG_Python_SetConstant(d, "MINOR_NETWORK_CONNECT_FAILURE",SWIG_From_int(static_cast< int >(MINOR_NETWORK_CONNECT_FAILURE)));
  SWIG_Python_SetConstant(d, "MINOR_NETWORK_CONNECT_RESTORE",SWIG_From_int(static_cast< int >(MINOR_NETWORK_CONNECT_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_TEL_LINE_CONNECT_FAILURE",SWIG_From_int(static_cast< int >(MINOR_TEL_LINE_CONNECT_FAILURE)));
  SWIG_Python_SetConstant(d, "MINOR_TEL_LINE_CONNECT_RESTORE",SWIG_From_int(static_cast< int >(MINOR_TEL_LINE_CONNECT_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_EXPANDER_BUS_LOSS",SWIG_From_int(static_cast< int >(MINOR_EXPANDER_BUS_LOSS)));
  SWIG_Python_SetConstant(d, "MINOR_EXPANDER_BUS_RESTORE",SWIG_From_int(static_cast< int >(MINOR_EXPANDER_BUS_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_KEYPAD_BUS_LOSS",SWIG_From_int(static_cast< int >(MINOR_KEYPAD_BUS_LOSS)));
  SWIG_Python_SetConstant(d, "MINOR_KEYPAD_BUS_RESTORE",SWIG_From_int(static_cast< int >(MINOR_KEYPAD_BUS_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_SENSOR_FAILURE",SWIG_From_int(static_cast< int >(MINOR_SENSOR_FAILURE)));
  SWIG_Python_SetConstant(d, "MINOR_SENSOR_RESTORE",SWIG_From_int(static_cast< int >(MINOR_SENSOR_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_RS485_CONNECT_FAILURE",SWIG_From_int(static_cast< int >(MINOR_RS485_CONNECT_FAILURE)));
  SWIG_Python_SetConstant(d, "MINOR_RS485_CONNECT_RESTORE",SWIG_From_int(static_cast< int >(MINOR_RS485_CONNECT_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_BATTERT_VOLTAGE_RESTORE",SWIG_From_int(static_cast< int >(MINOR_BATTERT_VOLTAGE_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_WIRED_NETWORK_ABNORMAL",SWIG_From_int(static_cast< int >(MINOR_WIRED_NETWORK_ABNORMAL)));
  SWIG_Python_SetConstant(d, "MINOR_WIRED_NETWORK_RESTORE",SWIG_From_int(static_cast< int >(MINOR_WIRED_NETWORK_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_GPRS_ABNORMAL",SWIG_From_int(static_cast< int >(MINOR_GPRS_ABNORMAL)));
  SWIG_Python_SetConstant(d, "MINOR_GPRS_RESTORE",SWIG_From_int(static_cast< int >(MINOR_GPRS_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_3G_ABNORMAL",SWIG_From_int(static_cast< int >(MINOR_3G_ABNORMAL)));
  SWIG_Python_SetConstant(d, "MINOR_3G_RESTORE",SWIG_From_int(static_cast< int >(MINOR_3G_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_SIM_CARD_ABNORMAL",SWIG_From_int(static_cast< int >(MINOR_SIM_CARD_ABNORMAL)));
  SWIG_Python_SetConstant(d, "MINOR_SIM_CARD_RESTORE",SWIG_From_int(static_cast< int >(MINOR_SIM_CARD_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_VI_LOST",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_VI_LOST)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ILLEGAL_ACCESS",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_ILLEGAL_ACCESS)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_HD_FULL",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_HD_FULL)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_HD_ERROR",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_HD_ERROR)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DCD_LOST",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_DCD_LOST)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_IP_CONFLICT",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_IP_CONFLICT)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_NET_BROKEN",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_NET_BROKEN)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REC_ERROR",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REC_ERROR)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_VI_EXCEPTION",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_VI_EXCEPTION)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_FORMAT_HDD_ERROR",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_FORMAT_HDD_ERROR)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_USB_ERROR",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_USB_ERROR)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_USB_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_USB_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_PRINT_ERROR",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_PRINT_ERROR)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_PRINT_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_PRINT_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_SUBSYSTEM_COMMUNICATION_ERROR",SWIG_From_int(static_cast< int >(MINOR_SUBSYSTEM_COMMUNICATION_ERROR)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_IPC_NO_LINK",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_IPC_NO_LINK)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_IPC_IP_CONFLICT",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_IPC_IP_CONFLICT)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_VI_MISMATCH",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_VI_MISMATCH)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MCU_RESTART",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_MCU_RESTART)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_GPRS_MODULE_FAULT",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_GPRS_MODULE_FAULT)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TELEPHONE_MODULE_FAULT",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_TELEPHONE_MODULE_FAULT)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIFI_ABNORMAL",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WIFI_ABNORMAL)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIFI_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WIFI_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_RF_ABNORMAL",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_RF_ABNORMAL)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_RF_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_RF_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DETECTOR_ONLINE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_DETECTOR_ONLINE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DETECTOR_OFFLINE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_DETECTOR_OFFLINE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DETECTOR_BATTERY_NORMAL",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_DETECTOR_BATTERY_NORMAL)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DETECTOR_BATTERY_LOW",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_DETECTOR_BATTERY_LOW)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DATA_TRAFFIC_OVERFLOW",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_DATA_TRAFFIC_OVERFLOW)));
  SWIG_Python_SetConstant(d, "MINOR_ZONE_MODULE_LOSS",SWIG_From_int(static_cast< int >(MINOR_ZONE_MODULE_LOSS)));
  SWIG_Python_SetConstant(d, "MINOR_ZONE_MODULE_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ZONE_MODULE_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_OUTPUT_LOSS",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WIRELESS_OUTPUT_LOSS)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_OUTPUT_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WIRELESS_OUTPUT_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_REPEATER_LOSS",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WIRELESS_REPEATER_LOSS)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_REPEATER_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WIRELESS_REPEATER_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_TRIGGER_MODULE_LOSS",SWIG_From_int(static_cast< int >(MINOR_TRIGGER_MODULE_LOSS)));
  SWIG_Python_SetConstant(d, "MINOR_TRIGGER_MODULE_RESTORE",SWIG_From_int(static_cast< int >(MINOR_TRIGGER_MODULE_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_SIREN_LOSS",SWIG_From_int(static_cast< int >(MINOR_WIRELESS_SIREN_LOSS)));
  SWIG_Python_SetConstant(d, "MINOR_WIRELESS_SIREN_RESTORE",SWIG_From_int(static_cast< int >(MINOR_WIRELESS_SIREN_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_RS485_LOSS",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WIRELESS_RS485_LOSS)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_RS485_RESTORE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WIRELESS_RS485_RESTORE)));
  SWIG_Python_SetConstant(d, "MINOR_GUARD",SWIG_From_int(static_cast< int >(MINOR_GUARD)));
  SWIG_Python_SetConstant(d, "MINOR_UNGUARD",SWIG_From_int(static_cast< int >(MINOR_UNGUARD)));
  SWIG_Python_SetConstant(d, "MINOR_BYPASS",SWIG_From_int(static_cast< int >(MINOR_BYPASS)));
  SWIG_Python_SetConstant(d, "MINOR_DURESS_ACCESS",SWIG_From_int(static_cast< int >(MINOR_DURESS_ACCESS)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_LOCAL_REBOOT",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_LOCAL_REBOOT)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_REBOOT",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_REBOOT)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_LOCAL_UPGRADE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_LOCAL_UPGRADE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_UPGRADE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_UPGRADE)));
  SWIG_Python_SetConstant(d, "MINOR_RECOVERY_DEFAULT_PARAM",SWIG_From_int(static_cast< int >(MINOR_RECOVERY_DEFAULT_PARAM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARM_OUTPUT",SWIG_From_int(static_cast< int >(MINOR_ALARM_OUTPUT)));
  SWIG_Python_SetConstant(d, "MINOR_ACCESS_OPEN",SWIG_From_int(static_cast< int >(MINOR_ACCESS_OPEN)));
  SWIG_Python_SetConstant(d, "MINOR_ACCESS_CLOSE",SWIG_From_int(static_cast< int >(MINOR_ACCESS_CLOSE)));
  SWIG_Python_SetConstant(d, "MINOR_SIREN_OPEN",SWIG_From_int(static_cast< int >(MINOR_SIREN_OPEN)));
  SWIG_Python_SetConstant(d, "MINOR_SIREN_CLOSE",SWIG_From_int(static_cast< int >(MINOR_SIREN_CLOSE)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_ZONE_CONFIG",SWIG_From_int(static_cast< int >(MINOR_MOD_ZONE_CONFIG)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_ALARMOUT_CONIFG",SWIG_From_int(static_cast< int >(MINOR_MOD_ALARMOUT_CONIFG)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_ANALOG_CONFIG",SWIG_From_int(static_cast< int >(MINOR_MOD_ANALOG_CONFIG)));
  SWIG_Python_SetConstant(d, "MINOR_RS485_CONFIG",SWIG_From_int(static_cast< int >(MINOR_RS485_CONFIG)));
  SWIG_Python_SetConstant(d, "MINOR_PHONE_CONFIG",SWIG_From_int(static_cast< int >(MINOR_PHONE_CONFIG)));
  SWIG_Python_SetConstant(d, "MINOR_ADD_ADMIN",SWIG_From_int(static_cast< int >(MINOR_ADD_ADMIN)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_ADMIN_PARAM",SWIG_From_int(static_cast< int >(MINOR_MOD_ADMIN_PARAM)));
  SWIG_Python_SetConstant(d, "MINOR_DEL_ADMIN",SWIG_From_int(static_cast< int >(MINOR_DEL_ADMIN)));
  SWIG_Python_SetConstant(d, "MINOR_ADD_NETUSER",SWIG_From_int(static_cast< int >(MINOR_ADD_NETUSER)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_NETUSER_PARAM",SWIG_From_int(static_cast< int >(MINOR_MOD_NETUSER_PARAM)));
  SWIG_Python_SetConstant(d, "MINOR_DEL_NETUSER",SWIG_From_int(static_cast< int >(MINOR_DEL_NETUSER)));
  SWIG_Python_SetConstant(d, "MINOR_ADD_OPERATORUSER",SWIG_From_int(static_cast< int >(MINOR_ADD_OPERATORUSER)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_OPERATORUSER_PW",SWIG_From_int(static_cast< int >(MINOR_MOD_OPERATORUSER_PW)));
  SWIG_Python_SetConstant(d, "MINOR_DEL_OPERATORUSER",SWIG_From_int(static_cast< int >(MINOR_DEL_OPERATORUSER)));
  SWIG_Python_SetConstant(d, "MINOR_ADD_KEYPADUSER",SWIG_From_int(static_cast< int >(MINOR_ADD_KEYPADUSER)));
  SWIG_Python_SetConstant(d, "MINOR_DEL_KEYPADUSER",SWIG_From_int(static_cast< int >(MINOR_DEL_KEYPADUSER)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTEUSER_LOGIN",SWIG_From_int(static_cast< int >(MINOR_REMOTEUSER_LOGIN)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTEUSER_LOGOUT",SWIG_From_int(static_cast< int >(MINOR_REMOTEUSER_LOGOUT)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_GUARD",SWIG_From_int(static_cast< int >(MINOR_REMOTE_GUARD)));
  SWIG_Python_SetConstant(d, "MINOR_REMOTE_UNGUARD",SWIG_From_int(static_cast< int >(MINOR_REMOTE_UNGUARD)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_HOST_CONFIG",SWIG_From_int(static_cast< int >(MINOR_MOD_HOST_CONFIG)));
  SWIG_Python_SetConstant(d, "MINOR_RESTORE_BYPASS",SWIG_From_int(static_cast< int >(MINOR_RESTORE_BYPASS)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMOUT_OPEN",SWIG_From_int(static_cast< int >(MINOR_ALARMOUT_OPEN)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMOUT_CLOSE",SWIG_From_int(static_cast< int >(MINOR_ALARMOUT_CLOSE)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_SUBSYSTEM_PARAM",SWIG_From_int(static_cast< int >(MINOR_MOD_SUBSYSTEM_PARAM)));
  SWIG_Python_SetConstant(d, "MINOR_GROUP_BYPASS",SWIG_From_int(static_cast< int >(MINOR_GROUP_BYPASS)));
  SWIG_Python_SetConstant(d, "MINOR_RESTORE_GROUP_BYPASS",SWIG_From_int(static_cast< int >(MINOR_RESTORE_GROUP_BYPASS)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_GRPS_PARAM",SWIG_From_int(static_cast< int >(MINOR_MOD_GRPS_PARAM)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_NET_REPORT_PARAM",SWIG_From_int(static_cast< int >(MINOR_MOD_NET_REPORT_PARAM)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_REPORT_MOD",SWIG_From_int(static_cast< int >(MINOR_MOD_REPORT_MOD)));
  SWIG_Python_SetConstant(d, "MINOR_MOD_GATEWAY_PARAM",SWIG_From_int(static_cast< int >(MINOR_MOD_GATEWAY_PARAM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_START_REC",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_START_REC)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_STOP_REC",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_STOP_REC)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_START_TRANS_CHAN",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_START_TRANS_CHAN)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_STOP_TRANS_CHAN",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_STOP_TRANS_CHAN)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_START_VT",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_START_VT)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_STOP_VTM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_STOP_VTM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_PLAYBYFILE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_PLAYBYFILE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_PLAYBYTIME",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_PLAYBYTIME)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_PTZCTRL",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_PTZCTRL)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_FORMAT_HDD",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_FORMAT_HDD)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_LOCKFILE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_LOCKFILE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_UNLOCKFILE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_UNLOCKFILE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_CFGFILE_OUTPUT",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_CFGFILE_OUTPUT)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_CFGFILE_INTPUT",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_CFGFILE_INTPUT)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_RECFILE_OUTPUT",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_RECFILE_OUTPUT)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_STAY_ARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_STAY_ARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_QUICK_ARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_QUICK_ARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_AUTOMATIC_ARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_AUTOMATIC_ARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_AUTOMATIC_DISARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_AUTOMATIC_DISARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_KEYSWITCH_ARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_KEYSWITCH_ARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_KEYSWITCH_DISARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_KEYSWITCH_DISARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_CLEAR_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_CLEAR_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOD_FAULT_CFG",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_MOD_FAULT_CFG)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOD_EVENT_TRIGGER_ALARMOUT_CFG",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_MOD_EVENT_TRIGGER_ALARMOUT_CFG)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SEARCH_EXTERNAL_MODULE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_SEARCH_EXTERNAL_MODULE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REGISTER_EXTERNAL_MODULE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REGISTER_EXTERNAL_MODULE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_CLOSE_KEYBOARD_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_CLOSE_KEYBOARD_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOD_3G_PARAM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_MOD_3G_PARAM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_MOD_PRINT_PARAM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_MOD_PRINT_PARAM)));
  SWIG_Python_SetConstant(d, "MINOR_SD_CARD_FORMAT",SWIG_From_int(static_cast< int >(MINOR_SD_CARD_FORMAT)));
  SWIG_Python_SetConstant(d, "MINOR_SUBSYSTEM_UPGRADE",SWIG_From_int(static_cast< int >(MINOR_SUBSYSTEM_UPGRADE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_PLAN_ARM_CFG",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_PLAN_ARM_CFG)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_PHONE_ARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_PHONE_ARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_PHONE_STAY_ARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_PHONE_STAY_ARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_PHONE_QUICK_ARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_PHONE_QUICK_ARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_PHONE_DISARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_PHONE_DISARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_PHONE_CLEAR_ALARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_PHONE_CLEAR_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WHITELIST_CFG",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WHITELIST_CFG)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TIME_TRIGGER_CFG",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_TIME_TRIGGER_CFG)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_CAPTRUE_CFG",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_CAPTRUE_CFG)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TAMPER_CFG",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_TAMPER_CFG)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_KEYPAD_UPGRADE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_KEYPAD_UPGRADE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ONETOUCH_AWAY_ARMING",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_ONETOUCH_AWAY_ARMING)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ONETOUCH_STAY_ARMING",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_ONETOUCH_STAY_ARMING)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SINGLE_PARTITION_ARMING_OR_DISARMING",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_SINGLE_PARTITION_ARMING_OR_DISARMING)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_CARD_CONFIGURATION",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_CARD_CONFIGURATION)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_CARD_ARMING_OR_DISARMING",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_CARD_ARMING_OR_DISARMING)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_EXPENDING_NETCENTER_CONFIGURATION",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_EXPENDING_NETCENTER_CONFIGURATION)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_NETCARD_CONFIGURATION",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_NETCARD_CONFIGURATION)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DDNS_CONFIGURATION",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_DDNS_CONFIGURATION)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_RS485BUS_CONFIGURATION",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_RS485BUS_CONFIGURATION)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_RS485BUS_RE_REGISTRATION",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_RS485BUS_RE_REGISTRATION)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_OPEN_ELECTRIC_LOCK",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_OPEN_ELECTRIC_LOCK)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_CLOSE_ELECTRIC_LOCK",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_CLOSE_ELECTRIC_LOCK)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_LOCAL_OPEN_ELECTRIC_LOCK",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_LOCAL_OPEN_ELECTRIC_LOCK)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_LOCAL_CLOSE_ELECTRIC_LOCK",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_LOCAL_CLOSE_ELECTRIC_LOCK)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_OPEN_ALARM_LAMP",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_OPEN_ALARM_LAMP)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_CLOSE_ALARM_LAMP",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_CLOSE_ALARM_LAMP)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_TEMPORARY_PASSWORD",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_TEMPORARY_PASSWORD)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ONEKEY_AWAY_ARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_ONEKEY_AWAY_ARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ONEKEY_STAY_ARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_ONEKEY_STAY_ARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SINGLE_ZONE_ARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_SINGLE_ZONE_ARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SINGLE_ZONE_DISARM",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_SINGLE_ZONE_DISARM)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_HIDDNS_CONFIG",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_HIDDNS_CONFIG)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_KEYBOARD_UPDATA",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_KEYBOARD_UPDATA)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ZONE_ADD_DETECTOR",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_ZONE_ADD_DETECTOR)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ZONE_DELETE_DETECTOR",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_ZONE_DELETE_DETECTOR)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_QUERY_DETECTOR_SIGNAL",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_QUERY_DETECTOR_SIGNAL)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_QUERY_DETECTOR_BATTERY",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_QUERY_DETECTOR_BATTERY)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SET_DETECTOR_GUARD",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_SET_DETECTOR_GUARD)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SET_DETECTOR_UNGUARD",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_SET_DETECTOR_UNGUARD)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_SET_WIFI_PARAMETER",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_SET_WIFI_PARAMETER)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_OPEN_VOICE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_OPEN_VOICE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_CLOSE_VOICE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_CLOSE_VOICE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ENABLE_FUNCTION_KEY",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_ENABLE_FUNCTION_KEY)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DISABLE_FUNCTION_KEY",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_DISABLE_FUNCTION_KEY)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_READ_CARD",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_READ_CARD)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_START_BROADCAST",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_START_BROADCAST)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_STOP_BROADCAST",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_STOP_BROADCAST)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_ZONE_MODULE_UPGRADE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_ZONE_MODULE_UPGRADE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_NETWORK_MODULE_EXTEND",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_NETWORK_MODULE_EXTEND)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_ADD_CONTROLLER",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_ADD_CONTROLLER)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DELETE_CONTORLLER",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_DELETE_CONTORLLER)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_NETWORKMODULE_UPGRADE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_NETWORKMODULE_UPGRADE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_OUTPUT_ADD",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WIRELESS_OUTPUT_ADD)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_OUTPUT_DEL",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WIRELESS_OUTPUT_DEL)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_REPEATER_ADD",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WIRELESS_REPEATER_ADD)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_REPEATER_DEL",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WIRELESS_REPEATER_DEL)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_PHONELIST_CFG",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_PHONELIST_CFG)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_RF_SIGNAL_CHECK",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_RF_SIGNAL_CHECK)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_USB_UPGRADE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_USB_UPGRADE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_DOOR_TIME_REMINDER_CFG",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_DOOR_TIME_REMINDER_CFG)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_SIREN_ADD",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WIRELESS_SIREN_ADD)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_WIRELESS_SIREN_DEL",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_WIRELESS_SIREN_DEL)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_OUT_SCALE_OPEN",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_OUT_SCALE_OPEN)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_OUT_SCALE_CLOSE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_OUT_SCALE_CLOSE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_LOCAL_SET_DEVICE_ACTIVE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_LOCAL_SET_DEVICE_ACTIVE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_SET_DEVICE_ACTIVE",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_SET_DEVICE_ACTIVE)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_LOCAL_PARA_FACTORY_DEFAULT",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_LOCAL_PARA_FACTORY_DEFAULT)));
  SWIG_Python_SetConstant(d, "MINOR_ALARMHOST_REMOTE_PARA_FACTORY_DEFAULT",SWIG_From_int(static_cast< int >(MINOR_ALARMHOST_REMOTE_PARA_FACTORY_DEFAULT)));
  SWIG_Python_SetConstant(d, "MINOR_ADD_IPC",SWIG_From_int(static_cast< int >(MINOR_ADD_IPC)));
  SWIG_Python_SetConstant(d, "MINOR_MODIFY_IPC",SWIG_From_int(static_cast< int >(MINOR_MODIFY_IPC)));
  SWIG_Python_SetConstant(d, "MINOR_DELETE_IPC",SWIG_From_int(static_cast< int >(MINOR_DELETE_IPC)));
  SWIG_Python_SetConstant(d, "MINOR_SYS_CHECK_START",SWIG_From_int(static_cast< int >(MINOR_SYS_CHECK_START)));
  SWIG_Python_SetConstant(d, "MINOR_SYS_CHECK_STOP",SWIG_From_int(static_cast< int >(MINOR_SYS_CHECK_STOP)));
  SWIG_Python_SetConstant(d, "MINOR_SYS_CHECK_FINISH",SWIG_From_int(static_cast< int >(MINOR_SYS_CHECK_FINISH)));
  SWIG_Python_SetConstant(d, "MINOR_SCHOOLTIME_IRGI_B",SWIG_From_int(static_cast< int >(MINOR_SCHOOLTIME_IRGI_B)));
  SWIG_Python_SetConstant(d, "MINOR_SCHOOLTIME_SDK",SWIG_From_int(static_cast< int >(MINOR_SCHOOLTIME_SDK)));
  SWIG_Python_SetConstant(d, "MINOR_SCHOOLTIME_SELFTEST",SWIG_From_int(static_cast< int >(MINOR_SCHOOLTIME_SELFTEST)));
  SWIG_Python_SetConstant(d, "MINOR_SUBSYSTEM_ABNORMALINSERT",SWIG_From_int(static_cast< int >(MINOR_SUBSYSTEM_ABNORMALINSERT)));
  SWIG_Python_SetConstant(d, "MINOR_SUBSYSTEM_ABNORMALPULLOUT",SWIG_From_int(static_cast< int >(MINOR_SUBSYSTEM_ABNORMALPULLOUT)));
  SWIG_Python_SetConstant(d, "MINOR_AUTO_ARM",SWIG_From_int(static_cast< int >(MINOR_AUTO_ARM)));
  SWIG_Python_SetConstant(d, "MINOR_AUTO_DISARM",SWIG_From_int(static_cast< int >(MINOR_AUTO_DISARM)));
  SWIG_Python_SetConstant(d, "MINOR_TIME_TIGGER_ON",SWIG_From_int(static_cast< int >(MINOR_TIME_TIGGER_ON)));
  SWIG_Python_SetConstant(d, "MINOR_TIME_TIGGER_OFF",SWIG_From_int(static_cast< int >(MINOR_TIME_TIGGER_OFF)));
  SWIG_Python_SetConstant(d, "MINOR_AUTO_ARM_FAILD",SWIG_From_int(static_cast< int >(MINOR_AUTO_ARM_FAILD)));
  SWIG_Python_SetConstant(d, "MINOR_AUTO_DISARM_FAILD",SWIG_From_int(static_cast< int >(MINOR_AUTO_DISARM_FAILD)));
  SWIG_Python_SetConstant(d, "MINOR_TIME_TIGGER_ON_FAILD",SWIG_From_int(static_cast< int >(MINOR_TIME_TIGGER_ON_FAILD)));
  SWIG_Python_SetConstant(d, "MINOR_TIME_TIGGER_OFF_FAILD",SWIG_From_int(static_cast< int >(MINOR_TIME_TIGGER_OFF_FAILD)));
  SWIG_Python_SetConstant(d, "MINOR_MANDATORY_ALARM",SWIG_From_int(static_cast< int >(MINOR_MANDATORY_ALARM)));
  SWIG_Python_SetConstant(d, "MINOR_KEYPAD_LOCKED",SWIG_From_int(static_cast< int >(MINOR_KEYPAD_LOCKED)));
  SWIG_Python_SetConstant(d, "MINOR_USB_INSERT",SWIG_From_int(static_cast< int >(MINOR_USB_INSERT)));
  SWIG_Python_SetConstant(d, "MINOR_USB_PULLOUT",SWIG_From_int(static_cast< int >(MINOR_USB_PULLOUT)));
  SWIG_Python_SetConstant(d, "PARA_VIDEOOUT",SWIG_From_int(static_cast< int >(0x1)));
  SWIG_Python_SetConstant(d, "PARA_IMAGE",SWIG_From_int(static_cast< int >(0x2)));
  SWIG_Python_SetConstant(d, "PARA_ENCODE",SWIG_From_int(static_cast< int >(0x4)));
  SWIG_Python_SetConstant(d, "PARA_NETWORK",SWIG_From_int(static_cast< int >(0x8)));
  SWIG_Python_SetConstant(d, "PARA_ALARM",SWIG_From_int(static_cast< int >(0x10)));
  SWIG_Python_SetConstant(d, "PARA_EXCEPTION",SWIG_From_int(static_cast< int >(0x20)));
  SWIG_Python_SetConstant(d, "PARA_DECODER",SWIG_From_int(static_cast< int >(0x40)));
  SWIG_Python_SetConstant(d, "PARA_RS232",SWIG_From_int(static_cast< int >(0x80)));
  SWIG_Python_SetConstant(d, "PARA_PREVIEW",SWIG_From_int(static_cast< int >(0x100)));
  SWIG_Python_SetConstant(d, "PARA_SECURITY",SWIG_From_int(static_cast< int >(0x200)));
  SWIG_Python_SetConstant(d, "PARA_DATETIME",SWIG_From_int(static_cast< int >(0x400)));
  SWIG_Python_SetConstant(d, "PARA_FRAMETYPE",SWIG_From_int(static_cast< int >(0x800)));
  SWIG_Python_SetConstant(d, "PARA_DETECTION",SWIG_From_int(static_cast< int >(0x1000)));
  SWIG_Python_SetConstant(d, "PARA_VCA_RULE",SWIG_From_int(static_cast< int >(0x1001)));
  SWIG_Python_SetConstant(d, "PARA_VCA_CTRL",SWIG_From_int(static_cast< int >(0x1002)));
  SWIG_Python_SetConstant(d, "PARA_VCA_PLATE",SWIG_From_int(static_cast< int >(0x1003)));
  SWIG_Python_SetConstant(d, "PARA_CODESPLITTER",SWIG_From_int(static_cast< int >(0x2000)));
  SWIG_Python_SetConstant(d, "PARA_RS485",SWIG_From_int(static_cast< int >(0x2001)));
  SWIG_Python_SetConstant(d, "PARA_DEVICE",SWIG_From_int(static_cast< int >(0x2002)));
  SWIG_Python_SetConstant(d, "PARA_HARDDISK",SWIG_From_int(static_cast< int >(0x2003)));
  SWIG_Python_SetConstant(d, "PARA_AUTOBOOT",SWIG_From_int(static_cast< int >(0x2004)));
  SWIG_Python_SetConstant(d, "PARA_HOLIDAY",SWIG_From_int(static_cast< int >(0x2005)));
  SWIG_Python_SetConstant(d, "PARA_IPC",SWIG_From_int(static_cast< int >(0x2006)));
  SWIG_Python_SetConstant(d, "NET_DVR_FILE_SUCCESS",SWIG_From_int(static_cast< int >(1000)));
  SWIG_Python_SetConstant(d, "NET_DVR_FILE_NOFIND",SWIG_From_int(static_cast< int >(1001)));
  SWIG_Python_SetConstant(d, "NET_DVR_ISFINDING",SWIG_From_int(static_cast< int >(1002)));
  SWIG_Python_SetConstant(d, "NET_DVR_NOMOREFILE",SWIG_From_int(static_cast< int >(1003)));
  SWIG_Python_SetConstant(d, "NET_DVR_FILE_EXCEPTION",SWIG_From_int(static_cast< int >(1004)));
  SWIG_Python_SetConstant(d, "COMM_ALARM",SWIG_From_int(static_cast< int >(0x1100)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_RULE",SWIG_From_int(static_cast< int >(0x1102)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_PDC",SWIG_From_int(static_cast< int >(0x1103)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_VIDEOPLATFORM",SWIG_From_int(static_cast< int >(0x1104)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_ALARMHOST",SWIG_From_int(static_cast< int >(0x1105)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_FACE",SWIG_From_int(static_cast< int >(0x1106)));
  SWIG_Python_SetConstant(d, "COMM_RULE_INFO_UPLOAD",SWIG_From_int(static_cast< int >(0x1107)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_AID",SWIG_From_int(static_cast< int >(0x1110)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_TPS",SWIG_From_int(static_cast< int >(0x1111)));
  SWIG_Python_SetConstant(d, "COMM_UPLOAD_FACESNAP_RESULT",SWIG_From_int(static_cast< int >(0x1112)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_TFS",SWIG_From_int(static_cast< int >(0x1113)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_TPS_V41",SWIG_From_int(static_cast< int >(0x1114)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_AID_V41",SWIG_From_int(static_cast< int >(0x1115)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_VQD_EX",SWIG_From_int(static_cast< int >(0x1116)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_NOTIFICATION_REPORT",SWIG_From_int(static_cast< int >(0x1117)));
  SWIG_Python_SetConstant(d, "COMM_SENSOR_VALUE_UPLOAD",SWIG_From_int(static_cast< int >(0x1120)));
  SWIG_Python_SetConstant(d, "COMM_SENSOR_ALARM",SWIG_From_int(static_cast< int >(0x1121)));
  SWIG_Python_SetConstant(d, "COMM_SWITCH_ALARM",SWIG_From_int(static_cast< int >(0x1122)));
  SWIG_Python_SetConstant(d, "COMM_ALARMHOST_EXCEPTION",SWIG_From_int(static_cast< int >(0x1123)));
  SWIG_Python_SetConstant(d, "COMM_ALARMHOST_OPERATEEVENT_ALARM",SWIG_From_int(static_cast< int >(0x1124)));
  SWIG_Python_SetConstant(d, "COMM_ALARMHOST_SAFETYCABINSTATE",SWIG_From_int(static_cast< int >(0x1125)));
  SWIG_Python_SetConstant(d, "COMM_ALARMHOST_ALARMOUTSTATUS",SWIG_From_int(static_cast< int >(0x1126)));
  SWIG_Python_SetConstant(d, "COMM_ALARMHOST_CID_ALARM",SWIG_From_int(static_cast< int >(0x1127)));
  SWIG_Python_SetConstant(d, "COMM_ALARMHOST_EXTERNAL_DEVICE_ALARM",SWIG_From_int(static_cast< int >(0x1128)));
  SWIG_Python_SetConstant(d, "COMM_ALARMHOST_DATA_UPLOAD",SWIG_From_int(static_cast< int >(0x1129)));
  SWIG_Python_SetConstant(d, "COMM_FACECAPTURE_STATISTICS_RESULT",SWIG_From_int(static_cast< int >(0x112a)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_WIRELESS_INFO",SWIG_From_int(static_cast< int >(0x122b)));
  SWIG_Python_SetConstant(d, "COMM_SCENECHANGE_DETECTION_UPLOAD",SWIG_From_int(static_cast< int >(0x1130)));
  SWIG_Python_SetConstant(d, "COMM_CROSSLINE_ALARM",SWIG_From_int(static_cast< int >(0x1131)));
  SWIG_Python_SetConstant(d, "COMM_UPLOAD_VIDEO_INTERCOM_EVENT",SWIG_From_int(static_cast< int >(0x1132)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_VIDEO_INTERCOM",SWIG_From_int(static_cast< int >(0x1133)));
  SWIG_Python_SetConstant(d, "COMM_UPLOAD_NOTICE_DATA",SWIG_From_int(static_cast< int >(0x1134)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_AUDIOEXCEPTION",SWIG_From_int(static_cast< int >(0x1150)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_DEFOCUS",SWIG_From_int(static_cast< int >(0x1151)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_BUTTON_DOWN_EXCEPTION",SWIG_From_int(static_cast< int >(0x1152)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_ALARMGPS",SWIG_From_int(static_cast< int >(0x1202)));
  SWIG_Python_SetConstant(d, "COMM_TRADEINFO",SWIG_From_int(static_cast< int >(0x1500)));
  SWIG_Python_SetConstant(d, "COMM_UPLOAD_PLATE_RESULT",SWIG_From_int(static_cast< int >(0x2800)));
  SWIG_Python_SetConstant(d, "COMM_ITC_STATUS_DETECT_RESULT",SWIG_From_int(static_cast< int >(0x2810)));
  SWIG_Python_SetConstant(d, "COMM_IPC_AUXALARM_RESULT",SWIG_From_int(static_cast< int >(0x2820)));
  SWIG_Python_SetConstant(d, "COMM_UPLOAD_PICTUREINFO",SWIG_From_int(static_cast< int >(0x2900)));
  SWIG_Python_SetConstant(d, "COMM_SNAP_MATCH_ALARM",SWIG_From_int(static_cast< int >(0x2902)));
  SWIG_Python_SetConstant(d, "COMM_ITS_PLATE_RESULT",SWIG_From_int(static_cast< int >(0x3050)));
  SWIG_Python_SetConstant(d, "COMM_ITS_TRAFFIC_COLLECT",SWIG_From_int(static_cast< int >(0x3051)));
  SWIG_Python_SetConstant(d, "COMM_ITS_GATE_VEHICLE",SWIG_From_int(static_cast< int >(0x3052)));
  SWIG_Python_SetConstant(d, "COMM_ITS_GATE_FACE",SWIG_From_int(static_cast< int >(0x3053)));
  SWIG_Python_SetConstant(d, "COMM_ITS_GATE_COSTITEM",SWIG_From_int(static_cast< int >(0x3054)));
  SWIG_Python_SetConstant(d, "COMM_ITS_GATE_HANDOVER",SWIG_From_int(static_cast< int >(0x3055)));
  SWIG_Python_SetConstant(d, "COMM_ITS_PARK_VEHICLE",SWIG_From_int(static_cast< int >(0x3056)));
  SWIG_Python_SetConstant(d, "COMM_ITS_BLACKLIST_ALARM",SWIG_From_int(static_cast< int >(0x3057)));
  SWIG_Python_SetConstant(d, "COMM_VEHICLE_CONTROL_LIST_DSALARM",SWIG_From_int(static_cast< int >(0x3058)));
  SWIG_Python_SetConstant(d, "COMM_VEHICLE_CONTROL_ALARM",SWIG_From_int(static_cast< int >(0x3059)));
  SWIG_Python_SetConstant(d, "COMM_FIRE_ALARM",SWIG_From_int(static_cast< int >(0x3060)));
  SWIG_Python_SetConstant(d, "COMM_ITS_GATE_ALARMINFO",SWIG_From_int(static_cast< int >(0x3061)));
  SWIG_Python_SetConstant(d, "COMM_VEHICLE_RECOG_RESULT",SWIG_From_int(static_cast< int >(0x3062)));
  SWIG_Python_SetConstant(d, "COMM_PLATE_RESULT_V50",SWIG_From_int(static_cast< int >(0x3063)));
  SWIG_Python_SetConstant(d, "COMM_GATE_CHARGEINFO_UPLOAD",SWIG_From_int(static_cast< int >(0x3064)));
  SWIG_Python_SetConstant(d, "COMM_TME_VEHICLE_INDENTIFICATION",SWIG_From_int(static_cast< int >(0x3065)));
  SWIG_Python_SetConstant(d, "COMM_GATE_CARDINFO_UPLOAD",SWIG_From_int(static_cast< int >(0x3066)));
  SWIG_Python_SetConstant(d, "COMM_LOADING_DOCK_OPERATEINFO",SWIG_From_int(static_cast< int >(0x3067)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_SENSORINFO_UPLOAD",SWIG_From_int(static_cast< int >(0x3077)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_CAPTURE_UPLOAD",SWIG_From_int(static_cast< int >(0x3078)));
  SWIG_Python_SetConstant(d, "COMM_ITS_RADARINFO",SWIG_From_int(static_cast< int >(0x3079)));
  SWIG_Python_SetConstant(d, "COMM_SIGNAL_LAMP_ABNORMAL",SWIG_From_int(static_cast< int >(0x3080)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_TPS_REAL_TIME",SWIG_From_int(static_cast< int >(0x3081)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_TPS_STATISTICS",SWIG_From_int(static_cast< int >(0x3082)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_V30",SWIG_From_int(static_cast< int >(0x4000)));
  SWIG_Python_SetConstant(d, "COMM_IPCCFG",SWIG_From_int(static_cast< int >(0x4001)));
  SWIG_Python_SetConstant(d, "COMM_IPCCFG_V31",SWIG_From_int(static_cast< int >(0x4002)));
  SWIG_Python_SetConstant(d, "COMM_IPCCFG_V40",SWIG_From_int(static_cast< int >(0x4003)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_DEVICE",SWIG_From_int(static_cast< int >(0x4004)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_CVR",SWIG_From_int(static_cast< int >(0x4005)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_HOT_SPARE",SWIG_From_int(static_cast< int >(0x4006)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_V40",SWIG_From_int(static_cast< int >(0x4007)));
  SWIG_Python_SetConstant(d, "COMM_UPLOAD_HEATMAP_RESULT",SWIG_From_int(static_cast< int >(0x4008)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_DEVICE_V40",SWIG_From_int(static_cast< int >(0x4009)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_FACE_DETECTION",SWIG_From_int(static_cast< int >(0x4010)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_TARGET_LEFT_REGION",SWIG_From_int(static_cast< int >(0x4011)));
  SWIG_Python_SetConstant(d, "COMM_GISINFO_UPLOAD",SWIG_From_int(static_cast< int >(0x4012)));
  SWIG_Python_SetConstant(d, "COMM_VANDALPROOF_ALARM",SWIG_From_int(static_cast< int >(0x4013)));
  SWIG_Python_SetConstant(d, "COMM_PEOPLE_DETECTION_UPLOAD",SWIG_From_int(static_cast< int >(0x4014)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_STORAGE_DETECTION",SWIG_From_int(static_cast< int >(0x4015)));
  SWIG_Python_SetConstant(d, "COMM_MVM_REGISTER",SWIG_From_int(static_cast< int >(0x4016)));
  SWIG_Python_SetConstant(d, "COMM_MVM_STATUS_INFO",SWIG_From_int(static_cast< int >(0x4017)));
  SWIG_Python_SetConstant(d, "COMM_UPLOAD_HEATMAP_RESULT_PDC",SWIG_From_int(static_cast< int >(0x4018)));
  SWIG_Python_SetConstant(d, "COMM_UPLOAD_HEATMAP_RESULT_DURATION",SWIG_From_int(static_cast< int >(0x4019)));
  SWIG_Python_SetConstant(d, "COMM_UPLOAD_HEATMAP_RESULT_INTERSECTION",SWIG_From_int(static_cast< int >(0x4020)));
  SWIG_Python_SetConstant(d, "COMM_UPLOAD_AIOP_VIDEO",SWIG_From_int(static_cast< int >(0x4021)));
  SWIG_Python_SetConstant(d, "COMM_UPLOAD_AIOP_PICTURE",SWIG_From_int(static_cast< int >(0x4022)));
  SWIG_Python_SetConstant(d, "COMM_UPLOAD_AIOP_POLLING_SNAP",SWIG_From_int(static_cast< int >(0x4023)));
  SWIG_Python_SetConstant(d, "COMM_UPLOAD_AIOP_POLLING_VIDEO",SWIG_From_int(static_cast< int >(0x4024)));
  SWIG_Python_SetConstant(d, "COMM_ITS_ROAD_EXCEPTION",SWIG_From_int(static_cast< int >(0x4500)));
  SWIG_Python_SetConstant(d, "COMM_ITS_EXTERNAL_CONTROL_ALARM",SWIG_From_int(static_cast< int >(0x4520)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_SHIPSDETECTION",SWIG_From_int(static_cast< int >(0x4521)));
  SWIG_Python_SetConstant(d, "COMM_VCA_DBD_ALARM",SWIG_From_int(static_cast< int >(0x4550)));
  SWIG_Python_SetConstant(d, "COMM_VCA_ADAS_ALARM",SWIG_From_int(static_cast< int >(0x4551)));
  SWIG_Python_SetConstant(d, "COMM_VEH_REALTIME_INFO",SWIG_From_int(static_cast< int >(0x4552)));
  SWIG_Python_SetConstant(d, "COMM_FIREDETECTION_ALARM",SWIG_From_int(static_cast< int >(0x4991)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_DENSEFOGDETECTION",SWIG_From_int(static_cast< int >(0x4992)));
  SWIG_Python_SetConstant(d, "COMM_VCA_ALARM",SWIG_From_int(static_cast< int >(0x4993)));
  SWIG_Python_SetConstant(d, "COMM_FACE_THERMOMETRY_ALARM",SWIG_From_int(static_cast< int >(0x4994)));
  SWIG_Python_SetConstant(d, "COMM_TAPE_ARCHIVE_ALARM",SWIG_From_int(static_cast< int >(0x4996)));
  SWIG_Python_SetConstant(d, "COMM_SCREEN_ALARM",SWIG_From_int(static_cast< int >(0x5000)));
  SWIG_Python_SetConstant(d, "COMM_DVCS_STATE_ALARM",SWIG_From_int(static_cast< int >(0x5001)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_ACS",SWIG_From_int(static_cast< int >(0x5002)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_FIBER_CONVERT",SWIG_From_int(static_cast< int >(0x5003)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_SWITCH_CONVERT",SWIG_From_int(static_cast< int >(0x5004)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_DEC_VCA",SWIG_From_int(static_cast< int >(0x5010)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_LCD",SWIG_From_int(static_cast< int >(0x5011)));
  SWIG_Python_SetConstant(d, "COMM_CONFERENCE_CALL_ALARM",SWIG_From_int(static_cast< int >(0x5012)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_WALL_CONFERNECE",SWIG_From_int(static_cast< int >(0x5015)));
  SWIG_Python_SetConstant(d, "COMM_DIAGNOSIS_UPLOAD",SWIG_From_int(static_cast< int >(0x5100)));
  SWIG_Python_SetConstant(d, "COMM_HIGH_DENSITY_UPLOAD",SWIG_From_int(static_cast< int >(0x5101)));
  SWIG_Python_SetConstant(d, "COMM_ID_INFO_ALARM",SWIG_From_int(static_cast< int >(0x5200)));
  SWIG_Python_SetConstant(d, "COMM_PASSNUM_INFO_ALARM",SWIG_From_int(static_cast< int >(0x5201)));
  SWIG_Python_SetConstant(d, "COMM_PASSPORT_ALARM",SWIG_From_int(static_cast< int >(0x5202)));
  SWIG_Python_SetConstant(d, "COMM_THERMOMETRY_DIFF_ALARM",SWIG_From_int(static_cast< int >(0x5211)));
  SWIG_Python_SetConstant(d, "COMM_THERMOMETRY_ALARM",SWIG_From_int(static_cast< int >(0x5212)));
  SWIG_Python_SetConstant(d, "COMM_PANORAMIC_LINKAGE_ALARM",SWIG_From_int(static_cast< int >(0x5213)));
  SWIG_Python_SetConstant(d, "COMM_TAG_INFO_ALARM",SWIG_From_int(static_cast< int >(0x5215)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_VQD",SWIG_From_int(static_cast< int >(0x6000)));
  SWIG_Python_SetConstant(d, "COMM_PUSH_UPDATE_RECORD_INFO",SWIG_From_int(static_cast< int >(0x6001)));
  SWIG_Python_SetConstant(d, "COMM_SWITCH_LAMP_ALARM",SWIG_From_int(static_cast< int >(0x6002)));
  SWIG_Python_SetConstant(d, "COMM_INQUEST_ALARM",SWIG_From_int(static_cast< int >(0x6005)));
  SWIG_Python_SetConstant(d, "COMM_VIDEO_PARKING_POLE_ALARM",SWIG_From_int(static_cast< int >(0x6006)));
  SWIG_Python_SetConstant(d, "COMM_GPS_STATUS_ALARM",SWIG_From_int(static_cast< int >(0x6010)));
  SWIG_Python_SetConstant(d, "COMM_BASE_STATION_INFO_ALARM",SWIG_From_int(static_cast< int >(0x6011)));
  SWIG_Python_SetConstant(d, "COMM_ALARM_SUBSCRIBE_EVENT",SWIG_From_int(static_cast< int >(0x6012)));
  SWIG_Python_SetConstant(d, "COMM_FACESNAP_RAWDATA_ALARM",SWIG_From_int(static_cast< int >(0x6015)));
  SWIG_Python_SetConstant(d, "COMM_CLUSTER_ALARM",SWIG_From_int(static_cast< int >(0x6020)));
  SWIG_Python_SetConstant(d, "COMM_ISAPI_ALARM",SWIG_From_int(static_cast< int >(0x6009)));
  SWIG_Python_SetConstant(d, "COMM_FRAMES_PEOPLE_COUNTING_ALARM",SWIG_From_int(static_cast< int >(0x6069)));
  SWIG_Python_SetConstant(d, "COMM_SIGN_ABNORMAL_ALARM",SWIG_From_int(static_cast< int >(0x6120)));
  SWIG_Python_SetConstant(d, "COMM_HFPD_ALARM",SWIG_From_int(static_cast< int >(0x6121)));
  SWIG_Python_SetConstant(d, "COMM_HCU_ALARM",SWIG_From_int(static_cast< int >(0x6150)));
  SWIG_Python_SetConstant(d, "COMM_DEV_STATUS_CHANGED",SWIG_From_int(static_cast< int >(0x7000)));
  SWIG_Python_SetConstant(d, "EXCEPTION_EXCHANGE",SWIG_From_int(static_cast< int >(0x8000)));
  SWIG_Python_SetConstant(d, "EXCEPTION_AUDIOEXCHANGE",SWIG_From_int(static_cast< int >(0x8001)));
  SWIG_Python_SetConstant(d, "EXCEPTION_ALARM",SWIG_From_int(static_cast< int >(0x8002)));
  SWIG_Python_SetConstant(d, "EXCEPTION_PREVIEW",SWIG_From_int(static_cast< int >(0x8003)));
  SWIG_Python_SetConstant(d, "EXCEPTION_SERIAL",SWIG_From_int(static_cast< int >(0x8004)));
  SWIG_Python_SetConstant(d, "EXCEPTION_RECONNECT",SWIG_From_int(static_cast< int >(0x8005)));
  SWIG_Python_SetConstant(d, "EXCEPTION_ALARMRECONNECT",SWIG_From_int(static_cast< int >(0x8006)));
  SWIG_Python_SetConstant(d, "EXCEPTION_SERIALRECONNECT",SWIG_From_int(static_cast< int >(0x8007)));
  SWIG_Python_SetConstant(d, "SERIAL_RECONNECTSUCCESS",SWIG_From_int(static_cast< int >(0x8008)));
  SWIG_Python_SetConstant(d, "EXCEPTION_PLAYBACK",SWIG_From_int(static_cast< int >(0x8010)));
  SWIG_Python_SetConstant(d, "EXCEPTION_DISKFMT",SWIG_From_int(static_cast< int >(0x8011)));
  SWIG_Python_SetConstant(d, "EXCEPTION_PASSIVEDECODE",SWIG_From_int(static_cast< int >(0x8012)));
  SWIG_Python_SetConstant(d, "EXCEPTION_EMAILTEST",SWIG_From_int(static_cast< int >(0x8013)));
  SWIG_Python_SetConstant(d, "EXCEPTION_BACKUP",SWIG_From_int(static_cast< int >(0x8014)));
  SWIG_Python_SetConstant(d, "PREVIEW_RECONNECTSUCCESS",SWIG_From_int(static_cast< int >(0x8015)));
  SWIG_Python_SetConstant(d, "ALARM_RECONNECTSUCCESS",SWIG_From_int(static_cast< int >(0x8016)));
  SWIG_Python_SetConstant(d, "RESUME_EXCHANGE",SWIG_From_int(static_cast< int >(0x8017)));
  SWIG_Python_SetConstant(d, "NETWORK_FLOWTEST_EXCEPTION",SWIG_From_int(static_cast< int >(0x8018)));
  SWIG_Python_SetConstant(d, "EXCEPTION_PICPREVIEWRECONNECT",SWIG_From_int(static_cast< int >(0x8019)));
  SWIG_Python_SetConstant(d, "PICPREVIEW_RECONNECTSUCCESS",SWIG_From_int(static_cast< int >(0x8020)));
  SWIG_Python_SetConstant(d, "EXCEPTION_PICPREVIEW",SWIG_From_int(static_cast< int >(0x8021)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MAX_ALARM_INFO",SWIG_From_int(static_cast< int >(0x8022)));
  SWIG_Python_SetConstant(d, "EXCEPTION_LOST_ALARM",SWIG_From_int(static_cast< int >(0x8023)));
  SWIG_Python_SetConstant(d, "EXCEPTION_PASSIVETRANSRECONNECT",SWIG_From_int(static_cast< int >(0x8024)));
  SWIG_Python_SetConstant(d, "PASSIVETRANS_RECONNECTSUCCESS",SWIG_From_int(static_cast< int >(0x8025)));
  SWIG_Python_SetConstant(d, "EXCEPTION_PASSIVETRANS",SWIG_From_int(static_cast< int >(0x8026)));
  SWIG_Python_SetConstant(d, "SUCCESS_PUSHDEVLOGON",SWIG_From_int(static_cast< int >(0x8030)));
  SWIG_Python_SetConstant(d, "EXCEPTION_RELOGIN",SWIG_From_int(static_cast< int >(0x8040)));
  SWIG_Python_SetConstant(d, "RELOGIN_SUCCESS",SWIG_From_int(static_cast< int >(0x8041)));
  SWIG_Python_SetConstant(d, "EXCEPTION_PASSIVEDECODE_RECONNNECT",SWIG_From_int(static_cast< int >(0x8042)));
  SWIG_Python_SetConstant(d, "EXCEPTION_CLUSTER_CS_ARMFAILED",SWIG_From_int(static_cast< int >(0x8043)));
  SWIG_Python_SetConstant(d, "EXCEPTION_RELOGIN_FAILED",SWIG_From_int(static_cast< int >(0x8044)));
  SWIG_Python_SetConstant(d, "EXCEPTION_PREVIEW_RECONNECT_CLOSED",SWIG_From_int(static_cast< int >(0x8045)));
  SWIG_Python_SetConstant(d, "EXCEPTION_ALARM_RECONNECT_CLOSED",SWIG_From_int(static_cast< int >(0x8046)));
  SWIG_Python_SetConstant(d, "EXCEPTION_SERIAL_RECONNECT_CLOSED",SWIG_From_int(static_cast< int >(0x8047)));
  SWIG_Python_SetConstant(d, "EXCEPTION_PIC_RECONNECT_CLOSED",SWIG_From_int(static_cast< int >(0x8048)));
  SWIG_Python_SetConstant(d, "EXCEPTION_PASSIVE_DECODE_RECONNECT_CLOSED",SWIG_From_int(static_cast< int >(0x8049)));
  SWIG_Python_SetConstant(d, "EXCEPTION_PASSIVE_TRANS_RECONNECT_CLOSED",SWIG_From_int(static_cast< int >(0x804a)));
  SWIG_Python_SetConstant(d, "EXCEPTION_VIDEO_DOWNLOAD",SWIG_From_int(static_cast< int >(0x804b)));
  SWIG_Python_SetConstant(d, "NET_DVR_SYSHEAD",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "NET_DVR_STREAMDATA",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "NET_DVR_AUDIOSTREAMDATA",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "NET_DVR_STD_VIDEODATA",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "NET_DVR_STD_AUDIODATA",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "NET_DVR_SDP",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANGE_FORWARD",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "NET_DVR_CHANGE_REVERSE",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, "NET_DVR_PLAYBACK_ALLFILEEND",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, "NET_DVR_VOD_DRAW_FRAME",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, "NET_DVR_VOD_DRAW_DATA",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, "NET_DVR_PRIVATE_DATA",SWIG_From_int(static_cast< int >(112)));
  SWIG_Python_SetConstant(d, "DVR",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ATMDVR",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "DVS",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "DEC",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "ENC_DEC",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "DVR_HC",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "DVR_HT",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, "DVR_HF",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "DVR_HS",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, "DVR_HTS",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "DVR_HB",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, "DVR_HCS",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, "DVS_A",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, "DVR_HC_S",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, "DVR_HT_S",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, "DVR_HF_S",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "DVR_HS_S",SWIG_From_int(static_cast< int >(17)));
  SWIG_Python_SetConstant(d, "ATMDVR_S",SWIG_From_int(static_cast< int >(18)));
  SWIG_Python_SetConstant(d, "DVR_7000H",SWIG_From_int(static_cast< int >(19)));
  SWIG_Python_SetConstant(d, "DEC_MAT",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, "DVR_MOBILE",SWIG_From_int(static_cast< int >(21)));
  SWIG_Python_SetConstant(d, "DVR_HD_S",SWIG_From_int(static_cast< int >(22)));
  SWIG_Python_SetConstant(d, "DVR_HD_SL",SWIG_From_int(static_cast< int >(23)));
  SWIG_Python_SetConstant(d, "DVR_HC_SL",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, "DVR_HS_ST",SWIG_From_int(static_cast< int >(25)));
  SWIG_Python_SetConstant(d, "DVS_HW",SWIG_From_int(static_cast< int >(26)));
  SWIG_Python_SetConstant(d, "DS630X_D",SWIG_From_int(static_cast< int >(27)));
  SWIG_Python_SetConstant(d, "DS640X_HD",SWIG_From_int(static_cast< int >(28)));
  SWIG_Python_SetConstant(d, "DS610X_D",SWIG_From_int(static_cast< int >(29)));
  SWIG_Python_SetConstant(d, "IPCAM",SWIG_From_int(static_cast< int >(30)));
  SWIG_Python_SetConstant(d, "MEGA_IPCAM",SWIG_From_int(static_cast< int >(31)));
  SWIG_Python_SetConstant(d, "IPCAM_X62MF",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "ITCCAM",SWIG_From_int(static_cast< int >(35)));
  SWIG_Python_SetConstant(d, "IVS_IPCAM",SWIG_From_int(static_cast< int >(36)));
  SWIG_Python_SetConstant(d, "ZOOMCAM",SWIG_From_int(static_cast< int >(38)));
  SWIG_Python_SetConstant(d, "IPDOME",SWIG_From_int(static_cast< int >(40)));
  SWIG_Python_SetConstant(d, "IPDOME_MEGA200",SWIG_From_int(static_cast< int >(41)));
  SWIG_Python_SetConstant(d, "IPDOME_MEGA130",SWIG_From_int(static_cast< int >(42)));
  SWIG_Python_SetConstant(d, "IPDOME_AI",SWIG_From_int(static_cast< int >(43)));
  SWIG_Python_SetConstant(d, "TII_IPCAM",SWIG_From_int(static_cast< int >(44)));
  SWIG_Python_SetConstant(d, "IPTC_DOME",SWIG_From_int(static_cast< int >(45)));
  SWIG_Python_SetConstant(d, "DS_2DP_Z",SWIG_From_int(static_cast< int >(46)));
  SWIG_Python_SetConstant(d, "DS_2DP",SWIG_From_int(static_cast< int >(47)));
  SWIG_Python_SetConstant(d, "ITS_WMS",SWIG_From_int(static_cast< int >(48)));
  SWIG_Python_SetConstant(d, "IPMOD",SWIG_From_int(static_cast< int >(50)));
  SWIG_Python_SetConstant(d, "TRAFFIC_YTDOME",SWIG_From_int(static_cast< int >(51)));
  SWIG_Python_SetConstant(d, "TRAFFIC_RDDOME",SWIG_From_int(static_cast< int >(52)));
  SWIG_Python_SetConstant(d, "IDS6501_HF_P",SWIG_From_int(static_cast< int >(60)));
  SWIG_Python_SetConstant(d, "IDS6101_HF_A",SWIG_From_int(static_cast< int >(61)));
  SWIG_Python_SetConstant(d, "IDS6002_HF_B",SWIG_From_int(static_cast< int >(62)));
  SWIG_Python_SetConstant(d, "IDS6101_HF_B",SWIG_From_int(static_cast< int >(63)));
  SWIG_Python_SetConstant(d, "IDS52XX",SWIG_From_int(static_cast< int >(64)));
  SWIG_Python_SetConstant(d, "IDS90XX",SWIG_From_int(static_cast< int >(65)));
  SWIG_Python_SetConstant(d, "IDS8104_AHL_S_HX",SWIG_From_int(static_cast< int >(66)));
  SWIG_Python_SetConstant(d, "IDS8104_AHL_S_H",SWIG_From_int(static_cast< int >(67)));
  SWIG_Python_SetConstant(d, "IDS91XX",SWIG_From_int(static_cast< int >(68)));
  SWIG_Python_SetConstant(d, "IIP_CAM_B",SWIG_From_int(static_cast< int >(69)));
  SWIG_Python_SetConstant(d, "IIP_CAM_F",SWIG_From_int(static_cast< int >(70)));
  SWIG_Python_SetConstant(d, "DS71XX_H",SWIG_From_int(static_cast< int >(71)));
  SWIG_Python_SetConstant(d, "DS72XX_H_S",SWIG_From_int(static_cast< int >(72)));
  SWIG_Python_SetConstant(d, "DS73XX_H_S",SWIG_From_int(static_cast< int >(73)));
  SWIG_Python_SetConstant(d, "DS72XX_HF_S",SWIG_From_int(static_cast< int >(74)));
  SWIG_Python_SetConstant(d, "DS73XX_HFI_S",SWIG_From_int(static_cast< int >(75)));
  SWIG_Python_SetConstant(d, "DS76XX_H_S",SWIG_From_int(static_cast< int >(76)));
  SWIG_Python_SetConstant(d, "DS76XX_N_S",SWIG_From_int(static_cast< int >(77)));
  SWIG_Python_SetConstant(d, "DS_TP3200_EC",SWIG_From_int(static_cast< int >(78)));
  SWIG_Python_SetConstant(d, "DS81XX_HS_S",SWIG_From_int(static_cast< int >(81)));
  SWIG_Python_SetConstant(d, "DS81XX_HL_S",SWIG_From_int(static_cast< int >(82)));
  SWIG_Python_SetConstant(d, "DS81XX_HC_S",SWIG_From_int(static_cast< int >(83)));
  SWIG_Python_SetConstant(d, "DS81XX_HD_S",SWIG_From_int(static_cast< int >(84)));
  SWIG_Python_SetConstant(d, "DS81XX_HE_S",SWIG_From_int(static_cast< int >(85)));
  SWIG_Python_SetConstant(d, "DS81XX_HF_S",SWIG_From_int(static_cast< int >(86)));
  SWIG_Python_SetConstant(d, "DS81XX_AH_S",SWIG_From_int(static_cast< int >(87)));
  SWIG_Python_SetConstant(d, "DS81XX_AHF_S",SWIG_From_int(static_cast< int >(88)));
  SWIG_Python_SetConstant(d, "DS90XX_HF_S",SWIG_From_int(static_cast< int >(90)));
  SWIG_Python_SetConstant(d, "DS91XX_HF_S",SWIG_From_int(static_cast< int >(91)));
  SWIG_Python_SetConstant(d, "DS91XX_HD_S",SWIG_From_int(static_cast< int >(92)));
  SWIG_Python_SetConstant(d, "IDS90XX_A",SWIG_From_int(static_cast< int >(93)));
  SWIG_Python_SetConstant(d, "IDS91XX_A",SWIG_From_int(static_cast< int >(94)));
  SWIG_Python_SetConstant(d, "DS95XX_N_S",SWIG_From_int(static_cast< int >(95)));
  SWIG_Python_SetConstant(d, "DS96XX_N_SH",SWIG_From_int(static_cast< int >(96)));
  SWIG_Python_SetConstant(d, "DS90XX_HF_SH",SWIG_From_int(static_cast< int >(97)));
  SWIG_Python_SetConstant(d, "DS91XX_HF_SH",SWIG_From_int(static_cast< int >(98)));
  SWIG_Python_SetConstant(d, "DS_B10_XY",SWIG_From_int(static_cast< int >(100)));
  SWIG_Python_SetConstant(d, "DS_6504HF_B10",SWIG_From_int(static_cast< int >(101)));
  SWIG_Python_SetConstant(d, "DS_6504D_B10",SWIG_From_int(static_cast< int >(102)));
  SWIG_Python_SetConstant(d, "DS_1832_B10",SWIG_From_int(static_cast< int >(103)));
  SWIG_Python_SetConstant(d, "DS_6401HFH_B10",SWIG_From_int(static_cast< int >(104)));
  SWIG_Python_SetConstant(d, "DS_65XXHC",SWIG_From_int(static_cast< int >(105)));
  SWIG_Python_SetConstant(d, "DS_65XXHC_S",SWIG_From_int(static_cast< int >(106)));
  SWIG_Python_SetConstant(d, "DS_65XXHF",SWIG_From_int(static_cast< int >(107)));
  SWIG_Python_SetConstant(d, "DS_65XXHF_S",SWIG_From_int(static_cast< int >(108)));
  SWIG_Python_SetConstant(d, "DS_6500HF_B",SWIG_From_int(static_cast< int >(109)));
  SWIG_Python_SetConstant(d, "IVMS_6200_C",SWIG_From_int(static_cast< int >(110)));
  SWIG_Python_SetConstant(d, "IVMS_6200_B",SWIG_From_int(static_cast< int >(111)));
  SWIG_Python_SetConstant(d, "DS_72XXHV_ST15",SWIG_From_int(static_cast< int >(112)));
  SWIG_Python_SetConstant(d, "DS_72XXHV_ST20",SWIG_From_int(static_cast< int >(113)));
  SWIG_Python_SetConstant(d, "IVMS_6200_T",SWIG_From_int(static_cast< int >(114)));
  SWIG_Python_SetConstant(d, "IVMS_6200_BP",SWIG_From_int(static_cast< int >(115)));
  SWIG_Python_SetConstant(d, "DS_81XXHC_ST",SWIG_From_int(static_cast< int >(116)));
  SWIG_Python_SetConstant(d, "DS_81XXHS_ST",SWIG_From_int(static_cast< int >(117)));
  SWIG_Python_SetConstant(d, "DS_81XXAH_ST",SWIG_From_int(static_cast< int >(118)));
  SWIG_Python_SetConstant(d, "DS_81XXAHF_ST",SWIG_From_int(static_cast< int >(119)));
  SWIG_Python_SetConstant(d, "DS_66XXDVS",SWIG_From_int(static_cast< int >(120)));
  SWIG_Python_SetConstant(d, "DS_1964_B10",SWIG_From_int(static_cast< int >(121)));
  SWIG_Python_SetConstant(d, "DS_B10N04_IN",SWIG_From_int(static_cast< int >(122)));
  SWIG_Python_SetConstant(d, "DS_B10N04_OUT",SWIG_From_int(static_cast< int >(123)));
  SWIG_Python_SetConstant(d, "DS_B10N04_INTEL",SWIG_From_int(static_cast< int >(124)));
  SWIG_Python_SetConstant(d, "DS_6408HFH_B10E_RM",SWIG_From_int(static_cast< int >(125)));
  SWIG_Python_SetConstant(d, "DS_B10N64F1_RTM",SWIG_From_int(static_cast< int >(126)));
  SWIG_Python_SetConstant(d, "DS_B10N64F1D_RTM",SWIG_From_int(static_cast< int >(127)));
  SWIG_Python_SetConstant(d, "DS_B10_SDS",SWIG_From_int(static_cast< int >(128)));
  SWIG_Python_SetConstant(d, "DS_B10_DS",SWIG_From_int(static_cast< int >(129)));
  SWIG_Python_SetConstant(d, "DS_6401HFH_B10V",SWIG_From_int(static_cast< int >(130)));
  SWIG_Python_SetConstant(d, "DS_6504D_B10B",SWIG_From_int(static_cast< int >(131)));
  SWIG_Python_SetConstant(d, "DS_6504D_B10H",SWIG_From_int(static_cast< int >(132)));
  SWIG_Python_SetConstant(d, "DS_6504D_B10V",SWIG_From_int(static_cast< int >(133)));
  SWIG_Python_SetConstant(d, "DS_6408HFH_B10S",SWIG_From_int(static_cast< int >(134)));
  SWIG_Python_SetConstant(d, "DS_18XX_N",SWIG_From_int(static_cast< int >(135)));
  SWIG_Python_SetConstant(d, "DS_6504HF_B10F_CLASS",SWIG_From_int(static_cast< int >(136)));
  SWIG_Python_SetConstant(d, "DS_18XX_PTZ",SWIG_From_int(static_cast< int >(141)));
  SWIG_Python_SetConstant(d, "DS_19AXX",SWIG_From_int(static_cast< int >(142)));
  SWIG_Python_SetConstant(d, "DS_19BXX",SWIG_From_int(static_cast< int >(143)));
  SWIG_Python_SetConstant(d, "DS_19CXX",SWIG_From_int(static_cast< int >(144)));
  SWIG_Python_SetConstant(d, "DS_19DXX",SWIG_From_int(static_cast< int >(145)));
  SWIG_Python_SetConstant(d, "DS_19XX",SWIG_From_int(static_cast< int >(146)));
  SWIG_Python_SetConstant(d, "DS_19SXX",SWIG_From_int(static_cast< int >(147)));
  SWIG_Python_SetConstant(d, "DS_1HXX",SWIG_From_int(static_cast< int >(148)));
  SWIG_Python_SetConstant(d, "DS_PWXX",SWIG_From_int(static_cast< int >(150)));
  SWIG_Python_SetConstant(d, "DS_PMXX",SWIG_From_int(static_cast< int >(151)));
  SWIG_Python_SetConstant(d, "DS_19DXX_S",SWIG_From_int(static_cast< int >(152)));
  SWIG_Python_SetConstant(d, "DS_PWAXX",SWIG_From_int(static_cast< int >(153)));
  SWIG_Python_SetConstant(d, "DS_PHAXX",SWIG_From_int(static_cast< int >(154)));
  SWIG_Python_SetConstant(d, "DS_C10H",SWIG_From_int(static_cast< int >(161)));
  SWIG_Python_SetConstant(d, "DS_C10N_BI",SWIG_From_int(static_cast< int >(162)));
  SWIG_Python_SetConstant(d, "DS_C10N_DI",SWIG_From_int(static_cast< int >(163)));
  SWIG_Python_SetConstant(d, "DS_C10N_SI",SWIG_From_int(static_cast< int >(164)));
  SWIG_Python_SetConstant(d, "DS_C10N_DO",SWIG_From_int(static_cast< int >(165)));
  SWIG_Python_SetConstant(d, "DS_C10N_SERVER",SWIG_From_int(static_cast< int >(166)));
  SWIG_Python_SetConstant(d, "IDS_8104_AHFL_S_H",SWIG_From_int(static_cast< int >(171)));
  SWIG_Python_SetConstant(d, "IDS_65XX_HF_A",SWIG_From_int(static_cast< int >(172)));
  SWIG_Python_SetConstant(d, "IDS90XX_HF_RH",SWIG_From_int(static_cast< int >(173)));
  SWIG_Python_SetConstant(d, "IDS91XX_HF_RH",SWIG_From_int(static_cast< int >(174)));
  SWIG_Python_SetConstant(d, "IDS_65XX_HF_B",SWIG_From_int(static_cast< int >(175)));
  SWIG_Python_SetConstant(d, "IDS_65XX_HF_P",SWIG_From_int(static_cast< int >(176)));
  SWIG_Python_SetConstant(d, "IVMS_6200_F",SWIG_From_int(static_cast< int >(177)));
  SWIG_Python_SetConstant(d, "IVMS_6200_A",SWIG_From_int(static_cast< int >(178)));
  SWIG_Python_SetConstant(d, "IVMS_6200_F_S",SWIG_From_int(static_cast< int >(179)));
  SWIG_Python_SetConstant(d, "DS90XX_HF_RH",SWIG_From_int(static_cast< int >(181)));
  SWIG_Python_SetConstant(d, "DS91XX_HF_RH",SWIG_From_int(static_cast< int >(182)));
  SWIG_Python_SetConstant(d, "DS78XX_S",SWIG_From_int(static_cast< int >(183)));
  SWIG_Python_SetConstant(d, "DS81XXHW_S",SWIG_From_int(static_cast< int >(185)));
  SWIG_Python_SetConstant(d, "DS81XXHW_ST",SWIG_From_int(static_cast< int >(186)));
  SWIG_Python_SetConstant(d, "DS91XXHW_ST",SWIG_From_int(static_cast< int >(187)));
  SWIG_Python_SetConstant(d, "DS91XX_ST",SWIG_From_int(static_cast< int >(188)));
  SWIG_Python_SetConstant(d, "DS81XX_ST",SWIG_From_int(static_cast< int >(189)));
  SWIG_Python_SetConstant(d, "DS81XXHX_ST",SWIG_From_int(static_cast< int >(190)));
  SWIG_Python_SetConstant(d, "DS73XXHX_ST",SWIG_From_int(static_cast< int >(191)));
  SWIG_Python_SetConstant(d, "DS81XX_SH",SWIG_From_int(static_cast< int >(192)));
  SWIG_Python_SetConstant(d, "DS81XX_SN",SWIG_From_int(static_cast< int >(193)));
  SWIG_Python_SetConstant(d, "DS96XXN_ST",SWIG_From_int(static_cast< int >(194)));
  SWIG_Python_SetConstant(d, "DS86XXN_ST",SWIG_From_int(static_cast< int >(195)));
  SWIG_Python_SetConstant(d, "DS80XXHF_ST",SWIG_From_int(static_cast< int >(196)));
  SWIG_Python_SetConstant(d, "DS90XXHF_ST",SWIG_From_int(static_cast< int >(197)));
  SWIG_Python_SetConstant(d, "DS76XXN_ST",SWIG_From_int(static_cast< int >(198)));
  SWIG_Python_SetConstant(d, "DS_9664N_RX",SWIG_From_int(static_cast< int >(199)));
  SWIG_Python_SetConstant(d, "ENCODER_SERVER",SWIG_From_int(static_cast< int >(200)));
  SWIG_Python_SetConstant(d, "DECODER_SERVER",SWIG_From_int(static_cast< int >(201)));
  SWIG_Python_SetConstant(d, "PCNVR_SERVER",SWIG_From_int(static_cast< int >(202)));
  SWIG_Python_SetConstant(d, "CVR_SERVER",SWIG_From_int(static_cast< int >(203)));
  SWIG_Python_SetConstant(d, "DS_91XXHFH_ST",SWIG_From_int(static_cast< int >(204)));
  SWIG_Python_SetConstant(d, "DS_66XXHFH",SWIG_From_int(static_cast< int >(205)));
  SWIG_Python_SetConstant(d, "TRAFFIC_TS_SERVER",SWIG_From_int(static_cast< int >(210)));
  SWIG_Python_SetConstant(d, "TRAFFIC_VAR",SWIG_From_int(static_cast< int >(211)));
  SWIG_Python_SetConstant(d, "IPCALL",SWIG_From_int(static_cast< int >(212)));
  SWIG_Python_SetConstant(d, "SAN_SERVER",SWIG_From_int(static_cast< int >(213)));
  SWIG_Python_SetConstant(d, "DS_B11_M_CLASS",SWIG_From_int(static_cast< int >(301)));
  SWIG_Python_SetConstant(d, "DS_B12_M_CLASS",SWIG_From_int(static_cast< int >(302)));
  SWIG_Python_SetConstant(d, "DS_6504HF_B11_CLASS",SWIG_From_int(static_cast< int >(303)));
  SWIG_Python_SetConstant(d, "DS_6504HF_B12_CLASS",SWIG_From_int(static_cast< int >(304)));
  SWIG_Python_SetConstant(d, "DS_6401HFH_B11V_CLASS",SWIG_From_int(static_cast< int >(305)));
  SWIG_Python_SetConstant(d, "DS_6401HFH_B12V_CLASS",SWIG_From_int(static_cast< int >(306)));
  SWIG_Python_SetConstant(d, "DS_6408HFH_B11S_CLASS",SWIG_From_int(static_cast< int >(307)));
  SWIG_Python_SetConstant(d, "DS_6408HFH_B12S_CLASS",SWIG_From_int(static_cast< int >(308)));
  SWIG_Python_SetConstant(d, "DS_6504D_B11H_CLASS",SWIG_From_int(static_cast< int >(309)));
  SWIG_Python_SetConstant(d, "DS_6504D_B11B_CLASS",SWIG_From_int(static_cast< int >(310)));
  SWIG_Python_SetConstant(d, "DS_6504D_B12B_CLASS",SWIG_From_int(static_cast< int >(311)));
  SWIG_Python_SetConstant(d, "DS_6504D_B11V_CLASS",SWIG_From_int(static_cast< int >(312)));
  SWIG_Python_SetConstant(d, "DS_6504D_B12V_CLASS",SWIG_From_int(static_cast< int >(313)));
  SWIG_Python_SetConstant(d, "DS_6401HFH_B10R_CLASS",SWIG_From_int(static_cast< int >(314)));
  SWIG_Python_SetConstant(d, "DS_6401HFH_B10D_CLASS",SWIG_From_int(static_cast< int >(315)));
  SWIG_Python_SetConstant(d, "DS_6401HFH_B10H_CLASS",SWIG_From_int(static_cast< int >(316)));
  SWIG_Python_SetConstant(d, "DS_6401HFH_B11R_CLASS",SWIG_From_int(static_cast< int >(317)));
  SWIG_Python_SetConstant(d, "DS_6401HFH_B11D_CLASS",SWIG_From_int(static_cast< int >(318)));
  SWIG_Python_SetConstant(d, "DS_6401HFH_B11H_CLASS",SWIG_From_int(static_cast< int >(319)));
  SWIG_Python_SetConstant(d, "DS_6401HFH_B12R_CLASS",SWIG_From_int(static_cast< int >(320)));
  SWIG_Python_SetConstant(d, "DS_6401HFH_B12D_CLASS",SWIG_From_int(static_cast< int >(321)));
  SWIG_Python_SetConstant(d, "DS_6401HFH_B12H_CLASS",SWIG_From_int(static_cast< int >(322)));
  SWIG_Python_SetConstant(d, "DS_65XXD_B10Ex_CLASS",SWIG_From_int(static_cast< int >(323)));
  SWIG_Python_SetConstant(d, "DS_6516HW_B10_CLASS",SWIG_From_int(static_cast< int >(324)));
  SWIG_Python_SetConstant(d, "DS_6401HFH_B10F_RX_CLASS",SWIG_From_int(static_cast< int >(326)));
  SWIG_Python_SetConstant(d, "DS_6502HW_B10F_RX_CLASS",SWIG_From_int(static_cast< int >(327)));
  SWIG_Python_SetConstant(d, "DS_6504D_B11Ex_CLASS",SWIG_From_int(static_cast< int >(328)));
  SWIG_Python_SetConstant(d, "DS_6504D_B12Ex_CLASS",SWIG_From_int(static_cast< int >(329)));
  SWIG_Python_SetConstant(d, "DS_6512_B11_CLASS",SWIG_From_int(static_cast< int >(330)));
  SWIG_Python_SetConstant(d, "DS_6512_B12_CLASS",SWIG_From_int(static_cast< int >(331)));
  SWIG_Python_SetConstant(d, "DS_6504D_B10H_CLASS",SWIG_From_int(static_cast< int >(332)));
  SWIG_Python_SetConstant(d, "DS_65XXT_B10_CLASS",SWIG_From_int(static_cast< int >(333)));
  SWIG_Python_SetConstant(d, "DS_65XXD_B10_CLASS",SWIG_From_int(static_cast< int >(335)));
  SWIG_Python_SetConstant(d, "DS_IVMSE_B10X_CLASS",SWIG_From_int(static_cast< int >(336)));
  SWIG_Python_SetConstant(d, "DS_6532D_B10ES_CLASS",SWIG_From_int(static_cast< int >(337)));
  SWIG_Python_SetConstant(d, "DS_6508HFH_B10ES_CLASS",SWIG_From_int(static_cast< int >(338)));
  SWIG_Python_SetConstant(d, "DS_82NCG_CLASS",SWIG_From_int(static_cast< int >(340)));
  SWIG_Python_SetConstant(d, "DS_82VAG_CLASS",SWIG_From_int(static_cast< int >(341)));
  SWIG_Python_SetConstant(d, "DS_1802XXF_B10_CLASS",SWIG_From_int(static_cast< int >(342)));
  SWIG_Python_SetConstant(d, "iDS_6504_B10EVAC_CLASS",SWIG_From_int(static_cast< int >(343)));
  SWIG_Python_SetConstant(d, "iDS_6504_B10EDEC_CLASS",SWIG_From_int(static_cast< int >(344)));
  SWIG_Python_SetConstant(d, "DS_6402HFH_B10EV_CLASS",SWIG_From_int(static_cast< int >(345)));
  SWIG_Python_SetConstant(d, "DS_6402HFH_B10ED_CLASS",SWIG_From_int(static_cast< int >(346)));
  SWIG_Python_SetConstant(d, "DS_6402HFH_B10EH_CLASS",SWIG_From_int(static_cast< int >(347)));
  SWIG_Python_SetConstant(d, "DS_6404HFH_B10T_RX_CLASS",SWIG_From_int(static_cast< int >(348)));
  SWIG_Python_SetConstant(d, "DS_6504D_AIO_CLASS",SWIG_From_int(static_cast< int >(349)));
  SWIG_Python_SetConstant(d, "DS_IVMST_B10_CLASS",SWIG_From_int(static_cast< int >(350)));
  SWIG_Python_SetConstant(d, "DS_6402_AIO_CLASS",SWIG_From_int(static_cast< int >(351)));
  SWIG_Python_SetConstant(d, "DS_iVMSE_AIO_CLASS",SWIG_From_int(static_cast< int >(352)));
  SWIG_Python_SetConstant(d, "DS_AIO_M_CLASS",SWIG_From_int(static_cast< int >(353)));
  SWIG_Python_SetConstant(d, "DS_6508HF_B10E_CLASS",SWIG_From_int(static_cast< int >(355)));
  SWIG_Python_SetConstant(d, "DS_6404HFH_B10ES_CLASS",SWIG_From_int(static_cast< int >(356)));
  SWIG_Python_SetConstant(d, "DS_6402HFH_B10ER_CLASS",SWIG_From_int(static_cast< int >(358)));
  SWIG_Python_SetConstant(d, "DS_6404HFH_B10T_RM_CLASS",SWIG_From_int(static_cast< int >(361)));
  SWIG_Python_SetConstant(d, "DS_6516D_B10EB_CLASS",SWIG_From_int(static_cast< int >(362)));
  SWIG_Python_SetConstant(d, "DS_6516D_B10ES_CLASS",SWIG_From_int(static_cast< int >(363)));
  SWIG_Python_SetConstant(d, "DS_6508D_B10FH_CLASS",SWIG_From_int(static_cast< int >(364)));
  SWIG_Python_SetConstant(d, "DS_6508D_B10FD_CLASS",SWIG_From_int(static_cast< int >(364)));
  SWIG_Python_SetConstant(d, "DS_6508D_B10FV_CLASS",SWIG_From_int(static_cast< int >(364)));
  SWIG_Python_SetConstant(d, "DS_6508_B11E_CLASS",SWIG_From_int(static_cast< int >(365)));
  SWIG_Python_SetConstant(d, "DS_6402_B11ES_CLASS",SWIG_From_int(static_cast< int >(366)));
  SWIG_Python_SetConstant(d, "DS_6402_B11EV_CLASS",SWIG_From_int(static_cast< int >(367)));
  SWIG_Python_SetConstant(d, "DS_6402_B11ER_CLASS",SWIG_From_int(static_cast< int >(368)));
  SWIG_Python_SetConstant(d, "DS_6402_B11ED_CLASS",SWIG_From_int(static_cast< int >(369)));
  SWIG_Python_SetConstant(d, "DS_6402_B11EH_CLASS",SWIG_From_int(static_cast< int >(370)));
  SWIG_Python_SetConstant(d, "DS_6516D_B11EB_CLASS",SWIG_From_int(static_cast< int >(371)));
  SWIG_Python_SetConstant(d, "DS_6516D_B11ES_CLASS",SWIG_From_int(static_cast< int >(372)));
  SWIG_Python_SetConstant(d, "DS_6508_B12E_CLASS",SWIG_From_int(static_cast< int >(373)));
  SWIG_Python_SetConstant(d, "DS_6402_B12ES_CLASS",SWIG_From_int(static_cast< int >(375)));
  SWIG_Python_SetConstant(d, "DS_6402_B12EV_CLASS",SWIG_From_int(static_cast< int >(376)));
  SWIG_Python_SetConstant(d, "DS_6402_B12ER_CLASS",SWIG_From_int(static_cast< int >(377)));
  SWIG_Python_SetConstant(d, "DS_6402_B12ED_CLASS",SWIG_From_int(static_cast< int >(378)));
  SWIG_Python_SetConstant(d, "DS_6402_B12EH_CLASS",SWIG_From_int(static_cast< int >(379)));
  SWIG_Python_SetConstant(d, "DS_6516D_B12EB_CLASS",SWIG_From_int(static_cast< int >(380)));
  SWIG_Python_SetConstant(d, "DS_iVMSE_AIO_8100x_CLASS",SWIG_From_int(static_cast< int >(381)));
  SWIG_Python_SetConstant(d, "DS_iVMSE_AIO_87x_CLASS",SWIG_From_int(static_cast< int >(382)));
  SWIG_Python_SetConstant(d, "DS_6532D_B11ES_CLASS",SWIG_From_int(static_cast< int >(384)));
  SWIG_Python_SetConstant(d, "DS_6532D_B12ES_CLASS",SWIG_From_int(static_cast< int >(385)));
  SWIG_Python_SetConstant(d, "DS_B20_MSU_NP",SWIG_From_int(static_cast< int >(400)));
  SWIG_Python_SetConstant(d, "DS_6416HFH_B20S",SWIG_From_int(static_cast< int >(401)));
  SWIG_Python_SetConstant(d, "DS_6416HFH_B20_RM",SWIG_From_int(static_cast< int >(402)));
  SWIG_Python_SetConstant(d, "DS_6564D_B20D",SWIG_From_int(static_cast< int >(403)));
  SWIG_Python_SetConstant(d, "DS_6564D_B20H",SWIG_From_int(static_cast< int >(404)));
  SWIG_Python_SetConstant(d, "DS_6564D_B20V",SWIG_From_int(static_cast< int >(405)));
  SWIG_Python_SetConstant(d, "DS_B20_6516D_DEV_CLASS",SWIG_From_int(static_cast< int >(406)));
  SWIG_Python_SetConstant(d, "DS_6408HFH_B20V",SWIG_From_int(static_cast< int >(407)));
  SWIG_Python_SetConstant(d, "DS_MMC_B20_CLASS",SWIG_From_int(static_cast< int >(408)));
  SWIG_Python_SetConstant(d, "DS_CARD_CHIP_B20_CLASS",SWIG_From_int(static_cast< int >(409)));
  SWIG_Python_SetConstant(d, "DS_6564D_B20B_DEV_CLASS",SWIG_From_int(static_cast< int >(410)));
  SWIG_Python_SetConstant(d, "DS_6564D_B20S_DEV_CLASS",SWIG_From_int(static_cast< int >(411)));
  SWIG_Python_SetConstant(d, "DS_6532HF_B20B_DEV_CLASS",SWIG_From_int(static_cast< int >(412)));
  SWIG_Python_SetConstant(d, "DS_6408HFH_B20D_DEV_CLASS",SWIG_From_int(static_cast< int >(413)));
  SWIG_Python_SetConstant(d, "DS_6408HFH_B20H_DEV_CLASS",SWIG_From_int(static_cast< int >(414)));
  SWIG_Python_SetConstant(d, "DS_IVMSE_B20_CLASS",SWIG_From_int(static_cast< int >(415)));
  SWIG_Python_SetConstant(d, "DS_6402HFH_B20Y_DEV_CLASS",SWIG_From_int(static_cast< int >(416)));
  SWIG_Python_SetConstant(d, "DS_6508HW_B20_DEV_CLASS",SWIG_From_int(static_cast< int >(417)));
  SWIG_Python_SetConstant(d, "DS_B20N128Fx_B20_DEV_CLASS",SWIG_From_int(static_cast< int >(418)));
  SWIG_Python_SetConstant(d, "DS_AIO_MCU_NP_DEV_CLASS",SWIG_From_int(static_cast< int >(419)));
  SWIG_Python_SetConstant(d, "DS_6402_AIO_EV_DEV_CLASS",SWIG_From_int(static_cast< int >(420)));
  SWIG_Python_SetConstant(d, "DS_6508D_AIO_EV_DEV_CLASS",SWIG_From_int(static_cast< int >(421)));
  SWIG_Python_SetConstant(d, "DS_6508D_AIO_ED_DEV_CLASS",SWIG_From_int(static_cast< int >(422)));
  SWIG_Python_SetConstant(d, "DS_6508D_AIO_EH_DEV_CLASS",SWIG_From_int(static_cast< int >(423)));
  SWIG_Python_SetConstant(d, "DS_6508HD_B20F_DEV_CLASS",SWIG_From_int(static_cast< int >(424)));
  SWIG_Python_SetConstant(d, "DS_6402HFH_B20ES_DEV_CLASS",SWIG_From_int(static_cast< int >(425)));
  SWIG_Python_SetConstant(d, "DS_6532D_B20_DEV_CLASS",SWIG_From_int(static_cast< int >(426)));
  SWIG_Python_SetConstant(d, "DS_IVMST_B20_DEV_CLASS",SWIG_From_int(static_cast< int >(427)));
  SWIG_Python_SetConstant(d, "DS_6416HFH_B20DD_DEV_CLASS",SWIG_From_int(static_cast< int >(428)));
  SWIG_Python_SetConstant(d, "DS_6441VS_B20_DEV_CLASS",SWIG_From_int(static_cast< int >(429)));
  SWIG_Python_SetConstant(d, "DS_6404HFH_B20T_CLASS",SWIG_From_int(static_cast< int >(431)));
  SWIG_Python_SetConstant(d, "DS_FS22_B20_DEV_CLASS",SWIG_From_int(static_cast< int >(432)));
  SWIG_Python_SetConstant(d, "DS_IVMSE_B20UH_DEV_CLASS",SWIG_From_int(static_cast< int >(433)));
  SWIG_Python_SetConstant(d, "IDS_6524J_B20_DEV_CLASS",SWIG_From_int(static_cast< int >(434)));
  SWIG_Python_SetConstant(d, "IDS_6532B_B20_DEV_CLASS",SWIG_From_int(static_cast< int >(435)));
  SWIG_Python_SetConstant(d, "DS_6404HFH_B20Fx_DEV_CLASS",SWIG_From_int(static_cast< int >(436)));
  SWIG_Python_SetConstant(d, "DS_N128x_B20Fy_CLASS",SWIG_From_int(static_cast< int >(437)));
  SWIG_Python_SetConstant(d, "DS_181600F_B20_CLASS",SWIG_From_int(static_cast< int >(438)));
  SWIG_Python_SetConstant(d, "DS_6904UD_B20H_CLASS",SWIG_From_int(static_cast< int >(439)));
  SWIG_Python_SetConstant(d, "DS_B21_MCU_NP_CLASS",SWIG_From_int(static_cast< int >(440)));
  SWIG_Python_SetConstant(d, "DS_B21_S10_x_CLASS",SWIG_From_int(static_cast< int >(441)));
  SWIG_Python_SetConstant(d, "DS_6402HFH_B21D_CLASS",SWIG_From_int(static_cast< int >(442)));
  SWIG_Python_SetConstant(d, "DS_6508HD_B21D_CLASS",SWIG_From_int(static_cast< int >(443)));
  SWIG_Python_SetConstant(d, "DS_iVMSE_B21HW_CLASS",SWIG_From_int(static_cast< int >(444)));
  SWIG_Python_SetConstant(d, "DS_C10S",SWIG_From_int(static_cast< int >(501)));
  SWIG_Python_SetConstant(d, "DS_C10N_SDI",SWIG_From_int(static_cast< int >(551)));
  SWIG_Python_SetConstant(d, "DS_C10N_BIW",SWIG_From_int(static_cast< int >(552)));
  SWIG_Python_SetConstant(d, "DS_C10N_DON",SWIG_From_int(static_cast< int >(553)));
  SWIG_Python_SetConstant(d, "DS_C10N_TVI",SWIG_From_int(static_cast< int >(554)));
  SWIG_Python_SetConstant(d, "DS_C10N_DI2",SWIG_From_int(static_cast< int >(555)));
  SWIG_Python_SetConstant(d, "DS_C10N_AUDIO_OUT",SWIG_From_int(static_cast< int >(556)));
  SWIG_Python_SetConstant(d, "DS_C10N_AUDIO_IN",SWIG_From_int(static_cast< int >(557)));
  SWIG_Python_SetConstant(d, "DS_C20N",SWIG_From_int(static_cast< int >(570)));
  SWIG_Python_SetConstant(d, "DS_C20N_BNC",SWIG_From_int(static_cast< int >(571)));
  SWIG_Python_SetConstant(d, "DS_C20N_DVI",SWIG_From_int(static_cast< int >(572)));
  SWIG_Python_SetConstant(d, "DS_C20N_DP",SWIG_From_int(static_cast< int >(573)));
  SWIG_Python_SetConstant(d, "DS_C20N_OUT",SWIG_From_int(static_cast< int >(574)));
  SWIG_Python_SetConstant(d, "DS_C20N_VWMS",SWIG_From_int(static_cast< int >(5351)));
  SWIG_Python_SetConstant(d, "DS_C20N_DI2",SWIG_From_int(static_cast< int >(5352)));
  SWIG_Python_SetConstant(d, "DS_C20N_DO2",SWIG_From_int(static_cast< int >(5353)));
  SWIG_Python_SetConstant(d, "DS_C20N_UHDI",SWIG_From_int(static_cast< int >(5354)));
  SWIG_Python_SetConstant(d, "DS_C20N_YI2",SWIG_From_int(static_cast< int >(5355)));
  SWIG_Python_SetConstant(d, "DS_C12N_VWMS",SWIG_From_int(static_cast< int >(5356)));
  SWIG_Python_SetConstant(d, "DS_C12N_DO",SWIG_From_int(static_cast< int >(5357)));
  SWIG_Python_SetConstant(d, "DS_C12N_HOE",SWIG_From_int(static_cast< int >(5358)));
  SWIG_Python_SetConstant(d, "DS_C20N_HI2",SWIG_From_int(static_cast< int >(5359)));
  SWIG_Python_SetConstant(d, "DS_C20N_VI2",SWIG_From_int(static_cast< int >(5360)));
  SWIG_Python_SetConstant(d, "DS_C20N_SI2",SWIG_From_int(static_cast< int >(5361)));
  SWIG_Python_SetConstant(d, "DS_C20N_HO2",SWIG_From_int(static_cast< int >(5362)));
  SWIG_Python_SetConstant(d, "DS_C20N_S24G",SWIG_From_int(static_cast< int >(5363)));
  SWIG_Python_SetConstant(d, "DS_C20N_S24X",SWIG_From_int(static_cast< int >(5364)));
  SWIG_Python_SetConstant(d, "DS_C12A_0104H",SWIG_From_int(static_cast< int >(5365)));
  SWIG_Python_SetConstant(d, "DS_D1HXX",SWIG_From_int(static_cast< int >(5591)));
  SWIG_Python_SetConstant(d, "ELEVATO_BRIDGE",SWIG_From_int(static_cast< int >(5751)));
  SWIG_Python_SetConstant(d, "DS_3WF01S_5NG_M",SWIG_From_int(static_cast< int >(5752)));
  SWIG_Python_SetConstant(d, "DS_3WF0EC_2N_D",SWIG_From_int(static_cast< int >(5753)));
  SWIG_Python_SetConstant(d, "DS_3WF0EC_5ACT",SWIG_From_int(static_cast< int >(5754)));
  SWIG_Python_SetConstant(d, "DS_3WF03S_5AC",SWIG_From_int(static_cast< int >(5755)));
  SWIG_Python_SetConstant(d, "DS_3WF0ES_5AC_H",SWIG_From_int(static_cast< int >(5756)));
  SWIG_Python_SetConstant(d, "DS_19M00_MN",SWIG_From_int(static_cast< int >(601)));
  SWIG_Python_SetConstant(d, "DS_KH8302_A",SWIG_From_int(static_cast< int >(602)));
  SWIG_Python_SetConstant(d, "DS_KD8101_2",SWIG_From_int(static_cast< int >(603)));
  SWIG_Python_SetConstant(d, "DS_KM8301",SWIG_From_int(static_cast< int >(604)));
  SWIG_Python_SetConstant(d, "DS_KVXXXX_XX",SWIG_From_int(static_cast< int >(605)));
  SWIG_Python_SetConstant(d, "DS_LHPM1D_C",SWIG_From_int(static_cast< int >(606)));
  SWIG_Python_SetConstant(d, "DS_KAM03",SWIG_From_int(static_cast< int >(607)));
  SWIG_Python_SetConstant(d, "DS64XXHD_T",SWIG_From_int(static_cast< int >(701)));
  SWIG_Python_SetConstant(d, "DS_65XXD",SWIG_From_int(static_cast< int >(703)));
  SWIG_Python_SetConstant(d, "DS63XXD_T",SWIG_From_int(static_cast< int >(704)));
  SWIG_Python_SetConstant(d, "SCE_SERVER",SWIG_From_int(static_cast< int >(705)));
  SWIG_Python_SetConstant(d, "DS_64XXHD_S",SWIG_From_int(static_cast< int >(706)));
  SWIG_Python_SetConstant(d, "DS_68XXT",SWIG_From_int(static_cast< int >(707)));
  SWIG_Python_SetConstant(d, "DS_65XXD_T",SWIG_From_int(static_cast< int >(708)));
  SWIG_Python_SetConstant(d, "DS_65XXHD_T",SWIG_From_int(static_cast< int >(709)));
  SWIG_Python_SetConstant(d, "DS_69XXUD",SWIG_From_int(static_cast< int >(710)));
  SWIG_Python_SetConstant(d, "DS_65XXUD",SWIG_From_int(static_cast< int >(711)));
  SWIG_Python_SetConstant(d, "DS_65XXUD_L",SWIG_From_int(static_cast< int >(712)));
  SWIG_Python_SetConstant(d, "DS_65XXUD_T",SWIG_From_int(static_cast< int >(713)));
  SWIG_Python_SetConstant(d, "DS_69XXHD",SWIG_From_int(static_cast< int >(5001)));
  SWIG_Python_SetConstant(d, "DS_D20XX",SWIG_From_int(static_cast< int >(750)));
  SWIG_Python_SetConstant(d, "DS_C50S",SWIG_From_int(static_cast< int >(751)));
  SWIG_Python_SetConstant(d, "DS_D50XX",SWIG_From_int(static_cast< int >(752)));
  SWIG_Python_SetConstant(d, "DS_D40",SWIG_From_int(static_cast< int >(760)));
  SWIG_Python_SetConstant(d, "DS_65VMXX",SWIG_From_int(static_cast< int >(770)));
  SWIG_Python_SetConstant(d, "DS_65VTXX",SWIG_From_int(static_cast< int >(771)));
  SWIG_Python_SetConstant(d, "DS_65VTA",SWIG_From_int(static_cast< int >(772)));
  SWIG_Python_SetConstant(d, "DS_65VT_RX",SWIG_From_int(static_cast< int >(773)));
  SWIG_Python_SetConstant(d, "DS_65VM_MCU_NP",SWIG_From_int(static_cast< int >(774)));
  SWIG_Python_SetConstant(d, "DS_65VT0010",SWIG_From_int(static_cast< int >(5571)));
  SWIG_Python_SetConstant(d, "DS_65VM_MCU",SWIG_From_int(static_cast< int >(5572)));
  SWIG_Python_SetConstant(d, "DS_65VM_MPC",SWIG_From_int(static_cast< int >(5573)));
  SWIG_Python_SetConstant(d, "DS_65VT2XXYR_SF",SWIG_From_int(static_cast< int >(5574)));
  SWIG_Python_SetConstant(d, "DS_65VT0XXY",SWIG_From_int(static_cast< int >(5575)));
  SWIG_Python_SetConstant(d, "DS_65VT0010Z",SWIG_From_int(static_cast< int >(5576)));
  SWIG_Python_SetConstant(d, "DS_65VT0050Z",SWIG_From_int(static_cast< int >(5577)));
  SWIG_Python_SetConstant(d, "DS_65VS0XXXS",SWIG_From_int(static_cast< int >(5878)));
  SWIG_Python_SetConstant(d, "DS_65VS0XXXM",SWIG_From_int(static_cast< int >(5579)));
  SWIG_Python_SetConstant(d, "DS_65VM00XX_X",SWIG_From_int(static_cast< int >(5580)));
  SWIG_Python_SetConstant(d, "DS_CS_SERVER",SWIG_From_int(static_cast< int >(800)));
  SWIG_Python_SetConstant(d, "DS_68GAP_MCU",SWIG_From_int(static_cast< int >(831)));
  SWIG_Python_SetConstant(d, "DS_K260X",SWIG_From_int(static_cast< int >(850)));
  SWIG_Python_SetConstant(d, "DS_K1TXXX",SWIG_From_int(static_cast< int >(851)));
  SWIG_Python_SetConstant(d, "DS_K280X",SWIG_From_int(static_cast< int >(852)));
  SWIG_Python_SetConstant(d, "DS_K1T80X",SWIG_From_int(static_cast< int >(854)));
  SWIG_Python_SetConstant(d, "RAC_6X00",SWIG_From_int(static_cast< int >(856)));
  SWIG_Python_SetConstant(d, "DS_K2602_AX",SWIG_From_int(static_cast< int >(857)));
  SWIG_Python_SetConstant(d, "DS_K1T803F",SWIG_From_int(static_cast< int >(858)));
  SWIG_Python_SetConstant(d, "DS_K2700",SWIG_From_int(static_cast< int >(859)));
  SWIG_Python_SetConstant(d, "DS_K270X",SWIG_From_int(static_cast< int >(860)));
  SWIG_Python_SetConstant(d, "DS_K1T500S",SWIG_From_int(static_cast< int >(861)));
  SWIG_Python_SetConstant(d, "DS_K1A801F",SWIG_From_int(static_cast< int >(862)));
  SWIG_Python_SetConstant(d, "DS_K1T600X",SWIG_From_int(static_cast< int >(863)));
  SWIG_Python_SetConstant(d, "DS_K22X",SWIG_From_int(static_cast< int >(864)));
  SWIG_Python_SetConstant(d, "DS_K2M0016AX",SWIG_From_int(static_cast< int >(865)));
  SWIG_Python_SetConstant(d, "DS_K2602S_AX",SWIG_From_int(static_cast< int >(867)));
  SWIG_Python_SetConstant(d, "DS_K560XX",SWIG_From_int(static_cast< int >(870)));
  SWIG_Python_SetConstant(d, "DS_K260X_E",SWIG_From_int(static_cast< int >(873)));
  SWIG_Python_SetConstant(d, "DS_K5603X",SWIG_From_int(static_cast< int >(874)));
  SWIG_Python_SetConstant(d, "DS_K3M200X",SWIG_From_int(static_cast< int >(875)));
  SWIG_Python_SetConstant(d, "DS_K3M100X",SWIG_From_int(static_cast< int >(879)));
  SWIG_Python_SetConstant(d, "DS_K1T8101XT",SWIG_From_int(static_cast< int >(881)));
  SWIG_Python_SetConstant(d, "DS_K1T8101XX",SWIG_From_int(static_cast< int >(882)));
  SWIG_Python_SetConstant(d, "DS_K5604",SWIG_From_int(static_cast< int >(883)));
  SWIG_Python_SetConstant(d, "DS_K1T607XXXX",SWIG_From_int(static_cast< int >(884)));
  SWIG_Python_SetConstant(d, "DS_K1A850X",SWIG_From_int(static_cast< int >(885)));
  SWIG_Python_SetConstant(d, "DS_K1T800X",SWIG_From_int(static_cast< int >(886)));
  SWIG_Python_SetConstant(d, "DS_K1T610XXXX",SWIG_From_int(static_cast< int >(887)));
  SWIG_Python_SetConstant(d, "DS_K1T8115X",SWIG_From_int(static_cast< int >(888)));
  SWIG_Python_SetConstant(d, "DS_K1T815LC_M",SWIG_From_int(static_cast< int >(889)));
  SWIG_Python_SetConstant(d, "DS_K1T606M_Z",SWIG_From_int(static_cast< int >(890)));
  SWIG_Python_SetConstant(d, "DS_K5607_XXX",SWIG_From_int(static_cast< int >(891)));
  SWIG_Python_SetConstant(d, "DS_K1T950MX",SWIG_From_int(static_cast< int >(893)));
  SWIG_Python_SetConstant(d, "DS_K1T331XX",SWIG_From_int(static_cast< int >(894)));
  SWIG_Python_SetConstant(d, "DS_K1T671T",SWIG_From_int(static_cast< int >(895)));
  SWIG_Python_SetConstant(d, "DS_K1T671",SWIG_From_int(static_cast< int >(896)));
  SWIG_Python_SetConstant(d, "DS_K5671",SWIG_From_int(static_cast< int >(897)));
  SWIG_Python_SetConstant(d, "DS_K1T640",SWIG_From_int(static_cast< int >(898)));
  SWIG_Python_SetConstant(d, "DS_K1A802A",SWIG_From_int(static_cast< int >(899)));
  SWIG_Python_SetConstant(d, "DS_6800M",SWIG_From_int(static_cast< int >(900)));
  SWIG_Python_SetConstant(d, "DS_68NTH",SWIG_From_int(static_cast< int >(901)));
  SWIG_Python_SetConstant(d, "DS_D60S",SWIG_From_int(static_cast< int >(902)));
  SWIG_Python_SetConstant(d, "DS_D10",SWIG_From_int(static_cast< int >(931)));
  SWIG_Python_SetConstant(d, "DS_3K0X_NM",SWIG_From_int(static_cast< int >(951)));
  SWIG_Python_SetConstant(d, "DS_3E2328",SWIG_From_int(static_cast< int >(952)));
  SWIG_Python_SetConstant(d, "DS_3E1528",SWIG_From_int(static_cast< int >(953)));
  SWIG_Python_SetConstant(d, "SCREEN_LINK_SERVER",SWIG_From_int(static_cast< int >(971)));
  SWIG_Python_SetConstant(d, "DS_D51OPSXX",SWIG_From_int(static_cast< int >(972)));
  SWIG_Python_SetConstant(d, "IP_PTSYS_MEGA200",SWIG_From_int(static_cast< int >(1001)));
  SWIG_Python_SetConstant(d, "IPCAM_FISHEYE",SWIG_From_int(static_cast< int >(1002)));
  SWIG_Python_SetConstant(d, "IPCAM_FISHEYE_E",SWIG_From_int(static_cast< int >(1003)));
  SWIG_Python_SetConstant(d, "IPCAM_BINOCULAR",SWIG_From_int(static_cast< int >(1004)));
  SWIG_Python_SetConstant(d, "IPCAM_365",SWIG_From_int(static_cast< int >(1010)));
  SWIG_Python_SetConstant(d, "IPCAM_R0",SWIG_From_int(static_cast< int >(1011)));
  SWIG_Python_SetConstant(d, "IPCAM_R1",SWIG_From_int(static_cast< int >(1012)));
  SWIG_Python_SetConstant(d, "IPCAM_R2",SWIG_From_int(static_cast< int >(1013)));
  SWIG_Python_SetConstant(d, "IPCAM_R3",SWIG_From_int(static_cast< int >(1014)));
  SWIG_Python_SetConstant(d, "IPCAM_R4",SWIG_From_int(static_cast< int >(1015)));
  SWIG_Python_SetConstant(d, "IPDOME_365",SWIG_From_int(static_cast< int >(1110)));
  SWIG_Python_SetConstant(d, "IPDOME_R0",SWIG_From_int(static_cast< int >(1111)));
  SWIG_Python_SetConstant(d, "IPDOME_R1",SWIG_From_int(static_cast< int >(1112)));
  SWIG_Python_SetConstant(d, "IPDOME_R2",SWIG_From_int(static_cast< int >(1113)));
  SWIG_Python_SetConstant(d, "IPDOME_R3",SWIG_From_int(static_cast< int >(1114)));
  SWIG_Python_SetConstant(d, "IPDOME_R4",SWIG_From_int(static_cast< int >(1115)));
  SWIG_Python_SetConstant(d, "ITCCAM_R3",SWIG_From_int(static_cast< int >(1211)));
  SWIG_Python_SetConstant(d, "UAV_S",SWIG_From_int(static_cast< int >(1300)));
  SWIG_Python_SetConstant(d, "TRAFFIC_ECT",SWIG_From_int(static_cast< int >(1400)));
  SWIG_Python_SetConstant(d, "TRAFFIC_PARKING_SERVER",SWIG_From_int(static_cast< int >(1401)));
  SWIG_Python_SetConstant(d, "TRAFFIC_TME",SWIG_From_int(static_cast< int >(1402)));
  SWIG_Python_SetConstant(d, "DS90XXHW_ST",SWIG_From_int(static_cast< int >(2001)));
  SWIG_Python_SetConstant(d, "DS72XXHX_SH",SWIG_From_int(static_cast< int >(2002)));
  SWIG_Python_SetConstant(d, "DS_92XX_HF_ST",SWIG_From_int(static_cast< int >(2003)));
  SWIG_Python_SetConstant(d, "DS_91XX_HF_XT",SWIG_From_int(static_cast< int >(2004)));
  SWIG_Python_SetConstant(d, "DS_90XX_HF_XT",SWIG_From_int(static_cast< int >(2005)));
  SWIG_Python_SetConstant(d, "DS_73XXHX_SH",SWIG_From_int(static_cast< int >(2006)));
  SWIG_Python_SetConstant(d, "DS_72XXHFH_ST",SWIG_From_int(static_cast< int >(2007)));
  SWIG_Python_SetConstant(d, "DS_67XXHF_SATA",SWIG_From_int(static_cast< int >(2008)));
  SWIG_Python_SetConstant(d, "DS_67XXHW",SWIG_From_int(static_cast< int >(2009)));
  SWIG_Python_SetConstant(d, "DS_67XXHW_SATA",SWIG_From_int(static_cast< int >(2010)));
  SWIG_Python_SetConstant(d, "DS_67XXHF",SWIG_From_int(static_cast< int >(2011)));
  SWIG_Python_SetConstant(d, "DS_72XXHF_SV",SWIG_From_int(static_cast< int >(2012)));
  SWIG_Python_SetConstant(d, "DS_72XXHW_SV",SWIG_From_int(static_cast< int >(2013)));
  SWIG_Python_SetConstant(d, "DS_81XXHX_SH",SWIG_From_int(static_cast< int >(2014)));
  SWIG_Python_SetConstant(d, "DS_71XXHX_SL",SWIG_From_int(static_cast< int >(2015)));
  SWIG_Python_SetConstant(d, "DS_76XXH_ST",SWIG_From_int(static_cast< int >(2016)));
  SWIG_Python_SetConstant(d, "DS_73XXHFH_ST",SWIG_From_int(static_cast< int >(2017)));
  SWIG_Python_SetConstant(d, "DS_81XXHFH_ST",SWIG_From_int(static_cast< int >(2018)));
  SWIG_Python_SetConstant(d, "DS_72XXHFH_SL",SWIG_From_int(static_cast< int >(2019)));
  SWIG_Python_SetConstant(d, "DS_FDXXCGA_FLT",SWIG_From_int(static_cast< int >(2020)));
  SWIG_Python_SetConstant(d, "IDS_91XX_HF_ST_A",SWIG_From_int(static_cast< int >(2100)));
  SWIG_Python_SetConstant(d, "IDS_91XX_HF_ST_B",SWIG_From_int(static_cast< int >(2101)));
  SWIG_Python_SetConstant(d, "IDS_90XX_HF_ST_A",SWIG_From_int(static_cast< int >(2102)));
  SWIG_Python_SetConstant(d, "IDS_90XX_HF_ST_B",SWIG_From_int(static_cast< int >(2103)));
  SWIG_Python_SetConstant(d, "IDS_81XX_HF_ST_A",SWIG_From_int(static_cast< int >(2104)));
  SWIG_Python_SetConstant(d, "IDS_81XX_HF_ST_B",SWIG_From_int(static_cast< int >(2105)));
  SWIG_Python_SetConstant(d, "IDS_80XX_HF_ST_A",SWIG_From_int(static_cast< int >(2106)));
  SWIG_Python_SetConstant(d, "IDS_80XX_HF_ST_B",SWIG_From_int(static_cast< int >(2107)));
  SWIG_Python_SetConstant(d, "IDS_8104_AHFL_ST",SWIG_From_int(static_cast< int >(2108)));
  SWIG_Python_SetConstant(d, "IDS_2CD6812F_C",SWIG_From_int(static_cast< int >(2109)));
  SWIG_Python_SetConstant(d, "DS_77XXN_ST",SWIG_From_int(static_cast< int >(2201)));
  SWIG_Python_SetConstant(d, "DS_95XX_N_ST",SWIG_From_int(static_cast< int >(2202)));
  SWIG_Python_SetConstant(d, "DS_85XX_N_ST",SWIG_From_int(static_cast< int >(2203)));
  SWIG_Python_SetConstant(d, "DS_96XX_N_XT",SWIG_From_int(static_cast< int >(2204)));
  SWIG_Python_SetConstant(d, "DS_76XX_N_SE",SWIG_From_int(static_cast< int >(2205)));
  SWIG_Python_SetConstant(d, "DS_86XXSN_SX",SWIG_From_int(static_cast< int >(2206)));
  SWIG_Python_SetConstant(d, "DS_71XXN_SL",SWIG_From_int(static_cast< int >(2208)));
  SWIG_Python_SetConstant(d, "CS_N1_1XX",SWIG_From_int(static_cast< int >(2209)));
  SWIG_Python_SetConstant(d, "DS_71XXN_SN",SWIG_From_int(static_cast< int >(2210)));
  SWIG_Python_SetConstant(d, "CS_N1_2XX",SWIG_From_int(static_cast< int >(2211)));
  SWIG_Python_SetConstant(d, "DS_76XX_N_SHT",SWIG_From_int(static_cast< int >(2212)));
  SWIG_Python_SetConstant(d, "DS_96XXX_N_E",SWIG_From_int(static_cast< int >(2213)));
  SWIG_Python_SetConstant(d, "DS_76XXN_EX",SWIG_From_int(static_cast< int >(2214)));
  SWIG_Python_SetConstant(d, "DS_77XXN_E4",SWIG_From_int(static_cast< int >(2215)));
  SWIG_Python_SetConstant(d, "DS_86XXN_E8",SWIG_From_int(static_cast< int >(2216)));
  SWIG_Python_SetConstant(d, "DS_9616N_H8",SWIG_From_int(static_cast< int >(2217)));
  SWIG_Python_SetConstant(d, "DS_72XXHX_EX_GXY",SWIG_From_int(static_cast< int >(2218)));
  SWIG_Python_SetConstant(d, "DS_76XXN_EX_GXY",SWIG_From_int(static_cast< int >(2219)));
  SWIG_Python_SetConstant(d, "DS_72XXHXH_SH_21",SWIG_From_int(static_cast< int >(2220)));
  SWIG_Python_SetConstant(d, "DS_72XXHXH_SH_31",SWIG_From_int(static_cast< int >(2221)));
  SWIG_Python_SetConstant(d, "DS_73XXHXH_SH_31",SWIG_From_int(static_cast< int >(2222)));
  SWIG_Python_SetConstant(d, "DS_81XXHXH_SH_31",SWIG_From_int(static_cast< int >(2223)));
  SWIG_Python_SetConstant(d, "DS_71XXHXH_SH_21",SWIG_From_int(static_cast< int >(2224)));
  SWIG_Python_SetConstant(d, "DS_71XXHXH_SH_31",SWIG_From_int(static_cast< int >(2225)));
  SWIG_Python_SetConstant(d, "DS_NBXX_N_E1_X",SWIG_From_int(static_cast< int >(2226)));
  SWIG_Python_SetConstant(d, "DS_96XXN_FX",SWIG_From_int(static_cast< int >(2230)));
  SWIG_Python_SetConstant(d, "DS_86XXN_FX",SWIG_From_int(static_cast< int >(2231)));
  SWIG_Python_SetConstant(d, "DS_96XXXN_HX",SWIG_From_int(static_cast< int >(2232)));
  SWIG_Python_SetConstant(d, "DS_86XXN_I",SWIG_From_int(static_cast< int >(2233)));
  SWIG_Python_SetConstant(d, "DS_77XX_N_I",SWIG_From_int(static_cast< int >(2234)));
  SWIG_Python_SetConstant(d, "DS_76XX_N_I",SWIG_From_int(static_cast< int >(2235)));
  SWIG_Python_SetConstant(d, "DS_78XX_N_I",SWIG_From_int(static_cast< int >(2236)));
  SWIG_Python_SetConstant(d, "DS_96XXXN_IX",SWIG_From_int(static_cast< int >(2237)));
  SWIG_Python_SetConstant(d, "DS_90XXHXH_XT",SWIG_From_int(static_cast< int >(2238)));
  SWIG_Python_SetConstant(d, "PCNVR_IVMS_4200",SWIG_From_int(static_cast< int >(2301)));
  SWIG_Python_SetConstant(d, "IVMS_6200_TP",SWIG_From_int(static_cast< int >(2401)));
  SWIG_Python_SetConstant(d, "IVMS_6200_TF",SWIG_From_int(static_cast< int >(2402)));
  SWIG_Python_SetConstant(d, "IVMS_6200_D",SWIG_From_int(static_cast< int >(2403)));
  SWIG_Python_SetConstant(d, "IDS_81XXAHW_ST",SWIG_From_int(static_cast< int >(2405)));
  SWIG_Python_SetConstant(d, "IDS_81XXAHW_SP",SWIG_From_int(static_cast< int >(2406)));
  SWIG_Python_SetConstant(d, "IDS_81XXAHWL_ST",SWIG_From_int(static_cast< int >(2407)));
  SWIG_Python_SetConstant(d, "IDS_81XXAHWL_SP",SWIG_From_int(static_cast< int >(2408)));
  SWIG_Python_SetConstant(d, "IDS_9616N_H8",SWIG_From_int(static_cast< int >(2409)));
  SWIG_Python_SetConstant(d, "IVMS_6200_SMD",SWIG_From_int(static_cast< int >(2500)));
  SWIG_Python_SetConstant(d, "DS_81XXAHW_ST",SWIG_From_int(static_cast< int >(2501)));
  SWIG_Python_SetConstant(d, "DS_81XXAHW_SP",SWIG_From_int(static_cast< int >(2502)));
  SWIG_Python_SetConstant(d, "DS_81XXAHWL_ST",SWIG_From_int(static_cast< int >(2503)));
  SWIG_Python_SetConstant(d, "DS_81XXAHWL_SP",SWIG_From_int(static_cast< int >(2504)));
  SWIG_Python_SetConstant(d, "DS_81XXAHGH_E4",SWIG_From_int(static_cast< int >(2601)));
  SWIG_Python_SetConstant(d, "DS_6904UD_AIOE_H_CLASS",SWIG_From_int(static_cast< int >(4002)));
  SWIG_Python_SetConstant(d, "DS_6402HFH_B21B_CLASS",SWIG_From_int(static_cast< int >(4005)));
  SWIG_Python_SetConstant(d, "DS_6902UD_B21H_CLASS",SWIG_From_int(static_cast< int >(4006)));
  SWIG_Python_SetConstant(d, "DS_6902UD_B21D_CLASS",SWIG_From_int(static_cast< int >(4007)));
  SWIG_Python_SetConstant(d, "DS_6902UD_B21V_CLASS",SWIG_From_int(static_cast< int >(4008)));
  SWIG_Python_SetConstant(d, "DS_6904UD_B20D_CLASS",SWIG_From_int(static_cast< int >(4010)));
  SWIG_Python_SetConstant(d, "DS_6904UD_B20V_CLASS",SWIG_From_int(static_cast< int >(4011)));
  SWIG_Python_SetConstant(d, "DS_AIOH_MCU_NP",SWIG_From_int(static_cast< int >(4042)));
  SWIG_Python_SetConstant(d, "DS_6404HFH_AIOH_D",SWIG_From_int(static_cast< int >(4043)));
  SWIG_Python_SetConstant(d, "DS_6908UD_AIOH_D",SWIG_From_int(static_cast< int >(4044)));
  SWIG_Python_SetConstant(d, "DS_6908UD_AIOH_H",SWIG_From_int(static_cast< int >(4045)));
  SWIG_Python_SetConstant(d, "DS_69XXUD_B",SWIG_From_int(static_cast< int >(4046)));
  SWIG_Python_SetConstant(d, "DS_6404HFH_I",SWIG_From_int(static_cast< int >(4047)));
  SWIG_Python_SetConstant(d, "DS_6904UD_O",SWIG_From_int(static_cast< int >(4048)));
  SWIG_Python_SetConstant(d, "DS_C12L_0204H",SWIG_From_int(static_cast< int >(4060)));
  SWIG_Python_SetConstant(d, "DS_Y10_MCU",SWIG_From_int(static_cast< int >(5771)));
  SWIG_Python_SetConstant(d, "DS_Y10_SW1",SWIG_From_int(static_cast< int >(5772)));
  SWIG_Python_SetConstant(d, "DS_6516UD_Y10D",SWIG_From_int(static_cast< int >(5773)));
  SWIG_Python_SetConstant(d, "DS_6532UD_Y10D",SWIG_From_int(static_cast< int >(5774)));
  SWIG_Python_SetConstant(d, "DS_6E2724_Y10",SWIG_From_int(static_cast< int >(5775)));
  SWIG_Python_SetConstant(d, "DS_68SAA_AA_Y10",SWIG_From_int(static_cast< int >(5776)));
  SWIG_Python_SetConstant(d, "DS_68SBA_AA_Y10",SWIG_From_int(static_cast< int >(5777)));
  SWIG_Python_SetConstant(d, "DS_68SCA_AA_Y10",SWIG_From_int(static_cast< int >(5778)));
  SWIG_Python_SetConstant(d, "DS_68GPU_A1_Y10",SWIG_From_int(static_cast< int >(5779)));
  SWIG_Python_SetConstant(d, "DS_CPU_SERVER",SWIG_From_int(static_cast< int >(5780)));
  SWIG_Python_SetConstant(d, "DS_GPU_SERVER",SWIG_From_int(static_cast< int >(5781)));
  SWIG_Python_SetConstant(d, "DS_BIGDATA_SERVER",SWIG_From_int(static_cast< int >(5782)));
  SWIG_Python_SetConstant(d, "DS_B80_MCU",SWIG_From_int(static_cast< int >(5821)));
  SWIG_Python_SetConstant(d, "DS_B80_SW",SWIG_From_int(static_cast< int >(5822)));
  SWIG_Python_SetConstant(d, "DS_B80_SR_01",SWIG_From_int(static_cast< int >(5823)));
  SWIG_Python_SetConstant(d, "DS_B80_AI04",SWIG_From_int(static_cast< int >(5824)));
  SWIG_Python_SetConstant(d, "DS_B80_ST",SWIG_From_int(static_cast< int >(5825)));
  SWIG_Python_SetConstant(d, "DS_B80_D04",SWIG_From_int(static_cast< int >(5826)));
  SWIG_Python_SetConstant(d, "DS_3LGCX",SWIG_From_int(static_cast< int >(5841)));
  SWIG_Python_SetConstant(d, "DS_3LGRX",SWIG_From_int(static_cast< int >(5842)));
  SWIG_Python_SetConstant(d, "DS_3LGT4",SWIG_From_int(static_cast< int >(5843)));
  SWIG_Python_SetConstant(d, "DS_3LGT40_N",SWIG_From_int(static_cast< int >(5844)));
  SWIG_Python_SetConstant(d, "DS_3E11XX",SWIG_From_int(static_cast< int >(5681)));
  SWIG_Python_SetConstant(d, "DS_3E13XX",SWIG_From_int(static_cast< int >(5682)));
  SWIG_Python_SetConstant(d, "DS_3E15XX",SWIG_From_int(static_cast< int >(5683)));
  SWIG_Python_SetConstant(d, "DS_3E11XXP",SWIG_From_int(static_cast< int >(5684)));
  SWIG_Python_SetConstant(d, "DS_3E13XXP",SWIG_From_int(static_cast< int >(5685)));
  SWIG_Python_SetConstant(d, "DS_3E15XXP",SWIG_From_int(static_cast< int >(5686)));
  SWIG_Python_SetConstant(d, "DS_3D01R_NM",SWIG_From_int(static_cast< int >(5691)));
  SWIG_Python_SetConstant(d, "DS_3D01T_NM",SWIG_From_int(static_cast< int >(5692)));
  SWIG_Python_SetConstant(d, "DS_3K02_RNM",SWIG_From_int(static_cast< int >(5693)));
  SWIG_Python_SetConstant(d, "IDS_90XX_HXH_XX_S",SWIG_From_int(static_cast< int >(6001)));
  SWIG_Python_SetConstant(d, "IDS_90XX_HXH_XX_FA",SWIG_From_int(static_cast< int >(6002)));
  SWIG_Python_SetConstant(d, "DS_81XX_SHXL_K4",SWIG_From_int(static_cast< int >(6101)));
  SWIG_Python_SetConstant(d, "DS_8116THFHL_F4",SWIG_From_int(static_cast< int >(6201)));
  SWIG_Python_SetConstant(d, "DS_81XXAHQ_E4",SWIG_From_int(static_cast< int >(6301)));
  SWIG_Python_SetConstant(d, "IDS_81XXAHQ_E4",SWIG_From_int(static_cast< int >(6302)));
  SWIG_Python_SetConstant(d, "IDS_86XX_NX_A",SWIG_From_int(static_cast< int >(7501)));
  SWIG_Python_SetConstant(d, "IDS_96XX_NX_S",SWIG_From_int(static_cast< int >(7502)));
  SWIG_Python_SetConstant(d, "IDS_96XX_NX_V",SWIG_From_int(static_cast< int >(7503)));
  SWIG_Python_SetConstant(d, "IDS_96XX_NX_FA",SWIG_From_int(static_cast< int >(7504)));
  SWIG_Python_SetConstant(d, "IDS_86XX_NX_IX_B",SWIG_From_int(static_cast< int >(7505)));
  SWIG_Python_SetConstant(d, "IDS_67XX_NX_S_X",SWIG_From_int(static_cast< int >(7506)));
  SWIG_Python_SetConstant(d, "IDS_ECDXX_HE",SWIG_From_int(static_cast< int >(8001)));
  SWIG_Python_SetConstant(d, "IDS_ECDXX_HT",SWIG_From_int(static_cast< int >(8002)));
  SWIG_Python_SetConstant(d, "IDS_ECDXX_E",SWIG_From_int(static_cast< int >(8101)));
  SWIG_Python_SetConstant(d, "IDS_EPTXX_HF",SWIG_From_int(static_cast< int >(8201)));
  SWIG_Python_SetConstant(d, "DS_2CD69XXX_I",SWIG_From_int(static_cast< int >(8351)));
  SWIG_Python_SetConstant(d, "DS_TRIXX",SWIG_From_int(static_cast< int >(8471)));
  SWIG_Python_SetConstant(d, "DS_K1F600_D6EXX",SWIG_From_int(static_cast< int >(10501)));
  SWIG_Python_SetConstant(d, "DS_K1T341",SWIG_From_int(static_cast< int >(10502)));
  SWIG_Python_SetConstant(d, "DS_K1T641XXX",SWIG_From_int(static_cast< int >(10503)));
  SWIG_Python_SetConstant(d, "DS_K1T642XXX",SWIG_From_int(static_cast< int >(10504)));
  SWIG_Python_SetConstant(d, "DS_K1T601",SWIG_From_int(static_cast< int >(10505)));
  SWIG_Python_SetConstant(d, "DS_K1T672XXX",SWIG_From_int(static_cast< int >(10506)));
  SWIG_Python_SetConstant(d, "DS_K56A0X",SWIG_From_int(static_cast< int >(10507)));
  SWIG_Python_SetConstant(d, "DS_IEXX_E_J",SWIG_From_int(static_cast< int >(11501)));
  SWIG_Python_SetConstant(d, "IDS_67XX_NX_A",SWIG_From_int(static_cast< int >(12501)));
  SWIG_Python_SetConstant(d, "IDS_67XX_NX_L",SWIG_From_int(static_cast< int >(12502)));
  SWIG_Python_SetConstant(d, "IDS_ENIXX_XHE",SWIG_From_int(static_cast< int >(12503)));
  SWIG_Python_SetConstant(d, "IDS_67XX_NX_V",SWIG_From_int(static_cast< int >(12504)));
  SWIG_Python_SetConstant(d, "IDS_67XX_NX_B",SWIG_From_int(static_cast< int >(12505)));
  SWIG_Python_SetConstant(d, "DS_IE63XX_E_FA",SWIG_From_int(static_cast< int >(13001)));
  SWIG_Python_SetConstant(d, "DS_DS_GPKIA",SWIG_From_int(static_cast< int >(13002)));
  SWIG_Python_SetConstant(d, "DS_DS_PURE",SWIG_From_int(static_cast< int >(13003)));
  SWIG_Python_SetConstant(d, "DS_DS_FS",SWIG_From_int(static_cast< int >(13004)));
  SWIG_Python_SetConstant(d, "DS_DS_FD",SWIG_From_int(static_cast< int >(13005)));
  SWIG_Python_SetConstant(d, "DS_DS_BLADE",SWIG_From_int(static_cast< int >(13006)));
  SWIG_Python_SetConstant(d, "DS_DS_HMCP",SWIG_From_int(static_cast< int >(13007)));
  SWIG_Python_SetConstant(d, "DS_LNX_RF",SWIG_From_int(static_cast< int >(13501)));
  SWIG_Python_SetConstant(d, "DS_PA_RADAR",SWIG_From_int(static_cast< int >(13551)));
  SWIG_Python_SetConstant(d, "DS_PERIMETER_RADAR",SWIG_From_int(static_cast< int >(13552)));
  SWIG_Python_SetConstant(d, "DS_SECURITY_RADAR",SWIG_From_int(static_cast< int >(13553)));
  SWIG_Python_SetConstant(d, "DS_N1104X",SWIG_From_int(static_cast< int >(14001)));
  SWIG_Python_SetConstant(d, "DS_N1103X",SWIG_From_int(static_cast< int >(14002)));
  SWIG_Python_SetConstant(d, "NP_FSC201",SWIG_From_int(static_cast< int >(14003)));
  SWIG_Python_SetConstant(d, "NP_FDC240",SWIG_From_int(static_cast< int >(14004)));
  SWIG_Python_SetConstant(d, "DS_N1107",SWIG_From_int(static_cast< int >(14005)));
  SWIG_Python_SetConstant(d, "NP_FAXXX",SWIG_From_int(static_cast< int >(14006)));
  SWIG_Python_SetConstant(d, "NP_ST204_X",SWIG_From_int(static_cast< int >(14501)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_DVR",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_INTERROGATION",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_SIMPLE_TRAIL",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_TRAIL",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_RECORD_PLAY",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_ATM",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_DVS",SWIG_From_int(static_cast< int >(51)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_NVR",SWIG_From_int(static_cast< int >(101)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_GUN",SWIG_From_int(static_cast< int >(151)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_BALL",SWIG_From_int(static_cast< int >(152)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_SNAP",SWIG_From_int(static_cast< int >(153)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_INTELLI_TILT",SWIG_From_int(static_cast< int >(154)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_FISH_EYE",SWIG_From_int(static_cast< int >(155)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_2DP_Z",SWIG_From_int(static_cast< int >(156)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_2DP",SWIG_From_int(static_cast< int >(157)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_PT",SWIG_From_int(static_cast< int >(158)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_TRI",SWIG_From_int(static_cast< int >(159)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_CVR",SWIG_From_int(static_cast< int >(201)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_B20",SWIG_From_int(static_cast< int >(251)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_B10",SWIG_From_int(static_cast< int >(252)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_DECODER",SWIG_From_int(static_cast< int >(253)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_MATRIXMANAGEDEVICE",SWIG_From_int(static_cast< int >(254)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_OTICAL",SWIG_From_int(static_cast< int >(255)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_CODESPITTER",SWIG_From_int(static_cast< int >(256)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_ALARMHOST",SWIG_From_int(static_cast< int >(257)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_MOVING_RING",SWIG_From_int(static_cast< int >(258)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_CVCS",SWIG_From_int(static_cast< int >(259)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_DVCS",SWIG_From_int(static_cast< int >(260)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_TRANSCODER",SWIG_From_int(static_cast< int >(261)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_LCD_SCREEN",SWIG_From_int(static_cast< int >(262)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_LED_SCREEN",SWIG_From_int(static_cast< int >(263)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_MATRIX",SWIG_From_int(static_cast< int >(264)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_CONFERENCE_SYSTEM",SWIG_From_int(static_cast< int >(265)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_INFORMATION_RELEASE_EQUIPMENT",SWIG_From_int(static_cast< int >(266)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_NET_GAP",SWIG_From_int(static_cast< int >(267)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_MERGE",SWIG_From_int(static_cast< int >(268)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_REAR_PROJECTION",SWIG_From_int(static_cast< int >(269)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_SWITCH",SWIG_From_int(static_cast< int >(270)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_FIBER_CONVERTER",SWIG_From_int(static_cast< int >(271)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_SCREEN_SERVER",SWIG_From_int(static_cast< int >(272)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_SCE_SERVER",SWIG_From_int(static_cast< int >(273)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_WIRELESS_TRANS",SWIG_From_int(static_cast< int >(274)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_Y10_SERIES",SWIG_From_int(static_cast< int >(275)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_SAFETY_MAVHINE",SWIG_From_int(static_cast< int >(276)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_IOTGATEWAY",SWIG_From_int(static_cast< int >(277)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_VIDEO_ALARM_HOST",SWIG_From_int(static_cast< int >(301)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_NET_ALARM_HOST",SWIG_From_int(static_cast< int >(302)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_ONE_KEY_ALARM",SWIG_From_int(static_cast< int >(303)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_WIRELESS_ALARM_HOST",SWIG_From_int(static_cast< int >(304)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_ALARM_MODULE",SWIG_From_int(static_cast< int >(305)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_HOME_ALARM_HOST",SWIG_From_int(static_cast< int >(306)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_HYBRID_ALARM_HOST",SWIG_From_int(static_cast< int >(307)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_ACCESS_CONTROL",SWIG_From_int(static_cast< int >(351)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_VIDEO_INTERCOM",SWIG_From_int(static_cast< int >(401)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_UMMANNED_AERIAL_VEHICLE",SWIG_From_int(static_cast< int >(451)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_MOBILE",SWIG_From_int(static_cast< int >(501)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_MOBILE_VEHICLE",SWIG_From_int(static_cast< int >(551)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_INTELLIGENT_ANALYZER",SWIG_From_int(static_cast< int >(601)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_INTELLIGENT_TRAFFIC_SERVER",SWIG_From_int(static_cast< int >(651)));
  SWIG_Python_SetConstant(d, "DS_TP2200_EC",SWIG_From_int(static_cast< int >(652)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_NVS",SWIG_From_int(static_cast< int >(701)));
  SWIG_Python_SetConstant(d, "DS_TRI21A_1_P",SWIG_From_int(static_cast< int >(751)));
  SWIG_Python_SetConstant(d, "DS_CLASS_FA",SWIG_From_int(static_cast< int >(801)));
  SWIG_Python_SetConstant(d, "DS_CLASS_PURE",SWIG_From_int(static_cast< int >(802)));
  SWIG_Python_SetConstant(d, "DS_CLASS_FS",SWIG_From_int(static_cast< int >(803)));
  SWIG_Python_SetConstant(d, "DS_CLASS_FD",SWIG_From_int(static_cast< int >(804)));
  SWIG_Python_SetConstant(d, "DS_CLASS_HAWK",SWIG_From_int(static_cast< int >(805)));
  SWIG_Python_SetConstant(d, "DS_CLASS_BLADE",SWIG_From_int(static_cast< int >(806)));
  SWIG_Python_SetConstant(d, "DS_CLASS_HMCP",SWIG_From_int(static_cast< int >(807)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_SMART_LOCK",SWIG_From_int(static_cast< int >(851)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_RADAR",SWIG_From_int(static_cast< int >(901)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_FIRE_CONTROL",SWIG_From_int(static_cast< int >(951)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_SECURITY_CHECK",SWIG_From_int(static_cast< int >(1001)));
  SWIG_Python_SetConstant(d, "iDS_PT",SWIG_From_int(static_cast< int >(8451)));
  SWIG_Python_SetConstant(d, "DEV_CLASS_DEFAULT",SWIG_From_int(static_cast< int >(65534)));
  SWIG_Python_SetConstant(d, "DEVICE_SOFTHARDWARE_ABILITY",SWIG_From_int(static_cast< int >(0x001)));
  SWIG_Python_SetConstant(d, "DEVICE_NETWORK_ABILITY",SWIG_From_int(static_cast< int >(0x002)));
  SWIG_Python_SetConstant(d, "DEVICE_ENCODE_ALL_ABILITY",SWIG_From_int(static_cast< int >(0x003)));
  SWIG_Python_SetConstant(d, "DEVICE_ENCODE_CURRENT",SWIG_From_int(static_cast< int >(0x004)));
  SWIG_Python_SetConstant(d, "IPC_FRONT_PARAMETER",SWIG_From_int(static_cast< int >(0x005)));
  SWIG_Python_SetConstant(d, "IPC_UPGRADE_DESCRIPTION",SWIG_From_int(static_cast< int >(0x006)));
  SWIG_Python_SetConstant(d, "DEVICE_RAID_ABILITY",SWIG_From_int(static_cast< int >(0x007)));
  SWIG_Python_SetConstant(d, "DEVICE_ENCODE_ALL_ABILITY_V20",SWIG_From_int(static_cast< int >(0x008)));
  SWIG_Python_SetConstant(d, "IPC_FRONT_PARAMETER_V20",SWIG_From_int(static_cast< int >(0x009)));
  SWIG_Python_SetConstant(d, "DEVICE_ALARM_ABILITY",SWIG_From_int(static_cast< int >(0x00a)));
  SWIG_Python_SetConstant(d, "DEVICE_DYNCHAN_ABILITY",SWIG_From_int(static_cast< int >(0x00b)));
  SWIG_Python_SetConstant(d, "DEVICE_USER_ABILITY",SWIG_From_int(static_cast< int >(0x00c)));
  SWIG_Python_SetConstant(d, "DEVICE_NETAPP_ABILITY",SWIG_From_int(static_cast< int >(0x00d)));
  SWIG_Python_SetConstant(d, "DEVICE_VIDEOPIC_ABILITY",SWIG_From_int(static_cast< int >(0x00e)));
  SWIG_Python_SetConstant(d, "DEVICE_JPEG_CAP_ABILITY",SWIG_From_int(static_cast< int >(0x00f)));
  SWIG_Python_SetConstant(d, "DEVICE_SERIAL_ABILITY",SWIG_From_int(static_cast< int >(0x010)));
  SWIG_Python_SetConstant(d, "DEVICE_ABILITY_INFO",SWIG_From_int(static_cast< int >(0x011)));
  SWIG_Python_SetConstant(d, "STREAM_ABILITY",SWIG_From_int(static_cast< int >(0x012)));
  SWIG_Python_SetConstant(d, "SYSTEM_MANAGEMENT_ABILITY",SWIG_From_int(static_cast< int >(0x013)));
  SWIG_Python_SetConstant(d, "IP_VIEW_DEV_ABILITY",SWIG_From_int(static_cast< int >(0x014)));
  SWIG_Python_SetConstant(d, "VCA_DEV_ABILITY",SWIG_From_int(static_cast< int >(0x100)));
  SWIG_Python_SetConstant(d, "VCA_CHAN_ABILITY",SWIG_From_int(static_cast< int >(0x110)));
  SWIG_Python_SetConstant(d, "TRANSFER_ABILITY",SWIG_From_int(static_cast< int >(0x120)));
  SWIG_Python_SetConstant(d, "MATRIXDECODER_ABILITY",SWIG_From_int(static_cast< int >(0x200)));
  SWIG_Python_SetConstant(d, "VIDEOPLATFORM_ABILITY",SWIG_From_int(static_cast< int >(0x210)));
  SWIG_Python_SetConstant(d, "VIDEOPLATFORM_SBUCODESYSTEM_ABILITY",SWIG_From_int(static_cast< int >(0x211)));
  SWIG_Python_SetConstant(d, "WALL_ABILITY",SWIG_From_int(static_cast< int >(0x212)));
  SWIG_Python_SetConstant(d, "MATRIX_ABILITY",SWIG_From_int(static_cast< int >(0x213)));
  SWIG_Python_SetConstant(d, "DECODECARD_ABILITY",SWIG_From_int(static_cast< int >(0x220)));
  SWIG_Python_SetConstant(d, "VIDEOPLATFORM_ABILITY_V40",SWIG_From_int(static_cast< int >(0x230)));
  SWIG_Python_SetConstant(d, "MATRIXMANAGEDEVICE_ABILITY",SWIG_From_int(static_cast< int >(0x240)));
  SWIG_Python_SetConstant(d, "MATRIXDECODER_ABILITY_V41",SWIG_From_int(static_cast< int >(0x260)));
  SWIG_Python_SetConstant(d, "DECODER_ABILITY",SWIG_From_int(static_cast< int >(0x261)));
  SWIG_Python_SetConstant(d, "DECODECARD_ABILITY_V41",SWIG_From_int(static_cast< int >(0x270)));
  SWIG_Python_SetConstant(d, "CODECARD_ABILITY",SWIG_From_int(static_cast< int >(0x271)));
  SWIG_Python_SetConstant(d, "SNAPCAMERA_ABILITY",SWIG_From_int(static_cast< int >(0x300)));
  SWIG_Python_SetConstant(d, "ITC_TRIGGER_MODE_ABILITY",SWIG_From_int(static_cast< int >(0x301)));
  SWIG_Python_SetConstant(d, "COMPRESSIONCFG_ABILITY",SWIG_From_int(static_cast< int >(0x400)));
  SWIG_Python_SetConstant(d, "COMPRESSION_LIMIT",SWIG_From_int(static_cast< int >(0x401)));
  SWIG_Python_SetConstant(d, "PIC_CAPTURE_ABILITY",SWIG_From_int(static_cast< int >(0x402)));
  SWIG_Python_SetConstant(d, "ALARMHOST_ABILITY",SWIG_From_int(static_cast< int >(0x500)));
  SWIG_Python_SetConstant(d, "IT_DEVICE_ABILITY",SWIG_From_int(static_cast< int >(0x501)));
  SWIG_Python_SetConstant(d, "SCREENCONTROL_ABILITY",SWIG_From_int(static_cast< int >(0x600)));
  SWIG_Python_SetConstant(d, "SCREENSERVER_ABILITY",SWIG_From_int(static_cast< int >(0x610)));
  SWIG_Python_SetConstant(d, "FISHEYE_ABILITY",SWIG_From_int(static_cast< int >(0x700)));
  SWIG_Python_SetConstant(d, "LCD_SCREEN_ABILITY",SWIG_From_int(static_cast< int >(0x800)));
  SWIG_Python_SetConstant(d, "ACS_ABILITY",SWIG_From_int(static_cast< int >(0x801)));
  SWIG_Python_SetConstant(d, "MERGEDEV_ABILITY",SWIG_From_int(static_cast< int >(0x802)));
  SWIG_Python_SetConstant(d, "CAM_FUSION_ABILITY",SWIG_From_int(static_cast< int >(0x803)));
  SWIG_Python_SetConstant(d, "OPTICAL_DEV_ACCESS_ABILITY",SWIG_From_int(static_cast< int >(0x805)));
  SWIG_Python_SetConstant(d, "NET_RING_ABILITY",SWIG_From_int(static_cast< int >(0x806)));
  SWIG_Python_SetConstant(d, "LED_ABILITY",SWIG_From_int(static_cast< int >(0x807)));
  SWIG_Python_SetConstant(d, "PUBLISHDEV_ABILITY",SWIG_From_int(static_cast< int >(0x80a)));
  SWIG_Python_SetConstant(d, "SCREEN_EXCHANGE_ABILITY",SWIG_From_int(static_cast< int >(0x80b)));
  SWIG_Python_SetConstant(d, "REMOTE_NETMGR_FOT_ABILITY",SWIG_From_int(static_cast< int >(0x80e)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MAJOR_MAINBOARD_BOOT",SWIG_From_int(static_cast< int >(0x1)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_PCIE_SCAN",SWIG_From_int(static_cast< int >(0x1)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_DOWNLOAD_SUBBOARD",SWIG_From_int(static_cast< int >(0xa)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MAJOR_SUBBOARD_BOOT",SWIG_From_int(static_cast< int >(0x2)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_INEXISTENCE",SWIG_From_int(static_cast< int >(0x1)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_UBOOT_DOWNLOAD",SWIG_From_int(static_cast< int >(0xa)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_UBOOT_INIT",SWIG_From_int(static_cast< int >(0xe)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_ROOTFS_DOWNLOAD",SWIG_From_int(static_cast< int >(0x14)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_UIMAGE_DOWNLOAD",SWIG_From_int(static_cast< int >(0x19)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_UBOOT_SETBOOTFLAG",SWIG_From_int(static_cast< int >(0x1e)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_ROOTFS_BOOT_SUBBOARD",SWIG_From_int(static_cast< int >(0x23)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_NEED_FILE_FINISH",SWIG_From_int(static_cast< int >(0x28)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MAJOR_SUBBOARD_HARDWARE",SWIG_From_int(static_cast< int >(0x3)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_AD",SWIG_From_int(static_cast< int >(0x1)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_DA",SWIG_From_int(static_cast< int >(0xa)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_TIMER",SWIG_From_int(static_cast< int >(0xb)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MAJOR_FPGA",SWIG_From_int(static_cast< int >(0x4)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_IDLE",SWIG_From_int(static_cast< int >(0x1)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_LANE",SWIG_From_int(static_cast< int >(0xa)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_REGISTER_ALL_F",SWIG_From_int(static_cast< int >(0xe)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_MEMORY_INIT_FAIL",SWIG_From_int(static_cast< int >(0x14)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MAJOR_DSP",SWIG_From_int(static_cast< int >(0x5)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MAJOR_ARM",SWIG_From_int(static_cast< int >(0x6)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MAJOR_BACKBOARD",SWIG_From_int(static_cast< int >(0x7)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_BLACKBOARD_TYPE",SWIG_From_int(static_cast< int >(0x1)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_SERDES",SWIG_From_int(static_cast< int >(0xa)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_CLOCK",SWIG_From_int(static_cast< int >(0xe)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_SYNCH",SWIG_From_int(static_cast< int >(0x14)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MAJOR_SUBBOARD_NET",SWIG_From_int(static_cast< int >(0x8)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_IP_CONFLICT",SWIG_From_int(static_cast< int >(0x1)));
  SWIG_Python_SetConstant(d, "EXCEPTION_MINOR_DISCONNECT",SWIG_From_int(static_cast< int >(0x14)));
  SWIG_Python_SetConstant(d, "MAX_FIRE_ALARM_ZONE",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, "MAX_FIRE_ALARM_POINT_ZONE",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "ENUM_MEM_CHAR_ENCODE_ERR",SWIG_From_int(static_cast< int >(ENUM_MEM_CHAR_ENCODE_ERR)));
  SWIG_Python_SetConstant(d, "ENUM_MEM_CHAR_ENCODE_NO",SWIG_From_int(static_cast< int >(ENUM_MEM_CHAR_ENCODE_NO)));
  SWIG_Python_SetConstant(d, "ENUM_MEM_CHAR_ENCODE_CN",SWIG_From_int(static_cast< int >(ENUM_MEM_CHAR_ENCODE_CN)));
  SWIG_Python_SetConstant(d, "ENUM_MEM_CHAR_ENCODE_GBK",SWIG_From_int(static_cast< int >(ENUM_MEM_CHAR_ENCODE_GBK)));
  SWIG_Python_SetConstant(d, "ENUM_MEM_CHAR_ENCODE_BIG5",SWIG_From_int(static_cast< int >(ENUM_MEM_CHAR_ENCODE_BIG5)));
  SWIG_Python_SetConstant(d, "ENUM_MEM_CHAR_ENCODE_JP",SWIG_From_int(static_cast< int >(ENUM_MEM_CHAR_ENCODE_JP)));
  SWIG_Python_SetConstant(d, "ENUM_MEM_CHAR_ENCODE_KR",SWIG_From_int(static_cast< int >(ENUM_MEM_CHAR_ENCODE_KR)));
  SWIG_Python_SetConstant(d, "ENUM_MEM_CHAR_ENCODE_UTF8",SWIG_From_int(static_cast< int >(ENUM_MEM_CHAR_ENCODE_UTF8)));
  SWIG_Python_SetConstant(d, "ENUM_MEM_CHAR_ENCODE_ISO8859_1",SWIG_From_int(static_cast< int >(ENUM_MEM_CHAR_ENCODE_ISO8859_1)));
  SWIG_Python_SetConstant(d, "ENUM_MEM_CHAR_ENCODE_UNICODE",SWIG_From_int(static_cast< int >(ENUM_MEM_CHAR_ENCODE_UNICODE)));
  SWIG_Python_SetConstant(d, "MAX_TIMESIGN_LEN",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "NOACTION",SWIG_From_int(static_cast< int >(0x0)));
  SWIG_Python_SetConstant(d, "WARNONMONITOR",SWIG_From_int(static_cast< int >(0x1)));
  SWIG_Python_SetConstant(d, "WARNONAUDIOOUT",SWIG_From_int(static_cast< int >(0x2)));
  SWIG_Python_SetConstant(d, "UPTOCENTER",SWIG_From_int(static_cast< int >(0x4)));
  SWIG_Python_SetConstant(d, "TRIGGERALARMOUT",SWIG_From_int(static_cast< int >(0x8)));
  SWIG_Python_SetConstant(d, "TRIGGERCATPIC",SWIG_From_int(static_cast< int >(0x10)));
  SWIG_Python_SetConstant(d, "SEND_PIC_FTP",SWIG_From_int(static_cast< int >(0x200)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_def",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_def)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_8kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_8kps)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_16kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_16kps)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_32kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_32kps)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_64kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_64kps)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_128kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_128kps)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_192kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_192kps)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_40kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_40kps)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_48kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_48kps)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_56kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_56kps)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_80kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_80kps)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_96kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_96kps)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_112kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_112kps)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_144kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_144kps)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_160kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_160kps)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_224kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_224kps)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_256kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_256kps)));
  SWIG_Python_SetConstant(d, "BITRATE_ENCODE_320kps",SWIG_From_int(static_cast< int >(BITRATE_ENCODE_320kps)));
  SWIG_Python_SetConstant(d, "NET_SDK_MAX_EVENT_NUM",SWIG_From_int(static_cast< int >(64)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

