# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _hk_fun
else:
    import _hk_fun

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class NET_DVR_SETUPALARM_PARAM(object):
    r"""Proxy of C++ tagNET_DVR_SETUPALARM_PARAM class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dwSize = property(_hk_fun.NET_DVR_SETUPALARM_PARAM_dwSize_get, _hk_fun.NET_DVR_SETUPALARM_PARAM_dwSize_set, doc=r"""dwSize""")
    byLevel = property(_hk_fun.NET_DVR_SETUPALARM_PARAM_byLevel_get, _hk_fun.NET_DVR_SETUPALARM_PARAM_byLevel_set, doc=r"""byLevel""")
    byAlarmInfoType = property(_hk_fun.NET_DVR_SETUPALARM_PARAM_byAlarmInfoType_get, _hk_fun.NET_DVR_SETUPALARM_PARAM_byAlarmInfoType_set, doc=r"""byAlarmInfoType""")
    byRetAlarmTypeV40 = property(_hk_fun.NET_DVR_SETUPALARM_PARAM_byRetAlarmTypeV40_get, _hk_fun.NET_DVR_SETUPALARM_PARAM_byRetAlarmTypeV40_set, doc=r"""byRetAlarmTypeV40""")
    byRetDevInfoVersion = property(_hk_fun.NET_DVR_SETUPALARM_PARAM_byRetDevInfoVersion_get, _hk_fun.NET_DVR_SETUPALARM_PARAM_byRetDevInfoVersion_set, doc=r"""byRetDevInfoVersion""")
    byRetVQDAlarmType = property(_hk_fun.NET_DVR_SETUPALARM_PARAM_byRetVQDAlarmType_get, _hk_fun.NET_DVR_SETUPALARM_PARAM_byRetVQDAlarmType_set, doc=r"""byRetVQDAlarmType""")
    byFaceAlarmDetection = property(_hk_fun.NET_DVR_SETUPALARM_PARAM_byFaceAlarmDetection_get, _hk_fun.NET_DVR_SETUPALARM_PARAM_byFaceAlarmDetection_set, doc=r"""byFaceAlarmDetection""")
    bySupport = property(_hk_fun.NET_DVR_SETUPALARM_PARAM_bySupport_get, _hk_fun.NET_DVR_SETUPALARM_PARAM_bySupport_set, doc=r"""bySupport""")
    byBrokenNetHttp = property(_hk_fun.NET_DVR_SETUPALARM_PARAM_byBrokenNetHttp_get, _hk_fun.NET_DVR_SETUPALARM_PARAM_byBrokenNetHttp_set, doc=r"""byBrokenNetHttp""")
    wTaskNo = property(_hk_fun.NET_DVR_SETUPALARM_PARAM_wTaskNo_get, _hk_fun.NET_DVR_SETUPALARM_PARAM_wTaskNo_set, doc=r"""wTaskNo""")
    byDeployType = property(_hk_fun.NET_DVR_SETUPALARM_PARAM_byDeployType_get, _hk_fun.NET_DVR_SETUPALARM_PARAM_byDeployType_set, doc=r"""byDeployType""")
    byRes1 = property(_hk_fun.NET_DVR_SETUPALARM_PARAM_byRes1_get, _hk_fun.NET_DVR_SETUPALARM_PARAM_byRes1_set, doc=r"""byRes1""")
    byAlarmTypeURL = property(_hk_fun.NET_DVR_SETUPALARM_PARAM_byAlarmTypeURL_get, _hk_fun.NET_DVR_SETUPALARM_PARAM_byAlarmTypeURL_set, doc=r"""byAlarmTypeURL""")
    byCustomCtrl = property(_hk_fun.NET_DVR_SETUPALARM_PARAM_byCustomCtrl_get, _hk_fun.NET_DVR_SETUPALARM_PARAM_byCustomCtrl_set, doc=r"""byCustomCtrl""")

    def __init__(self):
        r"""__init__(self) -> NET_DVR_SETUPALARM_PARAM"""
        _hk_fun.NET_DVR_SETUPALARM_PARAM_swiginit(self, _hk_fun.new_NET_DVR_SETUPALARM_PARAM())
    __swig_destroy__ = _hk_fun.delete_NET_DVR_SETUPALARM_PARAM

# Register NET_DVR_SETUPALARM_PARAM in _hk_fun:
_hk_fun.NET_DVR_SETUPALARM_PARAM_swigregister(NET_DVR_SETUPALARM_PARAM)


def NET_DVR_Login_V30(sDVRIP: "char *", wDVRPort: "WORD", sUserName: "char *", sPassword: "char *", lpDeviceInfo: "NET_DVR_DEVICEINFO_V30 *") -> "LONG":
    r"""
    NET_DVR_Login_V30(sDVRIP, wDVRPort, sUserName, sPassword, lpDeviceInfo) -> LONG

    Parameters
    ----------
    sDVRIP: char *
    wDVRPort: WORD
    sUserName: char *
    sPassword: char *
    lpDeviceInfo: NET_DVR_DEVICEINFO_V30 *

    """
    return _hk_fun.NET_DVR_Login_V30(sDVRIP, wDVRPort, sUserName, sPassword, lpDeviceInfo)

def NET_DVR_Logout(lUserID: "LONG") -> "int":
    r"""
    NET_DVR_Logout(lUserID) -> int

    Parameters
    ----------
    lUserID: LONG

    """
    return _hk_fun.NET_DVR_Logout(lUserID)

def NET_DVR_Init() -> "int":
    r"""NET_DVR_Init() -> int"""
    return _hk_fun.NET_DVR_Init()

def NET_DVR_Cleanup() -> "int":
    r"""NET_DVR_Cleanup() -> int"""
    return _hk_fun.NET_DVR_Cleanup()

def NET_DVR_SetConnectTime(dwWaitTime: "DWORD"=3000, dwTryTimes: "DWORD"=3) -> "int":
    r"""
    NET_DVR_SetConnectTime(dwWaitTime=3000, dwTryTimes=3) -> int

    Parameters
    ----------
    dwWaitTime: DWORD
    dwTryTimes: DWORD

    """
    return _hk_fun.NET_DVR_SetConnectTime(dwWaitTime, dwTryTimes)

def NET_DVR_SetReconnect(*args) -> "int":
    r"""
    NET_DVR_SetReconnect(dwInterval=30000, bEnableRecon=TRUE) -> int

    Parameters
    ----------
    dwInterval: DWORD
    bEnableRecon: int

    """
    return _hk_fun.NET_DVR_SetReconnect(*args)

def NET_DVR_SetupAlarmChan_V41(lUserID: "LONG", lpSetupParam: "NET_DVR_SETUPALARM_PARAM") -> "LONG":
    r"""
    NET_DVR_SetupAlarmChan_V41(lUserID, lpSetupParam) -> LONG

    Parameters
    ----------
    lUserID: LONG
    lpSetupParam: NET_DVR_SETUPALARM_PARAM *

    """
    return _hk_fun.NET_DVR_SetupAlarmChan_V41(lUserID, lpSetupParam)

def NET_DVR_GetLastError() -> "DWORD":
    r"""NET_DVR_GetLastError() -> DWORD"""
    return _hk_fun.NET_DVR_GetLastError()
class MessageCallbackOp(object):
    r"""Proxy of C++ MessageCallbackOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def MessageCallback(self, lCommand: "LONG", pAlarmer: "NET_DVR_ALARMER *", pAlarmInfo: "char *", dwBufLen: "DWORD", pUser: "void *") -> "void":
        r"""
        MessageCallback(self, lCommand, pAlarmer, pAlarmInfo, dwBufLen, pUser)

        Parameters
        ----------
        lCommand: LONG
        pAlarmer: NET_DVR_ALARMER *
        pAlarmInfo: char *
        dwBufLen: DWORD
        pUser: void *

        """
        return _hk_fun.MessageCallbackOp_MessageCallback(self, lCommand, pAlarmer, pAlarmInfo, dwBufLen, pUser)
    __swig_destroy__ = _hk_fun.delete_MessageCallbackOp

    def __init__(self):
        r"""
        __init__(self) -> MessageCallbackOp

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == MessageCallbackOp:
            _self = None
        else:
            _self = self
        _hk_fun.MessageCallbackOp_swiginit(self, _hk_fun.new_MessageCallbackOp(_self, ))
    def __disown__(self):
        self.this.disown()
        _hk_fun.disown_MessageCallbackOp(self)
        return weakref.proxy(self)

# Register MessageCallbackOp in _hk_fun:
_hk_fun.MessageCallbackOp_swigregister(MessageCallbackOp)


def net_dvr_setdvrmessagecallback_v31(fMessageCallBack: "MessageCallbackOp", pUser: "void *") -> "int":
    r"""
    net_dvr_setdvrmessagecallback_v31(fMessageCallBack, pUser) -> int

    Parameters
    ----------
    fMessageCallBack: MessageCallbackOp *
    pUser: void *

    """
    return _hk_fun.net_dvr_setdvrmessagecallback_v31(fMessageCallBack, pUser)


