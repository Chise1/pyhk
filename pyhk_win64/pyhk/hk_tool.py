# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _hk_tool
else:
    import _hk_tool

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


def cdata(ptr: "void *", nelements: "size_t"=1) -> "SWIGCDATA":
    r"""
    cdata(ptr, nelements=1) -> SWIGCDATA

    Parameters
    ----------
    ptr: void *
    nelements: size_t

    """
    return _hk_tool.cdata(ptr, nelements)

def memmove(data: "void *", indata: "void const *") -> "void":
    r"""
    memmove(data, indata)

    Parameters
    ----------
    data: void *
    indata: void const *

    """
    return _hk_tool.memmove(data, indata)
class intp(object):
    r"""Proxy of C++ intp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> intp"""
        _hk_tool.intp_swiginit(self, _hk_tool.new_intp())
    __swig_destroy__ = _hk_tool.delete_intp

    def assign(self, value: "int") -> "void":
        r"""
        assign(self, value)

        Parameters
        ----------
        value: int

        """
        return _hk_tool.intp_assign(self, value)

    def value(self) -> "int":
        r"""value(self) -> int"""
        return _hk_tool.intp_value(self)

    def cast(self) -> "int *":
        r"""cast(self) -> int *"""
        return _hk_tool.intp_cast(self)

    @staticmethod
    def frompointer(t: "int *") -> "intp *":
        r"""
        frompointer(t) -> intp

        Parameters
        ----------
        t: int *

        """
        return _hk_tool.intp_frompointer(t)

# Register intp in _hk_tool:
_hk_tool.intp_swigregister(intp)

def intp_frompointer(t: "int *") -> "intp *":
    r"""
    intp_frompointer(t) -> intp

    Parameters
    ----------
    t: int *

    """
    return _hk_tool.intp_frompointer(t)


def intp2voidp(a: "int *") -> "void *":
    r"""
    intp2voidp(a) -> void *

    Parameters
    ----------
    a: int *

    """
    return _hk_tool.intp2voidp(a)

def int2intp(x: "int", result: "int *") -> "void":
    r"""
    int2intp(x, result)

    Parameters
    ----------
    x: int
    result: int *

    """
    return _hk_tool.int2intp(x, result)


